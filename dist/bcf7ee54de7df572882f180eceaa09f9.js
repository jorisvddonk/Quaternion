require = (function(r, e, n) {
  function t(n, o) {
    function i(r) {
      return t(i.resolve(r));
    }
    function f(e) {
      return r[n][1][e] || e;
    }
    if (!e[n]) {
      if (!r[n]) {
        var c = 'function' == typeof require && require;
        if (!o && c) return c(n, !0);
        if (u) return u(n, !0);
        var l = new Error("Cannot find module '" + n + "'");
        throw ((l.code = 'MODULE_NOT_FOUND'), l);
      }
      i.resolve = f;
      var a = (e[n] = new t.Module());
      r[n][0].call(a.exports, i, a, a.exports);
    }
    return e[n].exports;
  }
  function o() {
    (this.bundle = t), (this.exports = {});
  }
  var u = 'function' == typeof require && require;
  (t.Module = o), (t.modules = r), (t.cache = e), (t.parent = u);
  for (var i = 0; i < n.length; i++) t(n[i]);
  return t;
})(
  {
    6: [
      function(require, module, exports) {
        var t,
          e,
          n = (module.exports = {});
        function r() {
          throw new Error('setTimeout has not been defined');
        }
        function o() {
          throw new Error('clearTimeout has not been defined');
        }
        function i(e) {
          if (t === setTimeout) return setTimeout(e, 0);
          if ((t === r || !t) && setTimeout)
            return (t = setTimeout), setTimeout(e, 0);
          try {
            return t(e, 0);
          } catch (n) {
            try {
              return t.call(null, e, 0);
            } catch (n) {
              return t.call(this, e, 0);
            }
          }
        }
        function u(t) {
          if (e === clearTimeout) return clearTimeout(t);
          if ((e === o || !e) && clearTimeout)
            return (e = clearTimeout), clearTimeout(t);
          try {
            return e(t);
          } catch (n) {
            try {
              return e.call(null, t);
            } catch (n) {
              return e.call(this, t);
            }
          }
        }
        !(function() {
          try {
            t = 'function' == typeof setTimeout ? setTimeout : r;
          } catch (e) {
            t = r;
          }
          try {
            e = 'function' == typeof clearTimeout ? clearTimeout : o;
          } catch (t) {
            e = o;
          }
        })();
        var c,
          s = [],
          l = !1,
          a = -1;
        function f() {
          l &&
            c &&
            ((l = !1),
            c.length ? (s = c.concat(s)) : (a = -1),
            s.length && h());
        }
        function h() {
          if (!l) {
            var t = i(f);
            l = !0;
            for (var e = s.length; e; ) {
              for (c = s, s = []; ++a < e; ) c && c[a].run();
              (a = -1), (e = s.length);
            }
            (c = null), (l = !1), u(t);
          }
        }
        function m(t, e) {
          (this.fun = t), (this.array = e);
        }
        function p() {}
        (n.nextTick = function(t) {
          var e = new Array(arguments.length - 1);
          if (arguments.length > 1)
            for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
          s.push(new m(t, e)), 1 !== s.length || l || i(h);
        }),
          (m.prototype.run = function() {
            this.fun.apply(null, this.array);
          }),
          (n.title = 'browser'),
          (n.browser = !0),
          (n.env = {}),
          (n.argv = []),
          (n.version = ''),
          (n.versions = {}),
          (n.on = p),
          (n.addListener = p),
          (n.once = p),
          (n.off = p),
          (n.removeListener = p),
          (n.removeAllListeners = p),
          (n.emit = p),
          (n.prependListener = p),
          (n.prependOnceListener = p),
          (n.listeners = function(t) {
            return [];
          }),
          (n.binding = function(t) {
            throw new Error('process.binding is not supported');
          }),
          (n.cwd = function() {
            return '/';
          }),
          (n.chdir = function(t) {
            throw new Error('process.chdir is not supported');
          }),
          (n.umask = function() {
            return 0;
          });
      },
      {}
    ],
    9: [
      function(require, module, exports) {
        'use strict';
        (exports.byteLength = c),
          (exports.toByteArray = u),
          (exports.fromByteArray = d);
        for (
          var r = [],
            t = [],
            e = 'undefined' != typeof Uint8Array ? Uint8Array : Array,
            n =
              'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
            o = 0,
            a = n.length;
          o < a;
          ++o
        )
          (r[o] = n[o]), (t[n.charCodeAt(o)] = o);
        function h(r) {
          var t = r.length;
          if (t % 4 > 0)
            throw new Error('Invalid string. Length must be a multiple of 4');
          return '=' === r[t - 2] ? 2 : '=' === r[t - 1] ? 1 : 0;
        }
        function c(r) {
          return 3 * r.length / 4 - h(r);
        }
        function u(r) {
          var n,
            o,
            a,
            c,
            u,
            A = r.length;
          (c = h(r)), (u = new e(3 * A / 4 - c)), (o = c > 0 ? A - 4 : A);
          var i = 0;
          for (n = 0; n < o; n += 4)
            (a =
              (t[r.charCodeAt(n)] << 18) |
              (t[r.charCodeAt(n + 1)] << 12) |
              (t[r.charCodeAt(n + 2)] << 6) |
              t[r.charCodeAt(n + 3)]),
              (u[i++] = (a >> 16) & 255),
              (u[i++] = (a >> 8) & 255),
              (u[i++] = 255 & a);
          return (
            2 === c
              ? ((a =
                  (t[r.charCodeAt(n)] << 2) | (t[r.charCodeAt(n + 1)] >> 4)),
                (u[i++] = 255 & a))
              : 1 === c &&
                ((a =
                  (t[r.charCodeAt(n)] << 10) |
                  (t[r.charCodeAt(n + 1)] << 4) |
                  (t[r.charCodeAt(n + 2)] >> 2)),
                (u[i++] = (a >> 8) & 255),
                (u[i++] = 255 & a)),
            u
          );
        }
        function A(t) {
          return (
            r[(t >> 18) & 63] + r[(t >> 12) & 63] + r[(t >> 6) & 63] + r[63 & t]
          );
        }
        function i(r, t, e) {
          for (var n, o = [], a = t; a < e; a += 3)
            (n = (r[a] << 16) + (r[a + 1] << 8) + r[a + 2]), o.push(A(n));
          return o.join('');
        }
        function d(t) {
          for (
            var e, n = t.length, o = n % 3, a = '', h = [], c = 0, u = n - o;
            c < u;
            c += 16383
          )
            h.push(i(t, c, c + 16383 > u ? u : c + 16383));
          return (
            1 === o
              ? ((e = t[n - 1]),
                (a += r[e >> 2]),
                (a += r[(e << 4) & 63]),
                (a += '=='))
              : 2 === o &&
                ((e = (t[n - 2] << 8) + t[n - 1]),
                (a += r[e >> 10]),
                (a += r[(e >> 4) & 63]),
                (a += r[(e << 2) & 63]),
                (a += '=')),
            h.push(a),
            h.join('')
          );
        }
        (t['-'.charCodeAt(0)] = 62), (t['_'.charCodeAt(0)] = 63);
      },
      {}
    ],
    10: [
      function(require, module, exports) {
        (exports.read = function(a, o, t, r, h) {
          var M,
            p,
            w = 8 * h - r - 1,
            f = (1 << w) - 1,
            e = f >> 1,
            i = -7,
            N = t ? h - 1 : 0,
            n = t ? -1 : 1,
            s = a[o + N];
          for (
            N += n, M = s & ((1 << -i) - 1), s >>= -i, i += w;
            i > 0;
            M = 256 * M + a[o + N], N += n, i -= 8
          );
          for (
            p = M & ((1 << -i) - 1), M >>= -i, i += r;
            i > 0;
            p = 256 * p + a[o + N], N += n, i -= 8
          );
          if (0 === M) M = 1 - e;
          else {
            if (M === f) return p ? NaN : 1 / 0 * (s ? -1 : 1);
            (p += Math.pow(2, r)), (M -= e);
          }
          return (s ? -1 : 1) * p * Math.pow(2, M - r);
        }),
          (exports.write = function(a, o, t, r, h, M) {
            var p,
              w,
              f,
              e = 8 * M - h - 1,
              i = (1 << e) - 1,
              N = i >> 1,
              n = 23 === h ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
              s = r ? 0 : M - 1,
              u = r ? 1 : -1,
              l = o < 0 || (0 === o && 1 / o < 0) ? 1 : 0;
            for (
              o = Math.abs(o),
                isNaN(o) || o === 1 / 0
                  ? ((w = isNaN(o) ? 1 : 0), (p = i))
                  : ((p = Math.floor(Math.log(o) / Math.LN2)),
                    o * (f = Math.pow(2, -p)) < 1 && (p--, (f *= 2)),
                    (o += p + N >= 1 ? n / f : n * Math.pow(2, 1 - N)) * f >=
                      2 && (p++, (f /= 2)),
                    p + N >= i
                      ? ((w = 0), (p = i))
                      : p + N >= 1
                        ? ((w = (o * f - 1) * Math.pow(2, h)), (p += N))
                        : ((w = o * Math.pow(2, N - 1) * Math.pow(2, h)),
                          (p = 0)));
              h >= 8;
              a[t + s] = 255 & w, s += u, w /= 256, h -= 8
            );
            for (
              p = (p << h) | w, e += h;
              e > 0;
              a[t + s] = 255 & p, s += u, p /= 256, e -= 8
            );
            a[t + s - u] |= 128 * l;
          });
      },
      {}
    ],
    8: [
      function(require, module, exports) {
        var r = {}.toString;
        module.exports =
          Array.isArray ||
          function(t) {
            return '[object Array]' == r.call(t);
          };
      },
      {}
    ],
    7: [
      function(require, module, exports) {
        var global = (1, eval)('this');
        var t = (0, eval)('this'),
          r = require('base64-js'),
          e = require('ieee754'),
          n = require('isarray');
        function i() {
          try {
            var t = new Uint8Array(1);
            return (
              (t.__proto__ = {
                __proto__: Uint8Array.prototype,
                foo: function() {
                  return 42;
                }
              }),
              42 === t.foo() &&
                'function' == typeof t.subarray &&
                0 === t.subarray(1, 1).byteLength
            );
          } catch (t) {
            return !1;
          }
        }
        function o() {
          return f.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
        }
        function u(t, r) {
          if (o() < r) throw new RangeError('Invalid typed array length');
          return (
            f.TYPED_ARRAY_SUPPORT
              ? ((t = new Uint8Array(r)).__proto__ = f.prototype)
              : (null === t && (t = new f(r)), (t.length = r)),
            t
          );
        }
        function f(t, r, e) {
          if (!(f.TYPED_ARRAY_SUPPORT || this instanceof f))
            return new f(t, r, e);
          if ('number' == typeof t) {
            if ('string' == typeof r)
              throw new Error(
                'If encoding is specified then the first argument must be a string'
              );
            return c(this, t);
          }
          return s(this, t, r, e);
        }
        function s(t, r, e, n) {
          if ('number' == typeof r)
            throw new TypeError('"value" argument must not be a number');
          return 'undefined' != typeof ArrayBuffer && r instanceof ArrayBuffer
            ? g(t, r, e, n)
            : 'string' == typeof r ? l(t, r, e) : y(t, r);
        }
        function h(t) {
          if ('number' != typeof t)
            throw new TypeError('"size" argument must be a number');
          if (t < 0)
            throw new RangeError('"size" argument must not be negative');
        }
        function a(t, r, e, n) {
          return (
            h(r),
            r <= 0
              ? u(t, r)
              : void 0 !== e
                ? 'string' == typeof n ? u(t, r).fill(e, n) : u(t, r).fill(e)
                : u(t, r)
          );
        }
        function c(t, r) {
          if ((h(r), (t = u(t, r < 0 ? 0 : 0 | w(r))), !f.TYPED_ARRAY_SUPPORT))
            for (var e = 0; e < r; ++e) t[e] = 0;
          return t;
        }
        function l(t, r, e) {
          if (
            (('string' == typeof e && '' !== e) || (e = 'utf8'),
            !f.isEncoding(e))
          )
            throw new TypeError('"encoding" must be a valid string encoding');
          var n = 0 | v(r, e),
            i = (t = u(t, n)).write(r, e);
          return i !== n && (t = t.slice(0, i)), t;
        }
        function p(t, r) {
          var e = r.length < 0 ? 0 : 0 | w(r.length);
          t = u(t, e);
          for (var n = 0; n < e; n += 1) t[n] = 255 & r[n];
          return t;
        }
        function g(t, r, e, n) {
          if ((r.byteLength, e < 0 || r.byteLength < e))
            throw new RangeError("'offset' is out of bounds");
          if (r.byteLength < e + (n || 0))
            throw new RangeError("'length' is out of bounds");
          return (
            (r =
              void 0 === e && void 0 === n
                ? new Uint8Array(r)
                : void 0 === n
                  ? new Uint8Array(r, e)
                  : new Uint8Array(r, e, n)),
            f.TYPED_ARRAY_SUPPORT
              ? ((t = r).__proto__ = f.prototype)
              : (t = p(t, r)),
            t
          );
        }
        function y(t, r) {
          if (f.isBuffer(r)) {
            var e = 0 | w(r.length);
            return 0 === (t = u(t, e)).length ? t : (r.copy(t, 0, 0, e), t);
          }
          if (r) {
            if (
              ('undefined' != typeof ArrayBuffer &&
                r.buffer instanceof ArrayBuffer) ||
              'length' in r
            )
              return 'number' != typeof r.length || W(r.length)
                ? u(t, 0)
                : p(t, r);
            if ('Buffer' === r.type && n(r.data)) return p(t, r.data);
          }
          throw new TypeError(
            'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'
          );
        }
        function w(t) {
          if (t >= o())
            throw new RangeError(
              'Attempt to allocate Buffer larger than maximum size: 0x' +
                o().toString(16) +
                ' bytes'
            );
          return 0 | t;
        }
        function d(t) {
          return +t != t && (t = 0), f.alloc(+t);
        }
        function v(t, r) {
          if (f.isBuffer(t)) return t.length;
          if (
            'undefined' != typeof ArrayBuffer &&
            'function' == typeof ArrayBuffer.isView &&
            (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)
          )
            return t.byteLength;
          'string' != typeof t && (t = '' + t);
          var e = t.length;
          if (0 === e) return 0;
          for (var n = !1; ; )
            switch (r) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return e;
              case 'utf8':
              case 'utf-8':
              case void 0:
                return $(t).length;
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return 2 * e;
              case 'hex':
                return e >>> 1;
              case 'base64':
                return K(t).length;
              default:
                if (n) return $(t).length;
                (r = ('' + r).toLowerCase()), (n = !0);
            }
        }
        function E(t, r, e) {
          var n = !1;
          if (((void 0 === r || r < 0) && (r = 0), r > this.length)) return '';
          if (((void 0 === e || e > this.length) && (e = this.length), e <= 0))
            return '';
          if ((e >>>= 0) <= (r >>>= 0)) return '';
          for (t || (t = 'utf8'); ; )
            switch (t) {
              case 'hex':
                return x(this, r, e);
              case 'utf8':
              case 'utf-8':
                return Y(this, r, e);
              case 'ascii':
                return L(this, r, e);
              case 'latin1':
              case 'binary':
                return D(this, r, e);
              case 'base64':
                return S(this, r, e);
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return C(this, r, e);
              default:
                if (n) throw new TypeError('Unknown encoding: ' + t);
                (t = (t + '').toLowerCase()), (n = !0);
            }
        }
        function b(t, r, e) {
          var n = t[r];
          (t[r] = t[e]), (t[e] = n);
        }
        function R(t, r, e, n, i) {
          if (0 === t.length) return -1;
          if (
            ('string' == typeof e
              ? ((n = e), (e = 0))
              : e > 2147483647
                ? (e = 2147483647)
                : e < -2147483648 && (e = -2147483648),
            (e = +e),
            isNaN(e) && (e = i ? 0 : t.length - 1),
            e < 0 && (e = t.length + e),
            e >= t.length)
          ) {
            if (i) return -1;
            e = t.length - 1;
          } else if (e < 0) {
            if (!i) return -1;
            e = 0;
          }
          if (('string' == typeof r && (r = f.from(r, n)), f.isBuffer(r)))
            return 0 === r.length ? -1 : _(t, r, e, n, i);
          if ('number' == typeof r)
            return (
              (r &= 255),
              f.TYPED_ARRAY_SUPPORT &&
              'function' == typeof Uint8Array.prototype.indexOf
                ? i
                  ? Uint8Array.prototype.indexOf.call(t, r, e)
                  : Uint8Array.prototype.lastIndexOf.call(t, r, e)
                : _(t, [r], e, n, i)
            );
          throw new TypeError('val must be string, number or Buffer');
        }
        function _(t, r, e, n, i) {
          var o,
            u = 1,
            f = t.length,
            s = r.length;
          if (
            void 0 !== n &&
            ('ucs2' === (n = String(n).toLowerCase()) ||
              'ucs-2' === n ||
              'utf16le' === n ||
              'utf-16le' === n)
          ) {
            if (t.length < 2 || r.length < 2) return -1;
            (u = 2), (f /= 2), (s /= 2), (e /= 2);
          }
          function h(t, r) {
            return 1 === u ? t[r] : t.readUInt16BE(r * u);
          }
          if (i) {
            var a = -1;
            for (o = e; o < f; o++)
              if (h(t, o) === h(r, -1 === a ? 0 : o - a)) {
                if ((-1 === a && (a = o), o - a + 1 === s)) return a * u;
              } else -1 !== a && (o -= o - a), (a = -1);
          } else
            for (e + s > f && (e = f - s), o = e; o >= 0; o--) {
              for (var c = !0, l = 0; l < s; l++)
                if (h(t, o + l) !== h(r, l)) {
                  c = !1;
                  break;
                }
              if (c) return o;
            }
          return -1;
        }
        function A(t, r, e, n) {
          e = Number(e) || 0;
          var i = t.length - e;
          n ? (n = Number(n)) > i && (n = i) : (n = i);
          var o = r.length;
          if (o % 2 != 0) throw new TypeError('Invalid hex string');
          n > o / 2 && (n = o / 2);
          for (var u = 0; u < n; ++u) {
            var f = parseInt(r.substr(2 * u, 2), 16);
            if (isNaN(f)) return u;
            t[e + u] = f;
          }
          return u;
        }
        function m(t, r, e, n) {
          return Q($(r, t.length - e), t, e, n);
        }
        function P(t, r, e, n) {
          return Q(G(r), t, e, n);
        }
        function T(t, r, e, n) {
          return P(t, r, e, n);
        }
        function B(t, r, e, n) {
          return Q(K(r), t, e, n);
        }
        function U(t, r, e, n) {
          return Q(H(r, t.length - e), t, e, n);
        }
        function S(t, e, n) {
          return 0 === e && n === t.length
            ? r.fromByteArray(t)
            : r.fromByteArray(t.slice(e, n));
        }
        function Y(t, r, e) {
          e = Math.min(t.length, e);
          for (var n = [], i = r; i < e; ) {
            var o,
              u,
              f,
              s,
              h = t[i],
              a = null,
              c = h > 239 ? 4 : h > 223 ? 3 : h > 191 ? 2 : 1;
            if (i + c <= e)
              switch (c) {
                case 1:
                  h < 128 && (a = h);
                  break;
                case 2:
                  128 == (192 & (o = t[i + 1])) &&
                    (s = ((31 & h) << 6) | (63 & o)) > 127 &&
                    (a = s);
                  break;
                case 3:
                  (o = t[i + 1]),
                    (u = t[i + 2]),
                    128 == (192 & o) &&
                      128 == (192 & u) &&
                      (s = ((15 & h) << 12) | ((63 & o) << 6) | (63 & u)) >
                        2047 &&
                      (s < 55296 || s > 57343) &&
                      (a = s);
                  break;
                case 4:
                  (o = t[i + 1]),
                    (u = t[i + 2]),
                    (f = t[i + 3]),
                    128 == (192 & o) &&
                      128 == (192 & u) &&
                      128 == (192 & f) &&
                      (s =
                        ((15 & h) << 18) |
                        ((63 & o) << 12) |
                        ((63 & u) << 6) |
                        (63 & f)) > 65535 &&
                      s < 1114112 &&
                      (a = s);
              }
            null === a
              ? ((a = 65533), (c = 1))
              : a > 65535 &&
                ((a -= 65536),
                n.push(((a >>> 10) & 1023) | 55296),
                (a = 56320 | (1023 & a))),
              n.push(a),
              (i += c);
          }
          return O(n);
        }
        (exports.Buffer = f),
          (exports.SlowBuffer = d),
          (exports.INSPECT_MAX_BYTES = 50),
          (f.TYPED_ARRAY_SUPPORT =
            void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : i()),
          (exports.kMaxLength = o()),
          (f.poolSize = 8192),
          (f._augment = function(t) {
            return (t.__proto__ = f.prototype), t;
          }),
          (f.from = function(t, r, e) {
            return s(null, t, r, e);
          }),
          f.TYPED_ARRAY_SUPPORT &&
            ((f.prototype.__proto__ = Uint8Array.prototype),
            (f.__proto__ = Uint8Array),
            'undefined' != typeof Symbol &&
              Symbol.species &&
              f[Symbol.species] === f &&
              Object.defineProperty(f, Symbol.species, {
                value: null,
                configurable: !0
              })),
          (f.alloc = function(t, r, e) {
            return a(null, t, r, e);
          }),
          (f.allocUnsafe = function(t) {
            return c(null, t);
          }),
          (f.allocUnsafeSlow = function(t) {
            return c(null, t);
          }),
          (f.isBuffer = function(t) {
            return !(null == t || !t._isBuffer);
          }),
          (f.compare = function(t, r) {
            if (!f.isBuffer(t) || !f.isBuffer(r))
              throw new TypeError('Arguments must be Buffers');
            if (t === r) return 0;
            for (
              var e = t.length, n = r.length, i = 0, o = Math.min(e, n);
              i < o;
              ++i
            )
              if (t[i] !== r[i]) {
                (e = t[i]), (n = r[i]);
                break;
              }
            return e < n ? -1 : n < e ? 1 : 0;
          }),
          (f.isEncoding = function(t) {
            switch (String(t).toLowerCase()) {
              case 'hex':
              case 'utf8':
              case 'utf-8':
              case 'ascii':
              case 'latin1':
              case 'binary':
              case 'base64':
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return !0;
              default:
                return !1;
            }
          }),
          (f.concat = function(t, r) {
            if (!n(t))
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            if (0 === t.length) return f.alloc(0);
            var e;
            if (void 0 === r)
              for (r = 0, e = 0; e < t.length; ++e) r += t[e].length;
            var i = f.allocUnsafe(r),
              o = 0;
            for (e = 0; e < t.length; ++e) {
              var u = t[e];
              if (!f.isBuffer(u))
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              u.copy(i, o), (o += u.length);
            }
            return i;
          }),
          (f.byteLength = v),
          (f.prototype._isBuffer = !0),
          (f.prototype.swap16 = function() {
            var t = this.length;
            if (t % 2 != 0)
              throw new RangeError('Buffer size must be a multiple of 16-bits');
            for (var r = 0; r < t; r += 2) b(this, r, r + 1);
            return this;
          }),
          (f.prototype.swap32 = function() {
            var t = this.length;
            if (t % 4 != 0)
              throw new RangeError('Buffer size must be a multiple of 32-bits');
            for (var r = 0; r < t; r += 4)
              b(this, r, r + 3), b(this, r + 1, r + 2);
            return this;
          }),
          (f.prototype.swap64 = function() {
            var t = this.length;
            if (t % 8 != 0)
              throw new RangeError('Buffer size must be a multiple of 64-bits');
            for (var r = 0; r < t; r += 8)
              b(this, r, r + 7),
                b(this, r + 1, r + 6),
                b(this, r + 2, r + 5),
                b(this, r + 3, r + 4);
            return this;
          }),
          (f.prototype.toString = function() {
            var t = 0 | this.length;
            return 0 === t
              ? ''
              : 0 === arguments.length
                ? Y(this, 0, t)
                : E.apply(this, arguments);
          }),
          (f.prototype.equals = function(t) {
            if (!f.isBuffer(t))
              throw new TypeError('Argument must be a Buffer');
            return this === t || 0 === f.compare(this, t);
          }),
          (f.prototype.inspect = function() {
            var t = '',
              r = exports.INSPECT_MAX_BYTES;
            return (
              this.length > 0 &&
                ((t = this.toString('hex', 0, r)
                  .match(/.{2}/g)
                  .join(' ')),
                this.length > r && (t += ' ... ')),
              '<Buffer ' + t + '>'
            );
          }),
          (f.prototype.compare = function(t, r, e, n, i) {
            if (!f.isBuffer(t))
              throw new TypeError('Argument must be a Buffer');
            if (
              (void 0 === r && (r = 0),
              void 0 === e && (e = t ? t.length : 0),
              void 0 === n && (n = 0),
              void 0 === i && (i = this.length),
              r < 0 || e > t.length || n < 0 || i > this.length)
            )
              throw new RangeError('out of range index');
            if (n >= i && r >= e) return 0;
            if (n >= i) return -1;
            if (r >= e) return 1;
            if (((r >>>= 0), (e >>>= 0), (n >>>= 0), (i >>>= 0), this === t))
              return 0;
            for (
              var o = i - n,
                u = e - r,
                s = Math.min(o, u),
                h = this.slice(n, i),
                a = t.slice(r, e),
                c = 0;
              c < s;
              ++c
            )
              if (h[c] !== a[c]) {
                (o = h[c]), (u = a[c]);
                break;
              }
            return o < u ? -1 : u < o ? 1 : 0;
          }),
          (f.prototype.includes = function(t, r, e) {
            return -1 !== this.indexOf(t, r, e);
          }),
          (f.prototype.indexOf = function(t, r, e) {
            return R(this, t, r, e, !0);
          }),
          (f.prototype.lastIndexOf = function(t, r, e) {
            return R(this, t, r, e, !1);
          }),
          (f.prototype.write = function(t, r, e, n) {
            if (void 0 === r) (n = 'utf8'), (e = this.length), (r = 0);
            else if (void 0 === e && 'string' == typeof r)
              (n = r), (e = this.length), (r = 0);
            else {
              if (!isFinite(r))
                throw new Error(
                  'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                );
              (r |= 0),
                isFinite(e)
                  ? ((e |= 0), void 0 === n && (n = 'utf8'))
                  : ((n = e), (e = void 0));
            }
            var i = this.length - r;
            if (
              ((void 0 === e || e > i) && (e = i),
              (t.length > 0 && (e < 0 || r < 0)) || r > this.length)
            )
              throw new RangeError('Attempt to write outside buffer bounds');
            n || (n = 'utf8');
            for (var o = !1; ; )
              switch (n) {
                case 'hex':
                  return A(this, t, r, e);
                case 'utf8':
                case 'utf-8':
                  return m(this, t, r, e);
                case 'ascii':
                  return P(this, t, r, e);
                case 'latin1':
                case 'binary':
                  return T(this, t, r, e);
                case 'base64':
                  return B(this, t, r, e);
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return U(this, t, r, e);
                default:
                  if (o) throw new TypeError('Unknown encoding: ' + n);
                  (n = ('' + n).toLowerCase()), (o = !0);
              }
          }),
          (f.prototype.toJSON = function() {
            return {
              type: 'Buffer',
              data: Array.prototype.slice.call(this._arr || this, 0)
            };
          });
        var I = 4096;
        function O(t) {
          var r = t.length;
          if (r <= I) return String.fromCharCode.apply(String, t);
          for (var e = '', n = 0; n < r; )
            e += String.fromCharCode.apply(String, t.slice(n, (n += I)));
          return e;
        }
        function L(t, r, e) {
          var n = '';
          e = Math.min(t.length, e);
          for (var i = r; i < e; ++i) n += String.fromCharCode(127 & t[i]);
          return n;
        }
        function D(t, r, e) {
          var n = '';
          e = Math.min(t.length, e);
          for (var i = r; i < e; ++i) n += String.fromCharCode(t[i]);
          return n;
        }
        function x(t, r, e) {
          var n = t.length;
          (!r || r < 0) && (r = 0), (!e || e < 0 || e > n) && (e = n);
          for (var i = '', o = r; o < e; ++o) i += Z(t[o]);
          return i;
        }
        function C(t, r, e) {
          for (var n = t.slice(r, e), i = '', o = 0; o < n.length; o += 2)
            i += String.fromCharCode(n[o] + 256 * n[o + 1]);
          return i;
        }
        function M(t, r, e) {
          if (t % 1 != 0 || t < 0) throw new RangeError('offset is not uint');
          if (t + r > e)
            throw new RangeError('Trying to access beyond buffer length');
        }
        function k(t, r, e, n, i, o) {
          if (!f.isBuffer(t))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (r > i || r < o)
            throw new RangeError('"value" argument is out of bounds');
          if (e + n > t.length) throw new RangeError('Index out of range');
        }
        function N(t, r, e, n) {
          r < 0 && (r = 65535 + r + 1);
          for (var i = 0, o = Math.min(t.length - e, 2); i < o; ++i)
            t[e + i] =
              (r & (255 << (8 * (n ? i : 1 - i)))) >>> (8 * (n ? i : 1 - i));
        }
        function z(t, r, e, n) {
          r < 0 && (r = 4294967295 + r + 1);
          for (var i = 0, o = Math.min(t.length - e, 4); i < o; ++i)
            t[e + i] = (r >>> (8 * (n ? i : 3 - i))) & 255;
        }
        function F(t, r, e, n, i, o) {
          if (e + n > t.length) throw new RangeError('Index out of range');
          if (e < 0) throw new RangeError('Index out of range');
        }
        function j(t, r, n, i, o) {
          return (
            o || F(t, r, n, 4, 3.4028234663852886e38, -3.4028234663852886e38),
            e.write(t, r, n, i, 23, 4),
            n + 4
          );
        }
        function q(t, r, n, i, o) {
          return (
            o || F(t, r, n, 8, 1.7976931348623157e308, -1.7976931348623157e308),
            e.write(t, r, n, i, 52, 8),
            n + 8
          );
        }
        (f.prototype.slice = function(t, r) {
          var e,
            n = this.length;
          if (
            ((t = ~~t),
            (r = void 0 === r ? n : ~~r),
            t < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n),
            r < 0 ? (r += n) < 0 && (r = 0) : r > n && (r = n),
            r < t && (r = t),
            f.TYPED_ARRAY_SUPPORT)
          )
            (e = this.subarray(t, r)).__proto__ = f.prototype;
          else {
            var i = r - t;
            e = new f(i, void 0);
            for (var o = 0; o < i; ++o) e[o] = this[o + t];
          }
          return e;
        }),
          (f.prototype.readUIntLE = function(t, r, e) {
            (t |= 0), (r |= 0), e || M(t, r, this.length);
            for (var n = this[t], i = 1, o = 0; ++o < r && (i *= 256); )
              n += this[t + o] * i;
            return n;
          }),
          (f.prototype.readUIntBE = function(t, r, e) {
            (t |= 0), (r |= 0), e || M(t, r, this.length);
            for (var n = this[t + --r], i = 1; r > 0 && (i *= 256); )
              n += this[t + --r] * i;
            return n;
          }),
          (f.prototype.readUInt8 = function(t, r) {
            return r || M(t, 1, this.length), this[t];
          }),
          (f.prototype.readUInt16LE = function(t, r) {
            return r || M(t, 2, this.length), this[t] | (this[t + 1] << 8);
          }),
          (f.prototype.readUInt16BE = function(t, r) {
            return r || M(t, 2, this.length), (this[t] << 8) | this[t + 1];
          }),
          (f.prototype.readUInt32LE = function(t, r) {
            return (
              r || M(t, 4, this.length),
              (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) +
                16777216 * this[t + 3]
            );
          }),
          (f.prototype.readUInt32BE = function(t, r) {
            return (
              r || M(t, 4, this.length),
              16777216 * this[t] +
                ((this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3])
            );
          }),
          (f.prototype.readIntLE = function(t, r, e) {
            (t |= 0), (r |= 0), e || M(t, r, this.length);
            for (var n = this[t], i = 1, o = 0; ++o < r && (i *= 256); )
              n += this[t + o] * i;
            return n >= (i *= 128) && (n -= Math.pow(2, 8 * r)), n;
          }),
          (f.prototype.readIntBE = function(t, r, e) {
            (t |= 0), (r |= 0), e || M(t, r, this.length);
            for (var n = r, i = 1, o = this[t + --n]; n > 0 && (i *= 256); )
              o += this[t + --n] * i;
            return o >= (i *= 128) && (o -= Math.pow(2, 8 * r)), o;
          }),
          (f.prototype.readInt8 = function(t, r) {
            return (
              r || M(t, 1, this.length),
              128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
            );
          }),
          (f.prototype.readInt16LE = function(t, r) {
            r || M(t, 2, this.length);
            var e = this[t] | (this[t + 1] << 8);
            return 32768 & e ? 4294901760 | e : e;
          }),
          (f.prototype.readInt16BE = function(t, r) {
            r || M(t, 2, this.length);
            var e = this[t + 1] | (this[t] << 8);
            return 32768 & e ? 4294901760 | e : e;
          }),
          (f.prototype.readInt32LE = function(t, r) {
            return (
              r || M(t, 4, this.length),
              this[t] |
                (this[t + 1] << 8) |
                (this[t + 2] << 16) |
                (this[t + 3] << 24)
            );
          }),
          (f.prototype.readInt32BE = function(t, r) {
            return (
              r || M(t, 4, this.length),
              (this[t] << 24) |
                (this[t + 1] << 16) |
                (this[t + 2] << 8) |
                this[t + 3]
            );
          }),
          (f.prototype.readFloatLE = function(t, r) {
            return r || M(t, 4, this.length), e.read(this, t, !0, 23, 4);
          }),
          (f.prototype.readFloatBE = function(t, r) {
            return r || M(t, 4, this.length), e.read(this, t, !1, 23, 4);
          }),
          (f.prototype.readDoubleLE = function(t, r) {
            return r || M(t, 8, this.length), e.read(this, t, !0, 52, 8);
          }),
          (f.prototype.readDoubleBE = function(t, r) {
            return r || M(t, 8, this.length), e.read(this, t, !1, 52, 8);
          }),
          (f.prototype.writeUIntLE = function(t, r, e, n) {
            ((t = +t), (r |= 0), (e |= 0), n) ||
              k(this, t, r, e, Math.pow(2, 8 * e) - 1, 0);
            var i = 1,
              o = 0;
            for (this[r] = 255 & t; ++o < e && (i *= 256); )
              this[r + o] = (t / i) & 255;
            return r + e;
          }),
          (f.prototype.writeUIntBE = function(t, r, e, n) {
            ((t = +t), (r |= 0), (e |= 0), n) ||
              k(this, t, r, e, Math.pow(2, 8 * e) - 1, 0);
            var i = e - 1,
              o = 1;
            for (this[r + i] = 255 & t; --i >= 0 && (o *= 256); )
              this[r + i] = (t / o) & 255;
            return r + e;
          }),
          (f.prototype.writeUInt8 = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 1, 255, 0),
              f.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
              (this[r] = 255 & t),
              r + 1
            );
          }),
          (f.prototype.writeUInt16LE = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 2, 65535, 0),
              f.TYPED_ARRAY_SUPPORT
                ? ((this[r] = 255 & t), (this[r + 1] = t >>> 8))
                : N(this, t, r, !0),
              r + 2
            );
          }),
          (f.prototype.writeUInt16BE = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 2, 65535, 0),
              f.TYPED_ARRAY_SUPPORT
                ? ((this[r] = t >>> 8), (this[r + 1] = 255 & t))
                : N(this, t, r, !1),
              r + 2
            );
          }),
          (f.prototype.writeUInt32LE = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 4, 4294967295, 0),
              f.TYPED_ARRAY_SUPPORT
                ? ((this[r + 3] = t >>> 24),
                  (this[r + 2] = t >>> 16),
                  (this[r + 1] = t >>> 8),
                  (this[r] = 255 & t))
                : z(this, t, r, !0),
              r + 4
            );
          }),
          (f.prototype.writeUInt32BE = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 4, 4294967295, 0),
              f.TYPED_ARRAY_SUPPORT
                ? ((this[r] = t >>> 24),
                  (this[r + 1] = t >>> 16),
                  (this[r + 2] = t >>> 8),
                  (this[r + 3] = 255 & t))
                : z(this, t, r, !1),
              r + 4
            );
          }),
          (f.prototype.writeIntLE = function(t, r, e, n) {
            if (((t = +t), (r |= 0), !n)) {
              var i = Math.pow(2, 8 * e - 1);
              k(this, t, r, e, i - 1, -i);
            }
            var o = 0,
              u = 1,
              f = 0;
            for (this[r] = 255 & t; ++o < e && (u *= 256); )
              t < 0 && 0 === f && 0 !== this[r + o - 1] && (f = 1),
                (this[r + o] = (((t / u) >> 0) - f) & 255);
            return r + e;
          }),
          (f.prototype.writeIntBE = function(t, r, e, n) {
            if (((t = +t), (r |= 0), !n)) {
              var i = Math.pow(2, 8 * e - 1);
              k(this, t, r, e, i - 1, -i);
            }
            var o = e - 1,
              u = 1,
              f = 0;
            for (this[r + o] = 255 & t; --o >= 0 && (u *= 256); )
              t < 0 && 0 === f && 0 !== this[r + o + 1] && (f = 1),
                (this[r + o] = (((t / u) >> 0) - f) & 255);
            return r + e;
          }),
          (f.prototype.writeInt8 = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 1, 127, -128),
              f.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
              t < 0 && (t = 255 + t + 1),
              (this[r] = 255 & t),
              r + 1
            );
          }),
          (f.prototype.writeInt16LE = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 2, 32767, -32768),
              f.TYPED_ARRAY_SUPPORT
                ? ((this[r] = 255 & t), (this[r + 1] = t >>> 8))
                : N(this, t, r, !0),
              r + 2
            );
          }),
          (f.prototype.writeInt16BE = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 2, 32767, -32768),
              f.TYPED_ARRAY_SUPPORT
                ? ((this[r] = t >>> 8), (this[r + 1] = 255 & t))
                : N(this, t, r, !1),
              r + 2
            );
          }),
          (f.prototype.writeInt32LE = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 4, 2147483647, -2147483648),
              f.TYPED_ARRAY_SUPPORT
                ? ((this[r] = 255 & t),
                  (this[r + 1] = t >>> 8),
                  (this[r + 2] = t >>> 16),
                  (this[r + 3] = t >>> 24))
                : z(this, t, r, !0),
              r + 4
            );
          }),
          (f.prototype.writeInt32BE = function(t, r, e) {
            return (
              (t = +t),
              (r |= 0),
              e || k(this, t, r, 4, 2147483647, -2147483648),
              t < 0 && (t = 4294967295 + t + 1),
              f.TYPED_ARRAY_SUPPORT
                ? ((this[r] = t >>> 24),
                  (this[r + 1] = t >>> 16),
                  (this[r + 2] = t >>> 8),
                  (this[r + 3] = 255 & t))
                : z(this, t, r, !1),
              r + 4
            );
          }),
          (f.prototype.writeFloatLE = function(t, r, e) {
            return j(this, t, r, !0, e);
          }),
          (f.prototype.writeFloatBE = function(t, r, e) {
            return j(this, t, r, !1, e);
          }),
          (f.prototype.writeDoubleLE = function(t, r, e) {
            return q(this, t, r, !0, e);
          }),
          (f.prototype.writeDoubleBE = function(t, r, e) {
            return q(this, t, r, !1, e);
          }),
          (f.prototype.copy = function(t, r, e, n) {
            if (
              (e || (e = 0),
              n || 0 === n || (n = this.length),
              r >= t.length && (r = t.length),
              r || (r = 0),
              n > 0 && n < e && (n = e),
              n === e)
            )
              return 0;
            if (0 === t.length || 0 === this.length) return 0;
            if (r < 0) throw new RangeError('targetStart out of bounds');
            if (e < 0 || e >= this.length)
              throw new RangeError('sourceStart out of bounds');
            if (n < 0) throw new RangeError('sourceEnd out of bounds');
            n > this.length && (n = this.length),
              t.length - r < n - e && (n = t.length - r + e);
            var i,
              o = n - e;
            if (this === t && e < r && r < n)
              for (i = o - 1; i >= 0; --i) t[i + r] = this[i + e];
            else if (o < 1e3 || !f.TYPED_ARRAY_SUPPORT)
              for (i = 0; i < o; ++i) t[i + r] = this[i + e];
            else Uint8Array.prototype.set.call(t, this.subarray(e, e + o), r);
            return o;
          }),
          (f.prototype.fill = function(t, r, e, n) {
            if ('string' == typeof t) {
              if (
                ('string' == typeof r
                  ? ((n = r), (r = 0), (e = this.length))
                  : 'string' == typeof e && ((n = e), (e = this.length)),
                1 === t.length)
              ) {
                var i = t.charCodeAt(0);
                i < 256 && (t = i);
              }
              if (void 0 !== n && 'string' != typeof n)
                throw new TypeError('encoding must be a string');
              if ('string' == typeof n && !f.isEncoding(n))
                throw new TypeError('Unknown encoding: ' + n);
            } else 'number' == typeof t && (t &= 255);
            if (r < 0 || this.length < r || this.length < e)
              throw new RangeError('Out of range index');
            if (e <= r) return this;
            var o;
            if (
              ((r >>>= 0),
              (e = void 0 === e ? this.length : e >>> 0),
              t || (t = 0),
              'number' == typeof t)
            )
              for (o = r; o < e; ++o) this[o] = t;
            else {
              var u = f.isBuffer(t) ? t : $(new f(t, n).toString()),
                s = u.length;
              for (o = 0; o < e - r; ++o) this[o + r] = u[o % s];
            }
            return this;
          });
        var V = /[^+\/0-9A-Za-z-_]/g;
        function X(t) {
          if ((t = J(t).replace(V, '')).length < 2) return '';
          for (; t.length % 4 != 0; ) t += '=';
          return t;
        }
        function J(t) {
          return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, '');
        }
        function Z(t) {
          return t < 16 ? '0' + t.toString(16) : t.toString(16);
        }
        function $(t, r) {
          var e;
          r = r || 1 / 0;
          for (var n = t.length, i = null, o = [], u = 0; u < n; ++u) {
            if ((e = t.charCodeAt(u)) > 55295 && e < 57344) {
              if (!i) {
                if (e > 56319) {
                  (r -= 3) > -1 && o.push(239, 191, 189);
                  continue;
                }
                if (u + 1 === n) {
                  (r -= 3) > -1 && o.push(239, 191, 189);
                  continue;
                }
                i = e;
                continue;
              }
              if (e < 56320) {
                (r -= 3) > -1 && o.push(239, 191, 189), (i = e);
                continue;
              }
              e = 65536 + (((i - 55296) << 10) | (e - 56320));
            } else i && (r -= 3) > -1 && o.push(239, 191, 189);
            if (((i = null), e < 128)) {
              if ((r -= 1) < 0) break;
              o.push(e);
            } else if (e < 2048) {
              if ((r -= 2) < 0) break;
              o.push((e >> 6) | 192, (63 & e) | 128);
            } else if (e < 65536) {
              if ((r -= 3) < 0) break;
              o.push((e >> 12) | 224, ((e >> 6) & 63) | 128, (63 & e) | 128);
            } else {
              if (!(e < 1114112)) throw new Error('Invalid code point');
              if ((r -= 4) < 0) break;
              o.push(
                (e >> 18) | 240,
                ((e >> 12) & 63) | 128,
                ((e >> 6) & 63) | 128,
                (63 & e) | 128
              );
            }
          }
          return o;
        }
        function G(t) {
          for (var r = [], e = 0; e < t.length; ++e)
            r.push(255 & t.charCodeAt(e));
          return r;
        }
        function H(t, r) {
          for (var e, n, i, o = [], u = 0; u < t.length && !((r -= 2) < 0); ++u)
            (n = (e = t.charCodeAt(u)) >> 8),
              (i = e % 256),
              o.push(i),
              o.push(n);
          return o;
        }
        function K(t) {
          return r.toByteArray(X(t));
        }
        function Q(t, r, e, n) {
          for (var i = 0; i < n && !(i + e >= r.length || i >= t.length); ++i)
            r[i + e] = t[i];
          return i;
        }
        function W(t) {
          return t != t;
        }
      },
      { 'base64-js': 9, ieee754: 10, isarray: 8, buffer: 7 }
    ],
    5: [
      function(require, module, exports) {
        var global = (1, eval)('this');
        var process = require('process');
        var Buffer = require('buffer').Buffer;
        var t = (0, eval)('this'),
          i = require('process'),
          n = require('buffer').Buffer;
        !(function(e) {
          if ('object' == typeof exports && 'undefined' != typeof module)
            module.exports = e();
          else if ('function' == typeof define && define.amd) define([], e);
          else {
            ('undefined' != typeof window
              ? window
              : void 0 !== t ? t : 'undefined' != typeof self ? self : this
            ).AFRAME = e();
          }
        })(function() {
          return (function t(e, i, n) {
            function r(o, s) {
              if (!i[o]) {
                if (!e[o]) {
                  var c = 'function' == typeof require && require;
                  if (!s && c) return c(o, !0);
                  if (a) return a(o, !0);
                  var u = new Error("Cannot find module '" + o + "'");
                  throw ((u.code = 'MODULE_NOT_FOUND'), u);
                }
                var l = (i[o] = { exports: {} });
                e[o][0].call(
                  l.exports,
                  function(t) {
                    var i = e[o][1][t];
                    return r(i || t);
                  },
                  l,
                  l.exports,
                  t,
                  e,
                  i,
                  n
                );
              }
              return i[o].exports;
            }
            for (
              var a = 'function' == typeof require && require, o = 0;
              o < n.length;
              o++
            )
              r(n[o]);
            return r;
          })(
            {
              1: [
                function(t, e, i) {
                  (function(t) {
                    var n = function() {
                      (this._tweens = {}), (this._tweensAddedDuringUpdate = {});
                    };
                    n.prototype = {
                      getAll: function() {
                        return Object.keys(this._tweens).map(
                          function(t) {
                            return this._tweens[t];
                          }.bind(this)
                        );
                      },
                      removeAll: function() {
                        this._tweens = {};
                      },
                      add: function(t) {
                        (this._tweens[t.getId()] = t),
                          (this._tweensAddedDuringUpdate[t.getId()] = t);
                      },
                      remove: function(t) {
                        delete this._tweens[t.getId()],
                          delete this._tweensAddedDuringUpdate[t.getId()];
                      },
                      update: function(t, e) {
                        var i = Object.keys(this._tweens);
                        if (0 === i.length) return !1;
                        for (t = void 0 !== t ? t : o.now(); i.length > 0; ) {
                          this._tweensAddedDuringUpdate = {};
                          for (var n = 0; n < i.length; n++)
                            !1 === this._tweens[i[n]].update(t) &&
                              ((this._tweens[i[n]]._isPlaying = !1),
                              e || delete this._tweens[i[n]]);
                          i = Object.keys(this._tweensAddedDuringUpdate);
                        }
                        return !0;
                      }
                    };
                    var r,
                      a,
                      o = new n();
                    (o.Group = n),
                      (o._nextId = 0),
                      (o.nextId = function() {
                        return o._nextId++;
                      }),
                      'undefined' == typeof window && void 0 !== t
                        ? (o.now = function() {
                            var e = t.hrtime();
                            return 1e3 * e[0] + e[1] / 1e6;
                          })
                        : 'undefined' != typeof window &&
                          void 0 !== window.performance &&
                          void 0 !== window.performance.now
                          ? (o.now = window.performance.now.bind(
                              window.performance
                            ))
                          : void 0 !== Date.now
                            ? (o.now = Date.now)
                            : (o.now = function() {
                                return new Date().getTime();
                              }),
                      (o.Tween = function(t, e) {
                        (this._object = t),
                          (this._valuesStart = {}),
                          (this._valuesEnd = {}),
                          (this._valuesStartRepeat = {}),
                          (this._duration = 1e3),
                          (this._repeat = 0),
                          (this._repeatDelayTime = void 0),
                          (this._yoyo = !1),
                          (this._isPlaying = !1),
                          (this._reversed = !1),
                          (this._delayTime = 0),
                          (this._startTime = null),
                          (this._easingFunction = o.Easing.Linear.None),
                          (this._interpolationFunction =
                            o.Interpolation.Linear),
                          (this._chainedTweens = []),
                          (this._onStartCallback = null),
                          (this._onStartCallbackFired = !1),
                          (this._onUpdateCallback = null),
                          (this._onCompleteCallback = null),
                          (this._onStopCallback = null),
                          (this._group = e || o),
                          (this._id = o.nextId());
                      }),
                      (o.Tween.prototype = {
                        getId: function() {
                          return this._id;
                        },
                        isPlaying: function() {
                          return this._isPlaying;
                        },
                        to: function(t, e) {
                          return (
                            (this._valuesEnd = t),
                            void 0 !== e && (this._duration = e),
                            this
                          );
                        },
                        start: function(t) {
                          this._group.add(this),
                            (this._isPlaying = !0),
                            (this._onStartCallbackFired = !1),
                            (this._startTime = void 0 !== t ? t : o.now()),
                            (this._startTime += this._delayTime);
                          for (var e in this._valuesEnd) {
                            if (this._valuesEnd[e] instanceof Array) {
                              if (0 === this._valuesEnd[e].length) continue;
                              this._valuesEnd[e] = [this._object[e]].concat(
                                this._valuesEnd[e]
                              );
                            }
                            void 0 !== this._object[e] &&
                              ((this._valuesStart[e] = this._object[e]),
                              this._valuesStart[e] instanceof Array == !1 &&
                                (this._valuesStart[e] *= 1),
                              (this._valuesStartRepeat[e] =
                                this._valuesStart[e] || 0));
                          }
                          return this;
                        },
                        stop: function() {
                          return this._isPlaying
                            ? (this._group.remove(this),
                              (this._isPlaying = !1),
                              null !== this._onStopCallback &&
                                this._onStopCallback.call(
                                  this._object,
                                  this._object
                                ),
                              this.stopChainedTweens(),
                              this)
                            : this;
                        },
                        end: function() {
                          return (
                            this.update(this._startTime + this._duration), this
                          );
                        },
                        stopChainedTweens: function() {
                          for (
                            var t = 0, e = this._chainedTweens.length;
                            t < e;
                            t++
                          )
                            this._chainedTweens[t].stop();
                        },
                        delay: function(t) {
                          return (this._delayTime = t), this;
                        },
                        repeat: function(t) {
                          return (this._repeat = t), this;
                        },
                        repeatDelay: function(t) {
                          return (this._repeatDelayTime = t), this;
                        },
                        yoyo: function(t) {
                          return (this._yoyo = t), this;
                        },
                        easing: function(t) {
                          return (this._easingFunction = t), this;
                        },
                        interpolation: function(t) {
                          return (this._interpolationFunction = t), this;
                        },
                        chain: function() {
                          return (this._chainedTweens = arguments), this;
                        },
                        onStart: function(t) {
                          return (this._onStartCallback = t), this;
                        },
                        onUpdate: function(t) {
                          return (this._onUpdateCallback = t), this;
                        },
                        onComplete: function(t) {
                          return (this._onCompleteCallback = t), this;
                        },
                        onStop: function(t) {
                          return (this._onStopCallback = t), this;
                        },
                        update: function(t) {
                          var e, i, n;
                          if (t < this._startTime) return !0;
                          !1 === this._onStartCallbackFired &&
                            (null !== this._onStartCallback &&
                              this._onStartCallback.call(
                                this._object,
                                this._object
                              ),
                            (this._onStartCallbackFired = !0)),
                            (i =
                              (i = (t - this._startTime) / this._duration) > 1
                                ? 1
                                : i),
                            (n = this._easingFunction(i));
                          for (e in this._valuesEnd)
                            if (void 0 !== this._valuesStart[e]) {
                              var r = this._valuesStart[e] || 0,
                                a = this._valuesEnd[e];
                              a instanceof Array
                                ? (this._object[
                                    e
                                  ] = this._interpolationFunction(a, n))
                                : ('string' == typeof a &&
                                    (a =
                                      '+' === a.charAt(0) || '-' === a.charAt(0)
                                        ? r + parseFloat(a)
                                        : parseFloat(a)),
                                  'number' == typeof a &&
                                    (this._object[e] = r + (a - r) * n));
                            }
                          if (
                            (null !== this._onUpdateCallback &&
                              this._onUpdateCallback.call(this._object, n),
                            1 === i)
                          ) {
                            if (this._repeat > 0) {
                              isFinite(this._repeat) && this._repeat--;
                              for (e in this._valuesStartRepeat) {
                                if (
                                  ('string' == typeof this._valuesEnd[e] &&
                                    (this._valuesStartRepeat[e] =
                                      this._valuesStartRepeat[e] +
                                      parseFloat(this._valuesEnd[e])),
                                  this._yoyo)
                                ) {
                                  var o = this._valuesStartRepeat[e];
                                  (this._valuesStartRepeat[e] = this._valuesEnd[
                                    e
                                  ]),
                                    (this._valuesEnd[e] = o);
                                }
                                this._valuesStart[e] = this._valuesStartRepeat[
                                  e
                                ];
                              }
                              return (
                                this._yoyo &&
                                  (this._reversed = !this._reversed),
                                void 0 !== this._repeatDelayTime
                                  ? (this._startTime =
                                      t + this._repeatDelayTime)
                                  : (this._startTime = t + this._delayTime),
                                !0
                              );
                            }
                            null !== this._onCompleteCallback &&
                              this._onCompleteCallback.call(
                                this._object,
                                this._object
                              );
                            for (
                              var s = 0, c = this._chainedTweens.length;
                              s < c;
                              s++
                            )
                              this._chainedTweens[s].start(
                                this._startTime + this._duration
                              );
                            return !1;
                          }
                          return !0;
                        }
                      }),
                      (o.Easing = {
                        Linear: {
                          None: function(t) {
                            return t;
                          }
                        },
                        Quadratic: {
                          In: function(t) {
                            return t * t;
                          },
                          Out: function(t) {
                            return t * (2 - t);
                          },
                          InOut: function(t) {
                            return (t *= 2) < 1
                              ? 0.5 * t * t
                              : -0.5 * (--t * (t - 2) - 1);
                          }
                        },
                        Cubic: {
                          In: function(t) {
                            return t * t * t;
                          },
                          Out: function(t) {
                            return --t * t * t + 1;
                          },
                          InOut: function(t) {
                            return (t *= 2) < 1
                              ? 0.5 * t * t * t
                              : 0.5 * ((t -= 2) * t * t + 2);
                          }
                        },
                        Quartic: {
                          In: function(t) {
                            return t * t * t * t;
                          },
                          Out: function(t) {
                            return 1 - --t * t * t * t;
                          },
                          InOut: function(t) {
                            return (t *= 2) < 1
                              ? 0.5 * t * t * t * t
                              : -0.5 * ((t -= 2) * t * t * t - 2);
                          }
                        },
                        Quintic: {
                          In: function(t) {
                            return t * t * t * t * t;
                          },
                          Out: function(t) {
                            return --t * t * t * t * t + 1;
                          },
                          InOut: function(t) {
                            return (t *= 2) < 1
                              ? 0.5 * t * t * t * t * t
                              : 0.5 * ((t -= 2) * t * t * t * t + 2);
                          }
                        },
                        Sinusoidal: {
                          In: function(t) {
                            return 1 - Math.cos(t * Math.PI / 2);
                          },
                          Out: function(t) {
                            return Math.sin(t * Math.PI / 2);
                          },
                          InOut: function(t) {
                            return 0.5 * (1 - Math.cos(Math.PI * t));
                          }
                        },
                        Exponential: {
                          In: function(t) {
                            return 0 === t ? 0 : Math.pow(1024, t - 1);
                          },
                          Out: function(t) {
                            return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
                          },
                          InOut: function(t) {
                            return 0 === t
                              ? 0
                              : 1 === t
                                ? 1
                                : (t *= 2) < 1
                                  ? 0.5 * Math.pow(1024, t - 1)
                                  : 0.5 * (2 - Math.pow(2, -10 * (t - 1)));
                          }
                        },
                        Circular: {
                          In: function(t) {
                            return 1 - Math.sqrt(1 - t * t);
                          },
                          Out: function(t) {
                            return Math.sqrt(1 - --t * t);
                          },
                          InOut: function(t) {
                            return (t *= 2) < 1
                              ? -0.5 * (Math.sqrt(1 - t * t) - 1)
                              : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
                          }
                        },
                        Elastic: {
                          In: function(t) {
                            return 0 === t
                              ? 0
                              : 1 === t
                                ? 1
                                : -Math.pow(2, 10 * (t - 1)) *
                                  Math.sin(5 * (t - 1.1) * Math.PI);
                          },
                          Out: function(t) {
                            return 0 === t
                              ? 0
                              : 1 === t
                                ? 1
                                : Math.pow(2, -10 * t) *
                                    Math.sin(5 * (t - 0.1) * Math.PI) +
                                  1;
                          },
                          InOut: function(t) {
                            return 0 === t
                              ? 0
                              : 1 === t
                                ? 1
                                : (t *= 2) < 1
                                  ? -0.5 *
                                    Math.pow(2, 10 * (t - 1)) *
                                    Math.sin(5 * (t - 1.1) * Math.PI)
                                  : 0.5 *
                                      Math.pow(2, -10 * (t - 1)) *
                                      Math.sin(5 * (t - 1.1) * Math.PI) +
                                    1;
                          }
                        },
                        Back: {
                          In: function(t) {
                            return t * t * (2.70158 * t - 1.70158);
                          },
                          Out: function(t) {
                            return --t * t * (2.70158 * t + 1.70158) + 1;
                          },
                          InOut: function(t) {
                            var e = 2.5949095;
                            return (t *= 2) < 1
                              ? t * t * ((e + 1) * t - e) * 0.5
                              : 0.5 * ((t -= 2) * t * ((e + 1) * t + e) + 2);
                          }
                        },
                        Bounce: {
                          In: function(t) {
                            return 1 - o.Easing.Bounce.Out(1 - t);
                          },
                          Out: function(t) {
                            return t < 1 / 2.75
                              ? 7.5625 * t * t
                              : t < 2 / 2.75
                                ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
                                : t < 2.5 / 2.75
                                  ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
                                  : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
                          },
                          InOut: function(t) {
                            return t < 0.5
                              ? 0.5 * o.Easing.Bounce.In(2 * t)
                              : 0.5 * o.Easing.Bounce.Out(2 * t - 1) + 0.5;
                          }
                        }
                      }),
                      (o.Interpolation = {
                        Linear: function(t, e) {
                          var i = t.length - 1,
                            n = i * e,
                            r = Math.floor(n),
                            a = o.Interpolation.Utils.Linear;
                          return e < 0
                            ? a(t[0], t[1], n)
                            : e > 1
                              ? a(t[i], t[i - 1], i - n)
                              : a(t[r], t[r + 1 > i ? i : r + 1], n - r);
                        },
                        Bezier: function(t, e) {
                          for (
                            var i = 0,
                              n = t.length - 1,
                              r = Math.pow,
                              a = o.Interpolation.Utils.Bernstein,
                              s = 0;
                            s <= n;
                            s++
                          )
                            i += r(1 - e, n - s) * r(e, s) * t[s] * a(n, s);
                          return i;
                        },
                        CatmullRom: function(t, e) {
                          var i = t.length - 1,
                            n = i * e,
                            r = Math.floor(n),
                            a = o.Interpolation.Utils.CatmullRom;
                          return t[0] === t[i]
                            ? (e < 0 && (r = Math.floor((n = i * (1 + e)))),
                              a(
                                t[(r - 1 + i) % i],
                                t[r],
                                t[(r + 1) % i],
                                t[(r + 2) % i],
                                n - r
                              ))
                            : e < 0
                              ? t[0] - (a(t[0], t[0], t[1], t[1], -n) - t[0])
                              : e > 1
                                ? t[i] -
                                  (a(t[i], t[i], t[i - 1], t[i - 1], n - i) -
                                    t[i])
                                : a(
                                    t[r ? r - 1 : 0],
                                    t[r],
                                    t[i < r + 1 ? i : r + 1],
                                    t[i < r + 2 ? i : r + 2],
                                    n - r
                                  );
                        },
                        Utils: {
                          Linear: function(t, e, i) {
                            return (e - t) * i + t;
                          },
                          Bernstein: function(t, e) {
                            var i = o.Interpolation.Utils.Factorial;
                            return i(t) / i(e) / i(t - e);
                          },
                          Factorial: ((r = [1]),
                          function(t) {
                            var e = 1;
                            if (r[t]) return r[t];
                            for (var i = t; i > 1; i--) e *= i;
                            return (r[t] = e), e;
                          }),
                          CatmullRom: function(t, e, i, n, r) {
                            var a = 0.5 * (i - t),
                              o = 0.5 * (n - e),
                              s = r * r;
                            return (
                              (2 * e - 2 * i + a + o) * (r * s) +
                              (-3 * e + 3 * i - 2 * a - o) * s +
                              a * r +
                              e
                            );
                          }
                        }
                      }),
                      (a = this),
                      void 0 !== e && 'object' == typeof i
                        ? (e.exports = o)
                        : void 0 !== a && (a.TWEEN = o);
                  }.call(this, t('_process')));
                },
                { _process: 6 }
              ],
              2: [
                function(t, e, i) {
                  var n = Object.prototype.toString;
                  e.exports = function(t) {
                    return (
                      (t.BYTES_PER_ELEMENT &&
                        '[object ArrayBuffer]' === n.call(t.buffer)) ||
                      Array.isArray(t)
                    );
                  };
                },
                {}
              ],
              3: [
                function(t, e, i) {
                  e.exports = function(t, e) {
                    return 'number' == typeof t
                      ? t
                      : 'number' == typeof e ? e : 0;
                  };
                },
                {}
              ],
              4: [
                function(t, e, i) {
                  'use strict';
                  (i.byteLength = function(t) {
                    return 3 * t.length / 4 - u(t);
                  }),
                    (i.toByteArray = function(t) {
                      var e,
                        i,
                        n,
                        o,
                        s,
                        c = t.length;
                      (o = u(t)),
                        (s = new a(3 * c / 4 - o)),
                        (i = o > 0 ? c - 4 : c);
                      var l = 0;
                      for (e = 0; e < i; e += 4)
                        (n =
                          (r[t.charCodeAt(e)] << 18) |
                          (r[t.charCodeAt(e + 1)] << 12) |
                          (r[t.charCodeAt(e + 2)] << 6) |
                          r[t.charCodeAt(e + 3)]),
                          (s[l++] = (n >> 16) & 255),
                          (s[l++] = (n >> 8) & 255),
                          (s[l++] = 255 & n);
                      2 === o
                        ? ((n =
                            (r[t.charCodeAt(e)] << 2) |
                            (r[t.charCodeAt(e + 1)] >> 4)),
                          (s[l++] = 255 & n))
                        : 1 === o &&
                          ((n =
                            (r[t.charCodeAt(e)] << 10) |
                            (r[t.charCodeAt(e + 1)] << 4) |
                            (r[t.charCodeAt(e + 2)] >> 2)),
                          (s[l++] = (n >> 8) & 255),
                          (s[l++] = 255 & n));
                      return s;
                    }),
                    (i.fromByteArray = function(t) {
                      for (
                        var e,
                          i = t.length,
                          r = i % 3,
                          a = '',
                          o = [],
                          s = 0,
                          c = i - r;
                        s < c;
                        s += 16383
                      )
                        o.push(l(t, s, s + 16383 > c ? c : s + 16383));
                      1 === r
                        ? ((e = t[i - 1]),
                          (a += n[e >> 2]),
                          (a += n[(e << 4) & 63]),
                          (a += '=='))
                        : 2 === r &&
                          ((e = (t[i - 2] << 8) + t[i - 1]),
                          (a += n[e >> 10]),
                          (a += n[(e >> 4) & 63]),
                          (a += n[(e << 2) & 63]),
                          (a += '='));
                      return o.push(a), o.join('');
                    });
                  for (
                    var n = [],
                      r = [],
                      a = 'undefined' != typeof Uint8Array ? Uint8Array : Array,
                      o =
                        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                      s = 0,
                      c = o.length;
                    s < c;
                    ++s
                  )
                    (n[s] = o[s]), (r[o.charCodeAt(s)] = s);
                  function u(t) {
                    var e = t.length;
                    if (e % 4 > 0)
                      throw new Error(
                        'Invalid string. Length must be a multiple of 4'
                      );
                    return '=' === t[e - 2] ? 2 : '=' === t[e - 1] ? 1 : 0;
                  }
                  function l(t, e, i) {
                    for (var r, a, o = [], s = e; s < i; s += 3)
                      (r = (t[s] << 16) + (t[s + 1] << 8) + t[s + 2]),
                        o.push(
                          n[((a = r) >> 18) & 63] +
                            n[(a >> 12) & 63] +
                            n[(a >> 6) & 63] +
                            n[63 & a]
                        );
                    return o.join('');
                  }
                  (r['-'.charCodeAt(0)] = 62), (r['_'.charCodeAt(0)] = 63);
                },
                {}
              ],
              5: [
                function(t, e, i) {
                  'use strict';
                  e.exports = {
                    createLink: function(t, e) {
                      var i =
                          document.head ||
                          document.getElementsByTagName('head')[0],
                        n = document.createElement('link');
                      (n.href = t), (n.rel = 'stylesheet');
                      for (var r in e)
                        if (e.hasOwnProperty(r)) {
                          var a = e[r];
                          n.setAttribute('data-' + r, a);
                        }
                      i.appendChild(n);
                    },
                    createStyle: function(t, e) {
                      var i =
                          document.head ||
                          document.getElementsByTagName('head')[0],
                        n = document.createElement('style');
                      n.type = 'text/css';
                      for (var r in e)
                        if (e.hasOwnProperty(r)) {
                          var a = e[r];
                          n.setAttribute('data-' + r, a);
                        }
                      n.sheet
                        ? ((n.innerHTML = t),
                          (n.sheet.cssText = t),
                          i.appendChild(n))
                        : n.styleSheet
                          ? (i.appendChild(n), (n.styleSheet.cssText = t))
                          : (n.appendChild(document.createTextNode(t)),
                            i.appendChild(n));
                    }
                  };
                },
                {}
              ],
              6: [
                function(t, e, i) {
                  var n,
                    r,
                    a = (e.exports = {});
                  function o() {
                    throw new Error('setTimeout has not been defined');
                  }
                  function s() {
                    throw new Error('clearTimeout has not been defined');
                  }
                  function c(t) {
                    if (n === setTimeout) return setTimeout(t, 0);
                    if ((n === o || !n) && setTimeout)
                      return (n = setTimeout), setTimeout(t, 0);
                    try {
                      return n(t, 0);
                    } catch (e) {
                      try {
                        return n.call(null, t, 0);
                      } catch (e) {
                        return n.call(this, t, 0);
                      }
                    }
                  }
                  !(function() {
                    try {
                      n = 'function' == typeof setTimeout ? setTimeout : o;
                    } catch (t) {
                      n = o;
                    }
                    try {
                      r = 'function' == typeof clearTimeout ? clearTimeout : s;
                    } catch (t) {
                      r = s;
                    }
                  })();
                  var u,
                    l = [],
                    h = !1,
                    d = -1;
                  function p() {
                    h &&
                      u &&
                      ((h = !1),
                      u.length ? (l = u.concat(l)) : (d = -1),
                      l.length && f());
                  }
                  function f() {
                    if (!h) {
                      var t = c(p);
                      h = !0;
                      for (var e = l.length; e; ) {
                        for (u = l, l = []; ++d < e; ) u && u[d].run();
                        (d = -1), (e = l.length);
                      }
                      (u = null),
                        (h = !1),
                        (function(t) {
                          if (r === clearTimeout) return clearTimeout(t);
                          if ((r === s || !r) && clearTimeout)
                            return (r = clearTimeout), clearTimeout(t);
                          try {
                            r(t);
                          } catch (e) {
                            try {
                              return r.call(null, t);
                            } catch (e) {
                              return r.call(this, t);
                            }
                          }
                        })(t);
                    }
                  }
                  function m(t, e) {
                    (this.fun = t), (this.array = e);
                  }
                  function g() {}
                  (a.nextTick = function(t) {
                    var e = new Array(arguments.length - 1);
                    if (arguments.length > 1)
                      for (var i = 1; i < arguments.length; i++)
                        e[i - 1] = arguments[i];
                    l.push(new m(t, e)), 1 !== l.length || h || c(f);
                  }),
                    (m.prototype.run = function() {
                      this.fun.apply(null, this.array);
                    }),
                    (a.title = 'browser'),
                    (a.browser = !0),
                    (a.env = {}),
                    (a.argv = []),
                    (a.version = ''),
                    (a.versions = {}),
                    (a.on = g),
                    (a.addListener = g),
                    (a.once = g),
                    (a.off = g),
                    (a.removeListener = g),
                    (a.removeAllListeners = g),
                    (a.emit = g),
                    (a.prependListener = g),
                    (a.prependOnceListener = g),
                    (a.listeners = function(t) {
                      return [];
                    }),
                    (a.binding = function(t) {
                      throw new Error('process.binding is not supported');
                    }),
                    (a.cwd = function() {
                      return '/';
                    }),
                    (a.chdir = function(t) {
                      throw new Error('process.chdir is not supported');
                    }),
                    (a.umask = function() {
                      return 0;
                    });
                },
                {}
              ],
              7: [
                function(t, e, i) {
                  var n = t('buffer').Buffer;
                  e.exports = function(t, e) {
                    if (n.isBuffer(t) && n.isBuffer(e)) {
                      if ('function' == typeof t.equals) return t.equals(e);
                      if (t.length !== e.length) return !1;
                      for (var i = 0; i < t.length; i++)
                        if (t[i] !== e[i]) return !1;
                      return !0;
                    }
                  };
                },
                { buffer: 8 }
              ],
              8: [
                function(e, i, n) {
                  (function(t) {
                    'use strict';
                    var i = e('base64-js'),
                      r = e('ieee754'),
                      a = e('isarray');
                    function o() {
                      return c.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
                    }
                    function s(t, e) {
                      if (o() < e)
                        throw new RangeError('Invalid typed array length');
                      return (
                        c.TYPED_ARRAY_SUPPORT
                          ? ((t = new Uint8Array(e)).__proto__ = c.prototype)
                          : (null === t && (t = new c(e)), (t.length = e)),
                        t
                      );
                    }
                    function c(t, e, i) {
                      if (!(c.TYPED_ARRAY_SUPPORT || this instanceof c))
                        return new c(t, e, i);
                      if ('number' == typeof t) {
                        if ('string' == typeof e)
                          throw new Error(
                            'If encoding is specified then the first argument must be a string'
                          );
                        return h(this, t);
                      }
                      return u(this, t, e, i);
                    }
                    function u(t, e, i, n) {
                      if ('number' == typeof e)
                        throw new TypeError(
                          '"value" argument must not be a number'
                        );
                      return 'undefined' != typeof ArrayBuffer &&
                        e instanceof ArrayBuffer
                        ? (function(t, e, i, n) {
                            if ((e.byteLength, i < 0 || e.byteLength < i))
                              throw new RangeError("'offset' is out of bounds");
                            if (e.byteLength < i + (n || 0))
                              throw new RangeError("'length' is out of bounds");
                            e =
                              void 0 === i && void 0 === n
                                ? new Uint8Array(e)
                                : void 0 === n
                                  ? new Uint8Array(e, i)
                                  : new Uint8Array(e, i, n);
                            c.TYPED_ARRAY_SUPPORT
                              ? ((t = e).__proto__ = c.prototype)
                              : (t = d(t, e));
                            return t;
                          })(t, e, i, n)
                        : 'string' == typeof e
                          ? (function(t, e, i) {
                              ('string' == typeof i && '' !== i) ||
                                (i = 'utf8');
                              if (!c.isEncoding(i))
                                throw new TypeError(
                                  '"encoding" must be a valid string encoding'
                                );
                              var n = 0 | f(e, i),
                                r = (t = s(t, n)).write(e, i);
                              r !== n && (t = t.slice(0, r));
                              return t;
                            })(t, e, i)
                          : (function(t, e) {
                              if (c.isBuffer(e)) {
                                var i = 0 | p(e.length);
                                return 0 === (t = s(t, i)).length
                                  ? t
                                  : (e.copy(t, 0, 0, i), t);
                              }
                              if (e) {
                                if (
                                  ('undefined' != typeof ArrayBuffer &&
                                    e.buffer instanceof ArrayBuffer) ||
                                  'length' in e
                                )
                                  return 'number' != typeof e.length ||
                                    (n = e.length) != n
                                    ? s(t, 0)
                                    : d(t, e);
                                if ('Buffer' === e.type && a(e.data))
                                  return d(t, e.data);
                              }
                              var n;
                              throw new TypeError(
                                'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'
                              );
                            })(t, e);
                    }
                    function l(t) {
                      if ('number' != typeof t)
                        throw new TypeError('"size" argument must be a number');
                      if (t < 0)
                        throw new RangeError(
                          '"size" argument must not be negative'
                        );
                    }
                    function h(t, e) {
                      if (
                        (l(e),
                        (t = s(t, e < 0 ? 0 : 0 | p(e))),
                        !c.TYPED_ARRAY_SUPPORT)
                      )
                        for (var i = 0; i < e; ++i) t[i] = 0;
                      return t;
                    }
                    function d(t, e) {
                      var i = e.length < 0 ? 0 : 0 | p(e.length);
                      t = s(t, i);
                      for (var n = 0; n < i; n += 1) t[n] = 255 & e[n];
                      return t;
                    }
                    function p(t) {
                      if (t >= o())
                        throw new RangeError(
                          'Attempt to allocate Buffer larger than maximum size: 0x' +
                            o().toString(16) +
                            ' bytes'
                        );
                      return 0 | t;
                    }
                    function f(t, e) {
                      if (c.isBuffer(t)) return t.length;
                      if (
                        'undefined' != typeof ArrayBuffer &&
                        'function' == typeof ArrayBuffer.isView &&
                        (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)
                      )
                        return t.byteLength;
                      'string' != typeof t && (t = '' + t);
                      var i = t.length;
                      if (0 === i) return 0;
                      for (var n = !1; ; )
                        switch (e) {
                          case 'ascii':
                          case 'latin1':
                          case 'binary':
                            return i;
                          case 'utf8':
                          case 'utf-8':
                          case void 0:
                            return R(t).length;
                          case 'ucs2':
                          case 'ucs-2':
                          case 'utf16le':
                          case 'utf-16le':
                            return 2 * i;
                          case 'hex':
                            return i >>> 1;
                          case 'base64':
                            return k(t).length;
                          default:
                            if (n) return R(t).length;
                            (e = ('' + e).toLowerCase()), (n = !0);
                        }
                    }
                    function m(t, e, i) {
                      var n = t[e];
                      (t[e] = t[i]), (t[i] = n);
                    }
                    function g(t, e, i, n, r) {
                      if (0 === t.length) return -1;
                      if (
                        ('string' == typeof i
                          ? ((n = i), (i = 0))
                          : i > 2147483647
                            ? (i = 2147483647)
                            : i < -2147483648 && (i = -2147483648),
                        (i = +i),
                        isNaN(i) && (i = r ? 0 : t.length - 1),
                        i < 0 && (i = t.length + i),
                        i >= t.length)
                      ) {
                        if (r) return -1;
                        i = t.length - 1;
                      } else if (i < 0) {
                        if (!r) return -1;
                        i = 0;
                      }
                      if (
                        ('string' == typeof e && (e = c.from(e, n)),
                        c.isBuffer(e))
                      )
                        return 0 === e.length ? -1 : v(t, e, i, n, r);
                      if ('number' == typeof e)
                        return (
                          (e &= 255),
                          c.TYPED_ARRAY_SUPPORT &&
                          'function' == typeof Uint8Array.prototype.indexOf
                            ? r
                              ? Uint8Array.prototype.indexOf.call(t, e, i)
                              : Uint8Array.prototype.lastIndexOf.call(t, e, i)
                            : v(t, [e], i, n, r)
                        );
                      throw new TypeError(
                        'val must be string, number or Buffer'
                      );
                    }
                    function v(t, e, i, n, r) {
                      var a,
                        o = 1,
                        s = t.length,
                        c = e.length;
                      if (
                        void 0 !== n &&
                        ('ucs2' === (n = String(n).toLowerCase()) ||
                          'ucs-2' === n ||
                          'utf16le' === n ||
                          'utf-16le' === n)
                      ) {
                        if (t.length < 2 || e.length < 2) return -1;
                        (o = 2), (s /= 2), (c /= 2), (i /= 2);
                      }
                      function u(t, e) {
                        return 1 === o ? t[e] : t.readUInt16BE(e * o);
                      }
                      if (r) {
                        var l = -1;
                        for (a = i; a < s; a++)
                          if (u(t, a) === u(e, -1 === l ? 0 : a - l)) {
                            if ((-1 === l && (l = a), a - l + 1 === c))
                              return l * o;
                          } else -1 !== l && (a -= a - l), (l = -1);
                      } else
                        for (i + c > s && (i = s - c), a = i; a >= 0; a--) {
                          for (var h = !0, d = 0; d < c; d++)
                            if (u(t, a + d) !== u(e, d)) {
                              h = !1;
                              break;
                            }
                          if (h) return a;
                        }
                      return -1;
                    }
                    function y(t, e, i, n) {
                      i = Number(i) || 0;
                      var r = t.length - i;
                      n ? (n = Number(n)) > r && (n = r) : (n = r);
                      var a = e.length;
                      if (a % 2 != 0) throw new TypeError('Invalid hex string');
                      n > a / 2 && (n = a / 2);
                      for (var o = 0; o < n; ++o) {
                        var s = parseInt(e.substr(2 * o, 2), 16);
                        if (isNaN(s)) return o;
                        t[i + o] = s;
                      }
                      return o;
                    }
                    function M(t, e, i, n) {
                      return U(
                        (function(t) {
                          for (var e = [], i = 0; i < t.length; ++i)
                            e.push(255 & t.charCodeAt(i));
                          return e;
                        })(e),
                        t,
                        i,
                        n
                      );
                    }
                    function w(t, e, n) {
                      return 0 === e && n === t.length
                        ? i.fromByteArray(t)
                        : i.fromByteArray(t.slice(e, n));
                    }
                    function x(t, e, i) {
                      i = Math.min(t.length, i);
                      for (var n = [], r = e; r < i; ) {
                        var a,
                          o,
                          s,
                          c,
                          u = t[r],
                          l = null,
                          h = u > 239 ? 4 : u > 223 ? 3 : u > 191 ? 2 : 1;
                        if (r + h <= i)
                          switch (h) {
                            case 1:
                              u < 128 && (l = u);
                              break;
                            case 2:
                              128 == (192 & (a = t[r + 1])) &&
                                (c = ((31 & u) << 6) | (63 & a)) > 127 &&
                                (l = c);
                              break;
                            case 3:
                              (a = t[r + 1]),
                                (o = t[r + 2]),
                                128 == (192 & a) &&
                                  128 == (192 & o) &&
                                  (c =
                                    ((15 & u) << 12) |
                                    ((63 & a) << 6) |
                                    (63 & o)) > 2047 &&
                                  (c < 55296 || c > 57343) &&
                                  (l = c);
                              break;
                            case 4:
                              (a = t[r + 1]),
                                (o = t[r + 2]),
                                (s = t[r + 3]),
                                128 == (192 & a) &&
                                  128 == (192 & o) &&
                                  128 == (192 & s) &&
                                  (c =
                                    ((15 & u) << 18) |
                                    ((63 & a) << 12) |
                                    ((63 & o) << 6) |
                                    (63 & s)) > 65535 &&
                                  c < 1114112 &&
                                  (l = c);
                          }
                        null === l
                          ? ((l = 65533), (h = 1))
                          : l > 65535 &&
                            ((l -= 65536),
                            n.push(((l >>> 10) & 1023) | 55296),
                            (l = 56320 | (1023 & l))),
                          n.push(l),
                          (r += h);
                      }
                      return (function(t) {
                        var e = t.length;
                        if (e <= A) return String.fromCharCode.apply(String, t);
                        var i = '',
                          n = 0;
                        for (; n < e; )
                          i += String.fromCharCode.apply(
                            String,
                            t.slice(n, (n += A))
                          );
                        return i;
                      })(n);
                    }
                    (n.Buffer = c),
                      (n.SlowBuffer = function(t) {
                        +t != t && (t = 0);
                        return c.alloc(+t);
                      }),
                      (n.INSPECT_MAX_BYTES = 50),
                      (c.TYPED_ARRAY_SUPPORT =
                        void 0 !== t.TYPED_ARRAY_SUPPORT
                          ? t.TYPED_ARRAY_SUPPORT
                          : (function() {
                              try {
                                var t = new Uint8Array(1);
                                return (
                                  (t.__proto__ = {
                                    __proto__: Uint8Array.prototype,
                                    foo: function() {
                                      return 42;
                                    }
                                  }),
                                  42 === t.foo() &&
                                    'function' == typeof t.subarray &&
                                    0 === t.subarray(1, 1).byteLength
                                );
                              } catch (t) {
                                return !1;
                              }
                            })()),
                      (n.kMaxLength = o()),
                      (c.poolSize = 8192),
                      (c._augment = function(t) {
                        return (t.__proto__ = c.prototype), t;
                      }),
                      (c.from = function(t, e, i) {
                        return u(null, t, e, i);
                      }),
                      c.TYPED_ARRAY_SUPPORT &&
                        ((c.prototype.__proto__ = Uint8Array.prototype),
                        (c.__proto__ = Uint8Array),
                        'undefined' != typeof Symbol &&
                          Symbol.species &&
                          c[Symbol.species] === c &&
                          Object.defineProperty(c, Symbol.species, {
                            value: null,
                            configurable: !0
                          })),
                      (c.alloc = function(t, e, i) {
                        return (
                          (n = null),
                          (a = e),
                          (o = i),
                          l((r = t)),
                          r <= 0
                            ? s(n, r)
                            : void 0 !== a
                              ? 'string' == typeof o
                                ? s(n, r).fill(a, o)
                                : s(n, r).fill(a)
                              : s(n, r)
                        );
                        var n, r, a, o;
                      }),
                      (c.allocUnsafe = function(t) {
                        return h(null, t);
                      }),
                      (c.allocUnsafeSlow = function(t) {
                        return h(null, t);
                      }),
                      (c.isBuffer = function(t) {
                        return !(null == t || !t._isBuffer);
                      }),
                      (c.compare = function(t, e) {
                        if (!c.isBuffer(t) || !c.isBuffer(e))
                          throw new TypeError('Arguments must be Buffers');
                        if (t === e) return 0;
                        for (
                          var i = t.length,
                            n = e.length,
                            r = 0,
                            a = Math.min(i, n);
                          r < a;
                          ++r
                        )
                          if (t[r] !== e[r]) {
                            (i = t[r]), (n = e[r]);
                            break;
                          }
                        return i < n ? -1 : n < i ? 1 : 0;
                      }),
                      (c.isEncoding = function(t) {
                        switch (String(t).toLowerCase()) {
                          case 'hex':
                          case 'utf8':
                          case 'utf-8':
                          case 'ascii':
                          case 'latin1':
                          case 'binary':
                          case 'base64':
                          case 'ucs2':
                          case 'ucs-2':
                          case 'utf16le':
                          case 'utf-16le':
                            return !0;
                          default:
                            return !1;
                        }
                      }),
                      (c.concat = function(t, e) {
                        if (!a(t))
                          throw new TypeError(
                            '"list" argument must be an Array of Buffers'
                          );
                        if (0 === t.length) return c.alloc(0);
                        var i;
                        if (void 0 === e)
                          for (e = 0, i = 0; i < t.length; ++i)
                            e += t[i].length;
                        var n = c.allocUnsafe(e),
                          r = 0;
                        for (i = 0; i < t.length; ++i) {
                          var o = t[i];
                          if (!c.isBuffer(o))
                            throw new TypeError(
                              '"list" argument must be an Array of Buffers'
                            );
                          o.copy(n, r), (r += o.length);
                        }
                        return n;
                      }),
                      (c.byteLength = f),
                      (c.prototype._isBuffer = !0),
                      (c.prototype.swap16 = function() {
                        var t = this.length;
                        if (t % 2 != 0)
                          throw new RangeError(
                            'Buffer size must be a multiple of 16-bits'
                          );
                        for (var e = 0; e < t; e += 2) m(this, e, e + 1);
                        return this;
                      }),
                      (c.prototype.swap32 = function() {
                        var t = this.length;
                        if (t % 4 != 0)
                          throw new RangeError(
                            'Buffer size must be a multiple of 32-bits'
                          );
                        for (var e = 0; e < t; e += 4)
                          m(this, e, e + 3), m(this, e + 1, e + 2);
                        return this;
                      }),
                      (c.prototype.swap64 = function() {
                        var t = this.length;
                        if (t % 8 != 0)
                          throw new RangeError(
                            'Buffer size must be a multiple of 64-bits'
                          );
                        for (var e = 0; e < t; e += 8)
                          m(this, e, e + 7),
                            m(this, e + 1, e + 6),
                            m(this, e + 2, e + 5),
                            m(this, e + 3, e + 4);
                        return this;
                      }),
                      (c.prototype.toString = function() {
                        var t = 0 | this.length;
                        return 0 === t
                          ? ''
                          : 0 === arguments.length
                            ? x(this, 0, t)
                            : function(t, e, i) {
                                var n = !1;
                                if (
                                  ((void 0 === e || e < 0) && (e = 0),
                                  e > this.length)
                                )
                                  return '';
                                if (
                                  ((void 0 === i || i > this.length) &&
                                    (i = this.length),
                                  i <= 0)
                                )
                                  return '';
                                if ((i >>>= 0) <= (e >>>= 0)) return '';
                                for (t || (t = 'utf8'); ; )
                                  switch (t) {
                                    case 'hex':
                                      return T(this, e, i);
                                    case 'utf8':
                                    case 'utf-8':
                                      return x(this, e, i);
                                    case 'ascii':
                                      return E(this, e, i);
                                    case 'latin1':
                                    case 'binary':
                                      return b(this, e, i);
                                    case 'base64':
                                      return w(this, e, i);
                                    case 'ucs2':
                                    case 'ucs-2':
                                    case 'utf16le':
                                    case 'utf-16le':
                                      return L(this, e, i);
                                    default:
                                      if (n)
                                        throw new TypeError(
                                          'Unknown encoding: ' + t
                                        );
                                      (t = (t + '').toLowerCase()), (n = !0);
                                  }
                              }.apply(this, arguments);
                      }),
                      (c.prototype.equals = function(t) {
                        if (!c.isBuffer(t))
                          throw new TypeError('Argument must be a Buffer');
                        return this === t || 0 === c.compare(this, t);
                      }),
                      (c.prototype.inspect = function() {
                        var t = '',
                          e = n.INSPECT_MAX_BYTES;
                        return (
                          this.length > 0 &&
                            ((t = this.toString('hex', 0, e)
                              .match(/.{2}/g)
                              .join(' ')),
                            this.length > e && (t += ' ... ')),
                          '<Buffer ' + t + '>'
                        );
                      }),
                      (c.prototype.compare = function(t, e, i, n, r) {
                        if (!c.isBuffer(t))
                          throw new TypeError('Argument must be a Buffer');
                        if (
                          (void 0 === e && (e = 0),
                          void 0 === i && (i = t ? t.length : 0),
                          void 0 === n && (n = 0),
                          void 0 === r && (r = this.length),
                          e < 0 || i > t.length || n < 0 || r > this.length)
                        )
                          throw new RangeError('out of range index');
                        if (n >= r && e >= i) return 0;
                        if (n >= r) return -1;
                        if (e >= i) return 1;
                        if (
                          ((e >>>= 0),
                          (i >>>= 0),
                          (n >>>= 0),
                          (r >>>= 0),
                          this === t)
                        )
                          return 0;
                        for (
                          var a = r - n,
                            o = i - e,
                            s = Math.min(a, o),
                            u = this.slice(n, r),
                            l = t.slice(e, i),
                            h = 0;
                          h < s;
                          ++h
                        )
                          if (u[h] !== l[h]) {
                            (a = u[h]), (o = l[h]);
                            break;
                          }
                        return a < o ? -1 : o < a ? 1 : 0;
                      }),
                      (c.prototype.includes = function(t, e, i) {
                        return -1 !== this.indexOf(t, e, i);
                      }),
                      (c.prototype.indexOf = function(t, e, i) {
                        return g(this, t, e, i, !0);
                      }),
                      (c.prototype.lastIndexOf = function(t, e, i) {
                        return g(this, t, e, i, !1);
                      }),
                      (c.prototype.write = function(t, e, i, n) {
                        if (void 0 === e)
                          (n = 'utf8'), (i = this.length), (e = 0);
                        else if (void 0 === i && 'string' == typeof e)
                          (n = e), (i = this.length), (e = 0);
                        else {
                          if (!isFinite(e))
                            throw new Error(
                              'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                            );
                          (e |= 0),
                            isFinite(i)
                              ? ((i |= 0), void 0 === n && (n = 'utf8'))
                              : ((n = i), (i = void 0));
                        }
                        var r = this.length - e;
                        if (
                          ((void 0 === i || i > r) && (i = r),
                          (t.length > 0 && (i < 0 || e < 0)) || e > this.length)
                        )
                          throw new RangeError(
                            'Attempt to write outside buffer bounds'
                          );
                        n || (n = 'utf8');
                        for (var a, o, s, c, u, l, h, d, p, f = !1; ; )
                          switch (n) {
                            case 'hex':
                              return y(this, t, e, i);
                            case 'utf8':
                            case 'utf-8':
                              return (
                                (d = e),
                                (p = i),
                                U(R(t, (h = this).length - d), h, d, p)
                              );
                            case 'ascii':
                              return M(this, t, e, i);
                            case 'latin1':
                            case 'binary':
                              return M(this, t, e, i);
                            case 'base64':
                              return (
                                (c = this), (u = e), (l = i), U(k(t), c, u, l)
                              );
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                              return (
                                (o = e),
                                (s = i),
                                U(
                                  (function(t, e) {
                                    for (
                                      var i, n, r, a = [], o = 0;
                                      o < t.length && !((e -= 2) < 0);
                                      ++o
                                    )
                                      (i = t.charCodeAt(o)),
                                        (n = i >> 8),
                                        (r = i % 256),
                                        a.push(r),
                                        a.push(n);
                                    return a;
                                  })(t, (a = this).length - o),
                                  a,
                                  o,
                                  s
                                )
                              );
                            default:
                              if (f)
                                throw new TypeError('Unknown encoding: ' + n);
                              (n = ('' + n).toLowerCase()), (f = !0);
                          }
                      }),
                      (c.prototype.toJSON = function() {
                        return {
                          type: 'Buffer',
                          data: Array.prototype.slice.call(this._arr || this, 0)
                        };
                      });
                    var A = 4096;
                    function E(t, e, i) {
                      var n = '';
                      i = Math.min(t.length, i);
                      for (var r = e; r < i; ++r)
                        n += String.fromCharCode(127 & t[r]);
                      return n;
                    }
                    function b(t, e, i) {
                      var n = '';
                      i = Math.min(t.length, i);
                      for (var r = e; r < i; ++r)
                        n += String.fromCharCode(t[r]);
                      return n;
                    }
                    function T(t, e, i) {
                      var n = t.length;
                      (!e || e < 0) && (e = 0),
                        (!i || i < 0 || i > n) && (i = n);
                      for (var r = '', a = e; a < i; ++a) r += z(t[a]);
                      return r;
                    }
                    function L(t, e, i) {
                      for (
                        var n = t.slice(e, i), r = '', a = 0;
                        a < n.length;
                        a += 2
                      )
                        r += String.fromCharCode(n[a] + 256 * n[a + 1]);
                      return r;
                    }
                    function N(t, e, i) {
                      if (t % 1 != 0 || t < 0)
                        throw new RangeError('offset is not uint');
                      if (t + e > i)
                        throw new RangeError(
                          'Trying to access beyond buffer length'
                        );
                    }
                    function D(t, e, i, n, r, a) {
                      if (!c.isBuffer(t))
                        throw new TypeError(
                          '"buffer" argument must be a Buffer instance'
                        );
                      if (e > r || e < a)
                        throw new RangeError(
                          '"value" argument is out of bounds'
                        );
                      if (i + n > t.length)
                        throw new RangeError('Index out of range');
                    }
                    function C(t, e, i, n) {
                      e < 0 && (e = 65535 + e + 1);
                      for (var r = 0, a = Math.min(t.length - i, 2); r < a; ++r)
                        t[i + r] =
                          (e & (255 << (8 * (n ? r : 1 - r)))) >>>
                          (8 * (n ? r : 1 - r));
                    }
                    function S(t, e, i, n) {
                      e < 0 && (e = 4294967295 + e + 1);
                      for (var r = 0, a = Math.min(t.length - i, 4); r < a; ++r)
                        t[i + r] = (e >>> (8 * (n ? r : 3 - r))) & 255;
                    }
                    function I(t, e, i, n, r, a) {
                      if (i + n > t.length)
                        throw new RangeError('Index out of range');
                      if (i < 0) throw new RangeError('Index out of range');
                    }
                    function _(t, e, i, n, a) {
                      return (
                        a || I(t, 0, i, 4), r.write(t, e, i, n, 23, 4), i + 4
                      );
                    }
                    function j(t, e, i, n, a) {
                      return (
                        a || I(t, 0, i, 8), r.write(t, e, i, n, 52, 8), i + 8
                      );
                    }
                    (c.prototype.slice = function(t, e) {
                      var i,
                        n = this.length;
                      if (
                        ((t = ~~t),
                        (e = void 0 === e ? n : ~~e),
                        t < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n),
                        e < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n),
                        e < t && (e = t),
                        c.TYPED_ARRAY_SUPPORT)
                      )
                        (i = this.subarray(t, e)).__proto__ = c.prototype;
                      else {
                        var r = e - t;
                        i = new c(r, void 0);
                        for (var a = 0; a < r; ++a) i[a] = this[a + t];
                      }
                      return i;
                    }),
                      (c.prototype.readUIntLE = function(t, e, i) {
                        (t |= 0), (e |= 0), i || N(t, e, this.length);
                        for (
                          var n = this[t], r = 1, a = 0;
                          ++a < e && (r *= 256);

                        )
                          n += this[t + a] * r;
                        return n;
                      }),
                      (c.prototype.readUIntBE = function(t, e, i) {
                        (t |= 0), (e |= 0), i || N(t, e, this.length);
                        for (
                          var n = this[t + --e], r = 1;
                          e > 0 && (r *= 256);

                        )
                          n += this[t + --e] * r;
                        return n;
                      }),
                      (c.prototype.readUInt8 = function(t, e) {
                        return e || N(t, 1, this.length), this[t];
                      }),
                      (c.prototype.readUInt16LE = function(t, e) {
                        return (
                          e || N(t, 2, this.length),
                          this[t] | (this[t + 1] << 8)
                        );
                      }),
                      (c.prototype.readUInt16BE = function(t, e) {
                        return (
                          e || N(t, 2, this.length),
                          (this[t] << 8) | this[t + 1]
                        );
                      }),
                      (c.prototype.readUInt32LE = function(t, e) {
                        return (
                          e || N(t, 4, this.length),
                          (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) +
                            16777216 * this[t + 3]
                        );
                      }),
                      (c.prototype.readUInt32BE = function(t, e) {
                        return (
                          e || N(t, 4, this.length),
                          16777216 * this[t] +
                            ((this[t + 1] << 16) |
                              (this[t + 2] << 8) |
                              this[t + 3])
                        );
                      }),
                      (c.prototype.readIntLE = function(t, e, i) {
                        (t |= 0), (e |= 0), i || N(t, e, this.length);
                        for (
                          var n = this[t], r = 1, a = 0;
                          ++a < e && (r *= 256);

                        )
                          n += this[t + a] * r;
                        return n >= (r *= 128) && (n -= Math.pow(2, 8 * e)), n;
                      }),
                      (c.prototype.readIntBE = function(t, e, i) {
                        (t |= 0), (e |= 0), i || N(t, e, this.length);
                        for (
                          var n = e, r = 1, a = this[t + --n];
                          n > 0 && (r *= 256);

                        )
                          a += this[t + --n] * r;
                        return a >= (r *= 128) && (a -= Math.pow(2, 8 * e)), a;
                      }),
                      (c.prototype.readInt8 = function(t, e) {
                        return (
                          e || N(t, 1, this.length),
                          128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
                        );
                      }),
                      (c.prototype.readInt16LE = function(t, e) {
                        e || N(t, 2, this.length);
                        var i = this[t] | (this[t + 1] << 8);
                        return 32768 & i ? 4294901760 | i : i;
                      }),
                      (c.prototype.readInt16BE = function(t, e) {
                        e || N(t, 2, this.length);
                        var i = this[t + 1] | (this[t] << 8);
                        return 32768 & i ? 4294901760 | i : i;
                      }),
                      (c.prototype.readInt32LE = function(t, e) {
                        return (
                          e || N(t, 4, this.length),
                          this[t] |
                            (this[t + 1] << 8) |
                            (this[t + 2] << 16) |
                            (this[t + 3] << 24)
                        );
                      }),
                      (c.prototype.readInt32BE = function(t, e) {
                        return (
                          e || N(t, 4, this.length),
                          (this[t] << 24) |
                            (this[t + 1] << 16) |
                            (this[t + 2] << 8) |
                            this[t + 3]
                        );
                      }),
                      (c.prototype.readFloatLE = function(t, e) {
                        return (
                          e || N(t, 4, this.length), r.read(this, t, !0, 23, 4)
                        );
                      }),
                      (c.prototype.readFloatBE = function(t, e) {
                        return (
                          e || N(t, 4, this.length), r.read(this, t, !1, 23, 4)
                        );
                      }),
                      (c.prototype.readDoubleLE = function(t, e) {
                        return (
                          e || N(t, 8, this.length), r.read(this, t, !0, 52, 8)
                        );
                      }),
                      (c.prototype.readDoubleBE = function(t, e) {
                        return (
                          e || N(t, 8, this.length), r.read(this, t, !1, 52, 8)
                        );
                      }),
                      (c.prototype.writeUIntLE = function(t, e, i, n) {
                        ((t = +t), (e |= 0), (i |= 0), n) ||
                          D(this, t, e, i, Math.pow(2, 8 * i) - 1, 0);
                        var r = 1,
                          a = 0;
                        for (this[e] = 255 & t; ++a < i && (r *= 256); )
                          this[e + a] = (t / r) & 255;
                        return e + i;
                      }),
                      (c.prototype.writeUIntBE = function(t, e, i, n) {
                        ((t = +t), (e |= 0), (i |= 0), n) ||
                          D(this, t, e, i, Math.pow(2, 8 * i) - 1, 0);
                        var r = i - 1,
                          a = 1;
                        for (this[e + r] = 255 & t; --r >= 0 && (a *= 256); )
                          this[e + r] = (t / a) & 255;
                        return e + i;
                      }),
                      (c.prototype.writeUInt8 = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 1, 255, 0),
                          c.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
                          (this[e] = 255 & t),
                          e + 1
                        );
                      }),
                      (c.prototype.writeUInt16LE = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 2, 65535, 0),
                          c.TYPED_ARRAY_SUPPORT
                            ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8))
                            : C(this, t, e, !0),
                          e + 2
                        );
                      }),
                      (c.prototype.writeUInt16BE = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 2, 65535, 0),
                          c.TYPED_ARRAY_SUPPORT
                            ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t))
                            : C(this, t, e, !1),
                          e + 2
                        );
                      }),
                      (c.prototype.writeUInt32LE = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 4, 4294967295, 0),
                          c.TYPED_ARRAY_SUPPORT
                            ? ((this[e + 3] = t >>> 24),
                              (this[e + 2] = t >>> 16),
                              (this[e + 1] = t >>> 8),
                              (this[e] = 255 & t))
                            : S(this, t, e, !0),
                          e + 4
                        );
                      }),
                      (c.prototype.writeUInt32BE = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 4, 4294967295, 0),
                          c.TYPED_ARRAY_SUPPORT
                            ? ((this[e] = t >>> 24),
                              (this[e + 1] = t >>> 16),
                              (this[e + 2] = t >>> 8),
                              (this[e + 3] = 255 & t))
                            : S(this, t, e, !1),
                          e + 4
                        );
                      }),
                      (c.prototype.writeIntLE = function(t, e, i, n) {
                        if (((t = +t), (e |= 0), !n)) {
                          var r = Math.pow(2, 8 * i - 1);
                          D(this, t, e, i, r - 1, -r);
                        }
                        var a = 0,
                          o = 1,
                          s = 0;
                        for (this[e] = 255 & t; ++a < i && (o *= 256); )
                          t < 0 && 0 === s && 0 !== this[e + a - 1] && (s = 1),
                            (this[e + a] = (((t / o) >> 0) - s) & 255);
                        return e + i;
                      }),
                      (c.prototype.writeIntBE = function(t, e, i, n) {
                        if (((t = +t), (e |= 0), !n)) {
                          var r = Math.pow(2, 8 * i - 1);
                          D(this, t, e, i, r - 1, -r);
                        }
                        var a = i - 1,
                          o = 1,
                          s = 0;
                        for (this[e + a] = 255 & t; --a >= 0 && (o *= 256); )
                          t < 0 && 0 === s && 0 !== this[e + a + 1] && (s = 1),
                            (this[e + a] = (((t / o) >> 0) - s) & 255);
                        return e + i;
                      }),
                      (c.prototype.writeInt8 = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 1, 127, -128),
                          c.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
                          t < 0 && (t = 255 + t + 1),
                          (this[e] = 255 & t),
                          e + 1
                        );
                      }),
                      (c.prototype.writeInt16LE = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 2, 32767, -32768),
                          c.TYPED_ARRAY_SUPPORT
                            ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8))
                            : C(this, t, e, !0),
                          e + 2
                        );
                      }),
                      (c.prototype.writeInt16BE = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 2, 32767, -32768),
                          c.TYPED_ARRAY_SUPPORT
                            ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t))
                            : C(this, t, e, !1),
                          e + 2
                        );
                      }),
                      (c.prototype.writeInt32LE = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 4, 2147483647, -2147483648),
                          c.TYPED_ARRAY_SUPPORT
                            ? ((this[e] = 255 & t),
                              (this[e + 1] = t >>> 8),
                              (this[e + 2] = t >>> 16),
                              (this[e + 3] = t >>> 24))
                            : S(this, t, e, !0),
                          e + 4
                        );
                      }),
                      (c.prototype.writeInt32BE = function(t, e, i) {
                        return (
                          (t = +t),
                          (e |= 0),
                          i || D(this, t, e, 4, 2147483647, -2147483648),
                          t < 0 && (t = 4294967295 + t + 1),
                          c.TYPED_ARRAY_SUPPORT
                            ? ((this[e] = t >>> 24),
                              (this[e + 1] = t >>> 16),
                              (this[e + 2] = t >>> 8),
                              (this[e + 3] = 255 & t))
                            : S(this, t, e, !1),
                          e + 4
                        );
                      }),
                      (c.prototype.writeFloatLE = function(t, e, i) {
                        return _(this, t, e, !0, i);
                      }),
                      (c.prototype.writeFloatBE = function(t, e, i) {
                        return _(this, t, e, !1, i);
                      }),
                      (c.prototype.writeDoubleLE = function(t, e, i) {
                        return j(this, t, e, !0, i);
                      }),
                      (c.prototype.writeDoubleBE = function(t, e, i) {
                        return j(this, t, e, !1, i);
                      }),
                      (c.prototype.copy = function(t, e, i, n) {
                        if (
                          (i || (i = 0),
                          n || 0 === n || (n = this.length),
                          e >= t.length && (e = t.length),
                          e || (e = 0),
                          n > 0 && n < i && (n = i),
                          n === i)
                        )
                          return 0;
                        if (0 === t.length || 0 === this.length) return 0;
                        if (e < 0)
                          throw new RangeError('targetStart out of bounds');
                        if (i < 0 || i >= this.length)
                          throw new RangeError('sourceStart out of bounds');
                        if (n < 0)
                          throw new RangeError('sourceEnd out of bounds');
                        n > this.length && (n = this.length),
                          t.length - e < n - i && (n = t.length - e + i);
                        var r,
                          a = n - i;
                        if (this === t && i < e && e < n)
                          for (r = a - 1; r >= 0; --r) t[r + e] = this[r + i];
                        else if (a < 1e3 || !c.TYPED_ARRAY_SUPPORT)
                          for (r = 0; r < a; ++r) t[r + e] = this[r + i];
                        else
                          Uint8Array.prototype.set.call(
                            t,
                            this.subarray(i, i + a),
                            e
                          );
                        return a;
                      }),
                      (c.prototype.fill = function(t, e, i, n) {
                        if ('string' == typeof t) {
                          if (
                            ('string' == typeof e
                              ? ((n = e), (e = 0), (i = this.length))
                              : 'string' == typeof i &&
                                ((n = i), (i = this.length)),
                            1 === t.length)
                          ) {
                            var r = t.charCodeAt(0);
                            r < 256 && (t = r);
                          }
                          if (void 0 !== n && 'string' != typeof n)
                            throw new TypeError('encoding must be a string');
                          if ('string' == typeof n && !c.isEncoding(n))
                            throw new TypeError('Unknown encoding: ' + n);
                        } else 'number' == typeof t && (t &= 255);
                        if (e < 0 || this.length < e || this.length < i)
                          throw new RangeError('Out of range index');
                        if (i <= e) return this;
                        var a;
                        if (
                          ((e >>>= 0),
                          (i = void 0 === i ? this.length : i >>> 0),
                          t || (t = 0),
                          'number' == typeof t)
                        )
                          for (a = e; a < i; ++a) this[a] = t;
                        else {
                          var o = c.isBuffer(t) ? t : R(new c(t, n).toString()),
                            s = o.length;
                          for (a = 0; a < i - e; ++a) this[a + e] = o[a % s];
                        }
                        return this;
                      });
                    var O = /[^+\/0-9A-Za-z-_]/g;
                    function z(t) {
                      return t < 16 ? '0' + t.toString(16) : t.toString(16);
                    }
                    function R(t, e) {
                      var i;
                      e = e || 1 / 0;
                      for (
                        var n = t.length, r = null, a = [], o = 0;
                        o < n;
                        ++o
                      ) {
                        if ((i = t.charCodeAt(o)) > 55295 && i < 57344) {
                          if (!r) {
                            if (i > 56319) {
                              (e -= 3) > -1 && a.push(239, 191, 189);
                              continue;
                            }
                            if (o + 1 === n) {
                              (e -= 3) > -1 && a.push(239, 191, 189);
                              continue;
                            }
                            r = i;
                            continue;
                          }
                          if (i < 56320) {
                            (e -= 3) > -1 && a.push(239, 191, 189), (r = i);
                            continue;
                          }
                          i = 65536 + (((r - 55296) << 10) | (i - 56320));
                        } else r && (e -= 3) > -1 && a.push(239, 191, 189);
                        if (((r = null), i < 128)) {
                          if ((e -= 1) < 0) break;
                          a.push(i);
                        } else if (i < 2048) {
                          if ((e -= 2) < 0) break;
                          a.push((i >> 6) | 192, (63 & i) | 128);
                        } else if (i < 65536) {
                          if ((e -= 3) < 0) break;
                          a.push(
                            (i >> 12) | 224,
                            ((i >> 6) & 63) | 128,
                            (63 & i) | 128
                          );
                        } else {
                          if (!(i < 1114112))
                            throw new Error('Invalid code point');
                          if ((e -= 4) < 0) break;
                          a.push(
                            (i >> 18) | 240,
                            ((i >> 12) & 63) | 128,
                            ((i >> 6) & 63) | 128,
                            (63 & i) | 128
                          );
                        }
                      }
                      return a;
                    }
                    function k(t) {
                      return i.toByteArray(
                        (function(t) {
                          var e;
                          if (
                            (t = ((e = t),
                            e.trim
                              ? e.trim()
                              : e.replace(/^\s+|\s+$/g, '')).replace(O, ''))
                              .length < 2
                          )
                            return '';
                          for (; t.length % 4 != 0; ) t += '=';
                          return t;
                        })(t)
                      );
                    }
                    function U(t, e, i, n) {
                      for (
                        var r = 0;
                        r < n && !(r + i >= e.length || r >= t.length);
                        ++r
                      )
                        e[r + i] = t[r];
                      return r;
                    }
                  }.call(
                    this,
                    void 0 !== t
                      ? t
                      : 'undefined' != typeof self
                        ? self
                        : 'undefined' != typeof window ? window : {}
                  ));
                },
                { 'base64-js': 4, ieee754: 18, isarray: 9 }
              ],
              9: [
                function(t, e, i) {
                  var n = {}.toString;
                  e.exports =
                    Array.isArray ||
                    function(t) {
                      return '[object Array]' == n.call(t);
                    };
                },
                {}
              ],
              10: [
                function(t, e, i) {
                  function n() {
                    var t;
                    try {
                      t = i.storage.debug;
                    } catch (t) {}
                    return t;
                  }
                  ((i = e.exports = t('./debug')).log = function() {
                    return (
                      'object' == typeof console &&
                      console.log &&
                      Function.prototype.apply.call(
                        console.log,
                        console,
                        arguments
                      )
                    );
                  }),
                    (i.formatArgs = function() {
                      var t = arguments,
                        e = this.useColors;
                      if (
                        ((t[0] =
                          (e ? '%c' : '') +
                          this.namespace +
                          (e ? ' %c' : ' ') +
                          t[0] +
                          (e ? '%c ' : ' ')),
                        !e)
                      )
                        return t;
                      var i = 'color: ' + this.color,
                        n = 0,
                        r = 0;
                      return (
                        (t = [t[0], i, 'color: inherit'].concat(
                          Array.prototype.slice.call(t, 1)
                        ))[0].replace(/%[a-z%]/g, function(t) {
                          '%%' !== t && '%c' === t && (r = ++n);
                        }),
                        t.splice(r, 0, i),
                        t
                      );
                    }),
                    (i.save = function(t) {
                      try {
                        null == t
                          ? i.storage.removeItem('debug')
                          : (i.storage.debug = t);
                      } catch (t) {}
                    }),
                    (i.load = n),
                    (i.useColors = function() {
                      return (
                        'WebkitAppearance' in document.documentElement.style ||
                        (window.console &&
                          (console.firebug ||
                            (console.exception && console.table))) ||
                        (navigator.userAgent
                          .toLowerCase()
                          .match(/firefox\/(\d+)/) &&
                          parseInt(RegExp.$1, 10) >= 31)
                      );
                    }),
                    (i.storage =
                      'undefined' != typeof chrome && void 0 !== chrome.storage
                        ? chrome.storage.local
                        : (function() {
                            try {
                              return window.localStorage;
                            } catch (t) {}
                          })()),
                    (i.colors = [
                      'lightseagreen',
                      'forestgreen',
                      'goldenrod',
                      'dodgerblue',
                      'darkorchid',
                      'crimson'
                    ]),
                    (i.formatters.j = function(t) {
                      return JSON.stringify(t);
                    }),
                    i.enable(n());
                },
                { './debug': 11 }
              ],
              11: [
                function(t, e, i) {
                  ((i = e.exports = function(t) {
                    function e() {}
                    function r() {
                      var t = r;
                      null == t.useColors && (t.useColors = i.useColors()),
                        null == t.color &&
                          t.useColors &&
                          (t.color = i.colors[n++ % i.colors.length]);
                      var e = Array.prototype.slice.call(arguments);
                      (e[0] = i.coerce(e[0])),
                        'string' != typeof e[0] && (e = ['%o'].concat(e));
                      var a = 0;
                      (e[0] = e[0].replace(/%([a-z%])/g, function(n, r) {
                        if ('%%' === n) return n;
                        a++;
                        var o = i.formatters[r];
                        if ('function' == typeof o) {
                          var s = e[a];
                          (n = o.call(t, s)), e.splice(a, 1), a--;
                        }
                        return n;
                      })),
                        'function' == typeof i.formatArgs &&
                          (e = i.formatArgs.apply(t, e));
                      var o = r.log || i.log || void 0;
                      o.apply(t, e);
                    }
                    (e.enabled = !1), (r.enabled = !0);
                    var a = i.enabled(t) ? r : e;
                    return (a.namespace = t), a;
                  }).coerce = function(t) {
                    return t instanceof Error ? t.stack || t.message : t;
                  }),
                    (i.disable = function() {
                      i.enable('');
                    }),
                    (i.enable = function(t) {
                      i.save(t);
                      for (
                        var e = (t || '').split(/[\s,]+/), n = e.length, r = 0;
                        r < n;
                        r++
                      )
                        e[r] &&
                          ('-' === (t = e[r].replace(/\*/g, '.*?'))[0]
                            ? i.skips.push(new RegExp('^' + t.substr(1) + '$'))
                            : i.names.push(new RegExp('^' + t + '$')));
                    }),
                    (i.enabled = function(t) {
                      var e, n;
                      for (e = 0, n = i.skips.length; e < n; e++)
                        if (i.skips[e].test(t)) return !1;
                      for (e = 0, n = i.names.length; e < n; e++)
                        if (i.names[e].test(t)) return !0;
                      return !1;
                    }),
                    (i.names = []),
                    (i.skips = []),
                    (i.formatters = {});
                  var n = 0;
                },
                {}
              ],
              12: [
                function(t, e, i) {
                  'use strict';
                  var n = t('is-obj'),
                    r = Object.prototype.hasOwnProperty,
                    a = Object.prototype.propertyIsEnumerable;
                  function o(t, e, i) {
                    var a = e[i];
                    if (void 0 !== a && null !== a) {
                      if (r.call(t, i) && (void 0 === t[i] || null === t[i]))
                        throw new TypeError(
                          'Cannot convert undefined or null to object (' +
                            i +
                            ')'
                        );
                      r.call(t, i) && n(a)
                        ? (t[i] = s(Object(t[i]), e[i]))
                        : (t[i] = a);
                    }
                  }
                  function s(t, e) {
                    if (t === e) return t;
                    e = Object(e);
                    for (var i in e) r.call(e, i) && o(t, e, i);
                    if (Object.getOwnPropertySymbols)
                      for (
                        var n = Object.getOwnPropertySymbols(e), s = 0;
                        s < n.length;
                        s++
                      )
                        a.call(e, n[s]) && o(t, e, n[s]);
                    return t;
                  }
                  e.exports = function(t) {
                    t = (function(t) {
                      if (null === t || void 0 === t)
                        throw new TypeError(
                          'Sources cannot be null or undefined'
                        );
                      return Object(t);
                    })(t);
                    for (var e = 1; e < arguments.length; e++)
                      s(t, arguments[e]);
                    return t;
                  };
                },
                { 'is-obj': 22 }
              ],
              13: [
                function(t, i, n) {
                  !(function(t, i, n, r) {
                    'use strict';
                    function a(t, e) {
                      for (var i = 0, n = t.length; i < n; i++) m(t[i], e);
                    }
                    function o(t) {
                      return function(e) {
                        ot(e) && (m(e, t), a(e.querySelectorAll(V), t));
                      };
                    }
                    function s(t) {
                      var e = ut.call(t, 'is'),
                        i = t.nodeName.toUpperCase(),
                        n = Q.call(F, e ? U + e.toUpperCase() : k + i);
                      return e && -1 < n && !c(i, e) ? -1 : n;
                    }
                    function c(t, e) {
                      return -1 < V.indexOf(t + '[is="' + e + '"]');
                    }
                    function u(t) {
                      var e = t.currentTarget,
                        i = t.attrChange,
                        n = t.attrName,
                        r = t.target;
                      Mt &&
                        (!r || r === e) &&
                        e.attributeChangedCallback &&
                        'style' !== n &&
                        t.prevValue !== t.newValue &&
                        e.attributeChangedCallback(
                          n,
                          i === t[I] ? null : t.prevValue,
                          i === t[j] ? null : t.newValue
                        );
                    }
                    function l(t) {
                      var e = o(t);
                      return function(t) {
                        g.push(e, t.target);
                      };
                    }
                    function h(t) {
                      yt &&
                        ((yt = !1), t.currentTarget.removeEventListener(z, h)),
                        a(
                          (t.target || i).querySelectorAll(V),
                          t.detail === S ? S : C
                        ),
                        at &&
                          (function() {
                            for (var t, e = 0, i = st.length; e < i; e++)
                              (t = st[e]),
                                Y.contains(t) ||
                                  (i--, st.splice(e--, 1), m(t, S));
                          })();
                    }
                    function d(t, e) {
                      lt.call(this, t, e), v.call(this, { target: this });
                    }
                    function p(t, e) {
                      it(t, e),
                        w
                          ? w.observe(t, pt)
                          : (vt &&
                              ((t.setAttribute = d),
                              (t[D] = M(t)),
                              t.addEventListener(R, v)),
                            t.addEventListener(O, u)),
                        t.createdCallback &&
                          Mt &&
                          ((t.created = !0),
                          t.createdCallback(),
                          (t.created = !1));
                    }
                    function f(t) {
                      throw new Error('A ' + t + ' type is already registered');
                    }
                    function m(t, e) {
                      var i,
                        n = s(t);
                      -1 < n &&
                        (x(t, G[n]),
                        (n = 0),
                        e !== C || t[C]
                          ? e === S &&
                            !t[S] &&
                            ((t[C] = !1), (t[S] = !0), (n = 1))
                          : ((t[S] = !1),
                            (t[C] = !0),
                            (n = 1),
                            at && Q.call(st, t) < 0 && st.push(t)),
                        n && (i = t[e + 'Callback']) && i.call(t));
                    }
                    if (!(r in i)) {
                      var g,
                        v,
                        y,
                        M,
                        w,
                        x,
                        A,
                        E,
                        b,
                        T,
                        L,
                        N,
                        D = '__' + r + ((1e5 * Math.random()) >> 0),
                        C = 'attached',
                        S = 'detached',
                        I = 'ADDITION',
                        _ = 'MODIFICATION',
                        j = 'REMOVAL',
                        O = 'DOMAttrModified',
                        z = 'DOMContentLoaded',
                        R = 'DOMSubtreeModified',
                        k = '<',
                        U = '=',
                        P = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,
                        B = [
                          'ANNOTATION-XML',
                          'COLOR-PROFILE',
                          'FONT-FACE',
                          'FONT-FACE-SRC',
                          'FONT-FACE-URI',
                          'FONT-FACE-FORMAT',
                          'FONT-FACE-NAME',
                          'MISSING-GLYPH'
                        ],
                        F = [],
                        G = [],
                        V = '',
                        Y = i.documentElement,
                        Q =
                          F.indexOf ||
                          function(t) {
                            for (var e = this.length; e-- && this[e] !== t; );
                            return e;
                          },
                        H = n.prototype,
                        W = H.hasOwnProperty,
                        X = H.isPrototypeOf,
                        q = n.defineProperty,
                        Z = n.getOwnPropertyDescriptor,
                        K = n.getOwnPropertyNames,
                        J = n.getPrototypeOf,
                        $ = n.setPrototypeOf,
                        tt = !!n.__proto__,
                        et =
                          n.create ||
                          function t(e) {
                            return e ? ((t.prototype = e), new t()) : this;
                          },
                        it =
                          $ ||
                          (tt
                            ? function(t, e) {
                                return (t.__proto__ = e), t;
                              }
                            : K && Z
                              ? (function() {
                                  function t(t, e) {
                                    for (
                                      var i, n = K(e), r = 0, a = n.length;
                                      r < a;
                                      r++
                                    )
                                      (i = n[r]),
                                        W.call(t, i) || q(t, i, Z(e, i));
                                  }
                                  return function(e, i) {
                                    do {
                                      t(e, i);
                                    } while ((i = J(i)) && !X.call(i, e));
                                    return e;
                                  };
                                })()
                              : function(t, e) {
                                  for (var i in e) t[i] = e[i];
                                  return t;
                                }),
                        nt = t.MutationObserver || t.WebKitMutationObserver,
                        rt = (t.HTMLElement || t.Element || t.Node).prototype,
                        at = !X.call(rt, Y),
                        ot = at
                          ? function(t) {
                              return 1 === t.nodeType;
                            }
                          : function(t) {
                              return X.call(rt, t);
                            },
                        st = at && [],
                        ct = rt.cloneNode,
                        ut = rt.getAttribute,
                        lt = rt.setAttribute,
                        ht = rt.removeAttribute,
                        dt = i.createElement,
                        pt = nt && {
                          attributes: !0,
                          characterData: !0,
                          attributeOldValue: !0
                        },
                        ft =
                          nt ||
                          function(t) {
                            (vt = !1), Y.removeEventListener(O, ft);
                          },
                        mt =
                          t.requestAnimationFrame ||
                          t.webkitRequestAnimationFrame ||
                          t.mozRequestAnimationFrame ||
                          t.msRequestAnimationFrame ||
                          function(t) {
                            setTimeout(t, 10);
                          },
                        gt = !1,
                        vt = !0,
                        yt = !0,
                        Mt = !0;
                      $ || tt
                        ? ((x = function(t, e) {
                            X.call(e, t) || p(t, e);
                          }),
                          (A = p))
                        : (A = x = function(t, e) {
                            t[D] || ((t[D] = n(!0)), p(t, e));
                          }),
                        at
                          ? ((vt = !1),
                            (E = Z(rt, 'addEventListener')),
                            (b = E.value),
                            (T = function(t) {
                              var e = new CustomEvent(O, { bubbles: !0 });
                              (e.attrName = t),
                                (e.prevValue = ut.call(this, t)),
                                (e.newValue = null),
                                (e[j] = e.attrChange = 2),
                                ht.call(this, t),
                                this.dispatchEvent(e);
                            }),
                            (L = function(t, i) {
                              var n = this.hasAttribute(t),
                                r = n && ut.call(this, t);
                              (e = new CustomEvent(O, { bubbles: !0 })),
                                lt.call(this, t, i),
                                (e.attrName = t),
                                (e.prevValue = n ? r : null),
                                (e.newValue = i),
                                n
                                  ? (e[_] = e.attrChange = 1)
                                  : (e[I] = e.attrChange = 0),
                                this.dispatchEvent(e);
                            }),
                            (N = function(t) {
                              var e,
                                i = t.currentTarget,
                                n = i[D],
                                r = t.propertyName;
                              n.hasOwnProperty(r) &&
                                ((n = n[r]),
                                ((e = new CustomEvent(O, {
                                  bubbles: !0
                                })).attrName =
                                  n.name),
                                (e.prevValue = n.value || null),
                                (e.newValue = n.value = i[r] || null),
                                null == e.prevValue
                                  ? (e[I] = e.attrChange = 0)
                                  : (e[_] = e.attrChange = 1),
                                i.dispatchEvent(e));
                            }),
                            (E.value = function(t, e, i) {
                              t === O &&
                                this.attributeChangedCallback &&
                                this.setAttribute !== L &&
                                ((this[D] = {
                                  className: {
                                    name: 'class',
                                    value: this.className
                                  }
                                }),
                                (this.setAttribute = L),
                                (this.removeAttribute = T),
                                b.call(this, 'propertychange', N)),
                                b.call(this, t, e, i);
                            }),
                            q(rt, 'addEventListener', E))
                          : nt ||
                            (Y.addEventListener(O, ft),
                            Y.setAttribute(D, 1),
                            Y.removeAttribute(D),
                            vt &&
                              ((v = function(t) {
                                var e, i, n;
                                if (this === t.target) {
                                  (e = this[D]), (this[D] = i = M(this));
                                  for (n in i) {
                                    if (!(n in e))
                                      return y(0, this, n, e[n], i[n], I);
                                    if (i[n] !== e[n])
                                      return y(1, this, n, e[n], i[n], _);
                                  }
                                  for (n in e)
                                    if (!(n in i))
                                      return y(2, this, n, e[n], i[n], j);
                                }
                              }),
                              (y = function(t, e, i, n, r, a) {
                                var o = {
                                  attrChange: t,
                                  currentTarget: e,
                                  attrName: i,
                                  prevValue: n,
                                  newValue: r
                                };
                                (o[a] = t), u(o);
                              }),
                              (M = function(t) {
                                for (
                                  var e,
                                    i,
                                    n = {},
                                    r = t.attributes,
                                    a = 0,
                                    o = r.length;
                                  a < o;
                                  a++
                                )
                                  (e = r[a]),
                                    (i = e.name),
                                    'setAttribute' !== i && (n[i] = e.value);
                                return n;
                              }))),
                        (i[r] = function(t, e) {
                          if (
                            ((n = t.toUpperCase()),
                            gt ||
                              ((gt = !0),
                              nt
                                ? (w = (function(t, e) {
                                    function i(t, e) {
                                      for (
                                        var i = 0, n = t.length;
                                        i < n;
                                        e(t[i++])
                                      );
                                    }
                                    return new nt(function(n) {
                                      for (
                                        var r, a, o, s = 0, c = n.length;
                                        s < c;
                                        s++
                                      )
                                        (r = n[s]),
                                          'childList' === r.type
                                            ? (i(r.addedNodes, t),
                                              i(r.removedNodes, e))
                                            : ((a = r.target),
                                              Mt &&
                                                a.attributeChangedCallback &&
                                                'style' !== r.attributeName &&
                                                ((o = ut.call(
                                                  a,
                                                  r.attributeName
                                                )),
                                                o !== r.oldValue &&
                                                  a.attributeChangedCallback(
                                                    r.attributeName,
                                                    r.oldValue,
                                                    o
                                                  )));
                                    });
                                  })(o(C), o(S))).observe(i, {
                                    childList: !0,
                                    subtree: !0
                                  })
                                : ((g = []),
                                  mt(function t() {
                                    for (; g.length; )
                                      g.shift().call(null, g.shift());
                                    mt(t);
                                  }),
                                  i.addEventListener('DOMNodeInserted', l(C)),
                                  i.addEventListener('DOMNodeRemoved', l(S))),
                              i.addEventListener(z, h),
                              i.addEventListener('readystatechange', h),
                              (i.createElement = function(t, e) {
                                var n = dt.apply(i, arguments),
                                  r = '' + t,
                                  a = Q.call(
                                    F,
                                    (e ? U : k) + (e || r).toUpperCase()
                                  ),
                                  o = -1 < a;
                                return (
                                  e &&
                                    (n.setAttribute(
                                      'is',
                                      (e = e.toLowerCase())
                                    ),
                                    o && (o = c(r.toUpperCase(), e))),
                                  (Mt = !i.createElement.innerHTMLHelper),
                                  o && A(n, G[a]),
                                  n
                                );
                              }),
                              (rt.cloneNode = function(t) {
                                var e = ct.call(this, !!t),
                                  i = s(e);
                                return (
                                  -1 < i && A(e, G[i]),
                                  t &&
                                    (function(t) {
                                      for (
                                        var e, i = 0, n = t.length;
                                        i < n;
                                        i++
                                      )
                                        (e = t[i]), A(e, G[s(e)]);
                                    })(e.querySelectorAll(V)),
                                  e
                                );
                              })),
                            -2 < Q.call(F, U + n) + Q.call(F, k + n) && f(t),
                            !P.test(n) || -1 < Q.call(B, n))
                          )
                            throw new Error('The type ' + t + ' is invalid');
                          var n,
                            r,
                            u = function() {
                              return p
                                ? i.createElement(m, n)
                                : i.createElement(m);
                            },
                            d = e || H,
                            p = W.call(d, 'extends'),
                            m = p ? e.extends.toUpperCase() : n;
                          return (
                            p && -1 < Q.call(F, k + m) && f(m),
                            (r = F.push((p ? U : k) + n) - 1),
                            (V = V.concat(
                              V.length ? ',' : '',
                              p ? m + '[is="' + t.toLowerCase() + '"]' : m
                            )),
                            (u.prototype = G[r] = W.call(d, 'prototype')
                              ? d.prototype
                              : et(rt)),
                            a(i.querySelectorAll(V), C),
                            u
                          );
                        });
                    }
                  })(window, document, Object, 'registerElement');
                },
                {}
              ],
              14: [
                function(t, e, i) {
                  e.exports = function(t) {
                    switch (t) {
                      case 'int8':
                        return Int8Array;
                      case 'int16':
                        return Int16Array;
                      case 'int32':
                        return Int32Array;
                      case 'uint8':
                        return Uint8Array;
                      case 'uint16':
                        return Uint16Array;
                      case 'uint32':
                        return Uint32Array;
                      case 'float32':
                        return Float32Array;
                      case 'float64':
                        return Float64Array;
                      case 'array':
                        return Array;
                      case 'uint8_clamped':
                        return Uint8ClampedArray;
                    }
                  };
                },
                {}
              ],
              15: [
                function(t, e, i) {
                  var n = t('dtype');
                  e.exports = function(t, e, i) {
                    if (!t)
                      throw new TypeError(
                        'must specify data as first parameter'
                      );
                    if (
                      ((i = 0 | +(i || 0)),
                      Array.isArray(t) && Array.isArray(t[0]))
                    ) {
                      var r = t[0].length,
                        a = t.length * r;
                      (e && 'string' != typeof e) ||
                        (e = new (n(e || 'float32'))(a + i));
                      var o = e.length - i;
                      if (a !== o)
                        throw new Error(
                          'source length ' +
                            a +
                            ' (' +
                            r +
                            'x' +
                            t.length +
                            ') does not match destination length ' +
                            o
                        );
                      for (var s = 0, c = i; s < t.length; s++)
                        for (var u = 0; u < r; u++) e[c++] = t[s][u];
                    } else if (e && 'string' != typeof e) e.set(t, i);
                    else {
                      var l = n(e || 'float32');
                      0 === i
                        ? (e = new l(t))
                        : (e = new l(t.length + i)).set(t, i);
                    }
                    return e;
                  };
                },
                { dtype: 14 }
              ],
              16: [
                function(t, e, i) {
                  var n = t('is-function');
                  e.exports = function(t, e, i) {
                    if (!n(e))
                      throw new TypeError('iterator must be a function');
                    arguments.length < 3 && (i = this);
                    '[object Array]' === r.call(t)
                      ? (function(t, e, i) {
                          for (var n = 0, r = t.length; n < r; n++)
                            a.call(t, n) && e.call(i, t[n], n, t);
                        })(t, e, i)
                      : 'string' == typeof t
                        ? (function(t, e, i) {
                            for (var n = 0, r = t.length; n < r; n++)
                              e.call(i, t.charAt(n), n, t);
                          })(t, e, i)
                        : (function(t, e, i) {
                            for (var n in t)
                              a.call(t, n) && e.call(i, t[n], n, t);
                          })(t, e, i);
                  };
                  var r = Object.prototype.toString,
                    a = Object.prototype.hasOwnProperty;
                },
                { 'is-function': 21 }
              ],
              17: [
                function(e, i, n) {
                  (function(t) {
                    var e;
                    (e =
                      'undefined' != typeof window
                        ? window
                        : void 0 !== t
                          ? t
                          : 'undefined' != typeof self ? self : {}),
                      (i.exports = e);
                  }.call(
                    this,
                    void 0 !== t
                      ? t
                      : 'undefined' != typeof self
                        ? self
                        : 'undefined' != typeof window ? window : {}
                  ));
                },
                {}
              ],
              18: [
                function(t, e, i) {
                  (i.read = function(t, e, i, n, r) {
                    var a,
                      o,
                      s = 8 * r - n - 1,
                      c = (1 << s) - 1,
                      u = c >> 1,
                      l = -7,
                      h = i ? r - 1 : 0,
                      d = i ? -1 : 1,
                      p = t[e + h];
                    for (
                      h += d, a = p & ((1 << -l) - 1), p >>= -l, l += s;
                      l > 0;
                      a = 256 * a + t[e + h], h += d, l -= 8
                    );
                    for (
                      o = a & ((1 << -l) - 1), a >>= -l, l += n;
                      l > 0;
                      o = 256 * o + t[e + h], h += d, l -= 8
                    );
                    if (0 === a) a = 1 - u;
                    else {
                      if (a === c) return o ? NaN : 1 / 0 * (p ? -1 : 1);
                      (o += Math.pow(2, n)), (a -= u);
                    }
                    return (p ? -1 : 1) * o * Math.pow(2, a - n);
                  }),
                    (i.write = function(t, e, i, n, r, a) {
                      var o,
                        s,
                        c,
                        u = 8 * a - r - 1,
                        l = (1 << u) - 1,
                        h = l >> 1,
                        d = 23 === r ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                        p = n ? 0 : a - 1,
                        f = n ? 1 : -1,
                        m = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0;
                      for (
                        e = Math.abs(e),
                          isNaN(e) || e === 1 / 0
                            ? ((s = isNaN(e) ? 1 : 0), (o = l))
                            : ((o = Math.floor(Math.log(e) / Math.LN2)),
                              e * (c = Math.pow(2, -o)) < 1 && (o--, (c *= 2)),
                              (e +=
                                o + h >= 1 ? d / c : d * Math.pow(2, 1 - h)) *
                                c >=
                                2 && (o++, (c /= 2)),
                              o + h >= l
                                ? ((s = 0), (o = l))
                                : o + h >= 1
                                  ? ((s = (e * c - 1) * Math.pow(2, r)),
                                    (o += h))
                                  : ((s =
                                      e * Math.pow(2, h - 1) * Math.pow(2, r)),
                                    (o = 0)));
                        r >= 8;
                        t[i + p] = 255 & s, p += f, s /= 256, r -= 8
                      );
                      for (
                        o = (o << r) | s, u += r;
                        u > 0;
                        t[i + p] = 255 & o, p += f, o /= 256, u -= 8
                      );
                      t[i + p - f] |= 128 * m;
                    });
                },
                {}
              ],
              19: [
                function(t, e, i) {
                  'function' == typeof Object.create
                    ? (e.exports = function(t, e) {
                        (t.super_ = e),
                          (t.prototype = Object.create(e.prototype, {
                            constructor: {
                              value: t,
                              enumerable: !1,
                              writable: !0,
                              configurable: !0
                            }
                          }));
                      })
                    : (e.exports = function(t, e) {
                        t.super_ = e;
                        var i = function() {};
                        (i.prototype = e.prototype),
                          (t.prototype = new i()),
                          (t.prototype.constructor = t);
                      });
                },
                {}
              ],
              20: [
                function(t, e, i) {
                  function n(t) {
                    return (
                      !!t.constructor &&
                      'function' == typeof t.constructor.isBuffer &&
                      t.constructor.isBuffer(t)
                    );
                  }
                  e.exports = function(t) {
                    return (
                      null != t &&
                      (n(t) ||
                        ('function' == typeof (e = t).readFloatLE &&
                          'function' == typeof e.slice &&
                          n(e.slice(0, 0))) ||
                        !!t._isBuffer)
                    );
                    var e;
                  };
                },
                {}
              ],
              21: [
                function(t, e, i) {
                  e.exports = function(t) {
                    var e = n.call(t);
                    return (
                      '[object Function]' === e ||
                      ('function' == typeof t && '[object RegExp]' !== e) ||
                      ('undefined' != typeof window &&
                        (t === window.setTimeout ||
                          t === window.alert ||
                          t === window.confirm ||
                          t === window.prompt))
                    );
                  };
                  var n = Object.prototype.toString;
                },
                {}
              ],
              22: [
                function(t, e, i) {
                  'use strict';
                  e.exports = function(t) {
                    var e = typeof t;
                    return null !== t && ('object' === e || 'function' === e);
                  };
                },
                {}
              ],
              23: [
                function(t, e, i) {
                  var n = t('word-wrapper'),
                    r = t('xtend'),
                    a = t('as-number'),
                    o = [
                      'x',
                      'e',
                      'a',
                      'o',
                      'n',
                      's',
                      'r',
                      'c',
                      'u',
                      'm',
                      'v',
                      'w',
                      'z'
                    ],
                    s = ['m', 'w'],
                    c = [
                      'H',
                      'I',
                      'N',
                      'E',
                      'F',
                      'K',
                      'L',
                      'T',
                      'U',
                      'V',
                      'W',
                      'X',
                      'Y',
                      'Z'
                    ],
                    u = '\t'.charCodeAt(0),
                    l = ' '.charCodeAt(0),
                    h = 0,
                    d = 1,
                    p = 2;
                  function f(t) {
                    (this.glyphs = []),
                      (this._measure = this.computeMetrics.bind(this)),
                      this.update(t);
                  }
                  function m(t, e) {
                    if (!t.chars || 0 === t.chars.length) return null;
                    var i = v(t.chars, e);
                    return i >= 0 ? t.chars[i] : null;
                  }
                  function g(t, e, i) {
                    if (!t.kernings || 0 === t.kernings.length) return 0;
                    for (var n = t.kernings, r = 0; r < n.length; r++) {
                      var a = n[r];
                      if (a.first === e && a.second === i) return a.amount;
                    }
                    return 0;
                  }
                  function v(t, e, i) {
                    for (var n = (i = i || 0); n < t.length; n++)
                      if (t[n].id === e) return n;
                    return -1;
                  }
                  (e.exports = function(t) {
                    return new f(t);
                  }),
                    (f.prototype.update = function(t) {
                      if (
                        ((t = r({ measure: this._measure }, t)),
                        (this._opt = t),
                        (this._opt.tabSize = a(this._opt.tabSize, 4)),
                        !t.font)
                      )
                        throw new Error('must provide a valid bitmap font');
                      var e = this.glyphs,
                        i = t.text || '',
                        s = t.font;
                      this._setupSpaceGlyphs(s);
                      var u = n.lines(i, t),
                        l = t.width || 0;
                      e.length = 0;
                      var f = u.reduce(function(t, e) {
                          return Math.max(t, e.width, l);
                        }, 0),
                        m = 0,
                        y = 0,
                        M = a(t.lineHeight, s.common.lineHeight),
                        w = s.common.base,
                        x = M - w,
                        A = t.letterSpacing || 0,
                        E = M * u.length - x,
                        b = (function(t) {
                          if ('center' === t) return d;
                          if ('right' === t) return p;
                          return h;
                        })(this._opt.align);
                      (y -= E),
                        (this._width = f),
                        (this._height = E),
                        (this._descender = M - w),
                        (this._baseline = w),
                        (this._xHeight = (function(t) {
                          for (var e = 0; e < o.length; e++) {
                            var i = o[e].charCodeAt(0),
                              n = v(t.chars, i);
                            if (n >= 0) return t.chars[n].height;
                          }
                          return 0;
                        })(s)),
                        (this._capHeight = (function(t) {
                          for (var e = 0; e < c.length; e++) {
                            var i = c[e].charCodeAt(0),
                              n = v(t.chars, i);
                            if (n >= 0) return t.chars[n].height;
                          }
                          return 0;
                        })(s)),
                        (this._lineHeight = M),
                        (this._ascender = M - x - this._xHeight);
                      var T = this;
                      u.forEach(function(t, n) {
                        for (
                          var r, a = t.start, o = t.end, c = t.width, u = a;
                          u < o;
                          u++
                        ) {
                          var l = i.charCodeAt(u),
                            h = T.getGlyph(s, l);
                          if (h) {
                            r && (m += g(s, r.id, h.id));
                            var v = m;
                            b === d
                              ? (v += (f - c) / 2)
                              : b === p && (v += f - c),
                              e.push({
                                position: [v, y],
                                data: h,
                                index: u,
                                line: n
                              }),
                              (m += h.xadvance + A),
                              (r = h);
                          }
                        }
                        (y += M), (m = 0);
                      }),
                        (this._linesTotal = u.length);
                    }),
                    (f.prototype._setupSpaceGlyphs = function(t) {
                      if (
                        ((this._fallbackSpaceGlyph = null),
                        (this._fallbackTabGlyph = null),
                        t.chars && 0 !== t.chars.length)
                      ) {
                        var e =
                            m(t, l) ||
                            (function(t) {
                              for (var e = 0; e < s.length; e++) {
                                var i = s[e].charCodeAt(0),
                                  n = v(t.chars, i);
                                if (n >= 0) return t.chars[n];
                              }
                              return 0;
                            })(t) ||
                            t.chars[0],
                          i = this._opt.tabSize * e.xadvance;
                        (this._fallbackSpaceGlyph = e),
                          (this._fallbackTabGlyph = r(e, {
                            x: 0,
                            y: 0,
                            xadvance: i,
                            id: u,
                            xoffset: 0,
                            yoffset: 0,
                            width: 0,
                            height: 0
                          }));
                      }
                    }),
                    (f.prototype.getGlyph = function(t, e) {
                      var i = m(t, e);
                      return (
                        i ||
                        (e === u
                          ? this._fallbackTabGlyph
                          : e === l ? this._fallbackSpaceGlyph : null)
                      );
                    }),
                    (f.prototype.computeMetrics = function(t, e, i, n) {
                      var r,
                        a = this._opt.letterSpacing || 0,
                        o = this._opt.font,
                        s = 0,
                        c = 0,
                        u = 0;
                      if (!o.chars || 0 === o.chars.length)
                        return { start: e, end: e, width: 0 };
                      i = Math.min(t.length, i);
                      for (var l = e; l < i; l++) {
                        var h,
                          d = t.charCodeAt(l);
                        if ((h = this.getGlyph(o, d))) {
                          h.xoffset;
                          var p =
                              (s += r ? g(o, r.id, h.id) : 0) + h.xadvance + a,
                            f = s + h.width;
                          if (f >= n || p >= n) break;
                          (s = p), (c = f), (r = h);
                        }
                        u++;
                      }
                      return (
                        r && (c += r.xoffset),
                        { start: e, end: e + u, width: c }
                      );
                    }),
                    [
                      'width',
                      'height',
                      'descender',
                      'ascender',
                      'xHeight',
                      'baseline',
                      'capHeight',
                      'lineHeight'
                    ].forEach(function(t) {
                      Object.defineProperty(f.prototype, t, {
                        get: ((e = t),
                        new Function(
                          [
                            'return function ' + e + '() {',
                            '  return this._' + e,
                            '}'
                          ].join('\n')
                        )()),
                        configurable: !0
                      });
                      var e;
                    });
                },
                { 'as-number': 3, 'word-wrapper': 72, xtend: 75 }
              ],
              24: [
                function(t, e, i) {
                  (function(i) {
                    var n = t('xhr'),
                      r = function() {},
                      a = t('parse-bmfont-ascii'),
                      o = t('parse-bmfont-xml'),
                      s = t('parse-bmfont-binary'),
                      c = t('./lib/is-binary'),
                      u = t('xtend'),
                      l =
                        self.XMLHttpRequest &&
                        'withCredentials' in new XMLHttpRequest();
                    e.exports = function(t, e) {
                      (e = 'function' == typeof e ? e : r),
                        'string' == typeof t ? (t = { uri: t }) : t || (t = {}),
                        t.binary &&
                          (t = (function(t) {
                            if (l) return u(t, { responseType: 'arraybuffer' });
                            if (void 0 === self.XMLHttpRequest)
                              throw new Error(
                                'your browser does not support XHR loading'
                              );
                            var e = new self.XMLHttpRequest();
                            return (
                              e.overrideMimeType(
                                'text/plain; charset=x-user-defined'
                              ),
                              u({ xhr: e }, t)
                            );
                          })(t)),
                        n(t, function(n, u, l) {
                          if (n) return e(n);
                          if (!/^2/.test(u.statusCode))
                            return e(
                              new Error('http status code: ' + u.statusCode)
                            );
                          if (!l) return e(new Error('no body result'));
                          var h,
                            d,
                            p = !1;
                          if (
                            ((h = l),
                            '[object ArrayBuffer]' ===
                              Object.prototype.toString.call(h))
                          ) {
                            var f = new Uint8Array(l);
                            l = new i(f, 'binary');
                          }
                          c(l) &&
                            ((p = !0),
                            'string' == typeof l && (l = new i(l, 'binary'))),
                            p ||
                              (i.isBuffer(l) && (l = l.toString(t.encoding)),
                              (l = l.trim()));
                          try {
                            var m = u.headers['content-type'];
                            d = p
                              ? s(l)
                              : /json/.test(m) || '{' === l.charAt(0)
                                ? JSON.parse(l)
                                : /xml/.test(m) || '<' === l.charAt(0)
                                  ? o(l)
                                  : a(l);
                          } catch (t) {
                            e(new Error('error parsing font ' + t.message)),
                              (e = r);
                          }
                          e(null, d);
                        });
                    };
                  }.call(this, t('buffer').Buffer));
                },
                {
                  './lib/is-binary': 25,
                  buffer: 8,
                  'parse-bmfont-ascii': 27,
                  'parse-bmfont-binary': 28,
                  'parse-bmfont-xml': 29,
                  xhr: 73,
                  xtend: 75
                }
              ],
              25: [
                function(t, e, i) {
                  (function(i) {
                    var n = t('buffer-equal'),
                      r = new i([66, 77, 70, 3]);
                    e.exports = function(t) {
                      return 'string' == typeof t
                        ? 'BMF' === t.substring(0, 3)
                        : t.length > 4 && n(t.slice(0, 4), r);
                    };
                  }.call(this, t('buffer').Buffer));
                },
                { buffer: 8, 'buffer-equal': 7 }
              ],
              26: [
                function(t, e, i) {
                  'use strict';
                  var n = Object.getOwnPropertySymbols,
                    r = Object.prototype.hasOwnProperty,
                    a = Object.prototype.propertyIsEnumerable;
                  e.exports = (function() {
                    try {
                      if (!Object.assign) return !1;
                      var t = new String('abc');
                      if (
                        ((t[5] = 'de'),
                        '5' === Object.getOwnPropertyNames(t)[0])
                      )
                        return !1;
                      for (var e = {}, i = 0; i < 10; i++)
                        e['_' + String.fromCharCode(i)] = i;
                      if (
                        '0123456789' !==
                        Object.getOwnPropertyNames(e)
                          .map(function(t) {
                            return e[t];
                          })
                          .join('')
                      )
                        return !1;
                      var n = {};
                      return (
                        'abcdefghijklmnopqrst'.split('').forEach(function(t) {
                          n[t] = t;
                        }),
                        'abcdefghijklmnopqrst' ===
                          Object.keys(Object.assign({}, n)).join('')
                      );
                    } catch (t) {
                      return !1;
                    }
                  })()
                    ? Object.assign
                    : function(t, e) {
                        for (
                          var i,
                            o,
                            s = (function(t) {
                              if (null === t || void 0 === t)
                                throw new TypeError(
                                  'Object.assign cannot be called with null or undefined'
                                );
                              return Object(t);
                            })(t),
                            c = 1;
                          c < arguments.length;
                          c++
                        ) {
                          i = Object(arguments[c]);
                          for (var u in i) r.call(i, u) && (s[u] = i[u]);
                          if (n) {
                            o = n(i);
                            for (var l = 0; l < o.length; l++)
                              a.call(i, o[l]) && (s[o[l]] = i[o[l]]);
                          }
                        }
                        return s;
                      };
                },
                {}
              ],
              27: [
                function(t, e, i) {
                  function n(t, e) {
                    if (!(t = t.replace(/\t+/g, ' ').trim())) return null;
                    var i = t.indexOf(' ');
                    if (-1 === i) throw new Error('no named row at line ' + e);
                    var n = t.substring(0, i);
                    t = (t = (t = (t = t.substring(i + 1)).replace(
                      /letter=[\'\"]\S+[\'\"]/gi,
                      ''
                    )).split('=')).map(function(t) {
                      return t.trim().match(/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g);
                    });
                    for (var a = [], o = 0; o < t.length; o++) {
                      var s = t[o];
                      0 === o
                        ? a.push({ key: s[0], data: '' })
                        : o === t.length - 1
                          ? (a[a.length - 1].data = r(s[0]))
                          : ((a[a.length - 1].data = r(s[0])),
                            a.push({ key: s[1], data: '' }));
                    }
                    var c = { key: n, data: {} };
                    return (
                      a.forEach(function(t) {
                        c.data[t.key] = t.data;
                      }),
                      c
                    );
                  }
                  function r(t) {
                    return t && 0 !== t.length
                      ? 0 === t.indexOf('"') || 0 === t.indexOf("'")
                        ? t.substring(1, t.length - 1)
                        : -1 !== t.indexOf(',')
                          ? t.split(',').map(function(t) {
                              return parseInt(t, 10);
                            })
                          : parseInt(t, 10)
                      : '';
                  }
                  e.exports = function(t) {
                    if (!t) throw new Error('no data provided');
                    var e = { pages: [], chars: [], kernings: [] },
                      i = (t = t.toString().trim()).split(/\r\n?|\n/g);
                    if (0 === i.length)
                      throw new Error('no data in BMFont file');
                    for (var r = 0; r < i.length; r++) {
                      var a = n(i[r], r);
                      if (a)
                        if ('page' === a.key) {
                          if ('number' != typeof a.data.id)
                            throw new Error(
                              'malformed file at line ' +
                                r +
                                ' -- needs page id=N'
                            );
                          if ('string' != typeof a.data.file)
                            throw new Error(
                              'malformed file at line ' +
                                r +
                                ' -- needs page file="path"'
                            );
                          e.pages[a.data.id] = a.data.file;
                        } else
                          'chars' === a.key ||
                            'kernings' === a.key ||
                            ('char' === a.key
                              ? e.chars.push(a.data)
                              : 'kerning' === a.key
                                ? e.kernings.push(a.data)
                                : (e[a.key] = a.data));
                    }
                    return e;
                  };
                },
                {}
              ],
              28: [
                function(t, e, i) {
                  var n = [66, 77, 70];
                  function r(t, e, i) {
                    if (i > e.length - 1) return 0;
                    var n = e.readUInt8(i++),
                      r = e.readInt32LE(i);
                    switch (((i += 4), n)) {
                      case 1:
                        t.info = (function(t, e) {
                          var i = {};
                          i.size = t.readInt16LE(e);
                          var n = t.readUInt8(e + 2);
                          (i.smooth = (n >> 7) & 1),
                            (i.unicode = (n >> 6) & 1),
                            (i.italic = (n >> 5) & 1),
                            (i.bold = (n >> 4) & 1),
                            (n >> 3) & 1 && (i.fixedHeight = 1);
                          return (
                            (i.charset = t.readUInt8(e + 3) || ''),
                            (i.stretchH = t.readUInt16LE(e + 4)),
                            (i.aa = t.readUInt8(e + 6)),
                            (i.padding = [
                              t.readInt8(e + 7),
                              t.readInt8(e + 8),
                              t.readInt8(e + 9),
                              t.readInt8(e + 10)
                            ]),
                            (i.spacing = [
                              t.readInt8(e + 11),
                              t.readInt8(e + 12)
                            ]),
                            (i.outline = t.readUInt8(e + 13)),
                            (i.face = ((r = t),
                            (o = e + 14),
                            a(r, o).toString('utf8'))),
                            i
                          );
                          var r, o;
                        })(e, i);
                        break;
                      case 2:
                        t.common = (function(t, e) {
                          var i = {};
                          (i.lineHeight = t.readUInt16LE(e)),
                            (i.base = t.readUInt16LE(e + 2)),
                            (i.scaleW = t.readUInt16LE(e + 4)),
                            (i.scaleH = t.readUInt16LE(e + 6)),
                            (i.pages = t.readUInt16LE(e + 8));
                          t.readUInt8(e + 10);
                          return (
                            (i.packed = 0),
                            (i.alphaChnl = t.readUInt8(e + 11)),
                            (i.redChnl = t.readUInt8(e + 12)),
                            (i.greenChnl = t.readUInt8(e + 13)),
                            (i.blueChnl = t.readUInt8(e + 14)),
                            i
                          );
                        })(e, i);
                        break;
                      case 3:
                        t.pages = (function(t, e, i) {
                          for (
                            var n = [],
                              r = a(t, e),
                              o = r.length + 1,
                              s = i / o,
                              c = 0;
                            c < s;
                            c++
                          )
                            (n[c] = t.slice(e, e + r.length).toString('utf8')),
                              (e += o);
                          return n;
                        })(e, i, r);
                        break;
                      case 4:
                        t.chars = (function(t, e, i) {
                          for (var n = [], r = i / 20, a = 0; a < r; a++) {
                            var o = {},
                              s = 20 * a;
                            (o.id = t.readUInt32LE(e + 0 + s)),
                              (o.x = t.readUInt16LE(e + 4 + s)),
                              (o.y = t.readUInt16LE(e + 6 + s)),
                              (o.width = t.readUInt16LE(e + 8 + s)),
                              (o.height = t.readUInt16LE(e + 10 + s)),
                              (o.xoffset = t.readInt16LE(e + 12 + s)),
                              (o.yoffset = t.readInt16LE(e + 14 + s)),
                              (o.xadvance = t.readInt16LE(e + 16 + s)),
                              (o.page = t.readUInt8(e + 18 + s)),
                              (o.chnl = t.readUInt8(e + 19 + s)),
                              (n[a] = o);
                          }
                          return n;
                        })(e, i, r);
                        break;
                      case 5:
                        t.kernings = (function(t, e, i) {
                          for (var n = [], r = i / 10, a = 0; a < r; a++) {
                            var o = {},
                              s = 10 * a;
                            (o.first = t.readUInt32LE(e + 0 + s)),
                              (o.second = t.readUInt32LE(e + 4 + s)),
                              (o.amount = t.readInt16LE(e + 8 + s)),
                              (n[a] = o);
                          }
                          return n;
                        })(e, i, r);
                    }
                    return 5 + r;
                  }
                  function a(t, e) {
                    for (var i = e; i < t.length && 0 !== t[i]; i++);
                    return t.slice(e, i);
                  }
                  e.exports = function(t) {
                    if (t.length < 6)
                      throw new Error('invalid buffer length for BMFont');
                    if (
                      !n.every(function(e, i) {
                        return t.readUInt8(i) === e;
                      })
                    )
                      throw new Error('BMFont missing BMF byte header');
                    var e = 3;
                    if (t.readUInt8(e++) > 3)
                      throw new Error(
                        'Only supports BMFont Binary v3 (BMFont App v1.10)'
                      );
                    for (var i = { kernings: [], chars: [] }, a = 0; a < 5; a++)
                      e += r(i, t, e);
                    return i;
                  };
                },
                {}
              ],
              29: [
                function(t, e, i) {
                  var n = t('./parse-attribs'),
                    r = t('xml-parse-from-string'),
                    a = {
                      scaleh: 'scaleH',
                      scalew: 'scaleW',
                      stretchh: 'stretchH',
                      lineheight: 'lineHeight',
                      alphachnl: 'alphaChnl',
                      redchnl: 'redChnl',
                      greenchnl: 'greenChnl',
                      bluechnl: 'blueChnl'
                    };
                  function o(t) {
                    return (function(t) {
                      for (var e = [], i = 0; i < t.attributes.length; i++)
                        e.push(t.attributes[i]);
                      return e;
                    })(t).reduce(function(t, e) {
                      var i;
                      return (
                        (t[((i = e.nodeName), a[i.toLowerCase()] || i)] =
                          e.nodeValue),
                        t
                      );
                    }, {});
                  }
                  e.exports = function(t) {
                    t = t.toString();
                    var e = r(t),
                      i = { pages: [], chars: [], kernings: [] };
                    ['info', 'common'].forEach(function(t) {
                      var r = e.getElementsByTagName(t)[0];
                      r && (i[t] = n(o(r)));
                    });
                    var a = e.getElementsByTagName('pages')[0];
                    if (!a)
                      throw new Error('malformed file -- no <pages> element');
                    for (
                      var s = a.getElementsByTagName('page'), c = 0;
                      c < s.length;
                      c++
                    ) {
                      var u = s[c],
                        l = parseInt(u.getAttribute('id'), 10),
                        h = u.getAttribute('file');
                      if (isNaN(l))
                        throw new Error(
                          'malformed file -- page "id" attribute is NaN'
                        );
                      if (!h)
                        throw new Error(
                          'malformed file -- needs page "file" attribute'
                        );
                      i.pages[parseInt(l, 10)] = h;
                    }
                    return (
                      ['chars', 'kernings'].forEach(function(t) {
                        var r = e.getElementsByTagName(t)[0];
                        if (r)
                          for (
                            var a = t.substring(0, t.length - 1),
                              s = r.getElementsByTagName(a),
                              c = 0;
                            c < s.length;
                            c++
                          ) {
                            var u = s[c];
                            i[t].push(n(o(u)));
                          }
                      }),
                      i
                    );
                  };
                },
                { './parse-attribs': 30, 'xml-parse-from-string': 74 }
              ],
              30: [
                function(t, e, i) {
                  e.exports = function(t) {
                    'chasrset' in t &&
                      ((t.charset = t.chasrset), delete t.chasrset);
                    for (var e in t)
                      'face' !== e &&
                        'charset' !== e &&
                        (t[e] =
                          'padding' === e || 'spacing' === e
                            ? t[e].split(',').map(function(t) {
                                return parseInt(t, 10);
                              })
                            : parseInt(t[e], 10));
                    return t;
                  };
                },
                {}
              ],
              31: [
                function(t, e, i) {
                  var n = t('trim'),
                    r = t('for-each');
                  e.exports = function(t) {
                    if (!t) return {};
                    var e = {};
                    return (
                      r(n(t).split('\n'), function(t) {
                        var i,
                          r = t.indexOf(':'),
                          a = n(t.slice(0, r)).toLowerCase(),
                          o = n(t.slice(r + 1));
                        void 0 === e[a]
                          ? (e[a] = o)
                          : ((i = e[a]),
                            '[object Array]' ===
                            Object.prototype.toString.call(i)
                              ? e[a].push(o)
                              : (e[a] = [e[a], o]));
                      }),
                      e
                    );
                  };
                },
                { 'for-each': 16, trim: 46 }
              ],
              32: [
                function(t, e, i) {
                  (function(t) {
                    function e(t, e) {
                      for (var i = 0, n = t.length - 1; n >= 0; n--) {
                        var r = t[n];
                        '.' === r
                          ? t.splice(n, 1)
                          : '..' === r
                            ? (t.splice(n, 1), i++)
                            : i && (t.splice(n, 1), i--);
                      }
                      if (e) for (; i--; i) t.unshift('..');
                      return t;
                    }
                    var n = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,
                      r = function(t) {
                        return n.exec(t).slice(1);
                      };
                    function a(t, e) {
                      if (t.filter) return t.filter(e);
                      for (var i = [], n = 0; n < t.length; n++)
                        e(t[n], n, t) && i.push(t[n]);
                      return i;
                    }
                    (i.resolve = function() {
                      for (
                        var i = '', n = !1, r = arguments.length - 1;
                        r >= -1 && !n;
                        r--
                      ) {
                        var o = r >= 0 ? arguments[r] : t.cwd();
                        if ('string' != typeof o)
                          throw new TypeError(
                            'Arguments to path.resolve must be strings'
                          );
                        o && ((i = o + '/' + i), (n = '/' === o.charAt(0)));
                      }
                      return (
                        (i = e(
                          a(i.split('/'), function(t) {
                            return !!t;
                          }),
                          !n
                        ).join('/')),
                        (n ? '/' : '') + i || '.'
                      );
                    }),
                      (i.normalize = function(t) {
                        var n = i.isAbsolute(t),
                          r = '/' === o(t, -1);
                        return (
                          (t = e(
                            a(t.split('/'), function(t) {
                              return !!t;
                            }),
                            !n
                          ).join('/')) ||
                            n ||
                            (t = '.'),
                          t && r && (t += '/'),
                          (n ? '/' : '') + t
                        );
                      }),
                      (i.isAbsolute = function(t) {
                        return '/' === t.charAt(0);
                      }),
                      (i.join = function() {
                        var t = Array.prototype.slice.call(arguments, 0);
                        return i.normalize(
                          a(t, function(t, e) {
                            if ('string' != typeof t)
                              throw new TypeError(
                                'Arguments to path.join must be strings'
                              );
                            return t;
                          }).join('/')
                        );
                      }),
                      (i.relative = function(t, e) {
                        function n(t) {
                          for (var e = 0; e < t.length && '' === t[e]; e++);
                          for (
                            var i = t.length - 1;
                            i >= 0 && '' === t[i];
                            i--
                          );
                          return e > i ? [] : t.slice(e, i - e + 1);
                        }
                        (t = i.resolve(t).substr(1)),
                          (e = i.resolve(e).substr(1));
                        for (
                          var r = n(t.split('/')),
                            a = n(e.split('/')),
                            o = Math.min(r.length, a.length),
                            s = o,
                            c = 0;
                          c < o;
                          c++
                        )
                          if (r[c] !== a[c]) {
                            s = c;
                            break;
                          }
                        var u = [];
                        for (c = s; c < r.length; c++) u.push('..');
                        return (u = u.concat(a.slice(s))).join('/');
                      }),
                      (i.sep = '/'),
                      (i.delimiter = ':'),
                      (i.dirname = function(t) {
                        var e = r(t),
                          i = e[0],
                          n = e[1];
                        return i || n
                          ? (n && (n = n.substr(0, n.length - 1)), i + n)
                          : '.';
                      }),
                      (i.basename = function(t, e) {
                        var i = r(t)[2];
                        return (
                          e &&
                            i.substr(-1 * e.length) === e &&
                            (i = i.substr(0, i.length - e.length)),
                          i
                        );
                      }),
                      (i.extname = function(t) {
                        return r(t)[3];
                      });
                    var o =
                      'b' === 'ab'.substr(-1)
                        ? function(t, e, i) {
                            return t.substr(e, i);
                          }
                        : function(t, e, i) {
                            return e < 0 && (e = t.length + e), t.substr(e, i);
                          };
                  }.call(this, t('_process')));
                },
                { _process: 6 }
              ],
              33: [
                function(e, i, n) {
                  (function(t) {
                    var e = t.performance || {},
                      n = (function() {
                        for (
                          var t = [
                            'now',
                            'webkitNow',
                            'msNow',
                            'mozNow',
                            'oNow'
                          ];
                          t.length;

                        ) {
                          var i = t.shift();
                          if (i in e) return e[i].bind(e);
                        }
                        var n =
                            Date.now ||
                            function() {
                              return new Date().getTime();
                            },
                          r = (e.timing || {}).navigationStart || n();
                        return function() {
                          return n() - r;
                        };
                      })();
                    (n.performanceNow = e.now),
                      (n.noConflict = function() {
                        e.now = n.performanceNow;
                      }),
                      (n.conflict = function() {
                        e.now = n;
                      }),
                      n.conflict(),
                      (i.exports = n);
                  }.call(
                    this,
                    void 0 !== t
                      ? t
                      : 'undefined' != typeof self
                        ? self
                        : 'undefined' != typeof window ? window : {}
                  ));
                },
                {}
              ],
              34: [
                function(t, e, i) {
                  !(function(t) {
                    var i = setTimeout,
                      n =
                        ('function' == typeof setImmediate && setImmediate) ||
                        function(t) {
                          i(t, 1);
                        };
                    function r(t, e) {
                      return function() {
                        t.apply(e, arguments);
                      };
                    }
                    var a =
                      Array.isArray ||
                      function(t) {
                        return (
                          '[object Array]' === Object.prototype.toString.call(t)
                        );
                      };
                    function o(t) {
                      if ('object' != typeof this)
                        throw new TypeError(
                          'Promises must be constructed via new'
                        );
                      if ('function' != typeof t)
                        throw new TypeError('not a function');
                      (this._state = null),
                        (this._value = null),
                        (this._deferreds = []),
                        h(t, r(c, this), r(u, this));
                    }
                    function s(t) {
                      var e = this;
                      null !== this._state
                        ? n(function() {
                            var i = e._state ? t.onFulfilled : t.onRejected;
                            if (null !== i) {
                              var n;
                              try {
                                n = i(e._value);
                              } catch (e) {
                                return void t.reject(e);
                              }
                              t.resolve(n);
                            } else (e._state ? t.resolve : t.reject)(e._value);
                          })
                        : this._deferreds.push(t);
                    }
                    function c(t) {
                      try {
                        if (t === this)
                          throw new TypeError(
                            'A promise cannot be resolved with itself.'
                          );
                        if (
                          t &&
                          ('object' == typeof t || 'function' == typeof t)
                        ) {
                          var e = t.then;
                          if ('function' == typeof e)
                            return void h(r(e, t), r(c, this), r(u, this));
                        }
                        (this._state = !0), (this._value = t), l.call(this);
                      } catch (t) {
                        u.call(this, t);
                      }
                    }
                    function u(t) {
                      (this._state = !1), (this._value = t), l.call(this);
                    }
                    function l() {
                      for (var t = 0, e = this._deferreds.length; t < e; t++)
                        s.call(this, this._deferreds[t]);
                      this._deferreds = null;
                    }
                    function h(t, e, i) {
                      var n = !1;
                      try {
                        t(
                          function(t) {
                            n || ((n = !0), e(t));
                          },
                          function(t) {
                            n || ((n = !0), i(t));
                          }
                        );
                      } catch (t) {
                        if (n) return;
                        (n = !0), i(t);
                      }
                    }
                    (o.prototype.catch = function(t) {
                      return this.then(null, t);
                    }),
                      (o.prototype.then = function(t, e) {
                        var i = this;
                        return new o(function(n, r) {
                          s.call(
                            i,
                            new function(t, e, i, n) {
                              (this.onFulfilled =
                                'function' == typeof t ? t : null),
                                (this.onRejected =
                                  'function' == typeof e ? e : null),
                                (this.resolve = i),
                                (this.reject = n);
                            }(t, e, n, r)
                          );
                        });
                      }),
                      (o.all = function() {
                        var t = Array.prototype.slice.call(
                          1 === arguments.length && a(arguments[0])
                            ? arguments[0]
                            : arguments
                        );
                        return new o(function(e, i) {
                          if (0 === t.length) return e([]);
                          var n = t.length;
                          function r(a, o) {
                            try {
                              if (
                                o &&
                                ('object' == typeof o || 'function' == typeof o)
                              ) {
                                var s = o.then;
                                if ('function' == typeof s)
                                  return void s.call(
                                    o,
                                    function(t) {
                                      r(a, t);
                                    },
                                    i
                                  );
                              }
                              (t[a] = o), 0 == --n && e(t);
                            } catch (t) {
                              i(t);
                            }
                          }
                          for (var a = 0; a < t.length; a++) r(a, t[a]);
                        });
                      }),
                      (o.resolve = function(t) {
                        return t && 'object' == typeof t && t.constructor === o
                          ? t
                          : new o(function(e) {
                              e(t);
                            });
                      }),
                      (o.reject = function(t) {
                        return new o(function(e, i) {
                          i(t);
                        });
                      }),
                      (o.race = function(t) {
                        return new o(function(e, i) {
                          for (var n = 0, r = t.length; n < r; n++)
                            t[n].then(e, i);
                        });
                      }),
                      (o._setImmediateFn = function(t) {
                        n = t;
                      }),
                      void 0 !== e && e.exports
                        ? (e.exports = o)
                        : t.Promise || (t.Promise = o);
                  })(this);
                },
                {}
              ],
              35: [
                function(t, e, i) {
                  var n = t('dtype'),
                    r = t('an-array'),
                    a = t('is-buffer'),
                    o = [0, 2, 3],
                    s = [2, 1, 3];
                  e.exports = function(t, e) {
                    (t && (r(t) || a(t))) || ((e = t || {}), (t = null));
                    for (
                      var i =
                          'string' ==
                          typeof (e =
                            'number' == typeof e ? { count: e } : e || {}).type
                            ? e.type
                            : 'uint16',
                        c = 'number' == typeof e.count ? e.count : 1,
                        u = e.start || 0,
                        l = !1 !== e.clockwise ? o : s,
                        h = l[0],
                        d = l[1],
                        p = l[2],
                        f = 6 * c,
                        m = t || new (n(i))(f),
                        g = 0,
                        v = 0;
                      g < f;
                      g += 6, v += 4
                    ) {
                      var y = g + u;
                      (m[y + 0] = v + 0),
                        (m[y + 1] = v + 1),
                        (m[y + 2] = v + 2),
                        (m[y + 3] = v + h),
                        (m[y + 4] = v + d),
                        (m[y + 5] = v + p);
                    }
                    return m;
                  };
                },
                { 'an-array': 2, dtype: 14, 'is-buffer': 20 }
              ],
              36: [
                function(t, e, i) {
                  function n(t, e) {
                    var i = (e = e || {}).preserveNumbers,
                      n = {};
                    return (
                      (function(t) {
                        var e,
                          i = [],
                          n = 0,
                          r = /url\([^\)]+$/,
                          a = '';
                        for (; n < t.length; )
                          -1 === (e = t.indexOf(';', n)) && (e = t.length),
                            (a += t.substring(n, e)),
                            r.test(a)
                              ? ((a += ';'), (n = e + 1))
                              : (i.push(a), (a = ''), (n = e + 1));
                        return i;
                      })(t)
                        .map(function(t) {
                          return t.trim();
                        })
                        .filter(Boolean)
                        .forEach(function(t) {
                          var e,
                            r = t.indexOf(':'),
                            a = t.substr(0, r).trim(),
                            o = t.substr(r + 1).trim();
                          i &&
                            ((e = o), !isNaN(parseFloat(e)) && isFinite(e)) &&
                            (o = Number(o)),
                            (n[a] = o);
                        }),
                      n
                    );
                  }
                  function r(t) {
                    return Object.keys(t)
                      .map(function(e) {
                        return e + ':' + t[e];
                      })
                      .join(';');
                  }
                  (e.exports.parse = n),
                    (e.exports.stringify = r),
                    (e.exports.normalize = function(t, e) {
                      return r(n(t, e));
                    });
                },
                {}
              ],
              37: [
                function(t, e, i) {
                  var n = t('layout-bmfont-text'),
                    r = t('inherits'),
                    a = t('quad-indices'),
                    o = t('three-buffer-vertex-data'),
                    s = t('object-assign'),
                    c = t('./lib/vertices'),
                    u = t('./lib/utils'),
                    l = THREE.BufferGeometry;
                  function h(t) {
                    l.call(this),
                      'string' == typeof t && (t = { text: t }),
                      (this._opt = s({}, t)),
                      t && this.update(t);
                  }
                  (e.exports = function(t) {
                    return new h(t);
                  }),
                    r(h, l),
                    (h.prototype.update = function(t) {
                      if (
                        ('string' == typeof t && (t = { text: t }),
                        !(t = s({}, this._opt, t)).font)
                      )
                        throw new TypeError(
                          'must specify a { font } in options'
                        );
                      this.layout = n(t);
                      var e = !1 !== t.flipY,
                        i = t.font,
                        r = i.common.scaleW,
                        u = i.common.scaleH,
                        l = this.layout.glyphs.filter(function(t) {
                          var e = t.data;
                          return e.width * e.height > 0;
                        });
                      this.visibleGlyphs = l;
                      var h = c.positions(l),
                        d = c.uvs(l, r, u, e),
                        p = a({
                          clockwise: !0,
                          type: 'uint16',
                          count: l.length
                        });
                      if (
                        (o.index(this, p, 1, 'uint16'),
                        o.attr(this, 'position', h, 2),
                        o.attr(this, 'uv', d, 2),
                        !t.multipage && 'page' in this.attributes)
                      )
                        this.removeAttribute('page');
                      else if (t.multipage) {
                        var f = c.pages(l);
                        o.attr(this, 'page', f, 1);
                      }
                    }),
                    (h.prototype.computeBoundingSphere = function() {
                      null === this.boundingSphere &&
                        (this.boundingSphere = new THREE.Sphere());
                      var t = this.attributes.position.array,
                        e = this.attributes.position.itemSize;
                      if (!t || !e || t.length < 2)
                        return (
                          (this.boundingSphere.radius = 0),
                          void this.boundingSphere.center.set(0, 0, 0)
                        );
                      u.computeSphere(t, this.boundingSphere),
                        isNaN(this.boundingSphere.radius);
                    }),
                    (h.prototype.computeBoundingBox = function() {
                      null === this.boundingBox &&
                        (this.boundingBox = new THREE.Box3());
                      var t = this.boundingBox,
                        e = this.attributes.position.array,
                        i = this.attributes.position.itemSize;
                      !e || !i || e.length < 2
                        ? t.makeEmpty()
                        : u.computeBox(e, t);
                    });
                },
                {
                  './lib/utils': 38,
                  './lib/vertices': 39,
                  inherits: 19,
                  'layout-bmfont-text': 23,
                  'object-assign': 26,
                  'quad-indices': 35,
                  'three-buffer-vertex-data': 40
                }
              ],
              38: [
                function(t, e, i) {
                  var n = 2,
                    r = { min: [0, 0], max: [0, 0] };
                  function a(t) {
                    var e = t.length / n;
                    (r.min[0] = t[0]),
                      (r.min[1] = t[1]),
                      (r.max[0] = t[0]),
                      (r.max[1] = t[1]);
                    for (var i = 0; i < e; i++) {
                      var a = t[i * n + 0],
                        o = t[i * n + 1];
                      (r.min[0] = Math.min(a, r.min[0])),
                        (r.min[1] = Math.min(o, r.min[1])),
                        (r.max[0] = Math.max(a, r.max[0])),
                        (r.max[1] = Math.max(o, r.max[1]));
                    }
                  }
                  (e.exports.computeBox = function(t, e) {
                    a(t),
                      e.min.set(r.min[0], r.min[1], 0),
                      e.max.set(r.max[0], r.max[1], 0);
                  }),
                    (e.exports.computeSphere = function(t, e) {
                      a(t);
                      var i = r.min[0],
                        n = r.min[1],
                        o = r.max[0] - i,
                        s = r.max[1] - n,
                        c = Math.sqrt(o * o + s * s);
                      e.center.set(i + o / 2, n + s / 2, 0), (e.radius = c / 2);
                    });
                },
                {}
              ],
              39: [
                function(t, e, i) {
                  (e.exports.pages = function(t) {
                    var e = new Float32Array(4 * t.length * 1),
                      i = 0;
                    return (
                      t.forEach(function(t) {
                        var n = t.data.page || 0;
                        (e[i++] = n), (e[i++] = n), (e[i++] = n), (e[i++] = n);
                      }),
                      e
                    );
                  }),
                    (e.exports.uvs = function(t, e, i, n) {
                      var r = new Float32Array(4 * t.length * 2),
                        a = 0;
                      return (
                        t.forEach(function(t) {
                          var o = t.data,
                            s = o.x + o.width,
                            c = o.y + o.height,
                            u = o.x / e,
                            l = o.y / i,
                            h = s / e,
                            d = c / i;
                          n && ((l = (i - o.y) / i), (d = (i - c) / i)),
                            (r[a++] = u),
                            (r[a++] = l),
                            (r[a++] = u),
                            (r[a++] = d),
                            (r[a++] = h),
                            (r[a++] = d),
                            (r[a++] = h),
                            (r[a++] = l);
                        }),
                        r
                      );
                    }),
                    (e.exports.positions = function(t) {
                      var e = new Float32Array(4 * t.length * 2),
                        i = 0;
                      return (
                        t.forEach(function(t) {
                          var n = t.data,
                            r = t.position[0] + n.xoffset,
                            a = t.position[1] + n.yoffset,
                            o = n.width,
                            s = n.height;
                          (e[i++] = r),
                            (e[i++] = a),
                            (e[i++] = r),
                            (e[i++] = a + s),
                            (e[i++] = r + o),
                            (e[i++] = a + s),
                            (e[i++] = r + o),
                            (e[i++] = a);
                        }),
                        e
                      );
                    });
                },
                {}
              ],
              40: [
                function(t, e, i) {
                  var n = t('flatten-vertex-data'),
                    r = !1;
                  function a(t, e, i, a) {
                    if (
                      ((e = e || []),
                      !t ||
                        (function(t, e, i) {
                          if (t.itemSize !== i) return !0;
                          if (!t.array) return !0;
                          var n = t.array.length;
                          return Array.isArray(e) && Array.isArray(e[0])
                            ? n !== e.length * i
                            : n !== e.length;
                        })(t, e, i))
                    ) {
                      e = n(e, a);
                      var o = t && 'function' != typeof t.setArray;
                      return (
                        (t && !o) ||
                          (o && !r && (r = !0),
                          (t = new THREE.BufferAttribute(e, i))),
                        (t.itemSize = i),
                        (t.needsUpdate = !0),
                        'function' == typeof t.setArray && t.setArray(e),
                        t
                      );
                    }
                    return n(e, t.array), (t.needsUpdate = !0), null;
                  }
                  (e.exports.attr = function(t, e, i, n, r) {
                    'number' != typeof n && (n = 3);
                    'string' != typeof r && (r = 'float32');
                    if (
                      Array.isArray(i) &&
                      Array.isArray(i[0]) &&
                      i[0].length !== n
                    )
                      throw new Error(
                        'Nested vertex array has unexpected size; expected ' +
                          n +
                          ' but found ' +
                          i[0].length
                      );
                    var o = a(t.getAttribute(e), i, n, r);
                    o && t.addAttribute(e, o);
                  }),
                    (e.exports.index = function(t, e, i, n) {
                      'number' != typeof i && (i = 1);
                      'string' != typeof n && (n = 'uint16');
                      var r = !t.index && 'function' != typeof t.setIndex,
                        o = a(r ? t.getAttribute('index') : t.index, e, i, n);
                      o && (r ? t.addAttribute('index', o) : (t.index = o));
                    });
                },
                { 'flatten-vertex-data': 15 }
              ],
              41: [
                function(t, e, i) {
                  var n;
                  (n = this),
                    (function(t) {
                      'use strict';
                      function e() {}
                      void 0 === Number.EPSILON &&
                        (Number.EPSILON = Math.pow(2, -52)),
                        void 0 === Number.isInteger &&
                          (Number.isInteger = function(t) {
                            return (
                              'number' == typeof t &&
                              isFinite(t) &&
                              Math.floor(t) === t
                            );
                          }),
                        void 0 === Math.sign &&
                          (Math.sign = function(t) {
                            return t < 0 ? -1 : t > 0 ? 1 : +t;
                          }),
                        void 0 === Function.prototype.name &&
                          Object.defineProperty(Function.prototype, 'name', {
                            get: function() {
                              return this.toString().match(
                                /^\s*function\s*([^\(\s]*)/
                              )[1];
                            }
                          }),
                        void 0 === Object.assign &&
                          (Object.assign = function(t) {
                            if (void 0 === t || null === t)
                              throw new TypeError(
                                'Cannot convert undefined or null to object'
                              );
                            for (
                              var e = Object(t), i = 1;
                              i < arguments.length;
                              i++
                            ) {
                              var n = arguments[i];
                              if (void 0 !== n && null !== n)
                                for (var r in n)
                                  Object.prototype.hasOwnProperty.call(n, r) &&
                                    (e[r] = n[r]);
                            }
                            return e;
                          }),
                        Object.assign(e.prototype, {
                          addEventListener: function(t, e) {
                            void 0 === this._listeners &&
                              (this._listeners = {});
                            var i = this._listeners;
                            void 0 === i[t] && (i[t] = []),
                              -1 === i[t].indexOf(e) && i[t].push(e);
                          },
                          hasEventListener: function(t, e) {
                            if (void 0 === this._listeners) return !1;
                            var i = this._listeners;
                            return void 0 !== i[t] && -1 !== i[t].indexOf(e);
                          },
                          removeEventListener: function(t, e) {
                            if (void 0 !== this._listeners) {
                              var i = this._listeners[t];
                              if (void 0 !== i) {
                                var n = i.indexOf(e);
                                -1 !== n && i.splice(n, 1);
                              }
                            }
                          },
                          dispatchEvent: function(t) {
                            if (void 0 !== this._listeners) {
                              var e = this._listeners[t.type];
                              if (void 0 !== e) {
                                t.target = this;
                                for (
                                  var i = e.slice(0), n = 0, r = i.length;
                                  n < r;
                                  n++
                                )
                                  i[n].call(this, t);
                              }
                            }
                          }
                        });
                      var i,
                        n,
                        r,
                        a,
                        o,
                        s,
                        c = '87',
                        u = 0,
                        l = 1,
                        h = 2,
                        d = 0,
                        p = 1,
                        f = 2,
                        m = 0,
                        g = 1,
                        v = 2,
                        y = 0,
                        M = 1,
                        w = 2,
                        x = 0,
                        A = 1,
                        E = 2,
                        b = 3,
                        T = 4,
                        L = 5,
                        N = 100,
                        D = 101,
                        C = 102,
                        S = 103,
                        I = 104,
                        _ = 200,
                        j = 201,
                        O = 202,
                        z = 203,
                        R = 204,
                        k = 205,
                        U = 206,
                        P = 207,
                        B = 208,
                        F = 209,
                        G = 210,
                        V = 0,
                        Y = 1,
                        Q = 2,
                        H = 3,
                        W = 4,
                        X = 5,
                        q = 6,
                        Z = 7,
                        K = 0,
                        J = 1,
                        $ = 2,
                        tt = 0,
                        et = 1,
                        it = 2,
                        nt = 3,
                        rt = 4,
                        at = 301,
                        ot = 302,
                        st = 303,
                        ct = 304,
                        ut = 305,
                        lt = 306,
                        ht = 307,
                        dt = 1e3,
                        pt = 1001,
                        ft = 1002,
                        mt = 1003,
                        gt = 1004,
                        vt = 1005,
                        yt = 1006,
                        Mt = 1007,
                        wt = 1008,
                        xt = 1009,
                        At = 1010,
                        Et = 1011,
                        bt = 1012,
                        Tt = 1013,
                        Lt = 1014,
                        Nt = 1015,
                        Dt = 1016,
                        Ct = 1017,
                        St = 1018,
                        It = 1019,
                        _t = 1020,
                        jt = 1021,
                        Ot = 1022,
                        zt = 1023,
                        Rt = 1024,
                        kt = 1025,
                        Ut = zt,
                        Pt = 1026,
                        Bt = 1027,
                        Ft = 2001,
                        Gt = 2002,
                        Vt = 2003,
                        Yt = 2004,
                        Qt = 2100,
                        Ht = 2101,
                        Wt = 2102,
                        Xt = 2103,
                        qt = 2151,
                        Zt = 2201,
                        Kt = 2400,
                        Jt = 0,
                        $t = 1,
                        te = 2,
                        ee = 3e3,
                        ie = 3001,
                        ne = 3007,
                        re = 3002,
                        ae = 3004,
                        oe = 3005,
                        se = 3006,
                        ce = 3200,
                        ue = 3201,
                        le = {
                          DEG2RAD: Math.PI / 180,
                          RAD2DEG: 180 / Math.PI,
                          generateUUID: ((n = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split(
                            ''
                          )),
                          (r = new Array(36)),
                          (a = 0),
                          function() {
                            for (var t = 0; t < 36; t++)
                              8 === t || 13 === t || 18 === t || 23 === t
                                ? (r[t] = '-')
                                : 14 === t
                                  ? (r[t] = '4')
                                  : (a <= 2 &&
                                      (a =
                                        (33554432 + 16777216 * Math.random()) |
                                        0),
                                    (i = 15 & a),
                                    (a >>= 4),
                                    (r[t] = n[19 === t ? (3 & i) | 8 : i]));
                            return r.join('');
                          }),
                          clamp: function(t, e, i) {
                            return Math.max(e, Math.min(i, t));
                          },
                          euclideanModulo: function(t, e) {
                            return (t % e + e) % e;
                          },
                          mapLinear: function(t, e, i, n, r) {
                            return n + (t - e) * (r - n) / (i - e);
                          },
                          lerp: function(t, e, i) {
                            return (1 - i) * t + i * e;
                          },
                          smoothstep: function(t, e, i) {
                            return t <= e
                              ? 0
                              : t >= i
                                ? 1
                                : (t = (t - e) / (i - e)) * t * (3 - 2 * t);
                          },
                          smootherstep: function(t, e, i) {
                            return t <= e
                              ? 0
                              : t >= i
                                ? 1
                                : (t = (t - e) / (i - e)) *
                                  t *
                                  t *
                                  (t * (6 * t - 15) + 10);
                          },
                          randInt: function(t, e) {
                            return t + Math.floor(Math.random() * (e - t + 1));
                          },
                          randFloat: function(t, e) {
                            return t + Math.random() * (e - t);
                          },
                          randFloatSpread: function(t) {
                            return t * (0.5 - Math.random());
                          },
                          degToRad: function(t) {
                            return t * le.DEG2RAD;
                          },
                          radToDeg: function(t) {
                            return t * le.RAD2DEG;
                          },
                          isPowerOfTwo: function(t) {
                            return 0 == (t & (t - 1)) && 0 !== t;
                          },
                          nearestPowerOfTwo: function(t) {
                            return Math.pow(
                              2,
                              Math.round(Math.log(t) / Math.LN2)
                            );
                          },
                          nextPowerOfTwo: function(t) {
                            return (
                              t--,
                              (t |= t >> 1),
                              (t |= t >> 2),
                              (t |= t >> 4),
                              (t |= t >> 8),
                              (t |= t >> 16),
                              ++t
                            );
                          }
                        };
                      function he(t, e) {
                        (this.x = t || 0), (this.y = e || 0);
                      }
                      Object.defineProperties(he.prototype, {
                        width: {
                          get: function() {
                            return this.x;
                          },
                          set: function(t) {
                            this.x = t;
                          }
                        },
                        height: {
                          get: function() {
                            return this.y;
                          },
                          set: function(t) {
                            this.y = t;
                          }
                        }
                      }),
                        Object.assign(he.prototype, {
                          isVector2: !0,
                          set: function(t, e) {
                            return (this.x = t), (this.y = e), this;
                          },
                          setScalar: function(t) {
                            return (this.x = t), (this.y = t), this;
                          },
                          setX: function(t) {
                            return (this.x = t), this;
                          },
                          setY: function(t) {
                            return (this.y = t), this;
                          },
                          setComponent: function(t, e) {
                            switch (t) {
                              case 0:
                                this.x = e;
                                break;
                              case 1:
                                this.y = e;
                                break;
                              default:
                                throw new Error('index is out of range: ' + t);
                            }
                            return this;
                          },
                          getComponent: function(t) {
                            switch (t) {
                              case 0:
                                return this.x;
                              case 1:
                                return this.y;
                              default:
                                throw new Error('index is out of range: ' + t);
                            }
                          },
                          clone: function() {
                            return new this.constructor(this.x, this.y);
                          },
                          copy: function(t) {
                            return (this.x = t.x), (this.y = t.y), this;
                          },
                          add: function(t, e) {
                            return void 0 !== e
                              ? this.addVectors(t, e)
                              : ((this.x += t.x), (this.y += t.y), this);
                          },
                          addScalar: function(t) {
                            return (this.x += t), (this.y += t), this;
                          },
                          addVectors: function(t, e) {
                            return (
                              (this.x = t.x + e.x), (this.y = t.y + e.y), this
                            );
                          },
                          addScaledVector: function(t, e) {
                            return (
                              (this.x += t.x * e), (this.y += t.y * e), this
                            );
                          },
                          sub: function(t, e) {
                            return void 0 !== e
                              ? this.subVectors(t, e)
                              : ((this.x -= t.x), (this.y -= t.y), this);
                          },
                          subScalar: function(t) {
                            return (this.x -= t), (this.y -= t), this;
                          },
                          subVectors: function(t, e) {
                            return (
                              (this.x = t.x - e.x), (this.y = t.y - e.y), this
                            );
                          },
                          multiply: function(t) {
                            return (this.x *= t.x), (this.y *= t.y), this;
                          },
                          multiplyScalar: function(t) {
                            return (this.x *= t), (this.y *= t), this;
                          },
                          divide: function(t) {
                            return (this.x /= t.x), (this.y /= t.y), this;
                          },
                          divideScalar: function(t) {
                            return this.multiplyScalar(1 / t);
                          },
                          min: function(t) {
                            return (
                              (this.x = Math.min(this.x, t.x)),
                              (this.y = Math.min(this.y, t.y)),
                              this
                            );
                          },
                          max: function(t) {
                            return (
                              (this.x = Math.max(this.x, t.x)),
                              (this.y = Math.max(this.y, t.y)),
                              this
                            );
                          },
                          clamp: function(t, e) {
                            return (
                              (this.x = Math.max(t.x, Math.min(e.x, this.x))),
                              (this.y = Math.max(t.y, Math.min(e.y, this.y))),
                              this
                            );
                          },
                          clampScalar: ((o = new he()),
                          (s = new he()),
                          function(t, e) {
                            return o.set(t, t), s.set(e, e), this.clamp(o, s);
                          }),
                          clampLength: function(t, e) {
                            var i = this.length();
                            return this.divideScalar(i || 1).multiplyScalar(
                              Math.max(t, Math.min(e, i))
                            );
                          },
                          floor: function() {
                            return (
                              (this.x = Math.floor(this.x)),
                              (this.y = Math.floor(this.y)),
                              this
                            );
                          },
                          ceil: function() {
                            return (
                              (this.x = Math.ceil(this.x)),
                              (this.y = Math.ceil(this.y)),
                              this
                            );
                          },
                          round: function() {
                            return (
                              (this.x = Math.round(this.x)),
                              (this.y = Math.round(this.y)),
                              this
                            );
                          },
                          roundToZero: function() {
                            return (
                              (this.x =
                                this.x < 0
                                  ? Math.ceil(this.x)
                                  : Math.floor(this.x)),
                              (this.y =
                                this.y < 0
                                  ? Math.ceil(this.y)
                                  : Math.floor(this.y)),
                              this
                            );
                          },
                          negate: function() {
                            return (this.x = -this.x), (this.y = -this.y), this;
                          },
                          dot: function(t) {
                            return this.x * t.x + this.y * t.y;
                          },
                          lengthSq: function() {
                            return this.x * this.x + this.y * this.y;
                          },
                          length: function() {
                            return Math.sqrt(this.x * this.x + this.y * this.y);
                          },
                          lengthManhattan: function() {
                            return Math.abs(this.x) + Math.abs(this.y);
                          },
                          normalize: function() {
                            return this.divideScalar(this.length() || 1);
                          },
                          angle: function() {
                            var t = Math.atan2(this.y, this.x);
                            return t < 0 && (t += 2 * Math.PI), t;
                          },
                          distanceTo: function(t) {
                            return Math.sqrt(this.distanceToSquared(t));
                          },
                          distanceToSquared: function(t) {
                            var e = this.x - t.x,
                              i = this.y - t.y;
                            return e * e + i * i;
                          },
                          distanceToManhattan: function(t) {
                            return (
                              Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
                            );
                          },
                          setLength: function(t) {
                            return this.normalize().multiplyScalar(t);
                          },
                          lerp: function(t, e) {
                            return (
                              (this.x += (t.x - this.x) * e),
                              (this.y += (t.y - this.y) * e),
                              this
                            );
                          },
                          lerpVectors: function(t, e, i) {
                            return this.subVectors(e, t)
                              .multiplyScalar(i)
                              .add(t);
                          },
                          equals: function(t) {
                            return t.x === this.x && t.y === this.y;
                          },
                          fromArray: function(t, e) {
                            return (
                              void 0 === e && (e = 0),
                              (this.x = t[e]),
                              (this.y = t[e + 1]),
                              this
                            );
                          },
                          toArray: function(t, e) {
                            return (
                              void 0 === t && (t = []),
                              void 0 === e && (e = 0),
                              (t[e] = this.x),
                              (t[e + 1] = this.y),
                              t
                            );
                          },
                          fromBufferAttribute: function(t, e, i) {
                            return (
                              (this.x = t.getX(e)), (this.y = t.getY(e)), this
                            );
                          },
                          rotateAround: function(t, e) {
                            var i = Math.cos(e),
                              n = Math.sin(e),
                              r = this.x - t.x,
                              a = this.y - t.y;
                            return (
                              (this.x = r * i - a * n + t.x),
                              (this.y = r * n + a * i + t.y),
                              this
                            );
                          }
                        });
                      var de,
                        pe,
                        fe,
                        me,
                        ge,
                        ve,
                        ye,
                        Me,
                        we,
                        xe,
                        Ae,
                        Ee,
                        be,
                        Te,
                        Le,
                        Ne,
                        De,
                        Ce,
                        Se,
                        Ie = 0;
                      function _e(t, e, i, n, r, a, o, s, c, u) {
                        Object.defineProperty(this, 'id', { value: Ie++ }),
                          (this.uuid = le.generateUUID()),
                          (this.name = ''),
                          (this.image = void 0 !== t ? t : _e.DEFAULT_IMAGE),
                          (this.mipmaps = []),
                          (this.mapping =
                            void 0 !== e ? e : _e.DEFAULT_MAPPING),
                          (this.wrapS = void 0 !== i ? i : pt),
                          (this.wrapT = void 0 !== n ? n : pt),
                          (this.magFilter = void 0 !== r ? r : yt),
                          (this.minFilter = void 0 !== a ? a : wt),
                          (this.anisotropy = void 0 !== c ? c : 1),
                          (this.format = void 0 !== o ? o : zt),
                          (this.type = void 0 !== s ? s : xt),
                          (this.offset = new he(0, 0)),
                          (this.repeat = new he(1, 1)),
                          (this.generateMipmaps = !0),
                          (this.premultiplyAlpha = !1),
                          (this.flipY = !0),
                          (this.unpackAlignment = 4),
                          (this.encoding = void 0 !== u ? u : ee),
                          (this.version = 0),
                          (this.onUpdate = null);
                      }
                      function je(t, e, i, n) {
                        (this.x = t || 0),
                          (this.y = e || 0),
                          (this.z = i || 0),
                          (this.w = void 0 !== n ? n : 1);
                      }
                      function Oe(t, e, i) {
                        (this.uuid = le.generateUUID()),
                          (this.width = t),
                          (this.height = e),
                          (this.scissor = new je(0, 0, t, e)),
                          (this.scissorTest = !1),
                          (this.viewport = new je(0, 0, t, e)),
                          void 0 === (i = i || {}).minFilter &&
                            (i.minFilter = yt),
                          (this.texture = new _e(
                            void 0,
                            void 0,
                            i.wrapS,
                            i.wrapT,
                            i.magFilter,
                            i.minFilter,
                            i.format,
                            i.type,
                            i.anisotropy,
                            i.encoding
                          )),
                          (this.depthBuffer =
                            void 0 === i.depthBuffer || i.depthBuffer),
                          (this.stencilBuffer =
                            void 0 === i.stencilBuffer || i.stencilBuffer),
                          (this.depthTexture =
                            void 0 !== i.depthTexture ? i.depthTexture : null);
                      }
                      function ze(t, e, i) {
                        Oe.call(this, t, e, i),
                          (this.activeCubeFace = 0),
                          (this.activeMipMapLevel = 0);
                      }
                      function Re(t, e, i, n) {
                        (this._x = t || 0),
                          (this._y = e || 0),
                          (this._z = i || 0),
                          (this._w = void 0 !== n ? n : 1);
                      }
                      function ke(t, e, i) {
                        (this.x = t || 0), (this.y = e || 0), (this.z = i || 0);
                      }
                      function Ue() {
                        (this.elements = [
                          1,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          1
                        ]),
                          arguments.length;
                      }
                      function Pe(t, e, i, n, r, a, o, s, c, u, l, h) {
                        _e.call(this, null, a, o, s, c, u, n, r, l, h),
                          (this.image = { data: t, width: e, height: i }),
                          (this.magFilter = void 0 !== c ? c : mt),
                          (this.minFilter = void 0 !== u ? u : mt),
                          (this.generateMipmaps = !1),
                          (this.flipY = !1),
                          (this.unpackAlignment = 1);
                      }
                      function Be(t, e, i, n, r, a, o, s, c, u) {
                        (t = void 0 !== t ? t : []),
                          (e = void 0 !== e ? e : at),
                          _e.call(this, t, e, i, n, r, a, o, s, c, u),
                          (this.flipY = !1);
                      }
                      (_e.DEFAULT_IMAGE = void 0),
                        (_e.DEFAULT_MAPPING = 300),
                        Object.defineProperty(_e.prototype, 'needsUpdate', {
                          set: function(t) {
                            !0 === t && this.version++;
                          }
                        }),
                        Object.assign(_e.prototype, e.prototype, {
                          constructor: _e,
                          isTexture: !0,
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              (this.name = t.name),
                              (this.image = t.image),
                              (this.mipmaps = t.mipmaps.slice(0)),
                              (this.mapping = t.mapping),
                              (this.wrapS = t.wrapS),
                              (this.wrapT = t.wrapT),
                              (this.magFilter = t.magFilter),
                              (this.minFilter = t.minFilter),
                              (this.anisotropy = t.anisotropy),
                              (this.format = t.format),
                              (this.type = t.type),
                              this.offset.copy(t.offset),
                              this.repeat.copy(t.repeat),
                              (this.generateMipmaps = t.generateMipmaps),
                              (this.premultiplyAlpha = t.premultiplyAlpha),
                              (this.flipY = t.flipY),
                              (this.unpackAlignment = t.unpackAlignment),
                              (this.encoding = t.encoding),
                              this
                            );
                          },
                          toJSON: function(t) {
                            if (void 0 !== t.textures[this.uuid])
                              return t.textures[this.uuid];
                            var e = {
                              metadata: {
                                version: 4.5,
                                type: 'Texture',
                                generator: 'Texture.toJSON'
                              },
                              uuid: this.uuid,
                              name: this.name,
                              mapping: this.mapping,
                              repeat: [this.repeat.x, this.repeat.y],
                              offset: [this.offset.x, this.offset.y],
                              wrap: [this.wrapS, this.wrapT],
                              minFilter: this.minFilter,
                              magFilter: this.magFilter,
                              anisotropy: this.anisotropy,
                              flipY: this.flipY
                            };
                            if (void 0 !== this.image) {
                              var i = this.image;
                              void 0 === i.uuid && (i.uuid = le.generateUUID()),
                                void 0 === t.images[i.uuid] &&
                                  (t.images[i.uuid] = {
                                    uuid: i.uuid,
                                    url: (function(t) {
                                      var e;
                                      if (t instanceof HTMLCanvasElement) e = t;
                                      else {
                                        ((e = document.createElementNS(
                                          'http://www.w3.org/1999/xhtml',
                                          'canvas'
                                        )).width =
                                          t.width),
                                          (e.height = t.height);
                                        var i = e.getContext('2d');
                                        t instanceof ImageData
                                          ? i.putImageData(t, 0, 0)
                                          : i.drawImage(
                                              t,
                                              0,
                                              0,
                                              t.width,
                                              t.height
                                            );
                                      }
                                      return e.width > 2048 || e.height > 2048
                                        ? e.toDataURL('image/jpeg', 0.6)
                                        : e.toDataURL('image/png');
                                    })(i)
                                  }),
                                (e.image = i.uuid);
                            }
                            return (t.textures[this.uuid] = e), e;
                          },
                          dispose: function() {
                            this.dispatchEvent({ type: 'dispose' });
                          },
                          transformUv: function(t) {
                            if (300 === this.mapping) {
                              if (
                                (t.multiply(this.repeat),
                                t.add(this.offset),
                                t.x < 0 || t.x > 1)
                              )
                                switch (this.wrapS) {
                                  case dt:
                                    t.x = t.x - Math.floor(t.x);
                                    break;
                                  case pt:
                                    t.x = t.x < 0 ? 0 : 1;
                                    break;
                                  case ft:
                                    1 === Math.abs(Math.floor(t.x) % 2)
                                      ? (t.x = Math.ceil(t.x) - t.x)
                                      : (t.x = t.x - Math.floor(t.x));
                                }
                              if (t.y < 0 || t.y > 1)
                                switch (this.wrapT) {
                                  case dt:
                                    t.y = t.y - Math.floor(t.y);
                                    break;
                                  case pt:
                                    t.y = t.y < 0 ? 0 : 1;
                                    break;
                                  case ft:
                                    1 === Math.abs(Math.floor(t.y) % 2)
                                      ? (t.y = Math.ceil(t.y) - t.y)
                                      : (t.y = t.y - Math.floor(t.y));
                                }
                              this.flipY && (t.y = 1 - t.y);
                            }
                          }
                        }),
                        Object.assign(je.prototype, {
                          isVector4: !0,
                          set: function(t, e, i, n) {
                            return (
                              (this.x = t),
                              (this.y = e),
                              (this.z = i),
                              (this.w = n),
                              this
                            );
                          },
                          setScalar: function(t) {
                            return (
                              (this.x = t),
                              (this.y = t),
                              (this.z = t),
                              (this.w = t),
                              this
                            );
                          },
                          setX: function(t) {
                            return (this.x = t), this;
                          },
                          setY: function(t) {
                            return (this.y = t), this;
                          },
                          setZ: function(t) {
                            return (this.z = t), this;
                          },
                          setW: function(t) {
                            return (this.w = t), this;
                          },
                          setComponent: function(t, e) {
                            switch (t) {
                              case 0:
                                this.x = e;
                                break;
                              case 1:
                                this.y = e;
                                break;
                              case 2:
                                this.z = e;
                                break;
                              case 3:
                                this.w = e;
                                break;
                              default:
                                throw new Error('index is out of range: ' + t);
                            }
                            return this;
                          },
                          getComponent: function(t) {
                            switch (t) {
                              case 0:
                                return this.x;
                              case 1:
                                return this.y;
                              case 2:
                                return this.z;
                              case 3:
                                return this.w;
                              default:
                                throw new Error('index is out of range: ' + t);
                            }
                          },
                          clone: function() {
                            return new this.constructor(
                              this.x,
                              this.y,
                              this.z,
                              this.w
                            );
                          },
                          copy: function(t) {
                            return (
                              (this.x = t.x),
                              (this.y = t.y),
                              (this.z = t.z),
                              (this.w = void 0 !== t.w ? t.w : 1),
                              this
                            );
                          },
                          add: function(t, e) {
                            return void 0 !== e
                              ? this.addVectors(t, e)
                              : ((this.x += t.x),
                                (this.y += t.y),
                                (this.z += t.z),
                                (this.w += t.w),
                                this);
                          },
                          addScalar: function(t) {
                            return (
                              (this.x += t),
                              (this.y += t),
                              (this.z += t),
                              (this.w += t),
                              this
                            );
                          },
                          addVectors: function(t, e) {
                            return (
                              (this.x = t.x + e.x),
                              (this.y = t.y + e.y),
                              (this.z = t.z + e.z),
                              (this.w = t.w + e.w),
                              this
                            );
                          },
                          addScaledVector: function(t, e) {
                            return (
                              (this.x += t.x * e),
                              (this.y += t.y * e),
                              (this.z += t.z * e),
                              (this.w += t.w * e),
                              this
                            );
                          },
                          sub: function(t, e) {
                            return void 0 !== e
                              ? this.subVectors(t, e)
                              : ((this.x -= t.x),
                                (this.y -= t.y),
                                (this.z -= t.z),
                                (this.w -= t.w),
                                this);
                          },
                          subScalar: function(t) {
                            return (
                              (this.x -= t),
                              (this.y -= t),
                              (this.z -= t),
                              (this.w -= t),
                              this
                            );
                          },
                          subVectors: function(t, e) {
                            return (
                              (this.x = t.x - e.x),
                              (this.y = t.y - e.y),
                              (this.z = t.z - e.z),
                              (this.w = t.w - e.w),
                              this
                            );
                          },
                          multiplyScalar: function(t) {
                            return (
                              (this.x *= t),
                              (this.y *= t),
                              (this.z *= t),
                              (this.w *= t),
                              this
                            );
                          },
                          applyMatrix4: function(t) {
                            var e = this.x,
                              i = this.y,
                              n = this.z,
                              r = this.w,
                              a = t.elements;
                            return (
                              (this.x =
                                a[0] * e + a[4] * i + a[8] * n + a[12] * r),
                              (this.y =
                                a[1] * e + a[5] * i + a[9] * n + a[13] * r),
                              (this.z =
                                a[2] * e + a[6] * i + a[10] * n + a[14] * r),
                              (this.w =
                                a[3] * e + a[7] * i + a[11] * n + a[15] * r),
                              this
                            );
                          },
                          divideScalar: function(t) {
                            return this.multiplyScalar(1 / t);
                          },
                          setAxisAngleFromQuaternion: function(t) {
                            this.w = 2 * Math.acos(t.w);
                            var e = Math.sqrt(1 - t.w * t.w);
                            return (
                              e < 1e-4
                                ? ((this.x = 1), (this.y = 0), (this.z = 0))
                                : ((this.x = t.x / e),
                                  (this.y = t.y / e),
                                  (this.z = t.z / e)),
                              this
                            );
                          },
                          setAxisAngleFromRotationMatrix: function(t) {
                            var e,
                              i,
                              n,
                              r,
                              a = t.elements,
                              o = a[0],
                              s = a[4],
                              c = a[8],
                              u = a[1],
                              l = a[5],
                              h = a[9],
                              d = a[2],
                              p = a[6],
                              f = a[10];
                            if (
                              Math.abs(s - u) < 0.01 &&
                              Math.abs(c - d) < 0.01 &&
                              Math.abs(h - p) < 0.01
                            ) {
                              if (
                                Math.abs(s + u) < 0.1 &&
                                Math.abs(c + d) < 0.1 &&
                                Math.abs(h + p) < 0.1 &&
                                Math.abs(o + l + f - 3) < 0.1
                              )
                                return this.set(1, 0, 0, 0), this;
                              e = Math.PI;
                              var m = (o + 1) / 2,
                                g = (l + 1) / 2,
                                v = (f + 1) / 2,
                                y = (s + u) / 4,
                                M = (c + d) / 4,
                                w = (h + p) / 4;
                              return (
                                m > g && m > v
                                  ? m < 0.01
                                    ? ((i = 0),
                                      (n = 0.707106781),
                                      (r = 0.707106781))
                                    : ((n = y / (i = Math.sqrt(m))),
                                      (r = M / i))
                                  : g > v
                                    ? g < 0.01
                                      ? ((i = 0.707106781),
                                        (n = 0),
                                        (r = 0.707106781))
                                      : ((i = y / (n = Math.sqrt(g))),
                                        (r = w / n))
                                    : v < 0.01
                                      ? ((i = 0.707106781),
                                        (n = 0.707106781),
                                        (r = 0))
                                      : ((i = M / (r = Math.sqrt(v))),
                                        (n = w / r)),
                                this.set(i, n, r, e),
                                this
                              );
                            }
                            var x = Math.sqrt(
                              (p - h) * (p - h) +
                                (c - d) * (c - d) +
                                (u - s) * (u - s)
                            );
                            return (
                              Math.abs(x) < 0.001 && (x = 1),
                              (this.x = (p - h) / x),
                              (this.y = (c - d) / x),
                              (this.z = (u - s) / x),
                              (this.w = Math.acos((o + l + f - 1) / 2)),
                              this
                            );
                          },
                          min: function(t) {
                            return (
                              (this.x = Math.min(this.x, t.x)),
                              (this.y = Math.min(this.y, t.y)),
                              (this.z = Math.min(this.z, t.z)),
                              (this.w = Math.min(this.w, t.w)),
                              this
                            );
                          },
                          max: function(t) {
                            return (
                              (this.x = Math.max(this.x, t.x)),
                              (this.y = Math.max(this.y, t.y)),
                              (this.z = Math.max(this.z, t.z)),
                              (this.w = Math.max(this.w, t.w)),
                              this
                            );
                          },
                          clamp: function(t, e) {
                            return (
                              (this.x = Math.max(t.x, Math.min(e.x, this.x))),
                              (this.y = Math.max(t.y, Math.min(e.y, this.y))),
                              (this.z = Math.max(t.z, Math.min(e.z, this.z))),
                              (this.w = Math.max(t.w, Math.min(e.w, this.w))),
                              this
                            );
                          },
                          clampScalar: function(t, e) {
                            return (
                              void 0 === de &&
                                ((de = new je()), (pe = new je())),
                              de.set(t, t, t, t),
                              pe.set(e, e, e, e),
                              this.clamp(de, pe)
                            );
                          },
                          clampLength: function(t, e) {
                            var i = this.length();
                            return this.divideScalar(i || 1).multiplyScalar(
                              Math.max(t, Math.min(e, i))
                            );
                          },
                          floor: function() {
                            return (
                              (this.x = Math.floor(this.x)),
                              (this.y = Math.floor(this.y)),
                              (this.z = Math.floor(this.z)),
                              (this.w = Math.floor(this.w)),
                              this
                            );
                          },
                          ceil: function() {
                            return (
                              (this.x = Math.ceil(this.x)),
                              (this.y = Math.ceil(this.y)),
                              (this.z = Math.ceil(this.z)),
                              (this.w = Math.ceil(this.w)),
                              this
                            );
                          },
                          round: function() {
                            return (
                              (this.x = Math.round(this.x)),
                              (this.y = Math.round(this.y)),
                              (this.z = Math.round(this.z)),
                              (this.w = Math.round(this.w)),
                              this
                            );
                          },
                          roundToZero: function() {
                            return (
                              (this.x =
                                this.x < 0
                                  ? Math.ceil(this.x)
                                  : Math.floor(this.x)),
                              (this.y =
                                this.y < 0
                                  ? Math.ceil(this.y)
                                  : Math.floor(this.y)),
                              (this.z =
                                this.z < 0
                                  ? Math.ceil(this.z)
                                  : Math.floor(this.z)),
                              (this.w =
                                this.w < 0
                                  ? Math.ceil(this.w)
                                  : Math.floor(this.w)),
                              this
                            );
                          },
                          negate: function() {
                            return (
                              (this.x = -this.x),
                              (this.y = -this.y),
                              (this.z = -this.z),
                              (this.w = -this.w),
                              this
                            );
                          },
                          dot: function(t) {
                            return (
                              this.x * t.x +
                              this.y * t.y +
                              this.z * t.z +
                              this.w * t.w
                            );
                          },
                          lengthSq: function() {
                            return (
                              this.x * this.x +
                              this.y * this.y +
                              this.z * this.z +
                              this.w * this.w
                            );
                          },
                          length: function() {
                            return Math.sqrt(
                              this.x * this.x +
                                this.y * this.y +
                                this.z * this.z +
                                this.w * this.w
                            );
                          },
                          lengthManhattan: function() {
                            return (
                              Math.abs(this.x) +
                              Math.abs(this.y) +
                              Math.abs(this.z) +
                              Math.abs(this.w)
                            );
                          },
                          normalize: function() {
                            return this.divideScalar(this.length() || 1);
                          },
                          setLength: function(t) {
                            return this.normalize().multiplyScalar(t);
                          },
                          lerp: function(t, e) {
                            return (
                              (this.x += (t.x - this.x) * e),
                              (this.y += (t.y - this.y) * e),
                              (this.z += (t.z - this.z) * e),
                              (this.w += (t.w - this.w) * e),
                              this
                            );
                          },
                          lerpVectors: function(t, e, i) {
                            return this.subVectors(e, t)
                              .multiplyScalar(i)
                              .add(t);
                          },
                          equals: function(t) {
                            return (
                              t.x === this.x &&
                              t.y === this.y &&
                              t.z === this.z &&
                              t.w === this.w
                            );
                          },
                          fromArray: function(t, e) {
                            return (
                              void 0 === e && (e = 0),
                              (this.x = t[e]),
                              (this.y = t[e + 1]),
                              (this.z = t[e + 2]),
                              (this.w = t[e + 3]),
                              this
                            );
                          },
                          toArray: function(t, e) {
                            return (
                              void 0 === t && (t = []),
                              void 0 === e && (e = 0),
                              (t[e] = this.x),
                              (t[e + 1] = this.y),
                              (t[e + 2] = this.z),
                              (t[e + 3] = this.w),
                              t
                            );
                          },
                          fromBufferAttribute: function(t, e, i) {
                            return (
                              (this.x = t.getX(e)),
                              (this.y = t.getY(e)),
                              (this.z = t.getZ(e)),
                              (this.w = t.getW(e)),
                              this
                            );
                          }
                        }),
                        Object.assign(Oe.prototype, e.prototype, {
                          isWebGLRenderTarget: !0,
                          setSize: function(t, e) {
                            (this.width === t && this.height === e) ||
                              ((this.width = t),
                              (this.height = e),
                              this.dispose()),
                              this.viewport.set(0, 0, t, e),
                              this.scissor.set(0, 0, t, e);
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              (this.width = t.width),
                              (this.height = t.height),
                              this.viewport.copy(t.viewport),
                              (this.texture = t.texture.clone()),
                              (this.depthBuffer = t.depthBuffer),
                              (this.stencilBuffer = t.stencilBuffer),
                              (this.depthTexture = t.depthTexture),
                              this
                            );
                          },
                          dispose: function() {
                            this.dispatchEvent({ type: 'dispose' });
                          }
                        }),
                        (ze.prototype = Object.create(Oe.prototype)),
                        (ze.prototype.constructor = ze),
                        (ze.prototype.isWebGLRenderTargetCube = !0),
                        Object.assign(Re, {
                          slerp: function(t, e, i, n) {
                            return i.copy(t).slerp(e, n);
                          },
                          slerpFlat: function(t, e, i, n, r, a, o) {
                            var s = i[n + 0],
                              c = i[n + 1],
                              u = i[n + 2],
                              l = i[n + 3],
                              h = r[a + 0],
                              d = r[a + 1],
                              p = r[a + 2],
                              f = r[a + 3];
                            if (l !== f || s !== h || c !== d || u !== p) {
                              var m = 1 - o,
                                g = s * h + c * d + u * p + l * f,
                                v = g >= 0 ? 1 : -1,
                                y = 1 - g * g;
                              if (y > Number.EPSILON) {
                                var M = Math.sqrt(y),
                                  w = Math.atan2(M, g * v);
                                (m = Math.sin(m * w) / M),
                                  (o = Math.sin(o * w) / M);
                              }
                              var x = o * v;
                              if (
                                ((s = s * m + h * x),
                                (c = c * m + d * x),
                                (u = u * m + p * x),
                                (l = l * m + f * x),
                                m === 1 - o)
                              ) {
                                var A =
                                  1 / Math.sqrt(s * s + c * c + u * u + l * l);
                                (s *= A), (c *= A), (u *= A), (l *= A);
                              }
                            }
                            (t[e] = s),
                              (t[e + 1] = c),
                              (t[e + 2] = u),
                              (t[e + 3] = l);
                          }
                        }),
                        Object.defineProperties(Re.prototype, {
                          x: {
                            get: function() {
                              return this._x;
                            },
                            set: function(t) {
                              (this._x = t), this.onChangeCallback();
                            }
                          },
                          y: {
                            get: function() {
                              return this._y;
                            },
                            set: function(t) {
                              (this._y = t), this.onChangeCallback();
                            }
                          },
                          z: {
                            get: function() {
                              return this._z;
                            },
                            set: function(t) {
                              (this._z = t), this.onChangeCallback();
                            }
                          },
                          w: {
                            get: function() {
                              return this._w;
                            },
                            set: function(t) {
                              (this._w = t), this.onChangeCallback();
                            }
                          }
                        }),
                        Object.assign(Re.prototype, {
                          set: function(t, e, i, n) {
                            return (
                              (this._x = t),
                              (this._y = e),
                              (this._z = i),
                              (this._w = n),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          clone: function() {
                            return new this.constructor(
                              this._x,
                              this._y,
                              this._z,
                              this._w
                            );
                          },
                          copy: function(t) {
                            return (
                              (this._x = t.x),
                              (this._y = t.y),
                              (this._z = t.z),
                              (this._w = t.w),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          setFromEuler: function(t, e) {
                            if (!t || !t.isEuler)
                              throw new Error(
                                'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.'
                              );
                            var i = t._x,
                              n = t._y,
                              r = t._z,
                              a = t.order,
                              o = Math.cos,
                              s = Math.sin,
                              c = o(i / 2),
                              u = o(n / 2),
                              l = o(r / 2),
                              h = s(i / 2),
                              d = s(n / 2),
                              p = s(r / 2);
                            return (
                              'XYZ' === a
                                ? ((this._x = h * u * l + c * d * p),
                                  (this._y = c * d * l - h * u * p),
                                  (this._z = c * u * p + h * d * l),
                                  (this._w = c * u * l - h * d * p))
                                : 'YXZ' === a
                                  ? ((this._x = h * u * l + c * d * p),
                                    (this._y = c * d * l - h * u * p),
                                    (this._z = c * u * p - h * d * l),
                                    (this._w = c * u * l + h * d * p))
                                  : 'ZXY' === a
                                    ? ((this._x = h * u * l - c * d * p),
                                      (this._y = c * d * l + h * u * p),
                                      (this._z = c * u * p + h * d * l),
                                      (this._w = c * u * l - h * d * p))
                                    : 'ZYX' === a
                                      ? ((this._x = h * u * l - c * d * p),
                                        (this._y = c * d * l + h * u * p),
                                        (this._z = c * u * p - h * d * l),
                                        (this._w = c * u * l + h * d * p))
                                      : 'YZX' === a
                                        ? ((this._x = h * u * l + c * d * p),
                                          (this._y = c * d * l + h * u * p),
                                          (this._z = c * u * p - h * d * l),
                                          (this._w = c * u * l - h * d * p))
                                        : 'XZY' === a &&
                                          ((this._x = h * u * l - c * d * p),
                                          (this._y = c * d * l - h * u * p),
                                          (this._z = c * u * p + h * d * l),
                                          (this._w = c * u * l + h * d * p)),
                              !1 !== e && this.onChangeCallback(),
                              this
                            );
                          },
                          setFromAxisAngle: function(t, e) {
                            var i = e / 2,
                              n = Math.sin(i);
                            return (
                              (this._x = t.x * n),
                              (this._y = t.y * n),
                              (this._z = t.z * n),
                              (this._w = Math.cos(i)),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          setFromRotationMatrix: function(t) {
                            var e,
                              i = t.elements,
                              n = i[0],
                              r = i[4],
                              a = i[8],
                              o = i[1],
                              s = i[5],
                              c = i[9],
                              u = i[2],
                              l = i[6],
                              h = i[10],
                              d = n + s + h;
                            return (
                              d > 0
                                ? ((e = 0.5 / Math.sqrt(d + 1)),
                                  (this._w = 0.25 / e),
                                  (this._x = (l - c) * e),
                                  (this._y = (a - u) * e),
                                  (this._z = (o - r) * e))
                                : n > s && n > h
                                  ? ((e = 2 * Math.sqrt(1 + n - s - h)),
                                    (this._w = (l - c) / e),
                                    (this._x = 0.25 * e),
                                    (this._y = (r + o) / e),
                                    (this._z = (a + u) / e))
                                  : s > h
                                    ? ((e = 2 * Math.sqrt(1 + s - n - h)),
                                      (this._w = (a - u) / e),
                                      (this._x = (r + o) / e),
                                      (this._y = 0.25 * e),
                                      (this._z = (c + l) / e))
                                    : ((e = 2 * Math.sqrt(1 + h - n - s)),
                                      (this._w = (o - r) / e),
                                      (this._x = (a + u) / e),
                                      (this._y = (c + l) / e),
                                      (this._z = 0.25 * e)),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          setFromUnitVectors: ((me = new ke()),
                          function(t, e) {
                            return (
                              void 0 === me && (me = new ke()),
                              (fe = t.dot(e) + 1) < 1e-6
                                ? ((fe = 0),
                                  Math.abs(t.x) > Math.abs(t.z)
                                    ? me.set(-t.y, t.x, 0)
                                    : me.set(0, -t.z, t.y))
                                : me.crossVectors(t, e),
                              (this._x = me.x),
                              (this._y = me.y),
                              (this._z = me.z),
                              (this._w = fe),
                              this.normalize()
                            );
                          }),
                          inverse: function() {
                            return this.conjugate().normalize();
                          },
                          conjugate: function() {
                            return (
                              (this._x *= -1),
                              (this._y *= -1),
                              (this._z *= -1),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          dot: function(t) {
                            return (
                              this._x * t._x +
                              this._y * t._y +
                              this._z * t._z +
                              this._w * t._w
                            );
                          },
                          lengthSq: function() {
                            return (
                              this._x * this._x +
                              this._y * this._y +
                              this._z * this._z +
                              this._w * this._w
                            );
                          },
                          length: function() {
                            return Math.sqrt(
                              this._x * this._x +
                                this._y * this._y +
                                this._z * this._z +
                                this._w * this._w
                            );
                          },
                          normalize: function() {
                            var t = this.length();
                            return (
                              0 === t
                                ? ((this._x = 0),
                                  (this._y = 0),
                                  (this._z = 0),
                                  (this._w = 1))
                                : ((t = 1 / t),
                                  (this._x = this._x * t),
                                  (this._y = this._y * t),
                                  (this._z = this._z * t),
                                  (this._w = this._w * t)),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          multiply: function(t, e) {
                            return void 0 !== e
                              ? this.multiplyQuaternions(t, e)
                              : this.multiplyQuaternions(this, t);
                          },
                          premultiply: function(t) {
                            return this.multiplyQuaternions(t, this);
                          },
                          multiplyQuaternions: function(t, e) {
                            var i = t._x,
                              n = t._y,
                              r = t._z,
                              a = t._w,
                              o = e._x,
                              s = e._y,
                              c = e._z,
                              u = e._w;
                            return (
                              (this._x = i * u + a * o + n * c - r * s),
                              (this._y = n * u + a * s + r * o - i * c),
                              (this._z = r * u + a * c + i * s - n * o),
                              (this._w = a * u - i * o - n * s - r * c),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          slerp: function(t, e) {
                            if (0 === e) return this;
                            if (1 === e) return this.copy(t);
                            var i = this._x,
                              n = this._y,
                              r = this._z,
                              a = this._w,
                              o = a * t._w + i * t._x + n * t._y + r * t._z;
                            if (
                              (o < 0
                                ? ((this._w = -t._w),
                                  (this._x = -t._x),
                                  (this._y = -t._y),
                                  (this._z = -t._z),
                                  (o = -o))
                                : this.copy(t),
                              o >= 1)
                            )
                              return (
                                (this._w = a),
                                (this._x = i),
                                (this._y = n),
                                (this._z = r),
                                this
                              );
                            var s = Math.sqrt(1 - o * o);
                            if (Math.abs(s) < 0.001)
                              return (
                                (this._w = 0.5 * (a + this._w)),
                                (this._x = 0.5 * (i + this._x)),
                                (this._y = 0.5 * (n + this._y)),
                                (this._z = 0.5 * (r + this._z)),
                                this
                              );
                            var c = Math.atan2(s, o),
                              u = Math.sin((1 - e) * c) / s,
                              l = Math.sin(e * c) / s;
                            return (
                              (this._w = a * u + this._w * l),
                              (this._x = i * u + this._x * l),
                              (this._y = n * u + this._y * l),
                              (this._z = r * u + this._z * l),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          equals: function(t) {
                            return (
                              t._x === this._x &&
                              t._y === this._y &&
                              t._z === this._z &&
                              t._w === this._w
                            );
                          },
                          fromArray: function(t, e) {
                            return (
                              void 0 === e && (e = 0),
                              (this._x = t[e]),
                              (this._y = t[e + 1]),
                              (this._z = t[e + 2]),
                              (this._w = t[e + 3]),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          toArray: function(t, e) {
                            return (
                              void 0 === t && (t = []),
                              void 0 === e && (e = 0),
                              (t[e] = this._x),
                              (t[e + 1] = this._y),
                              (t[e + 2] = this._z),
                              (t[e + 3] = this._w),
                              t
                            );
                          },
                          onChange: function(t) {
                            return (this.onChangeCallback = t), this;
                          },
                          onChangeCallback: function() {}
                        }),
                        Object.assign(ke.prototype, {
                          isVector3: !0,
                          set: function(t, e, i) {
                            return (
                              (this.x = t), (this.y = e), (this.z = i), this
                            );
                          },
                          setScalar: function(t) {
                            return (
                              (this.x = t), (this.y = t), (this.z = t), this
                            );
                          },
                          setX: function(t) {
                            return (this.x = t), this;
                          },
                          setY: function(t) {
                            return (this.y = t), this;
                          },
                          setZ: function(t) {
                            return (this.z = t), this;
                          },
                          setComponent: function(t, e) {
                            switch (t) {
                              case 0:
                                this.x = e;
                                break;
                              case 1:
                                this.y = e;
                                break;
                              case 2:
                                this.z = e;
                                break;
                              default:
                                throw new Error('index is out of range: ' + t);
                            }
                            return this;
                          },
                          getComponent: function(t) {
                            switch (t) {
                              case 0:
                                return this.x;
                              case 1:
                                return this.y;
                              case 2:
                                return this.z;
                              default:
                                throw new Error('index is out of range: ' + t);
                            }
                          },
                          clone: function() {
                            return new this.constructor(this.x, this.y, this.z);
                          },
                          copy: function(t) {
                            return (
                              (this.x = t.x),
                              (this.y = t.y),
                              (this.z = t.z),
                              this
                            );
                          },
                          add: function(t, e) {
                            return void 0 !== e
                              ? this.addVectors(t, e)
                              : ((this.x += t.x),
                                (this.y += t.y),
                                (this.z += t.z),
                                this);
                          },
                          addScalar: function(t) {
                            return (
                              (this.x += t), (this.y += t), (this.z += t), this
                            );
                          },
                          addVectors: function(t, e) {
                            return (
                              (this.x = t.x + e.x),
                              (this.y = t.y + e.y),
                              (this.z = t.z + e.z),
                              this
                            );
                          },
                          addScaledVector: function(t, e) {
                            return (
                              (this.x += t.x * e),
                              (this.y += t.y * e),
                              (this.z += t.z * e),
                              this
                            );
                          },
                          sub: function(t, e) {
                            return void 0 !== e
                              ? this.subVectors(t, e)
                              : ((this.x -= t.x),
                                (this.y -= t.y),
                                (this.z -= t.z),
                                this);
                          },
                          subScalar: function(t) {
                            return (
                              (this.x -= t), (this.y -= t), (this.z -= t), this
                            );
                          },
                          subVectors: function(t, e) {
                            return (
                              (this.x = t.x - e.x),
                              (this.y = t.y - e.y),
                              (this.z = t.z - e.z),
                              this
                            );
                          },
                          multiply: function(t, e) {
                            return void 0 !== e
                              ? this.multiplyVectors(t, e)
                              : ((this.x *= t.x),
                                (this.y *= t.y),
                                (this.z *= t.z),
                                this);
                          },
                          multiplyScalar: function(t) {
                            return (
                              (this.x *= t), (this.y *= t), (this.z *= t), this
                            );
                          },
                          multiplyVectors: function(t, e) {
                            return (
                              (this.x = t.x * e.x),
                              (this.y = t.y * e.y),
                              (this.z = t.z * e.z),
                              this
                            );
                          },
                          applyEuler: ((Ee = new Re()),
                          function(t) {
                            return (
                              !t || t.isEuler,
                              this.applyQuaternion(Ee.setFromEuler(t))
                            );
                          }),
                          applyAxisAngle: ((Ae = new Re()),
                          function(t, e) {
                            return this.applyQuaternion(
                              Ae.setFromAxisAngle(t, e)
                            );
                          }),
                          applyMatrix3: function(t) {
                            var e = this.x,
                              i = this.y,
                              n = this.z,
                              r = t.elements;
                            return (
                              (this.x = r[0] * e + r[3] * i + r[6] * n),
                              (this.y = r[1] * e + r[4] * i + r[7] * n),
                              (this.z = r[2] * e + r[5] * i + r[8] * n),
                              this
                            );
                          },
                          applyMatrix4: function(t) {
                            var e = this.x,
                              i = this.y,
                              n = this.z,
                              r = t.elements,
                              a = 1 / (r[3] * e + r[7] * i + r[11] * n + r[15]);
                            return (
                              (this.x =
                                (r[0] * e + r[4] * i + r[8] * n + r[12]) * a),
                              (this.y =
                                (r[1] * e + r[5] * i + r[9] * n + r[13]) * a),
                              (this.z =
                                (r[2] * e + r[6] * i + r[10] * n + r[14]) * a),
                              this
                            );
                          },
                          applyQuaternion: function(t) {
                            var e = this.x,
                              i = this.y,
                              n = this.z,
                              r = t.x,
                              a = t.y,
                              o = t.z,
                              s = t.w,
                              c = s * e + a * n - o * i,
                              u = s * i + o * e - r * n,
                              l = s * n + r * i - a * e,
                              h = -r * e - a * i - o * n;
                            return (
                              (this.x = c * s + h * -r + u * -o - l * -a),
                              (this.y = u * s + h * -a + l * -r - c * -o),
                              (this.z = l * s + h * -o + c * -a - u * -r),
                              this
                            );
                          },
                          project: ((xe = new Ue()),
                          function(t) {
                            return (
                              xe.multiplyMatrices(
                                t.projectionMatrix,
                                xe.getInverse(t.matrixWorld)
                              ),
                              this.applyMatrix4(xe)
                            );
                          }),
                          unproject: ((we = new Ue()),
                          function(t) {
                            return (
                              we.multiplyMatrices(
                                t.matrixWorld,
                                we.getInverse(t.projectionMatrix)
                              ),
                              this.applyMatrix4(we)
                            );
                          }),
                          transformDirection: function(t) {
                            var e = this.x,
                              i = this.y,
                              n = this.z,
                              r = t.elements;
                            return (
                              (this.x = r[0] * e + r[4] * i + r[8] * n),
                              (this.y = r[1] * e + r[5] * i + r[9] * n),
                              (this.z = r[2] * e + r[6] * i + r[10] * n),
                              this.normalize()
                            );
                          },
                          divide: function(t) {
                            return (
                              (this.x /= t.x),
                              (this.y /= t.y),
                              (this.z /= t.z),
                              this
                            );
                          },
                          divideScalar: function(t) {
                            return this.multiplyScalar(1 / t);
                          },
                          min: function(t) {
                            return (
                              (this.x = Math.min(this.x, t.x)),
                              (this.y = Math.min(this.y, t.y)),
                              (this.z = Math.min(this.z, t.z)),
                              this
                            );
                          },
                          max: function(t) {
                            return (
                              (this.x = Math.max(this.x, t.x)),
                              (this.y = Math.max(this.y, t.y)),
                              (this.z = Math.max(this.z, t.z)),
                              this
                            );
                          },
                          clamp: function(t, e) {
                            return (
                              (this.x = Math.max(t.x, Math.min(e.x, this.x))),
                              (this.y = Math.max(t.y, Math.min(e.y, this.y))),
                              (this.z = Math.max(t.z, Math.min(e.z, this.z))),
                              this
                            );
                          },
                          clampScalar: ((ye = new ke()),
                          (Me = new ke()),
                          function(t, e) {
                            return (
                              ye.set(t, t, t),
                              Me.set(e, e, e),
                              this.clamp(ye, Me)
                            );
                          }),
                          clampLength: function(t, e) {
                            var i = this.length();
                            return this.divideScalar(i || 1).multiplyScalar(
                              Math.max(t, Math.min(e, i))
                            );
                          },
                          floor: function() {
                            return (
                              (this.x = Math.floor(this.x)),
                              (this.y = Math.floor(this.y)),
                              (this.z = Math.floor(this.z)),
                              this
                            );
                          },
                          ceil: function() {
                            return (
                              (this.x = Math.ceil(this.x)),
                              (this.y = Math.ceil(this.y)),
                              (this.z = Math.ceil(this.z)),
                              this
                            );
                          },
                          round: function() {
                            return (
                              (this.x = Math.round(this.x)),
                              (this.y = Math.round(this.y)),
                              (this.z = Math.round(this.z)),
                              this
                            );
                          },
                          roundToZero: function() {
                            return (
                              (this.x =
                                this.x < 0
                                  ? Math.ceil(this.x)
                                  : Math.floor(this.x)),
                              (this.y =
                                this.y < 0
                                  ? Math.ceil(this.y)
                                  : Math.floor(this.y)),
                              (this.z =
                                this.z < 0
                                  ? Math.ceil(this.z)
                                  : Math.floor(this.z)),
                              this
                            );
                          },
                          negate: function() {
                            return (
                              (this.x = -this.x),
                              (this.y = -this.y),
                              (this.z = -this.z),
                              this
                            );
                          },
                          dot: function(t) {
                            return this.x * t.x + this.y * t.y + this.z * t.z;
                          },
                          lengthSq: function() {
                            return (
                              this.x * this.x +
                              this.y * this.y +
                              this.z * this.z
                            );
                          },
                          length: function() {
                            return Math.sqrt(
                              this.x * this.x +
                                this.y * this.y +
                                this.z * this.z
                            );
                          },
                          lengthManhattan: function() {
                            return (
                              Math.abs(this.x) +
                              Math.abs(this.y) +
                              Math.abs(this.z)
                            );
                          },
                          normalize: function() {
                            return this.divideScalar(this.length() || 1);
                          },
                          setLength: function(t) {
                            return this.normalize().multiplyScalar(t);
                          },
                          lerp: function(t, e) {
                            return (
                              (this.x += (t.x - this.x) * e),
                              (this.y += (t.y - this.y) * e),
                              (this.z += (t.z - this.z) * e),
                              this
                            );
                          },
                          lerpVectors: function(t, e, i) {
                            return this.subVectors(e, t)
                              .multiplyScalar(i)
                              .add(t);
                          },
                          cross: function(t, e) {
                            if (void 0 !== e) return this.crossVectors(t, e);
                            var i = this.x,
                              n = this.y,
                              r = this.z;
                            return (
                              (this.x = n * t.z - r * t.y),
                              (this.y = r * t.x - i * t.z),
                              (this.z = i * t.y - n * t.x),
                              this
                            );
                          },
                          crossVectors: function(t, e) {
                            var i = t.x,
                              n = t.y,
                              r = t.z,
                              a = e.x,
                              o = e.y,
                              s = e.z;
                            return (
                              (this.x = n * s - r * o),
                              (this.y = r * a - i * s),
                              (this.z = i * o - n * a),
                              this
                            );
                          },
                          projectOnVector: function(t) {
                            var e = t.dot(this) / t.lengthSq();
                            return this.copy(t).multiplyScalar(e);
                          },
                          projectOnPlane: ((ve = new ke()),
                          function(t) {
                            return (
                              ve.copy(this).projectOnVector(t), this.sub(ve)
                            );
                          }),
                          reflect: ((ge = new ke()),
                          function(t) {
                            return this.sub(
                              ge.copy(t).multiplyScalar(2 * this.dot(t))
                            );
                          }),
                          angleTo: function(t) {
                            var e =
                              this.dot(t) /
                              Math.sqrt(this.lengthSq() * t.lengthSq());
                            return Math.acos(le.clamp(e, -1, 1));
                          },
                          distanceTo: function(t) {
                            return Math.sqrt(this.distanceToSquared(t));
                          },
                          distanceToSquared: function(t) {
                            var e = this.x - t.x,
                              i = this.y - t.y,
                              n = this.z - t.z;
                            return e * e + i * i + n * n;
                          },
                          distanceToManhattan: function(t) {
                            return (
                              Math.abs(this.x - t.x) +
                              Math.abs(this.y - t.y) +
                              Math.abs(this.z - t.z)
                            );
                          },
                          setFromSpherical: function(t) {
                            var e = Math.sin(t.phi) * t.radius;
                            return (
                              (this.x = e * Math.sin(t.theta)),
                              (this.y = Math.cos(t.phi) * t.radius),
                              (this.z = e * Math.cos(t.theta)),
                              this
                            );
                          },
                          setFromCylindrical: function(t) {
                            return (
                              (this.x = t.radius * Math.sin(t.theta)),
                              (this.y = t.y),
                              (this.z = t.radius * Math.cos(t.theta)),
                              this
                            );
                          },
                          setFromMatrixPosition: function(t) {
                            var e = t.elements;
                            return (
                              (this.x = e[12]),
                              (this.y = e[13]),
                              (this.z = e[14]),
                              this
                            );
                          },
                          setFromMatrixScale: function(t) {
                            var e = this.setFromMatrixColumn(t, 0).length(),
                              i = this.setFromMatrixColumn(t, 1).length(),
                              n = this.setFromMatrixColumn(t, 2).length();
                            return (
                              (this.x = e), (this.y = i), (this.z = n), this
                            );
                          },
                          setFromMatrixColumn: function(t, e) {
                            return this.fromArray(t.elements, 4 * e);
                          },
                          equals: function(t) {
                            return (
                              t.x === this.x && t.y === this.y && t.z === this.z
                            );
                          },
                          fromArray: function(t, e) {
                            return (
                              void 0 === e && (e = 0),
                              (this.x = t[e]),
                              (this.y = t[e + 1]),
                              (this.z = t[e + 2]),
                              this
                            );
                          },
                          toArray: function(t, e) {
                            return (
                              void 0 === t && (t = []),
                              void 0 === e && (e = 0),
                              (t[e] = this.x),
                              (t[e + 1] = this.y),
                              (t[e + 2] = this.z),
                              t
                            );
                          },
                          fromBufferAttribute: function(t, e, i) {
                            return (
                              (this.x = t.getX(e)),
                              (this.y = t.getY(e)),
                              (this.z = t.getZ(e)),
                              this
                            );
                          }
                        }),
                        Object.assign(Ue.prototype, {
                          isMatrix4: !0,
                          set: function(
                            t,
                            e,
                            i,
                            n,
                            r,
                            a,
                            o,
                            s,
                            c,
                            u,
                            l,
                            h,
                            d,
                            p,
                            f,
                            m
                          ) {
                            var g = this.elements;
                            return (
                              (g[0] = t),
                              (g[4] = e),
                              (g[8] = i),
                              (g[12] = n),
                              (g[1] = r),
                              (g[5] = a),
                              (g[9] = o),
                              (g[13] = s),
                              (g[2] = c),
                              (g[6] = u),
                              (g[10] = l),
                              (g[14] = h),
                              (g[3] = d),
                              (g[7] = p),
                              (g[11] = f),
                              (g[15] = m),
                              this
                            );
                          },
                          identity: function() {
                            return (
                              this.set(
                                1,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          clone: function() {
                            return new Ue().fromArray(this.elements);
                          },
                          copy: function(t) {
                            var e = this.elements,
                              i = t.elements;
                            return (
                              (e[0] = i[0]),
                              (e[1] = i[1]),
                              (e[2] = i[2]),
                              (e[3] = i[3]),
                              (e[4] = i[4]),
                              (e[5] = i[5]),
                              (e[6] = i[6]),
                              (e[7] = i[7]),
                              (e[8] = i[8]),
                              (e[9] = i[9]),
                              (e[10] = i[10]),
                              (e[11] = i[11]),
                              (e[12] = i[12]),
                              (e[13] = i[13]),
                              (e[14] = i[14]),
                              (e[15] = i[15]),
                              this
                            );
                          },
                          copyPosition: function(t) {
                            var e = this.elements,
                              i = t.elements;
                            return (
                              (e[12] = i[12]),
                              (e[13] = i[13]),
                              (e[14] = i[14]),
                              this
                            );
                          },
                          extractBasis: function(t, e, i) {
                            return (
                              t.setFromMatrixColumn(this, 0),
                              e.setFromMatrixColumn(this, 1),
                              i.setFromMatrixColumn(this, 2),
                              this
                            );
                          },
                          makeBasis: function(t, e, i) {
                            return (
                              this.set(
                                t.x,
                                e.x,
                                i.x,
                                0,
                                t.y,
                                e.y,
                                i.y,
                                0,
                                t.z,
                                e.z,
                                i.z,
                                0,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          extractRotation: ((Se = new ke()),
                          function(t) {
                            var e = this.elements,
                              i = t.elements,
                              n = 1 / Se.setFromMatrixColumn(t, 0).length(),
                              r = 1 / Se.setFromMatrixColumn(t, 1).length(),
                              a = 1 / Se.setFromMatrixColumn(t, 2).length();
                            return (
                              (e[0] = i[0] * n),
                              (e[1] = i[1] * n),
                              (e[2] = i[2] * n),
                              (e[4] = i[4] * r),
                              (e[5] = i[5] * r),
                              (e[6] = i[6] * r),
                              (e[8] = i[8] * a),
                              (e[9] = i[9] * a),
                              (e[10] = i[10] * a),
                              this
                            );
                          }),
                          makeRotationFromEuler: function(t) {
                            !t || t.isEuler;
                            var e = this.elements,
                              i = t.x,
                              n = t.y,
                              r = t.z,
                              a = Math.cos(i),
                              o = Math.sin(i),
                              s = Math.cos(n),
                              c = Math.sin(n),
                              u = Math.cos(r),
                              l = Math.sin(r);
                            if ('XYZ' === t.order) {
                              var h = a * u,
                                d = a * l,
                                p = o * u,
                                f = o * l;
                              (e[0] = s * u),
                                (e[4] = -s * l),
                                (e[8] = c),
                                (e[1] = d + p * c),
                                (e[5] = h - f * c),
                                (e[9] = -o * s),
                                (e[2] = f - h * c),
                                (e[6] = p + d * c),
                                (e[10] = a * s);
                            } else if ('YXZ' === t.order) {
                              var m = s * u,
                                g = s * l,
                                v = c * u,
                                y = c * l;
                              (e[0] = m + y * o),
                                (e[4] = v * o - g),
                                (e[8] = a * c),
                                (e[1] = a * l),
                                (e[5] = a * u),
                                (e[9] = -o),
                                (e[2] = g * o - v),
                                (e[6] = y + m * o),
                                (e[10] = a * s);
                            } else if ('ZXY' === t.order) {
                              (m = s * u),
                                (g = s * l),
                                (v = c * u),
                                (y = c * l);
                              (e[0] = m - y * o),
                                (e[4] = -a * l),
                                (e[8] = v + g * o),
                                (e[1] = g + v * o),
                                (e[5] = a * u),
                                (e[9] = y - m * o),
                                (e[2] = -a * c),
                                (e[6] = o),
                                (e[10] = a * s);
                            } else if ('ZYX' === t.order) {
                              (h = a * u),
                                (d = a * l),
                                (p = o * u),
                                (f = o * l);
                              (e[0] = s * u),
                                (e[4] = p * c - d),
                                (e[8] = h * c + f),
                                (e[1] = s * l),
                                (e[5] = f * c + h),
                                (e[9] = d * c - p),
                                (e[2] = -c),
                                (e[6] = o * s),
                                (e[10] = a * s);
                            } else if ('YZX' === t.order) {
                              var M = a * s,
                                w = a * c,
                                x = o * s,
                                A = o * c;
                              (e[0] = s * u),
                                (e[4] = A - M * l),
                                (e[8] = x * l + w),
                                (e[1] = l),
                                (e[5] = a * u),
                                (e[9] = -o * u),
                                (e[2] = -c * u),
                                (e[6] = w * l + x),
                                (e[10] = M - A * l);
                            } else if ('XZY' === t.order) {
                              (M = a * s),
                                (w = a * c),
                                (x = o * s),
                                (A = o * c);
                              (e[0] = s * u),
                                (e[4] = -l),
                                (e[8] = c * u),
                                (e[1] = M * l + A),
                                (e[5] = a * u),
                                (e[9] = w * l - x),
                                (e[2] = x * l - w),
                                (e[6] = o * u),
                                (e[10] = A * l + M);
                            }
                            return (
                              (e[3] = 0),
                              (e[7] = 0),
                              (e[11] = 0),
                              (e[12] = 0),
                              (e[13] = 0),
                              (e[14] = 0),
                              (e[15] = 1),
                              this
                            );
                          },
                          makeRotationFromQuaternion: function(t) {
                            var e = this.elements,
                              i = t._x,
                              n = t._y,
                              r = t._z,
                              a = t._w,
                              o = i + i,
                              s = n + n,
                              c = r + r,
                              u = i * o,
                              l = i * s,
                              h = i * c,
                              d = n * s,
                              p = n * c,
                              f = r * c,
                              m = a * o,
                              g = a * s,
                              v = a * c;
                            return (
                              (e[0] = 1 - (d + f)),
                              (e[4] = l - v),
                              (e[8] = h + g),
                              (e[1] = l + v),
                              (e[5] = 1 - (u + f)),
                              (e[9] = p - m),
                              (e[2] = h - g),
                              (e[6] = p + m),
                              (e[10] = 1 - (u + d)),
                              (e[3] = 0),
                              (e[7] = 0),
                              (e[11] = 0),
                              (e[12] = 0),
                              (e[13] = 0),
                              (e[14] = 0),
                              (e[15] = 1),
                              this
                            );
                          },
                          lookAt: ((Ne = new ke()),
                          (De = new ke()),
                          (Ce = new ke()),
                          function(t, e, i) {
                            var n = this.elements;
                            return (
                              Ce.subVectors(t, e),
                              0 === Ce.lengthSq() && (Ce.z = 1),
                              Ce.normalize(),
                              Ne.crossVectors(i, Ce),
                              0 === Ne.lengthSq() &&
                                (1 === Math.abs(i.z)
                                  ? (Ce.x += 1e-4)
                                  : (Ce.z += 1e-4),
                                Ce.normalize(),
                                Ne.crossVectors(i, Ce)),
                              Ne.normalize(),
                              De.crossVectors(Ce, Ne),
                              (n[0] = Ne.x),
                              (n[4] = De.x),
                              (n[8] = Ce.x),
                              (n[1] = Ne.y),
                              (n[5] = De.y),
                              (n[9] = Ce.y),
                              (n[2] = Ne.z),
                              (n[6] = De.z),
                              (n[10] = Ce.z),
                              this
                            );
                          }),
                          multiply: function(t, e) {
                            return void 0 !== e
                              ? this.multiplyMatrices(t, e)
                              : this.multiplyMatrices(this, t);
                          },
                          premultiply: function(t) {
                            return this.multiplyMatrices(t, this);
                          },
                          multiplyMatrices: function(t, e) {
                            var i = t.elements,
                              n = e.elements,
                              r = this.elements,
                              a = i[0],
                              o = i[4],
                              s = i[8],
                              c = i[12],
                              u = i[1],
                              l = i[5],
                              h = i[9],
                              d = i[13],
                              p = i[2],
                              f = i[6],
                              m = i[10],
                              g = i[14],
                              v = i[3],
                              y = i[7],
                              M = i[11],
                              w = i[15],
                              x = n[0],
                              A = n[4],
                              E = n[8],
                              b = n[12],
                              T = n[1],
                              L = n[5],
                              N = n[9],
                              D = n[13],
                              C = n[2],
                              S = n[6],
                              I = n[10],
                              _ = n[14],
                              j = n[3],
                              O = n[7],
                              z = n[11],
                              R = n[15];
                            return (
                              (r[0] = a * x + o * T + s * C + c * j),
                              (r[4] = a * A + o * L + s * S + c * O),
                              (r[8] = a * E + o * N + s * I + c * z),
                              (r[12] = a * b + o * D + s * _ + c * R),
                              (r[1] = u * x + l * T + h * C + d * j),
                              (r[5] = u * A + l * L + h * S + d * O),
                              (r[9] = u * E + l * N + h * I + d * z),
                              (r[13] = u * b + l * D + h * _ + d * R),
                              (r[2] = p * x + f * T + m * C + g * j),
                              (r[6] = p * A + f * L + m * S + g * O),
                              (r[10] = p * E + f * N + m * I + g * z),
                              (r[14] = p * b + f * D + m * _ + g * R),
                              (r[3] = v * x + y * T + M * C + w * j),
                              (r[7] = v * A + y * L + M * S + w * O),
                              (r[11] = v * E + y * N + M * I + w * z),
                              (r[15] = v * b + y * D + M * _ + w * R),
                              this
                            );
                          },
                          multiplyScalar: function(t) {
                            var e = this.elements;
                            return (
                              (e[0] *= t),
                              (e[4] *= t),
                              (e[8] *= t),
                              (e[12] *= t),
                              (e[1] *= t),
                              (e[5] *= t),
                              (e[9] *= t),
                              (e[13] *= t),
                              (e[2] *= t),
                              (e[6] *= t),
                              (e[10] *= t),
                              (e[14] *= t),
                              (e[3] *= t),
                              (e[7] *= t),
                              (e[11] *= t),
                              (e[15] *= t),
                              this
                            );
                          },
                          applyToBufferAttribute: ((Le = new ke()),
                          function(t) {
                            for (var e = 0, i = t.count; e < i; e++)
                              (Le.x = t.getX(e)),
                                (Le.y = t.getY(e)),
                                (Le.z = t.getZ(e)),
                                Le.applyMatrix4(this),
                                t.setXYZ(e, Le.x, Le.y, Le.z);
                            return t;
                          }),
                          determinant: function() {
                            var t = this.elements,
                              e = t[0],
                              i = t[4],
                              n = t[8],
                              r = t[12],
                              a = t[1],
                              o = t[5],
                              s = t[9],
                              c = t[13],
                              u = t[2],
                              l = t[6],
                              h = t[10],
                              d = t[14];
                            return (
                              t[3] *
                                (+r * s * l -
                                  n * c * l -
                                  r * o * h +
                                  i * c * h +
                                  n * o * d -
                                  i * s * d) +
                              t[7] *
                                (+e * s * d -
                                  e * c * h +
                                  r * a * h -
                                  n * a * d +
                                  n * c * u -
                                  r * s * u) +
                              t[11] *
                                (+e * c * l -
                                  e * o * d -
                                  r * a * l +
                                  i * a * d +
                                  r * o * u -
                                  i * c * u) +
                              t[15] *
                                (-n * o * u -
                                  e * s * l +
                                  e * o * h +
                                  n * a * l -
                                  i * a * h +
                                  i * s * u)
                            );
                          },
                          transpose: function() {
                            var t,
                              e = this.elements;
                            return (
                              (t = e[1]),
                              (e[1] = e[4]),
                              (e[4] = t),
                              (t = e[2]),
                              (e[2] = e[8]),
                              (e[8] = t),
                              (t = e[6]),
                              (e[6] = e[9]),
                              (e[9] = t),
                              (t = e[3]),
                              (e[3] = e[12]),
                              (e[12] = t),
                              (t = e[7]),
                              (e[7] = e[13]),
                              (e[13] = t),
                              (t = e[11]),
                              (e[11] = e[14]),
                              (e[14] = t),
                              this
                            );
                          },
                          setPosition: function(t) {
                            var e = this.elements;
                            return (
                              (e[12] = t.x), (e[13] = t.y), (e[14] = t.z), this
                            );
                          },
                          getInverse: function(t, e) {
                            var i = this.elements,
                              n = t.elements,
                              r = n[0],
                              a = n[1],
                              o = n[2],
                              s = n[3],
                              c = n[4],
                              u = n[5],
                              l = n[6],
                              h = n[7],
                              d = n[8],
                              p = n[9],
                              f = n[10],
                              m = n[11],
                              g = n[12],
                              v = n[13],
                              y = n[14],
                              M = n[15],
                              w =
                                p * y * h -
                                v * f * h +
                                v * l * m -
                                u * y * m -
                                p * l * M +
                                u * f * M,
                              x =
                                g * f * h -
                                d * y * h -
                                g * l * m +
                                c * y * m +
                                d * l * M -
                                c * f * M,
                              A =
                                d * v * h -
                                g * p * h +
                                g * u * m -
                                c * v * m -
                                d * u * M +
                                c * p * M,
                              E =
                                g * p * l -
                                d * v * l -
                                g * u * f +
                                c * v * f +
                                d * u * y -
                                c * p * y,
                              b = r * w + a * x + o * A + s * E;
                            if (0 === b) {
                              var T =
                                "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                              if (!0 === e) throw new Error(T);
                              return this.identity();
                            }
                            var L = 1 / b;
                            return (
                              (i[0] = w * L),
                              (i[1] =
                                (v * f * s -
                                  p * y * s -
                                  v * o * m +
                                  a * y * m +
                                  p * o * M -
                                  a * f * M) *
                                L),
                              (i[2] =
                                (u * y * s -
                                  v * l * s +
                                  v * o * h -
                                  a * y * h -
                                  u * o * M +
                                  a * l * M) *
                                L),
                              (i[3] =
                                (p * l * s -
                                  u * f * s -
                                  p * o * h +
                                  a * f * h +
                                  u * o * m -
                                  a * l * m) *
                                L),
                              (i[4] = x * L),
                              (i[5] =
                                (d * y * s -
                                  g * f * s +
                                  g * o * m -
                                  r * y * m -
                                  d * o * M +
                                  r * f * M) *
                                L),
                              (i[6] =
                                (g * l * s -
                                  c * y * s -
                                  g * o * h +
                                  r * y * h +
                                  c * o * M -
                                  r * l * M) *
                                L),
                              (i[7] =
                                (c * f * s -
                                  d * l * s +
                                  d * o * h -
                                  r * f * h -
                                  c * o * m +
                                  r * l * m) *
                                L),
                              (i[8] = A * L),
                              (i[9] =
                                (g * p * s -
                                  d * v * s -
                                  g * a * m +
                                  r * v * m +
                                  d * a * M -
                                  r * p * M) *
                                L),
                              (i[10] =
                                (c * v * s -
                                  g * u * s +
                                  g * a * h -
                                  r * v * h -
                                  c * a * M +
                                  r * u * M) *
                                L),
                              (i[11] =
                                (d * u * s -
                                  c * p * s -
                                  d * a * h +
                                  r * p * h +
                                  c * a * m -
                                  r * u * m) *
                                L),
                              (i[12] = E * L),
                              (i[13] =
                                (d * v * o -
                                  g * p * o +
                                  g * a * f -
                                  r * v * f -
                                  d * a * y +
                                  r * p * y) *
                                L),
                              (i[14] =
                                (g * u * o -
                                  c * v * o -
                                  g * a * l +
                                  r * v * l +
                                  c * a * y -
                                  r * u * y) *
                                L),
                              (i[15] =
                                (c * p * o -
                                  d * u * o +
                                  d * a * l -
                                  r * p * l -
                                  c * a * f +
                                  r * u * f) *
                                L),
                              this
                            );
                          },
                          scale: function(t) {
                            var e = this.elements,
                              i = t.x,
                              n = t.y,
                              r = t.z;
                            return (
                              (e[0] *= i),
                              (e[4] *= n),
                              (e[8] *= r),
                              (e[1] *= i),
                              (e[5] *= n),
                              (e[9] *= r),
                              (e[2] *= i),
                              (e[6] *= n),
                              (e[10] *= r),
                              (e[3] *= i),
                              (e[7] *= n),
                              (e[11] *= r),
                              this
                            );
                          },
                          getMaxScaleOnAxis: function() {
                            var t = this.elements,
                              e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
                              i = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
                              n = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                            return Math.sqrt(Math.max(e, i, n));
                          },
                          makeTranslation: function(t, e, i) {
                            return (
                              this.set(
                                1,
                                0,
                                0,
                                t,
                                0,
                                1,
                                0,
                                e,
                                0,
                                0,
                                1,
                                i,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          makeRotationX: function(t) {
                            var e = Math.cos(t),
                              i = Math.sin(t);
                            return (
                              this.set(
                                1,
                                0,
                                0,
                                0,
                                0,
                                e,
                                -i,
                                0,
                                0,
                                i,
                                e,
                                0,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          makeRotationY: function(t) {
                            var e = Math.cos(t),
                              i = Math.sin(t);
                            return (
                              this.set(
                                e,
                                0,
                                i,
                                0,
                                0,
                                1,
                                0,
                                0,
                                -i,
                                0,
                                e,
                                0,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          makeRotationZ: function(t) {
                            var e = Math.cos(t),
                              i = Math.sin(t);
                            return (
                              this.set(
                                e,
                                -i,
                                0,
                                0,
                                i,
                                e,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          makeRotationAxis: function(t, e) {
                            var i = Math.cos(e),
                              n = Math.sin(e),
                              r = 1 - i,
                              a = t.x,
                              o = t.y,
                              s = t.z,
                              c = r * a,
                              u = r * o;
                            return (
                              this.set(
                                c * a + i,
                                c * o - n * s,
                                c * s + n * o,
                                0,
                                c * o + n * s,
                                u * o + i,
                                u * s - n * a,
                                0,
                                c * s - n * o,
                                u * s + n * a,
                                r * s * s + i,
                                0,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          makeScale: function(t, e, i) {
                            return (
                              this.set(
                                t,
                                0,
                                0,
                                0,
                                0,
                                e,
                                0,
                                0,
                                0,
                                0,
                                i,
                                0,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          makeShear: function(t, e, i) {
                            return (
                              this.set(
                                1,
                                e,
                                i,
                                0,
                                t,
                                1,
                                i,
                                0,
                                t,
                                e,
                                1,
                                0,
                                0,
                                0,
                                0,
                                1
                              ),
                              this
                            );
                          },
                          compose: function(t, e, i) {
                            return (
                              this.makeRotationFromQuaternion(e),
                              this.scale(i),
                              this.setPosition(t),
                              this
                            );
                          },
                          decompose: ((be = new ke()),
                          (Te = new Ue()),
                          function(t, e, i) {
                            var n = this.elements,
                              r = be.set(n[0], n[1], n[2]).length(),
                              a = be.set(n[4], n[5], n[6]).length(),
                              o = be.set(n[8], n[9], n[10]).length();
                            this.determinant() < 0 && (r = -r),
                              (t.x = n[12]),
                              (t.y = n[13]),
                              (t.z = n[14]),
                              Te.copy(this);
                            var s = 1 / r,
                              c = 1 / a,
                              u = 1 / o;
                            return (
                              (Te.elements[0] *= s),
                              (Te.elements[1] *= s),
                              (Te.elements[2] *= s),
                              (Te.elements[4] *= c),
                              (Te.elements[5] *= c),
                              (Te.elements[6] *= c),
                              (Te.elements[8] *= u),
                              (Te.elements[9] *= u),
                              (Te.elements[10] *= u),
                              e.setFromRotationMatrix(Te),
                              (i.x = r),
                              (i.y = a),
                              (i.z = o),
                              this
                            );
                          }),
                          makePerspective: function(t, e, i, n, r, a) {
                            var o = this.elements,
                              s = 2 * r / (e - t),
                              c = 2 * r / (i - n),
                              u = (e + t) / (e - t),
                              l = (i + n) / (i - n),
                              h = -(a + r) / (a - r),
                              d = -2 * a * r / (a - r);
                            return (
                              (o[0] = s),
                              (o[4] = 0),
                              (o[8] = u),
                              (o[12] = 0),
                              (o[1] = 0),
                              (o[5] = c),
                              (o[9] = l),
                              (o[13] = 0),
                              (o[2] = 0),
                              (o[6] = 0),
                              (o[10] = h),
                              (o[14] = d),
                              (o[3] = 0),
                              (o[7] = 0),
                              (o[11] = -1),
                              (o[15] = 0),
                              this
                            );
                          },
                          makeOrthographic: function(t, e, i, n, r, a) {
                            var o = this.elements,
                              s = 1 / (e - t),
                              c = 1 / (i - n),
                              u = 1 / (a - r),
                              l = (e + t) * s,
                              h = (i + n) * c,
                              d = (a + r) * u;
                            return (
                              (o[0] = 2 * s),
                              (o[4] = 0),
                              (o[8] = 0),
                              (o[12] = -l),
                              (o[1] = 0),
                              (o[5] = 2 * c),
                              (o[9] = 0),
                              (o[13] = -h),
                              (o[2] = 0),
                              (o[6] = 0),
                              (o[10] = -2 * u),
                              (o[14] = -d),
                              (o[3] = 0),
                              (o[7] = 0),
                              (o[11] = 0),
                              (o[15] = 1),
                              this
                            );
                          },
                          equals: function(t) {
                            for (
                              var e = this.elements, i = t.elements, n = 0;
                              n < 16;
                              n++
                            )
                              if (e[n] !== i[n]) return !1;
                            return !0;
                          },
                          fromArray: function(t, e) {
                            void 0 === e && (e = 0);
                            for (var i = 0; i < 16; i++)
                              this.elements[i] = t[i + e];
                            return this;
                          },
                          toArray: function(t, e) {
                            void 0 === t && (t = []), void 0 === e && (e = 0);
                            var i = this.elements;
                            return (
                              (t[e] = i[0]),
                              (t[e + 1] = i[1]),
                              (t[e + 2] = i[2]),
                              (t[e + 3] = i[3]),
                              (t[e + 4] = i[4]),
                              (t[e + 5] = i[5]),
                              (t[e + 6] = i[6]),
                              (t[e + 7] = i[7]),
                              (t[e + 8] = i[8]),
                              (t[e + 9] = i[9]),
                              (t[e + 10] = i[10]),
                              (t[e + 11] = i[11]),
                              (t[e + 12] = i[12]),
                              (t[e + 13] = i[13]),
                              (t[e + 14] = i[14]),
                              (t[e + 15] = i[15]),
                              t
                            );
                          }
                        }),
                        (Pe.prototype = Object.create(_e.prototype)),
                        (Pe.prototype.constructor = Pe),
                        (Pe.prototype.isDataTexture = !0),
                        (Be.prototype = Object.create(_e.prototype)),
                        (Be.prototype.constructor = Be),
                        (Be.prototype.isCubeTexture = !0),
                        Object.defineProperty(Be.prototype, 'images', {
                          get: function() {
                            return this.image;
                          },
                          set: function(t) {
                            this.image = t;
                          }
                        });
                      var Fe = new _e(),
                        Ge = new Be();
                      function Ve() {
                        (this.seq = []), (this.map = {});
                      }
                      var Ye = [],
                        Qe = [],
                        He = new Float32Array(16),
                        We = new Float32Array(9);
                      function Xe(t, e, i) {
                        var n = t[0];
                        if (n <= 0 || n > 0) return t;
                        var r = e * i,
                          a = Ye[r];
                        if (
                          (void 0 === a &&
                            ((a = new Float32Array(r)), (Ye[r] = a)),
                          0 !== e)
                        ) {
                          n.toArray(a, 0);
                          for (var o = 1, s = 0; o !== e; ++o)
                            (s += i), t[o].toArray(a, s);
                        }
                        return a;
                      }
                      function qe(t, e) {
                        var i = Qe[e];
                        void 0 === i && ((i = new Int32Array(e)), (Qe[e] = i));
                        for (var n = 0; n !== e; ++n)
                          i[n] = t.allocTextureUnit();
                        return i;
                      }
                      function Ze(t, e) {
                        t.uniform1f(this.addr, e);
                      }
                      function Ke(t, e) {
                        t.uniform1i(this.addr, e);
                      }
                      function Je(t, e) {
                        void 0 === e.x
                          ? t.uniform2fv(this.addr, e)
                          : t.uniform2f(this.addr, e.x, e.y);
                      }
                      function $e(t, e) {
                        void 0 !== e.x
                          ? t.uniform3f(this.addr, e.x, e.y, e.z)
                          : void 0 !== e.r
                            ? t.uniform3f(this.addr, e.r, e.g, e.b)
                            : t.uniform3fv(this.addr, e);
                      }
                      function ti(t, e) {
                        void 0 === e.x
                          ? t.uniform4fv(this.addr, e)
                          : t.uniform4f(this.addr, e.x, e.y, e.z, e.w);
                      }
                      function ei(t, e) {
                        t.uniformMatrix2fv(this.addr, !1, e.elements || e);
                      }
                      function ii(t, e) {
                        void 0 === e.elements
                          ? t.uniformMatrix3fv(this.addr, !1, e)
                          : (We.set(e.elements),
                            t.uniformMatrix3fv(this.addr, !1, We));
                      }
                      function ni(t, e) {
                        void 0 === e.elements
                          ? t.uniformMatrix4fv(this.addr, !1, e)
                          : (He.set(e.elements),
                            t.uniformMatrix4fv(this.addr, !1, He));
                      }
                      function ri(t, e, i) {
                        var n = i.allocTextureUnit();
                        t.uniform1i(this.addr, n), i.setTexture2D(e || Fe, n);
                      }
                      function ai(t, e, i) {
                        var n = i.allocTextureUnit();
                        t.uniform1i(this.addr, n), i.setTextureCube(e || Ge, n);
                      }
                      function oi(t, e) {
                        t.uniform2iv(this.addr, e);
                      }
                      function si(t, e) {
                        t.uniform3iv(this.addr, e);
                      }
                      function ci(t, e) {
                        t.uniform4iv(this.addr, e);
                      }
                      function ui(t, e) {
                        t.uniform1fv(this.addr, e);
                      }
                      function li(t, e) {
                        t.uniform1iv(this.addr, e);
                      }
                      function hi(t, e) {
                        t.uniform2fv(this.addr, Xe(e, this.size, 2));
                      }
                      function di(t, e) {
                        t.uniform3fv(this.addr, Xe(e, this.size, 3));
                      }
                      function pi(t, e) {
                        t.uniform4fv(this.addr, Xe(e, this.size, 4));
                      }
                      function fi(t, e) {
                        t.uniformMatrix2fv(this.addr, !1, Xe(e, this.size, 4));
                      }
                      function mi(t, e) {
                        t.uniformMatrix3fv(this.addr, !1, Xe(e, this.size, 9));
                      }
                      function gi(t, e) {
                        t.uniformMatrix4fv(this.addr, !1, Xe(e, this.size, 16));
                      }
                      function vi(t, e, i) {
                        var n = e.length,
                          r = qe(i, n);
                        t.uniform1iv(this.addr, r);
                        for (var a = 0; a !== n; ++a)
                          i.setTexture2D(e[a] || Fe, r[a]);
                      }
                      function yi(t, e, i) {
                        var n = e.length,
                          r = qe(i, n);
                        t.uniform1iv(this.addr, r);
                        for (var a = 0; a !== n; ++a)
                          i.setTextureCube(e[a] || Ge, r[a]);
                      }
                      function Mi(t, e, i) {
                        (this.id = t),
                          (this.addr = i),
                          (this.setValue = (function(t) {
                            switch (t) {
                              case 5126:
                                return Ze;
                              case 35664:
                                return Je;
                              case 35665:
                                return $e;
                              case 35666:
                                return ti;
                              case 35674:
                                return ei;
                              case 35675:
                                return ii;
                              case 35676:
                                return ni;
                              case 35678:
                              case 36198:
                                return ri;
                              case 35680:
                                return ai;
                              case 5124:
                              case 35670:
                                return Ke;
                              case 35667:
                              case 35671:
                                return oi;
                              case 35668:
                              case 35672:
                                return si;
                              case 35669:
                              case 35673:
                                return ci;
                            }
                          })(e.type));
                      }
                      function wi(t, e, i) {
                        (this.id = t),
                          (this.addr = i),
                          (this.size = e.size),
                          (this.setValue = (function(t) {
                            switch (t) {
                              case 5126:
                                return ui;
                              case 35664:
                                return hi;
                              case 35665:
                                return di;
                              case 35666:
                                return pi;
                              case 35674:
                                return fi;
                              case 35675:
                                return mi;
                              case 35676:
                                return gi;
                              case 35678:
                                return vi;
                              case 35680:
                                return yi;
                              case 5124:
                              case 35670:
                                return li;
                              case 35667:
                              case 35671:
                                return oi;
                              case 35668:
                              case 35672:
                                return si;
                              case 35669:
                              case 35673:
                                return ci;
                            }
                          })(e.type));
                      }
                      function xi(t) {
                        (this.id = t), Ve.call(this);
                      }
                      xi.prototype.setValue = function(t, e) {
                        for (
                          var i = this.seq, n = 0, r = i.length;
                          n !== r;
                          ++n
                        ) {
                          var a = i[n];
                          a.setValue(t, e[a.id]);
                        }
                      };
                      var Ai = /([\w\d_]+)(\])?(\[|\.)?/g;
                      function Ei(t, e) {
                        t.seq.push(e), (t.map[e.id] = e);
                      }
                      function bi(t, e, i) {
                        var n = t.name,
                          r = n.length;
                        for (Ai.lastIndex = 0; ; ) {
                          var a = Ai.exec(n),
                            o = Ai.lastIndex,
                            s = a[1],
                            c = ']' === a[2],
                            u = a[3];
                          if (
                            (c && (s |= 0),
                            void 0 === u || ('[' === u && o + 2 === r))
                          ) {
                            Ei(
                              i,
                              void 0 === u ? new Mi(s, t, e) : new wi(s, t, e)
                            );
                            break;
                          }
                          var l = i.map[s];
                          void 0 === l && Ei(i, (l = new xi(s))), (i = l);
                        }
                      }
                      function Ti(t, e, i) {
                        Ve.call(this), (this.renderer = i);
                        for (
                          var n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS),
                            r = 0;
                          r < n;
                          ++r
                        ) {
                          var a = t.getActiveUniform(e, r),
                            o = a.name;
                          bi(a, t.getUniformLocation(e, o), this);
                        }
                      }
                      (Ti.prototype.setValue = function(t, e, i) {
                        var n = this.map[e];
                        void 0 !== n && n.setValue(t, i, this.renderer);
                      }),
                        (Ti.prototype.setOptional = function(t, e, i) {
                          var n = e[i];
                          void 0 !== n && this.setValue(t, i, n);
                        }),
                        (Ti.upload = function(t, e, i, n) {
                          for (var r = 0, a = e.length; r !== a; ++r) {
                            var o = e[r],
                              s = i[o.id];
                            !1 !== s.needsUpdate && o.setValue(t, s.value, n);
                          }
                        }),
                        (Ti.seqWithValue = function(t, e) {
                          for (var i = [], n = 0, r = t.length; n !== r; ++n) {
                            var a = t[n];
                            a.id in e && i.push(a);
                          }
                          return i;
                        });
                      var Li = {
                        aliceblue: 15792383,
                        antiquewhite: 16444375,
                        aqua: 65535,
                        aquamarine: 8388564,
                        azure: 15794175,
                        beige: 16119260,
                        bisque: 16770244,
                        black: 0,
                        blanchedalmond: 16772045,
                        blue: 255,
                        blueviolet: 9055202,
                        brown: 10824234,
                        burlywood: 14596231,
                        cadetblue: 6266528,
                        chartreuse: 8388352,
                        chocolate: 13789470,
                        coral: 16744272,
                        cornflowerblue: 6591981,
                        cornsilk: 16775388,
                        crimson: 14423100,
                        cyan: 65535,
                        darkblue: 139,
                        darkcyan: 35723,
                        darkgoldenrod: 12092939,
                        darkgray: 11119017,
                        darkgreen: 25600,
                        darkgrey: 11119017,
                        darkkhaki: 12433259,
                        darkmagenta: 9109643,
                        darkolivegreen: 5597999,
                        darkorange: 16747520,
                        darkorchid: 10040012,
                        darkred: 9109504,
                        darksalmon: 15308410,
                        darkseagreen: 9419919,
                        darkslateblue: 4734347,
                        darkslategray: 3100495,
                        darkslategrey: 3100495,
                        darkturquoise: 52945,
                        darkviolet: 9699539,
                        deeppink: 16716947,
                        deepskyblue: 49151,
                        dimgray: 6908265,
                        dimgrey: 6908265,
                        dodgerblue: 2003199,
                        firebrick: 11674146,
                        floralwhite: 16775920,
                        forestgreen: 2263842,
                        fuchsia: 16711935,
                        gainsboro: 14474460,
                        ghostwhite: 16316671,
                        gold: 16766720,
                        goldenrod: 14329120,
                        gray: 8421504,
                        green: 32768,
                        greenyellow: 11403055,
                        grey: 8421504,
                        honeydew: 15794160,
                        hotpink: 16738740,
                        indianred: 13458524,
                        indigo: 4915330,
                        ivory: 16777200,
                        khaki: 15787660,
                        lavender: 15132410,
                        lavenderblush: 16773365,
                        lawngreen: 8190976,
                        lemonchiffon: 16775885,
                        lightblue: 11393254,
                        lightcoral: 15761536,
                        lightcyan: 14745599,
                        lightgoldenrodyellow: 16448210,
                        lightgray: 13882323,
                        lightgreen: 9498256,
                        lightgrey: 13882323,
                        lightpink: 16758465,
                        lightsalmon: 16752762,
                        lightseagreen: 2142890,
                        lightskyblue: 8900346,
                        lightslategray: 7833753,
                        lightslategrey: 7833753,
                        lightsteelblue: 11584734,
                        lightyellow: 16777184,
                        lime: 65280,
                        limegreen: 3329330,
                        linen: 16445670,
                        magenta: 16711935,
                        maroon: 8388608,
                        mediumaquamarine: 6737322,
                        mediumblue: 205,
                        mediumorchid: 12211667,
                        mediumpurple: 9662683,
                        mediumseagreen: 3978097,
                        mediumslateblue: 8087790,
                        mediumspringgreen: 64154,
                        mediumturquoise: 4772300,
                        mediumvioletred: 13047173,
                        midnightblue: 1644912,
                        mintcream: 16121850,
                        mistyrose: 16770273,
                        moccasin: 16770229,
                        navajowhite: 16768685,
                        navy: 128,
                        oldlace: 16643558,
                        olive: 8421376,
                        olivedrab: 7048739,
                        orange: 16753920,
                        orangered: 16729344,
                        orchid: 14315734,
                        palegoldenrod: 15657130,
                        palegreen: 10025880,
                        paleturquoise: 11529966,
                        palevioletred: 14381203,
                        papayawhip: 16773077,
                        peachpuff: 16767673,
                        peru: 13468991,
                        pink: 16761035,
                        plum: 14524637,
                        powderblue: 11591910,
                        purple: 8388736,
                        rebeccapurple: 6697881,
                        red: 16711680,
                        rosybrown: 12357519,
                        royalblue: 4286945,
                        saddlebrown: 9127187,
                        salmon: 16416882,
                        sandybrown: 16032864,
                        seagreen: 3050327,
                        seashell: 16774638,
                        sienna: 10506797,
                        silver: 12632256,
                        skyblue: 8900331,
                        slateblue: 6970061,
                        slategray: 7372944,
                        slategrey: 7372944,
                        snow: 16775930,
                        springgreen: 65407,
                        steelblue: 4620980,
                        tan: 13808780,
                        teal: 32896,
                        thistle: 14204888,
                        tomato: 16737095,
                        turquoise: 4251856,
                        violet: 15631086,
                        wheat: 16113331,
                        white: 16777215,
                        whitesmoke: 16119285,
                        yellow: 16776960,
                        yellowgreen: 10145074
                      };
                      function Ni(t, e, i) {
                        return void 0 === e && void 0 === i
                          ? this.set(t)
                          : this.setRGB(t, e, i);
                      }
                      Object.assign(Ni.prototype, {
                        isColor: !0,
                        r: 1,
                        g: 1,
                        b: 1,
                        set: function(t) {
                          return (
                            t && t.isColor
                              ? this.copy(t)
                              : 'number' == typeof t
                                ? this.setHex(t)
                                : 'string' == typeof t && this.setStyle(t),
                            this
                          );
                        },
                        setScalar: function(t) {
                          return (this.r = t), (this.g = t), (this.b = t), this;
                        },
                        setHex: function(t) {
                          return (
                            (t = Math.floor(t)),
                            (this.r = ((t >> 16) & 255) / 255),
                            (this.g = ((t >> 8) & 255) / 255),
                            (this.b = (255 & t) / 255),
                            this
                          );
                        },
                        setRGB: function(t, e, i) {
                          return (this.r = t), (this.g = e), (this.b = i), this;
                        },
                        setHSL: (function() {
                          function t(t, e, i) {
                            return (
                              i < 0 && (i += 1),
                              i > 1 && (i -= 1),
                              i < 1 / 6
                                ? t + 6 * (e - t) * i
                                : i < 0.5
                                  ? e
                                  : i < 2 / 3
                                    ? t + 6 * (e - t) * (2 / 3 - i)
                                    : t
                            );
                          }
                          return function(e, i, n) {
                            if (
                              ((e = le.euclideanModulo(e, 1)),
                              (i = le.clamp(i, 0, 1)),
                              (n = le.clamp(n, 0, 1)),
                              0 === i)
                            )
                              this.r = this.g = this.b = n;
                            else {
                              var r = n <= 0.5 ? n * (1 + i) : n + i - n * i,
                                a = 2 * n - r;
                              (this.r = t(a, r, e + 1 / 3)),
                                (this.g = t(a, r, e)),
                                (this.b = t(a, r, e - 1 / 3));
                            }
                            return this;
                          };
                        })(),
                        setStyle: function(t) {
                          function e(t) {
                            void 0 !== t && parseFloat(t);
                          }
                          var i;
                          if ((i = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t))) {
                            var n,
                              r = i[1],
                              a = i[2];
                            switch (r) {
                              case 'rgb':
                              case 'rgba':
                                if (
                                  (n = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                                    a
                                  ))
                                )
                                  return (
                                    (this.r =
                                      Math.min(255, parseInt(n[1], 10)) / 255),
                                    (this.g =
                                      Math.min(255, parseInt(n[2], 10)) / 255),
                                    (this.b =
                                      Math.min(255, parseInt(n[3], 10)) / 255),
                                    e(n[5]),
                                    this
                                  );
                                if (
                                  (n = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                                    a
                                  ))
                                )
                                  return (
                                    (this.r =
                                      Math.min(100, parseInt(n[1], 10)) / 100),
                                    (this.g =
                                      Math.min(100, parseInt(n[2], 10)) / 100),
                                    (this.b =
                                      Math.min(100, parseInt(n[3], 10)) / 100),
                                    e(n[5]),
                                    this
                                  );
                                break;
                              case 'hsl':
                              case 'hsla':
                                if (
                                  (n = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                                    a
                                  ))
                                ) {
                                  var o = parseFloat(n[1]) / 360,
                                    s = parseInt(n[2], 10) / 100,
                                    c = parseInt(n[3], 10) / 100;
                                  return e(n[5]), this.setHSL(o, s, c);
                                }
                            }
                          } else if ((i = /^\#([A-Fa-f0-9]+)$/.exec(t))) {
                            var u,
                              l = (u = i[1]).length;
                            if (3 === l)
                              return (
                                (this.r =
                                  parseInt(u.charAt(0) + u.charAt(0), 16) /
                                  255),
                                (this.g =
                                  parseInt(u.charAt(1) + u.charAt(1), 16) /
                                  255),
                                (this.b =
                                  parseInt(u.charAt(2) + u.charAt(2), 16) /
                                  255),
                                this
                              );
                            if (6 === l)
                              return (
                                (this.r =
                                  parseInt(u.charAt(0) + u.charAt(1), 16) /
                                  255),
                                (this.g =
                                  parseInt(u.charAt(2) + u.charAt(3), 16) /
                                  255),
                                (this.b =
                                  parseInt(u.charAt(4) + u.charAt(5), 16) /
                                  255),
                                this
                              );
                          }
                          t &&
                            t.length > 0 &&
                            (void 0 !== (u = Li[t]) && this.setHex(u));
                          return this;
                        },
                        clone: function() {
                          return new this.constructor(this.r, this.g, this.b);
                        },
                        copy: function(t) {
                          return (
                            (this.r = t.r), (this.g = t.g), (this.b = t.b), this
                          );
                        },
                        copyGammaToLinear: function(t, e) {
                          return (
                            void 0 === e && (e = 2),
                            (this.r = Math.pow(t.r, e)),
                            (this.g = Math.pow(t.g, e)),
                            (this.b = Math.pow(t.b, e)),
                            this
                          );
                        },
                        copyLinearToGamma: function(t, e) {
                          void 0 === e && (e = 2);
                          var i = e > 0 ? 1 / e : 1;
                          return (
                            (this.r = Math.pow(t.r, i)),
                            (this.g = Math.pow(t.g, i)),
                            (this.b = Math.pow(t.b, i)),
                            this
                          );
                        },
                        convertGammaToLinear: function() {
                          var t = this.r,
                            e = this.g,
                            i = this.b;
                          return (
                            (this.r = t * t),
                            (this.g = e * e),
                            (this.b = i * i),
                            this
                          );
                        },
                        convertLinearToGamma: function() {
                          return (
                            (this.r = Math.sqrt(this.r)),
                            (this.g = Math.sqrt(this.g)),
                            (this.b = Math.sqrt(this.b)),
                            this
                          );
                        },
                        getHex: function() {
                          return (
                            ((255 * this.r) << 16) ^
                            ((255 * this.g) << 8) ^
                            ((255 * this.b) << 0)
                          );
                        },
                        getHexString: function() {
                          return ('000000' + this.getHex().toString(16)).slice(
                            -6
                          );
                        },
                        getHSL: function(t) {
                          var e,
                            i,
                            n = t || { h: 0, s: 0, l: 0 },
                            r = this.r,
                            a = this.g,
                            o = this.b,
                            s = Math.max(r, a, o),
                            c = Math.min(r, a, o),
                            u = (c + s) / 2;
                          if (c === s) (e = 0), (i = 0);
                          else {
                            var l = s - c;
                            switch (((i =
                              u <= 0.5 ? l / (s + c) : l / (2 - s - c)),
                            s)) {
                              case r:
                                e = (a - o) / l + (a < o ? 6 : 0);
                                break;
                              case a:
                                e = (o - r) / l + 2;
                                break;
                              case o:
                                e = (r - a) / l + 4;
                            }
                            e /= 6;
                          }
                          return (n.h = e), (n.s = i), (n.l = u), n;
                        },
                        getStyle: function() {
                          return (
                            'rgb(' +
                            ((255 * this.r) | 0) +
                            ',' +
                            ((255 * this.g) | 0) +
                            ',' +
                            ((255 * this.b) | 0) +
                            ')'
                          );
                        },
                        offsetHSL: function(t, e, i) {
                          var n = this.getHSL();
                          return (
                            (n.h += t),
                            (n.s += e),
                            (n.l += i),
                            this.setHSL(n.h, n.s, n.l),
                            this
                          );
                        },
                        add: function(t) {
                          return (
                            (this.r += t.r),
                            (this.g += t.g),
                            (this.b += t.b),
                            this
                          );
                        },
                        addColors: function(t, e) {
                          return (
                            (this.r = t.r + e.r),
                            (this.g = t.g + e.g),
                            (this.b = t.b + e.b),
                            this
                          );
                        },
                        addScalar: function(t) {
                          return (
                            (this.r += t), (this.g += t), (this.b += t), this
                          );
                        },
                        sub: function(t) {
                          return (
                            (this.r = Math.max(0, this.r - t.r)),
                            (this.g = Math.max(0, this.g - t.g)),
                            (this.b = Math.max(0, this.b - t.b)),
                            this
                          );
                        },
                        multiply: function(t) {
                          return (
                            (this.r *= t.r),
                            (this.g *= t.g),
                            (this.b *= t.b),
                            this
                          );
                        },
                        multiplyScalar: function(t) {
                          return (
                            (this.r *= t), (this.g *= t), (this.b *= t), this
                          );
                        },
                        lerp: function(t, e) {
                          return (
                            (this.r += (t.r - this.r) * e),
                            (this.g += (t.g - this.g) * e),
                            (this.b += (t.b - this.b) * e),
                            this
                          );
                        },
                        equals: function(t) {
                          return (
                            t.r === this.r && t.g === this.g && t.b === this.b
                          );
                        },
                        fromArray: function(t, e) {
                          return (
                            void 0 === e && (e = 0),
                            (this.r = t[e]),
                            (this.g = t[e + 1]),
                            (this.b = t[e + 2]),
                            this
                          );
                        },
                        toArray: function(t, e) {
                          return (
                            void 0 === t && (t = []),
                            void 0 === e && (e = 0),
                            (t[e] = this.r),
                            (t[e + 1] = this.g),
                            (t[e + 2] = this.b),
                            t
                          );
                        },
                        toJSON: function() {
                          return this.getHex();
                        }
                      });
                      var Di,
                        Ci,
                        Si = {
                          common: {
                            diffuse: { value: new Ni(15658734) },
                            opacity: { value: 1 },
                            map: { value: null },
                            offsetRepeat: { value: new je(0, 0, 1, 1) },
                            alphaMap: { value: null }
                          },
                          specularmap: { specularMap: { value: null } },
                          envmap: {
                            envMap: { value: null },
                            flipEnvMap: { value: -1 },
                            reflectivity: { value: 1 },
                            refractionRatio: { value: 0.98 }
                          },
                          aomap: {
                            aoMap: { value: null },
                            aoMapIntensity: { value: 1 }
                          },
                          lightmap: {
                            lightMap: { value: null },
                            lightMapIntensity: { value: 1 }
                          },
                          emissivemap: { emissiveMap: { value: null } },
                          bumpmap: {
                            bumpMap: { value: null },
                            bumpScale: { value: 1 }
                          },
                          normalmap: {
                            normalMap: { value: null },
                            normalScale: { value: new he(1, 1) }
                          },
                          displacementmap: {
                            displacementMap: { value: null },
                            displacementScale: { value: 1 },
                            displacementBias: { value: 0 }
                          },
                          roughnessmap: { roughnessMap: { value: null } },
                          metalnessmap: { metalnessMap: { value: null } },
                          gradientmap: { gradientMap: { value: null } },
                          fog: {
                            fogDensity: { value: 25e-5 },
                            fogNear: { value: 1 },
                            fogFar: { value: 2e3 },
                            fogColor: { value: new Ni(16777215) }
                          },
                          lights: {
                            ambientLightColor: { value: [] },
                            directionalLights: {
                              value: [],
                              properties: {
                                direction: {},
                                color: {},
                                shadow: {},
                                shadowBias: {},
                                shadowRadius: {},
                                shadowMapSize: {}
                              }
                            },
                            directionalShadowMap: { value: [] },
                            directionalShadowMatrix: { value: [] },
                            spotLights: {
                              value: [],
                              properties: {
                                color: {},
                                position: {},
                                direction: {},
                                distance: {},
                                coneCos: {},
                                penumbraCos: {},
                                decay: {},
                                shadow: {},
                                shadowBias: {},
                                shadowRadius: {},
                                shadowMapSize: {}
                              }
                            },
                            spotShadowMap: { value: [] },
                            spotShadowMatrix: { value: [] },
                            pointLights: {
                              value: [],
                              properties: {
                                color: {},
                                position: {},
                                decay: {},
                                distance: {},
                                shadow: {},
                                shadowBias: {},
                                shadowRadius: {},
                                shadowMapSize: {},
                                shadowCameraNear: {},
                                shadowCameraFar: {}
                              }
                            },
                            pointShadowMap: { value: [] },
                            pointShadowMatrix: { value: [] },
                            hemisphereLights: {
                              value: [],
                              properties: {
                                direction: {},
                                skyColor: {},
                                groundColor: {}
                              }
                            },
                            rectAreaLights: {
                              value: [],
                              properties: {
                                color: {},
                                position: {},
                                width: {},
                                height: {}
                              }
                            }
                          },
                          points: {
                            diffuse: { value: new Ni(15658734) },
                            opacity: { value: 1 },
                            size: { value: 1 },
                            scale: { value: 1 },
                            map: { value: null },
                            offsetRepeat: { value: new je(0, 0, 1, 1) }
                          }
                        },
                        Ii = {
                          merge: function(t) {
                            for (var e = {}, i = 0; i < t.length; i++) {
                              var n = this.clone(t[i]);
                              for (var r in n) e[r] = n[r];
                            }
                            return e;
                          },
                          clone: function(t) {
                            var e = {};
                            for (var i in t) {
                              e[i] = {};
                              for (var n in t[i]) {
                                var r = t[i][n];
                                r &&
                                (r.isColor ||
                                  r.isMatrix3 ||
                                  r.isMatrix4 ||
                                  r.isVector2 ||
                                  r.isVector3 ||
                                  r.isVector4 ||
                                  r.isTexture)
                                  ? (e[i][n] = r.clone())
                                  : Array.isArray(r)
                                    ? (e[i][n] = r.slice())
                                    : (e[i][n] = r);
                              }
                            }
                            return e;
                          }
                        },
                        _i = {
                          alphamap_fragment:
                            '#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n',
                          alphamap_pars_fragment:
                            '#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n',
                          alphatest_fragment:
                            '#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n',
                          aomap_fragment:
                            '#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n',
                          aomap_pars_fragment:
                            '#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif',
                          begin_vertex:
                            '\nvec3 transformed = vec3( position );\n',
                          beginnormal_vertex:
                            '\nvec3 objectNormal = vec3( normal );\n',
                          bsdfs:
                            'float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n',
                          bumpmap_pars_fragment:
                            '#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n',
                          clipping_planes_fragment:
                            '#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n',
                          clipping_planes_pars_fragment:
                            '#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n',
                          clipping_planes_pars_vertex:
                            '#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n',
                          clipping_planes_vertex:
                            '#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n',
                          color_fragment:
                            '#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif',
                          color_pars_fragment:
                            '#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n',
                          color_pars_vertex:
                            '#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif',
                          color_vertex:
                            '#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif',
                          common:
                            '#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transpose( const in mat3 v ) {\n\tmat3 tmp;\n\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\treturn tmp;\n}\n',
                          cube_uv_reflection_fragment:
                            '#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n',
                          defaultnormal_vertex:
                            'vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n',
                          displacementmap_pars_vertex:
                            '#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n',
                          displacementmap_vertex:
                            '#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n',
                          emissivemap_fragment:
                            '#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n',
                          emissivemap_pars_fragment:
                            '#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n',
                          encodings_fragment:
                            '  gl_FragColor = linearToOutputTexel( gl_FragColor );\n',
                          encodings_pars_fragment:
                            '\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n',
                          envmap_fragment:
                            '#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n',
                          envmap_pars_fragment:
                            '#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n',
                          envmap_pars_vertex:
                            '#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n',
                          envmap_vertex:
                            '#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n',
                          fog_vertex:
                            '\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif',
                          fog_pars_vertex:
                            '#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n',
                          fog_fragment:
                            '#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n',
                          fog_pars_fragment:
                            '#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n',
                          gradientmap_pars_fragment:
                            '#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n',
                          lightmap_fragment:
                            '#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n',
                          lightmap_pars_fragment:
                            '#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif',
                          lights_lambert_vertex:
                            'vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n',
                          lights_pars:
                            'uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n',
                          lights_phong_fragment:
                            'BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n',
                          lights_phong_pars_fragment:
                            'varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n',
                          lights_physical_fragment:
                            'PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n',
                          lights_physical_pars_fragment:
                            'struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n',
                          lights_template:
                            '\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n',
                          logdepthbuf_fragment:
                            '#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif',
                          logdepthbuf_pars_fragment:
                            '#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n',
                          logdepthbuf_pars_vertex:
                            '#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif',
                          logdepthbuf_vertex:
                            '#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n',
                          map_fragment:
                            '#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n',
                          map_pars_fragment:
                            '#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n',
                          map_particle_fragment:
                            '#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n',
                          map_particle_pars_fragment:
                            '#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n',
                          metalnessmap_fragment:
                            'float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n',
                          metalnessmap_pars_fragment:
                            '#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif',
                          morphnormal_vertex:
                            '#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n',
                          morphtarget_pars_vertex:
                            '#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif',
                          morphtarget_vertex:
                            '#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n',
                          normal_fragment:
                            '#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n',
                          normalmap_pars_fragment:
                            '#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n',
                          packing:
                            'vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n',
                          premultiplied_alpha_fragment:
                            '#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n',
                          project_vertex:
                            'vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n',
                          dithering_fragment:
                            '#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n',
                          dithering_pars_fragment:
                            '#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n',
                          roughnessmap_fragment:
                            'float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n',
                          roughnessmap_pars_fragment:
                            '#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif',
                          shadowmap_pars_fragment:
                            '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n',
                          shadowmap_pars_vertex:
                            '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n',
                          shadowmap_vertex:
                            '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n',
                          shadowmask_pars_fragment:
                            'float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n',
                          skinbase_vertex:
                            '#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif',
                          skinning_pars_vertex:
                            '#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n',
                          skinning_vertex:
                            '#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n',
                          skinnormal_vertex:
                            '#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n',
                          specularmap_fragment:
                            'float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif',
                          specularmap_pars_fragment:
                            '#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif',
                          tonemapping_fragment:
                            '#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n',
                          tonemapping_pars_fragment:
                            '#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n',
                          uv_pars_fragment:
                            '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif',
                          uv_pars_vertex:
                            '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n',
                          uv_vertex:
                            '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif',
                          uv2_pars_fragment:
                            '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif',
                          uv2_pars_vertex:
                            '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif',
                          uv2_vertex:
                            '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif',
                          worldpos_vertex:
                            '#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n',
                          cube_frag:
                            'uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n',
                          cube_vert:
                            'varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n',
                          depth_frag:
                            '#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n',
                          depth_vert:
                            '#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n',
                          distanceRGBA_frag:
                            '#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n',
                          distanceRGBA_vert:
                            '#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n',
                          equirect_frag:
                            'uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n',
                          equirect_vert:
                            'varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n',
                          linedashed_frag:
                            'uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n',
                          linedashed_vert:
                            'uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n',
                          meshbasic_frag:
                            'uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n',
                          meshbasic_vert:
                            '#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n',
                          meshlambert_frag:
                            'uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n',
                          meshlambert_vert:
                            '#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n',
                          meshphong_frag:
                            '#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n',
                          meshphong_vert:
                            '#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n',
                          meshphysical_frag:
                            '#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n',
                          meshphysical_vert:
                            '#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n',
                          normal_frag:
                            '#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n',
                          normal_vert:
                            '#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n',
                          points_frag:
                            'uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n',
                          points_vert:
                            'uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n',
                          shadow_frag:
                            'uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n}\n',
                          shadow_vert:
                            '#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n'
                        },
                        ji = {
                          basic: {
                            uniforms: Ii.merge([
                              Si.common,
                              Si.specularmap,
                              Si.envmap,
                              Si.aomap,
                              Si.lightmap,
                              Si.fog
                            ]),
                            vertexShader: _i.meshbasic_vert,
                            fragmentShader: _i.meshbasic_frag
                          },
                          lambert: {
                            uniforms: Ii.merge([
                              Si.common,
                              Si.specularmap,
                              Si.envmap,
                              Si.aomap,
                              Si.lightmap,
                              Si.emissivemap,
                              Si.fog,
                              Si.lights,
                              { emissive: { value: new Ni(0) } }
                            ]),
                            vertexShader: _i.meshlambert_vert,
                            fragmentShader: _i.meshlambert_frag
                          },
                          phong: {
                            uniforms: Ii.merge([
                              Si.common,
                              Si.specularmap,
                              Si.envmap,
                              Si.aomap,
                              Si.lightmap,
                              Si.emissivemap,
                              Si.bumpmap,
                              Si.normalmap,
                              Si.displacementmap,
                              Si.gradientmap,
                              Si.fog,
                              Si.lights,
                              {
                                emissive: { value: new Ni(0) },
                                specular: { value: new Ni(1118481) },
                                shininess: { value: 30 }
                              }
                            ]),
                            vertexShader: _i.meshphong_vert,
                            fragmentShader: _i.meshphong_frag
                          },
                          standard: {
                            uniforms: Ii.merge([
                              Si.common,
                              Si.envmap,
                              Si.aomap,
                              Si.lightmap,
                              Si.emissivemap,
                              Si.bumpmap,
                              Si.normalmap,
                              Si.displacementmap,
                              Si.roughnessmap,
                              Si.metalnessmap,
                              Si.fog,
                              Si.lights,
                              {
                                emissive: { value: new Ni(0) },
                                roughness: { value: 0.5 },
                                metalness: { value: 0.5 },
                                envMapIntensity: { value: 1 }
                              }
                            ]),
                            vertexShader: _i.meshphysical_vert,
                            fragmentShader: _i.meshphysical_frag
                          },
                          points: {
                            uniforms: Ii.merge([Si.points, Si.fog]),
                            vertexShader: _i.points_vert,
                            fragmentShader: _i.points_frag
                          },
                          dashed: {
                            uniforms: Ii.merge([
                              Si.common,
                              Si.fog,
                              {
                                scale: { value: 1 },
                                dashSize: { value: 1 },
                                totalSize: { value: 2 }
                              }
                            ]),
                            vertexShader: _i.linedashed_vert,
                            fragmentShader: _i.linedashed_frag
                          },
                          depth: {
                            uniforms: Ii.merge([Si.common, Si.displacementmap]),
                            vertexShader: _i.depth_vert,
                            fragmentShader: _i.depth_frag
                          },
                          normal: {
                            uniforms: Ii.merge([
                              Si.common,
                              Si.bumpmap,
                              Si.normalmap,
                              Si.displacementmap,
                              { opacity: { value: 1 } }
                            ]),
                            vertexShader: _i.normal_vert,
                            fragmentShader: _i.normal_frag
                          },
                          cube: {
                            uniforms: {
                              tCube: { value: null },
                              tFlip: { value: -1 },
                              opacity: { value: 1 }
                            },
                            vertexShader: _i.cube_vert,
                            fragmentShader: _i.cube_frag
                          },
                          equirect: {
                            uniforms: { tEquirect: { value: null } },
                            vertexShader: _i.equirect_vert,
                            fragmentShader: _i.equirect_frag
                          },
                          distanceRGBA: {
                            uniforms: Ii.merge([
                              Si.common,
                              Si.displacementmap,
                              {
                                referencePosition: { value: new ke() },
                                nearDistance: { value: 1 },
                                farDistance: { value: 1e3 }
                              }
                            ]),
                            vertexShader: _i.distanceRGBA_vert,
                            fragmentShader: _i.distanceRGBA_frag
                          },
                          shadow: {
                            uniforms: Ii.merge([
                              Si.lights,
                              {
                                color: { value: new Ni(0) },
                                opacity: { value: 1 }
                              }
                            ]),
                            vertexShader: _i.shadow_vert,
                            fragmentShader: _i.shadow_frag
                          }
                        };
                      function Oi(t, e) {
                        (this.min = void 0 !== t ? t : new he(1 / 0, 1 / 0)),
                          (this.max =
                            void 0 !== e ? e : new he(-1 / 0, -1 / 0));
                      }
                      function zi(t, e, i, n, r) {
                        var a, o, s, c, u, l, h, d;
                        function p() {
                          var t,
                            n,
                            p,
                            f,
                            m,
                            g = new Float32Array([
                              -1,
                              -1,
                              0,
                              0,
                              1,
                              -1,
                              1,
                              0,
                              1,
                              1,
                              1,
                              1,
                              -1,
                              1,
                              0,
                              1
                            ]),
                            v = new Uint16Array([0, 1, 2, 0, 2, 3]);
                          (a = e.createBuffer()),
                            (o = e.createBuffer()),
                            e.bindBuffer(e.ARRAY_BUFFER, a),
                            e.bufferData(e.ARRAY_BUFFER, g, e.STATIC_DRAW),
                            e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, o),
                            e.bufferData(
                              e.ELEMENT_ARRAY_BUFFER,
                              v,
                              e.STATIC_DRAW
                            ),
                            (h = e.createTexture()),
                            (d = e.createTexture()),
                            i.bindTexture(e.TEXTURE_2D, h),
                            e.texImage2D(
                              e.TEXTURE_2D,
                              0,
                              e.RGB,
                              16,
                              16,
                              0,
                              e.RGB,
                              e.UNSIGNED_BYTE,
                              null
                            ),
                            e.texParameteri(
                              e.TEXTURE_2D,
                              e.TEXTURE_WRAP_S,
                              e.CLAMP_TO_EDGE
                            ),
                            e.texParameteri(
                              e.TEXTURE_2D,
                              e.TEXTURE_WRAP_T,
                              e.CLAMP_TO_EDGE
                            ),
                            e.texParameteri(
                              e.TEXTURE_2D,
                              e.TEXTURE_MAG_FILTER,
                              e.NEAREST
                            ),
                            e.texParameteri(
                              e.TEXTURE_2D,
                              e.TEXTURE_MIN_FILTER,
                              e.NEAREST
                            ),
                            i.bindTexture(e.TEXTURE_2D, d),
                            e.texImage2D(
                              e.TEXTURE_2D,
                              0,
                              e.RGBA,
                              16,
                              16,
                              0,
                              e.RGBA,
                              e.UNSIGNED_BYTE,
                              null
                            ),
                            e.texParameteri(
                              e.TEXTURE_2D,
                              e.TEXTURE_WRAP_S,
                              e.CLAMP_TO_EDGE
                            ),
                            e.texParameteri(
                              e.TEXTURE_2D,
                              e.TEXTURE_WRAP_T,
                              e.CLAMP_TO_EDGE
                            ),
                            e.texParameteri(
                              e.TEXTURE_2D,
                              e.TEXTURE_MAG_FILTER,
                              e.NEAREST
                            ),
                            e.texParameteri(
                              e.TEXTURE_2D,
                              e.TEXTURE_MIN_FILTER,
                              e.NEAREST
                            ),
                            (s = {
                              vertexShader: [
                                'uniform lowp int renderType;',
                                'uniform vec3 screenPosition;',
                                'uniform vec2 scale;',
                                'uniform float rotation;',
                                'uniform sampler2D occlusionMap;',
                                'attribute vec2 position;',
                                'attribute vec2 uv;',
                                'varying vec2 vUV;',
                                'varying float vVisibility;',
                                'void main() {',
                                'vUV = uv;',
                                'vec2 pos = position;',
                                'if ( renderType == 2 ) {',
                                'vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',
                                'visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',
                                'visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',
                                'visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',
                                'visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',
                                'visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',
                                'visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',
                                'visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',
                                'visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',
                                'vVisibility =        visibility.r / 9.0;',
                                'vVisibility *= 1.0 - visibility.g / 9.0;',
                                'vVisibility *=       visibility.b / 9.0;',
                                'vVisibility *= 1.0 - visibility.a / 9.0;',
                                'pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',
                                'pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',
                                '}',
                                'gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',
                                '}'
                              ].join('\n'),
                              fragmentShader: [
                                'uniform lowp int renderType;',
                                'uniform sampler2D map;',
                                'uniform float opacity;',
                                'uniform vec3 color;',
                                'varying vec2 vUV;',
                                'varying float vVisibility;',
                                'void main() {',
                                'if ( renderType == 0 ) {',
                                'gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',
                                '} else if ( renderType == 1 ) {',
                                'gl_FragColor = texture2D( map, vUV );',
                                '} else {',
                                'vec4 texture = texture2D( map, vUV );',
                                'texture.a *= opacity * vVisibility;',
                                'gl_FragColor = texture;',
                                'gl_FragColor.rgb *= color;',
                                '}',
                                '}'
                              ].join('\n')
                            }),
                            (t = s),
                            (n = e.createProgram()),
                            (p = e.createShader(e.FRAGMENT_SHADER)),
                            (f = e.createShader(e.VERTEX_SHADER)),
                            (m = 'precision ' + r.precision + ' float;\n'),
                            e.shaderSource(p, m + t.fragmentShader),
                            e.shaderSource(f, m + t.vertexShader),
                            e.compileShader(p),
                            e.compileShader(f),
                            e.attachShader(n, p),
                            e.attachShader(n, f),
                            e.linkProgram(n),
                            (c = n),
                            (u = {
                              vertex: e.getAttribLocation(c, 'position'),
                              uv: e.getAttribLocation(c, 'uv')
                            }),
                            (l = {
                              renderType: e.getUniformLocation(c, 'renderType'),
                              map: e.getUniformLocation(c, 'map'),
                              occlusionMap: e.getUniformLocation(
                                c,
                                'occlusionMap'
                              ),
                              opacity: e.getUniformLocation(c, 'opacity'),
                              color: e.getUniformLocation(c, 'color'),
                              scale: e.getUniformLocation(c, 'scale'),
                              rotation: e.getUniformLocation(c, 'rotation'),
                              screenPosition: e.getUniformLocation(
                                c,
                                'screenPosition'
                              )
                            });
                        }
                        this.render = function(t, r, s, f) {
                          if (0 !== t.length) {
                            var m = new ke(),
                              g = f.w / f.z,
                              v = 0.5 * f.z,
                              y = 0.5 * f.w,
                              M = 16 / f.w,
                              w = new he(M * g, M),
                              x = new ke(1, 1, 0),
                              A = new he(1, 1),
                              E = new Oi();
                            E.min.set(f.x, f.y),
                              E.max.set(f.x + (f.z - 16), f.y + (f.w - 16)),
                              void 0 === c && p(),
                              i.useProgram(c),
                              i.initAttributes(),
                              i.enableAttribute(u.vertex),
                              i.enableAttribute(u.uv),
                              i.disableUnusedAttributes(),
                              e.uniform1i(l.occlusionMap, 0),
                              e.uniform1i(l.map, 1),
                              e.bindBuffer(e.ARRAY_BUFFER, a),
                              e.vertexAttribPointer(
                                u.vertex,
                                2,
                                e.FLOAT,
                                !1,
                                16,
                                0
                              ),
                              e.vertexAttribPointer(
                                u.uv,
                                2,
                                e.FLOAT,
                                !1,
                                16,
                                8
                              ),
                              e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, o),
                              i.disable(e.CULL_FACE),
                              i.buffers.depth.setMask(!1);
                            for (var b = 0, T = t.length; b < T; b++) {
                              (M = 16 / f.w), w.set(M * g, M);
                              var L = t[b];
                              if (
                                (m.set(
                                  L.matrixWorld.elements[12],
                                  L.matrixWorld.elements[13],
                                  L.matrixWorld.elements[14]
                                ),
                                m.applyMatrix4(s.matrixWorldInverse),
                                m.applyMatrix4(s.projectionMatrix),
                                x.copy(m),
                                (A.x = f.x + x.x * v + v - 8),
                                (A.y = f.y + x.y * y + y - 8),
                                !0 === E.containsPoint(A))
                              ) {
                                i.activeTexture(e.TEXTURE0),
                                  i.bindTexture(e.TEXTURE_2D, null),
                                  i.activeTexture(e.TEXTURE1),
                                  i.bindTexture(e.TEXTURE_2D, h),
                                  e.copyTexImage2D(
                                    e.TEXTURE_2D,
                                    0,
                                    e.RGB,
                                    A.x,
                                    A.y,
                                    16,
                                    16,
                                    0
                                  ),
                                  e.uniform1i(l.renderType, 0),
                                  e.uniform2f(l.scale, w.x, w.y),
                                  e.uniform3f(l.screenPosition, x.x, x.y, x.z),
                                  i.disable(e.BLEND),
                                  i.enable(e.DEPTH_TEST),
                                  e.drawElements(
                                    e.TRIANGLES,
                                    6,
                                    e.UNSIGNED_SHORT,
                                    0
                                  ),
                                  i.activeTexture(e.TEXTURE0),
                                  i.bindTexture(e.TEXTURE_2D, d),
                                  e.copyTexImage2D(
                                    e.TEXTURE_2D,
                                    0,
                                    e.RGBA,
                                    A.x,
                                    A.y,
                                    16,
                                    16,
                                    0
                                  ),
                                  e.uniform1i(l.renderType, 1),
                                  i.disable(e.DEPTH_TEST),
                                  i.activeTexture(e.TEXTURE1),
                                  i.bindTexture(e.TEXTURE_2D, h),
                                  e.drawElements(
                                    e.TRIANGLES,
                                    6,
                                    e.UNSIGNED_SHORT,
                                    0
                                  ),
                                  L.positionScreen.copy(x),
                                  L.customUpdateCallback
                                    ? L.customUpdateCallback(L)
                                    : L.updateLensFlares(),
                                  e.uniform1i(l.renderType, 2),
                                  i.enable(e.BLEND);
                                for (
                                  var N = 0, D = L.lensFlares.length;
                                  N < D;
                                  N++
                                ) {
                                  var C = L.lensFlares[N];
                                  C.opacity > 0.001 &&
                                    C.scale > 0.001 &&
                                    ((x.x = C.x),
                                    (x.y = C.y),
                                    (x.z = C.z),
                                    (M = C.size * C.scale / f.w),
                                    (w.x = M * g),
                                    (w.y = M),
                                    e.uniform3f(
                                      l.screenPosition,
                                      x.x,
                                      x.y,
                                      x.z
                                    ),
                                    e.uniform2f(l.scale, w.x, w.y),
                                    e.uniform1f(l.rotation, C.rotation),
                                    e.uniform1f(l.opacity, C.opacity),
                                    e.uniform3f(
                                      l.color,
                                      C.color.r,
                                      C.color.g,
                                      C.color.b
                                    ),
                                    i.setBlending(
                                      C.blending,
                                      C.blendEquation,
                                      C.blendSrc,
                                      C.blendDst
                                    ),
                                    n.setTexture2D(C.texture, 1),
                                    e.drawElements(
                                      e.TRIANGLES,
                                      6,
                                      e.UNSIGNED_SHORT,
                                      0
                                    ));
                                }
                              }
                            }
                            i.enable(e.CULL_FACE),
                              i.enable(e.DEPTH_TEST),
                              i.buffers.depth.setMask(!0),
                              i.reset();
                          }
                        };
                      }
                      function Ri(t, e, i, n, r, a, o, s, c) {
                        _e.call(this, t, e, i, n, r, a, o, s, c),
                          (this.needsUpdate = !0);
                      }
                      function ki(t, e, i, n, r) {
                        var a,
                          o,
                          s,
                          c,
                          u,
                          l,
                          h = new ke(),
                          d = new Re(),
                          p = new ke();
                        function f() {
                          var t,
                            i,
                            n,
                            h = new Float32Array([
                              -0.5,
                              -0.5,
                              0,
                              0,
                              0.5,
                              -0.5,
                              1,
                              0,
                              0.5,
                              0.5,
                              1,
                              1,
                              -0.5,
                              0.5,
                              0,
                              1
                            ]),
                            d = new Uint16Array([0, 1, 2, 0, 2, 3]);
                          (a = e.createBuffer()),
                            (o = e.createBuffer()),
                            e.bindBuffer(e.ARRAY_BUFFER, a),
                            e.bufferData(e.ARRAY_BUFFER, h, e.STATIC_DRAW),
                            e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, o),
                            e.bufferData(
                              e.ELEMENT_ARRAY_BUFFER,
                              d,
                              e.STATIC_DRAW
                            ),
                            (t = e.createProgram()),
                            (i = e.createShader(e.VERTEX_SHADER)),
                            (n = e.createShader(e.FRAGMENT_SHADER)),
                            e.shaderSource(
                              i,
                              [
                                'precision ' + r.precision + ' float;',
                                '#define SHADER_NAME SpriteMaterial',
                                'uniform mat4 modelViewMatrix;',
                                'uniform mat4 projectionMatrix;',
                                'uniform float rotation;',
                                'uniform vec2 scale;',
                                'uniform vec2 uvOffset;',
                                'uniform vec2 uvScale;',
                                'attribute vec2 position;',
                                'attribute vec2 uv;',
                                'varying vec2 vUV;',
                                'void main() {',
                                'vUV = uvOffset + uv * uvScale;',
                                'vec2 alignedPosition = position * scale;',
                                'vec2 rotatedPosition;',
                                'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
                                'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',
                                'vec4 finalPosition;',
                                'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
                                'finalPosition.xy += rotatedPosition;',
                                'finalPosition = projectionMatrix * finalPosition;',
                                'gl_Position = finalPosition;',
                                '}'
                              ].join('\n')
                            ),
                            e.shaderSource(
                              n,
                              [
                                'precision ' + r.precision + ' float;',
                                '#define SHADER_NAME SpriteMaterial',
                                'uniform vec3 color;',
                                'uniform sampler2D map;',
                                'uniform float opacity;',
                                'uniform int fogType;',
                                'uniform vec3 fogColor;',
                                'uniform float fogDensity;',
                                'uniform float fogNear;',
                                'uniform float fogFar;',
                                'uniform float alphaTest;',
                                'varying vec2 vUV;',
                                'void main() {',
                                'vec4 texture = texture2D( map, vUV );',
                                'if ( texture.a < alphaTest ) discard;',
                                'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',
                                'if ( fogType > 0 ) {',
                                'float depth = gl_FragCoord.z / gl_FragCoord.w;',
                                'float fogFactor = 0.0;',
                                'if ( fogType == 1 ) {',
                                'fogFactor = smoothstep( fogNear, fogFar, depth );',
                                '} else {',
                                'const float LOG2 = 1.442695;',
                                'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
                                'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',
                                '}',
                                'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',
                                '}',
                                '}'
                              ].join('\n')
                            ),
                            e.compileShader(i),
                            e.compileShader(n),
                            e.attachShader(t, i),
                            e.attachShader(t, n),
                            e.linkProgram(t),
                            (s = t),
                            (c = {
                              position: e.getAttribLocation(s, 'position'),
                              uv: e.getAttribLocation(s, 'uv')
                            }),
                            (u = {
                              uvOffset: e.getUniformLocation(s, 'uvOffset'),
                              uvScale: e.getUniformLocation(s, 'uvScale'),
                              rotation: e.getUniformLocation(s, 'rotation'),
                              scale: e.getUniformLocation(s, 'scale'),
                              color: e.getUniformLocation(s, 'color'),
                              map: e.getUniformLocation(s, 'map'),
                              opacity: e.getUniformLocation(s, 'opacity'),
                              modelViewMatrix: e.getUniformLocation(
                                s,
                                'modelViewMatrix'
                              ),
                              projectionMatrix: e.getUniformLocation(
                                s,
                                'projectionMatrix'
                              ),
                              fogType: e.getUniformLocation(s, 'fogType'),
                              fogDensity: e.getUniformLocation(s, 'fogDensity'),
                              fogNear: e.getUniformLocation(s, 'fogNear'),
                              fogFar: e.getUniformLocation(s, 'fogFar'),
                              fogColor: e.getUniformLocation(s, 'fogColor'),
                              alphaTest: e.getUniformLocation(s, 'alphaTest')
                            });
                          var p = document.createElementNS(
                            'http://www.w3.org/1999/xhtml',
                            'canvas'
                          );
                          (p.width = 8), (p.height = 8);
                          var f = p.getContext('2d');
                          (f.fillStyle = 'white'),
                            f.fillRect(0, 0, 8, 8),
                            (l = new Ri(p));
                        }
                        function m(t, e) {
                          return t.renderOrder !== e.renderOrder
                            ? t.renderOrder - e.renderOrder
                            : t.z !== e.z ? e.z - t.z : e.id - t.id;
                        }
                        this.render = function(r, g, v) {
                          if (0 !== r.length) {
                            void 0 === s && f(),
                              i.useProgram(s),
                              i.initAttributes(),
                              i.enableAttribute(c.position),
                              i.enableAttribute(c.uv),
                              i.disableUnusedAttributes(),
                              i.disable(e.CULL_FACE),
                              i.enable(e.BLEND),
                              e.bindBuffer(e.ARRAY_BUFFER, a),
                              e.vertexAttribPointer(
                                c.position,
                                2,
                                e.FLOAT,
                                !1,
                                16,
                                0
                              ),
                              e.vertexAttribPointer(
                                c.uv,
                                2,
                                e.FLOAT,
                                !1,
                                16,
                                8
                              ),
                              e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, o),
                              e.uniformMatrix4fv(
                                u.projectionMatrix,
                                !1,
                                v.projectionMatrix.elements
                              ),
                              i.activeTexture(e.TEXTURE0),
                              e.uniform1i(u.map, 0);
                            var y = 0,
                              M = 0,
                              w = g.fog;
                            w
                              ? (e.uniform3f(
                                  u.fogColor,
                                  w.color.r,
                                  w.color.g,
                                  w.color.b
                                ),
                                w.isFog
                                  ? (e.uniform1f(u.fogNear, w.near),
                                    e.uniform1f(u.fogFar, w.far),
                                    e.uniform1i(u.fogType, 1),
                                    (y = 1),
                                    (M = 1))
                                  : w.isFogExp2 &&
                                    (e.uniform1f(u.fogDensity, w.density),
                                    e.uniform1i(u.fogType, 2),
                                    (y = 2),
                                    (M = 2)))
                              : (e.uniform1i(u.fogType, 0), (y = 0), (M = 0));
                            for (var x = 0, A = r.length; x < A; x++) {
                              (b = r[x]).modelViewMatrix.multiplyMatrices(
                                v.matrixWorldInverse,
                                b.matrixWorld
                              ),
                                (b.z = -b.modelViewMatrix.elements[14]);
                            }
                            r.sort(m);
                            var E = [];
                            for (x = 0, A = r.length; x < A; x++) {
                              var b,
                                T = (b = r[x]).material;
                              if (!1 !== T.visible) {
                                b.onBeforeRender(t, g, v, void 0, T, void 0),
                                  e.uniform1f(u.alphaTest, T.alphaTest),
                                  e.uniformMatrix4fv(
                                    u.modelViewMatrix,
                                    !1,
                                    b.modelViewMatrix.elements
                                  ),
                                  b.matrixWorld.decompose(h, d, p),
                                  (E[0] = p.x),
                                  (E[1] = p.y);
                                var L = 0;
                                g.fog && T.fog && (L = M),
                                  y !== L &&
                                    (e.uniform1i(u.fogType, L), (y = L)),
                                  null !== T.map
                                    ? (e.uniform2f(
                                        u.uvOffset,
                                        T.map.offset.x,
                                        T.map.offset.y
                                      ),
                                      e.uniform2f(
                                        u.uvScale,
                                        T.map.repeat.x,
                                        T.map.repeat.y
                                      ))
                                    : (e.uniform2f(u.uvOffset, 0, 0),
                                      e.uniform2f(u.uvScale, 1, 1)),
                                  e.uniform1f(u.opacity, T.opacity),
                                  e.uniform3f(
                                    u.color,
                                    T.color.r,
                                    T.color.g,
                                    T.color.b
                                  ),
                                  e.uniform1f(u.rotation, T.rotation),
                                  e.uniform2fv(u.scale, E),
                                  i.setBlending(
                                    T.blending,
                                    T.blendEquation,
                                    T.blendSrc,
                                    T.blendDst,
                                    T.blendEquationAlpha,
                                    T.blendSrcAlpha,
                                    T.blendDstAlpha,
                                    T.premultipliedAlpha
                                  ),
                                  i.buffers.depth.setTest(T.depthTest),
                                  i.buffers.depth.setMask(T.depthWrite),
                                  n.setTexture2D(T.map || l, 0),
                                  e.drawElements(
                                    e.TRIANGLES,
                                    6,
                                    e.UNSIGNED_SHORT,
                                    0
                                  ),
                                  b.onAfterRender(t, g, v, void 0, T, void 0);
                              }
                            }
                            i.enable(e.CULL_FACE), i.reset();
                          }
                        };
                      }
                      (ji.physical = {
                        uniforms: Ii.merge([
                          ji.standard.uniforms,
                          {
                            clearCoat: { value: 0 },
                            clearCoatRoughness: { value: 0 }
                          }
                        ]),
                        vertexShader: _i.meshphysical_vert,
                        fragmentShader: _i.meshphysical_frag
                      }),
                        Object.assign(Oi.prototype, {
                          set: function(t, e) {
                            return this.min.copy(t), this.max.copy(e), this;
                          },
                          setFromPoints: function(t) {
                            this.makeEmpty();
                            for (var e = 0, i = t.length; e < i; e++)
                              this.expandByPoint(t[e]);
                            return this;
                          },
                          setFromCenterAndSize: ((Ci = new he()),
                          function(t, e) {
                            var i = Ci.copy(e).multiplyScalar(0.5);
                            return (
                              this.min.copy(t).sub(i),
                              this.max.copy(t).add(i),
                              this
                            );
                          }),
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              this.min.copy(t.min), this.max.copy(t.max), this
                            );
                          },
                          makeEmpty: function() {
                            return (
                              (this.min.x = this.min.y = 1 / 0),
                              (this.max.x = this.max.y = -1 / 0),
                              this
                            );
                          },
                          isEmpty: function() {
                            return (
                              this.max.x < this.min.x || this.max.y < this.min.y
                            );
                          },
                          getCenter: function(t) {
                            var e = t || new he();
                            return this.isEmpty()
                              ? e.set(0, 0)
                              : e
                                  .addVectors(this.min, this.max)
                                  .multiplyScalar(0.5);
                          },
                          getSize: function(t) {
                            var e = t || new he();
                            return this.isEmpty()
                              ? e.set(0, 0)
                              : e.subVectors(this.max, this.min);
                          },
                          expandByPoint: function(t) {
                            return this.min.min(t), this.max.max(t), this;
                          },
                          expandByVector: function(t) {
                            return this.min.sub(t), this.max.add(t), this;
                          },
                          expandByScalar: function(t) {
                            return (
                              this.min.addScalar(-t),
                              this.max.addScalar(t),
                              this
                            );
                          },
                          containsPoint: function(t) {
                            return !(
                              t.x < this.min.x ||
                              t.x > this.max.x ||
                              t.y < this.min.y ||
                              t.y > this.max.y
                            );
                          },
                          containsBox: function(t) {
                            return (
                              this.min.x <= t.min.x &&
                              t.max.x <= this.max.x &&
                              this.min.y <= t.min.y &&
                              t.max.y <= this.max.y
                            );
                          },
                          getParameter: function(t, e) {
                            return (e || new he()).set(
                              (t.x - this.min.x) / (this.max.x - this.min.x),
                              (t.y - this.min.y) / (this.max.y - this.min.y)
                            );
                          },
                          intersectsBox: function(t) {
                            return !(
                              t.max.x < this.min.x ||
                              t.min.x > this.max.x ||
                              t.max.y < this.min.y ||
                              t.min.y > this.max.y
                            );
                          },
                          clampPoint: function(t, e) {
                            return (e || new he())
                              .copy(t)
                              .clamp(this.min, this.max);
                          },
                          distanceToPoint: ((Di = new he()),
                          function(t) {
                            return Di.copy(t)
                              .clamp(this.min, this.max)
                              .sub(t)
                              .length();
                          }),
                          intersect: function(t) {
                            return (
                              this.min.max(t.min), this.max.min(t.max), this
                            );
                          },
                          union: function(t) {
                            return (
                              this.min.min(t.min), this.max.max(t.max), this
                            );
                          },
                          translate: function(t) {
                            return this.min.add(t), this.max.add(t), this;
                          },
                          equals: function(t) {
                            return (
                              t.min.equals(this.min) && t.max.equals(this.max)
                            );
                          }
                        }),
                        (Ri.prototype = Object.create(_e.prototype)),
                        (Ri.prototype.constructor = Ri);
                      var Ui,
                        Pi,
                        Bi,
                        Fi,
                        Gi,
                        Vi,
                        Yi,
                        Qi,
                        Hi,
                        Wi,
                        Xi,
                        qi,
                        Zi,
                        Ki,
                        Ji,
                        $i,
                        tn,
                        en,
                        nn,
                        rn = 0;
                      function an() {
                        Object.defineProperty(this, 'id', { value: rn++ }),
                          (this.uuid = le.generateUUID()),
                          (this.name = ''),
                          (this.type = 'Material'),
                          (this.fog = !0),
                          (this.lights = !0),
                          (this.blending = A),
                          (this.side = m),
                          (this.flatShading = !1),
                          (this.vertexColors = y),
                          (this.opacity = 1),
                          (this.transparent = !1),
                          (this.blendSrc = R),
                          (this.blendDst = k),
                          (this.blendEquation = N),
                          (this.blendSrcAlpha = null),
                          (this.blendDstAlpha = null),
                          (this.blendEquationAlpha = null),
                          (this.depthFunc = H),
                          (this.depthTest = !0),
                          (this.depthWrite = !0),
                          (this.clippingPlanes = null),
                          (this.clipIntersection = !1),
                          (this.clipShadows = !1),
                          (this.colorWrite = !0),
                          (this.precision = null),
                          (this.polygonOffset = !1),
                          (this.polygonOffsetFactor = 0),
                          (this.polygonOffsetUnits = 0),
                          (this.dithering = !1),
                          (this.alphaTest = 0),
                          (this.premultipliedAlpha = !1),
                          (this.overdraw = 0),
                          (this.visible = !0),
                          (this.userData = {}),
                          (this.needsUpdate = !0);
                      }
                      function on(t) {
                        an.call(this),
                          (this.type = 'ShaderMaterial'),
                          (this.defines = {}),
                          (this.uniforms = {}),
                          (this.vertexShader =
                            'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}'),
                          (this.fragmentShader =
                            'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}'),
                          (this.linewidth = 1),
                          (this.wireframe = !1),
                          (this.wireframeLinewidth = 1),
                          (this.fog = !1),
                          (this.lights = !1),
                          (this.clipping = !1),
                          (this.skinning = !1),
                          (this.morphTargets = !1),
                          (this.morphNormals = !1),
                          (this.extensions = {
                            derivatives: !1,
                            fragDepth: !1,
                            drawBuffers: !1,
                            shaderTextureLOD: !1
                          }),
                          (this.defaultAttributeValues = {
                            color: [1, 1, 1],
                            uv: [0, 0],
                            uv2: [0, 0]
                          }),
                          (this.index0AttributeName = void 0),
                          void 0 !== t && (t.attributes, this.setValues(t));
                      }
                      function sn(t) {
                        an.call(this),
                          (this.type = 'MeshDepthMaterial'),
                          (this.depthPacking = ce),
                          (this.skinning = !1),
                          (this.morphTargets = !1),
                          (this.map = null),
                          (this.alphaMap = null),
                          (this.displacementMap = null),
                          (this.displacementScale = 1),
                          (this.displacementBias = 0),
                          (this.wireframe = !1),
                          (this.wireframeLinewidth = 1),
                          (this.fog = !1),
                          (this.lights = !1),
                          this.setValues(t);
                      }
                      function cn(t) {
                        an.call(this),
                          (this.type = 'MeshDistanceMaterial'),
                          (this.referencePosition = new ke()),
                          (this.nearDistance = 1),
                          (this.farDistance = 1e3),
                          (this.skinning = !1),
                          (this.morphTargets = !1),
                          (this.map = null),
                          (this.alphaMap = null),
                          (this.displacementMap = null),
                          (this.displacementScale = 1),
                          (this.displacementBias = 0),
                          (this.fog = !1),
                          (this.lights = !1),
                          this.setValues(t);
                      }
                      function un(t, e) {
                        (this.min =
                          void 0 !== t ? t : new ke(1 / 0, 1 / 0, 1 / 0)),
                          (this.max =
                            void 0 !== e ? e : new ke(-1 / 0, -1 / 0, -1 / 0));
                      }
                      function ln(t, e) {
                        (this.center = void 0 !== t ? t : new ke()),
                          (this.radius = void 0 !== e ? e : 0);
                      }
                      function hn() {
                        (this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
                          arguments.length;
                      }
                      function dn(t, e) {
                        (this.normal = void 0 !== t ? t : new ke(1, 0, 0)),
                          (this.constant = void 0 !== e ? e : 0);
                      }
                      function pn(t, e, i, n, r, a) {
                        this.planes = [
                          void 0 !== t ? t : new dn(),
                          void 0 !== e ? e : new dn(),
                          void 0 !== i ? i : new dn(),
                          void 0 !== n ? n : new dn(),
                          void 0 !== r ? r : new dn(),
                          void 0 !== a ? a : new dn()
                        ];
                      }
                      function fn(t, e, i) {
                        for (
                          var n = new pn(),
                            r = new Ue(),
                            a = new he(),
                            o = new he(i, i),
                            s = new ke(),
                            c = new ke(),
                            u = 1,
                            l = 2,
                            h = 1 + (u | l),
                            d = new Array(h),
                            f = new Array(h),
                            y = {},
                            M = [
                              new ke(1, 0, 0),
                              new ke(-1, 0, 0),
                              new ke(0, 0, 1),
                              new ke(0, 0, -1),
                              new ke(0, 1, 0),
                              new ke(0, -1, 0)
                            ],
                            w = [
                              new ke(0, 1, 0),
                              new ke(0, 1, 0),
                              new ke(0, 1, 0),
                              new ke(0, 1, 0),
                              new ke(0, 0, 1),
                              new ke(0, 0, -1)
                            ],
                            x = [
                              new je(),
                              new je(),
                              new je(),
                              new je(),
                              new je(),
                              new je()
                            ],
                            A = 0;
                          A !== h;
                          ++A
                        ) {
                          var E = 0 != (A & u),
                            b = 0 != (A & l),
                            T = new sn({
                              depthPacking: ue,
                              morphTargets: E,
                              skinning: b
                            });
                          d[A] = T;
                          var L = new cn({ morphTargets: E, skinning: b });
                          f[A] = L;
                        }
                        var N = this;
                        function D(e, i, n, r, a, o) {
                          var s = e.geometry,
                            c = null,
                            h = d,
                            p = e.customDepthMaterial;
                          if (
                            (n && ((h = f), (p = e.customDistanceMaterial)), p)
                          )
                            c = p;
                          else {
                            var M = !1;
                            i.morphTargets &&
                              (s && s.isBufferGeometry
                                ? (M =
                                    s.morphAttributes &&
                                    s.morphAttributes.position &&
                                    s.morphAttributes.position.length > 0)
                                : s &&
                                  s.isGeometry &&
                                  (M =
                                    s.morphTargets &&
                                    s.morphTargets.length > 0)),
                              e.isSkinnedMesh && i.skinning;
                            var w = e.isSkinnedMesh && i.skinning,
                              x = 0;
                            M && (x |= u), w && (x |= l), (c = h[x]);
                          }
                          if (
                            t.localClippingEnabled &&
                            !0 === i.clipShadows &&
                            0 !== i.clippingPlanes.length
                          ) {
                            var A = c.uuid,
                              E = i.uuid,
                              b = y[A];
                            void 0 === b && ((b = {}), (y[A] = b));
                            var T = b[E];
                            void 0 === T && ((T = c.clone()), (b[E] = T)),
                              (c = T);
                          }
                          (c.visible = i.visible), (c.wireframe = i.wireframe);
                          var L = i.side;
                          return (
                            N.renderSingleSided && L == v && (L = m),
                            N.renderReverseSided &&
                              (L === m ? (L = g) : L === g && (L = m)),
                            (c.side = L),
                            (c.clipShadows = i.clipShadows),
                            (c.clippingPlanes = i.clippingPlanes),
                            (c.clipIntersection = i.clipIntersection),
                            (c.wireframeLinewidth = i.wireframeLinewidth),
                            (c.linewidth = i.linewidth),
                            n &&
                              c.isMeshDistanceMaterial &&
                              (c.referencePosition.copy(r),
                              (c.nearDistance = a),
                              (c.farDistance = o)),
                            c
                          );
                        }
                        function C(i, r, a, o) {
                          if (!1 !== i.visible) {
                            if (
                              i.layers.test(r.layers) &&
                              (i.isMesh || i.isLine || i.isPoints) &&
                              i.castShadow &&
                              (!i.frustumCulled || n.intersectsObject(i))
                            ) {
                              i.modelViewMatrix.multiplyMatrices(
                                a.matrixWorldInverse,
                                i.matrixWorld
                              );
                              var s = e.update(i),
                                u = i.material;
                              if (Array.isArray(u))
                                for (
                                  var l = s.groups, h = 0, d = l.length;
                                  h < d;
                                  h++
                                ) {
                                  var p = l[h],
                                    f = u[p.materialIndex];
                                  if (f && f.visible) {
                                    var m = D(i, f, o, c, a.near, a.far);
                                    t.renderBufferDirect(a, null, s, m, i, p);
                                  }
                                }
                              else if (u.visible) {
                                m = D(i, u, o, c, a.near, a.far);
                                t.renderBufferDirect(a, null, s, m, i, null);
                              }
                            }
                            for (
                              var g = i.children, v = 0, y = g.length;
                              v < y;
                              v++
                            )
                              C(g[v], r, a, o);
                          }
                        }
                        (this.enabled = !1),
                          (this.autoUpdate = !0),
                          (this.needsUpdate = !1),
                          (this.type = p),
                          (this.renderReverseSided = !0),
                          (this.renderSingleSided = !0),
                          (this.render = function(e, i, u) {
                            if (
                              !1 !== N.enabled &&
                              (!1 !== N.autoUpdate || !1 !== N.needsUpdate) &&
                              0 !== e.length
                            ) {
                              var l,
                                h = t.context,
                                d = t.state;
                              d.disable(h.BLEND),
                                d.buffers.color.setClear(1, 1, 1, 1),
                                d.buffers.depth.setTest(!0),
                                d.setScissorTest(!1);
                              for (var p = 0, f = e.length; p < f; p++) {
                                var m = e[p],
                                  g = m.shadow,
                                  v = m && m.isPointLight;
                                if (void 0 !== g) {
                                  var y = g.camera;
                                  if ((a.copy(g.mapSize), a.min(o), v)) {
                                    var A = a.x,
                                      E = a.y;
                                    x[0].set(2 * A, E, A, E),
                                      x[1].set(0, E, A, E),
                                      x[2].set(3 * A, E, A, E),
                                      x[3].set(A, E, A, E),
                                      x[4].set(3 * A, 0, A, E),
                                      x[5].set(A, 0, A, E),
                                      (a.x *= 4),
                                      (a.y *= 2);
                                  }
                                  if (null === g.map) {
                                    var b = {
                                      minFilter: mt,
                                      magFilter: mt,
                                      format: zt
                                    };
                                    (g.map = new Oe(a.x, a.y, b)),
                                      (g.map.texture.name =
                                        m.name + '.shadowMap'),
                                      y.updateProjectionMatrix();
                                  }
                                  g.isSpotLightShadow && g.update(m);
                                  var T = g.map,
                                    L = g.matrix;
                                  c.setFromMatrixPosition(m.matrixWorld),
                                    y.position.copy(c),
                                    v
                                      ? ((l = 6),
                                        L.makeTranslation(-c.x, -c.y, -c.z))
                                      : ((l = 1),
                                        s.setFromMatrixPosition(
                                          m.target.matrixWorld
                                        ),
                                        y.lookAt(s),
                                        y.updateMatrixWorld(),
                                        L.set(
                                          0.5,
                                          0,
                                          0,
                                          0.5,
                                          0,
                                          0.5,
                                          0,
                                          0.5,
                                          0,
                                          0,
                                          0.5,
                                          0.5,
                                          0,
                                          0,
                                          0,
                                          1
                                        ),
                                        L.multiply(y.projectionMatrix),
                                        L.multiply(y.matrixWorldInverse)),
                                    t.setRenderTarget(T),
                                    t.clear();
                                  for (var D = 0; D < l; D++) {
                                    if (v) {
                                      s.copy(y.position),
                                        s.add(M[D]),
                                        y.up.copy(w[D]),
                                        y.lookAt(s),
                                        y.updateMatrixWorld();
                                      var S = x[D];
                                      d.viewport(S);
                                    }
                                    r.multiplyMatrices(
                                      y.projectionMatrix,
                                      y.matrixWorldInverse
                                    ),
                                      n.setFromMatrix(r),
                                      C(i, u, y, v);
                                  }
                                }
                              }
                              N.needsUpdate = !1;
                            }
                          });
                      }
                      function mn(t) {
                        var e = {};
                        return {
                          get: function(t) {
                            return (
                              t.isInterleavedBufferAttribute && (t = t.data),
                              e[t.uuid]
                            );
                          },
                          remove: function(i) {
                            i.isInterleavedBufferAttribute && (i = i.data);
                            var n = e[i.uuid];
                            n && (t.deleteBuffer(n.buffer), delete e[i.uuid]);
                          },
                          update: function(i, n) {
                            i.isInterleavedBufferAttribute && (i = i.data);
                            var r,
                              a,
                              o,
                              s,
                              c,
                              u = e[i.uuid];
                            void 0 === u
                              ? (e[i.uuid] = (function(e, i) {
                                  var n = e.array,
                                    r = e.dynamic
                                      ? t.DYNAMIC_DRAW
                                      : t.STATIC_DRAW,
                                    a = t.createBuffer();
                                  t.bindBuffer(i, a),
                                    t.bufferData(i, n, r),
                                    e.onUploadCallback();
                                  var o = t.FLOAT;
                                  return (
                                    n instanceof Float32Array
                                      ? (o = t.FLOAT)
                                      : n instanceof Float64Array ||
                                        (n instanceof Uint16Array
                                          ? (o = t.UNSIGNED_SHORT)
                                          : n instanceof Int16Array
                                            ? (o = t.SHORT)
                                            : n instanceof Uint32Array
                                              ? (o = t.UNSIGNED_INT)
                                              : n instanceof Int32Array
                                                ? (o = t.INT)
                                                : n instanceof Int8Array
                                                  ? (o = t.BYTE)
                                                  : n instanceof Uint8Array &&
                                                    (o = t.UNSIGNED_BYTE)),
                                    {
                                      buffer: a,
                                      type: o,
                                      bytesPerElement: n.BYTES_PER_ELEMENT,
                                      version: e.version
                                    }
                                  );
                                })(i, n))
                              : u.version < i.version &&
                                ((r = u.buffer),
                                (o = n),
                                (s = (a = i).array),
                                (c = a.updateRange),
                                t.bindBuffer(o, r),
                                !1 === a.dynamic
                                  ? t.bufferData(o, s, t.STATIC_DRAW)
                                  : -1 === c.count
                                    ? t.bufferSubData(o, 0, s)
                                    : 0 === c.count ||
                                      (t.bufferSubData(
                                        o,
                                        c.offset * s.BYTES_PER_ELEMENT,
                                        s.subarray(c.offset, c.offset + c.count)
                                      ),
                                      (c.count = -1)),
                                (u.version = i.version));
                          }
                        };
                      }
                      function gn(t, e, i, n) {
                        (this._x = t || 0),
                          (this._y = e || 0),
                          (this._z = i || 0),
                          (this._order = n || gn.DefaultOrder);
                      }
                      function vn() {
                        this.mask = 1;
                      }
                      Object.assign(an.prototype, e.prototype, {
                        isMaterial: !0,
                        onBeforeCompile: function() {},
                        setValues: function(t) {
                          if (void 0 !== t)
                            for (var e in t) {
                              var i = t[e];
                              if (void 0 !== i)
                                if ('shading' !== e) {
                                  var n = this[e];
                                  void 0 !== n &&
                                    (n && n.isColor
                                      ? n.set(i)
                                      : n && n.isVector3 && i && i.isVector3
                                        ? n.copy(i)
                                        : (this[e] =
                                            'overdraw' === e ? Number(i) : i));
                                } else this.flatShading = 1 === i;
                            }
                        },
                        toJSON: function(t) {
                          var e = void 0 === t;
                          e && (t = { textures: {}, images: {} });
                          var i = {
                            metadata: {
                              version: 4.5,
                              type: 'Material',
                              generator: 'Material.toJSON'
                            }
                          };
                          function n(t) {
                            var e = [];
                            for (var i in t) {
                              var n = t[i];
                              delete n.metadata, e.push(n);
                            }
                            return e;
                          }
                          if (
                            ((i.uuid = this.uuid),
                            (i.type = this.type),
                            '' !== this.name && (i.name = this.name),
                            this.color &&
                              this.color.isColor &&
                              (i.color = this.color.getHex()),
                            void 0 !== this.roughness &&
                              (i.roughness = this.roughness),
                            void 0 !== this.metalness &&
                              (i.metalness = this.metalness),
                            this.emissive &&
                              this.emissive.isColor &&
                              (i.emissive = this.emissive.getHex()),
                            this.specular &&
                              this.specular.isColor &&
                              (i.specular = this.specular.getHex()),
                            void 0 !== this.shininess &&
                              (i.shininess = this.shininess),
                            void 0 !== this.clearCoat &&
                              (i.clearCoat = this.clearCoat),
                            void 0 !== this.clearCoatRoughness &&
                              (i.clearCoatRoughness = this.clearCoatRoughness),
                            this.map &&
                              this.map.isTexture &&
                              (i.map = this.map.toJSON(t).uuid),
                            this.alphaMap &&
                              this.alphaMap.isTexture &&
                              (i.alphaMap = this.alphaMap.toJSON(t).uuid),
                            this.lightMap &&
                              this.lightMap.isTexture &&
                              (i.lightMap = this.lightMap.toJSON(t).uuid),
                            this.bumpMap &&
                              this.bumpMap.isTexture &&
                              ((i.bumpMap = this.bumpMap.toJSON(t).uuid),
                              (i.bumpScale = this.bumpScale)),
                            this.normalMap &&
                              this.normalMap.isTexture &&
                              ((i.normalMap = this.normalMap.toJSON(t).uuid),
                              (i.normalScale = this.normalScale.toArray())),
                            this.displacementMap &&
                              this.displacementMap.isTexture &&
                              ((i.displacementMap = this.displacementMap.toJSON(
                                t
                              ).uuid),
                              (i.displacementScale = this.displacementScale),
                              (i.displacementBias = this.displacementBias)),
                            this.roughnessMap &&
                              this.roughnessMap.isTexture &&
                              (i.roughnessMap = this.roughnessMap.toJSON(
                                t
                              ).uuid),
                            this.metalnessMap &&
                              this.metalnessMap.isTexture &&
                              (i.metalnessMap = this.metalnessMap.toJSON(
                                t
                              ).uuid),
                            this.emissiveMap &&
                              this.emissiveMap.isTexture &&
                              (i.emissiveMap = this.emissiveMap.toJSON(t).uuid),
                            this.specularMap &&
                              this.specularMap.isTexture &&
                              (i.specularMap = this.specularMap.toJSON(t).uuid),
                            this.envMap &&
                              this.envMap.isTexture &&
                              ((i.envMap = this.envMap.toJSON(t).uuid),
                              (i.reflectivity = this.reflectivity)),
                            this.gradientMap &&
                              this.gradientMap.isTexture &&
                              (i.gradientMap = this.gradientMap.toJSON(t).uuid),
                            void 0 !== this.size && (i.size = this.size),
                            void 0 !== this.sizeAttenuation &&
                              (i.sizeAttenuation = this.sizeAttenuation),
                            this.blending !== A && (i.blending = this.blending),
                            !0 === this.flatShading &&
                              (i.flatShading = this.flatShading),
                            this.side !== m && (i.side = this.side),
                            this.vertexColors !== y &&
                              (i.vertexColors = this.vertexColors),
                            this.opacity < 1 && (i.opacity = this.opacity),
                            !0 === this.transparent &&
                              (i.transparent = this.transparent),
                            (i.depthFunc = this.depthFunc),
                            (i.depthTest = this.depthTest),
                            (i.depthWrite = this.depthWrite),
                            !0 === this.dithering && (i.dithering = !0),
                            this.alphaTest > 0 &&
                              (i.alphaTest = this.alphaTest),
                            !0 === this.premultipliedAlpha &&
                              (i.premultipliedAlpha = this.premultipliedAlpha),
                            !0 === this.wireframe &&
                              (i.wireframe = this.wireframe),
                            this.wireframeLinewidth > 1 &&
                              (i.wireframeLinewidth = this.wireframeLinewidth),
                            'round' !== this.wireframeLinecap &&
                              (i.wireframeLinecap = this.wireframeLinecap),
                            'round' !== this.wireframeLinejoin &&
                              (i.wireframeLinejoin = this.wireframeLinejoin),
                            !0 === this.morphTargets && (i.morphTargets = !0),
                            !0 === this.skinning && (i.skinning = !0),
                            !1 === this.visible && (i.visible = !1),
                            '{}' !== JSON.stringify(this.userData) &&
                              (i.userData = this.userData),
                            e)
                          ) {
                            var r = n(t.textures),
                              a = n(t.images);
                            r.length > 0 && (i.textures = r),
                              a.length > 0 && (i.images = a);
                          }
                          return i;
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          (this.name = t.name),
                            (this.fog = t.fog),
                            (this.lights = t.lights),
                            (this.blending = t.blending),
                            (this.side = t.side),
                            (this.flatShading = t.flatShading),
                            (this.vertexColors = t.vertexColors),
                            (this.opacity = t.opacity),
                            (this.transparent = t.transparent),
                            (this.blendSrc = t.blendSrc),
                            (this.blendDst = t.blendDst),
                            (this.blendEquation = t.blendEquation),
                            (this.blendSrcAlpha = t.blendSrcAlpha),
                            (this.blendDstAlpha = t.blendDstAlpha),
                            (this.blendEquationAlpha = t.blendEquationAlpha),
                            (this.depthFunc = t.depthFunc),
                            (this.depthTest = t.depthTest),
                            (this.depthWrite = t.depthWrite),
                            (this.colorWrite = t.colorWrite),
                            (this.precision = t.precision),
                            (this.polygonOffset = t.polygonOffset),
                            (this.polygonOffsetFactor = t.polygonOffsetFactor),
                            (this.polygonOffsetUnits = t.polygonOffsetUnits),
                            (this.dithering = t.dithering),
                            (this.alphaTest = t.alphaTest),
                            (this.premultipliedAlpha = t.premultipliedAlpha),
                            (this.overdraw = t.overdraw),
                            (this.visible = t.visible),
                            (this.userData = JSON.parse(
                              JSON.stringify(t.userData)
                            )),
                            (this.clipShadows = t.clipShadows),
                            (this.clipIntersection = t.clipIntersection);
                          var e = t.clippingPlanes,
                            i = null;
                          if (null !== e) {
                            var n = e.length;
                            i = new Array(n);
                            for (var r = 0; r !== n; ++r) i[r] = e[r].clone();
                          }
                          return (this.clippingPlanes = i), this;
                        },
                        dispose: function() {
                          this.dispatchEvent({ type: 'dispose' });
                        }
                      }),
                        (on.prototype = Object.create(an.prototype)),
                        (on.prototype.constructor = on),
                        (on.prototype.isShaderMaterial = !0),
                        (on.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            (this.fragmentShader = t.fragmentShader),
                            (this.vertexShader = t.vertexShader),
                            (this.uniforms = Ii.clone(t.uniforms)),
                            (this.defines = t.defines),
                            (this.wireframe = t.wireframe),
                            (this.wireframeLinewidth = t.wireframeLinewidth),
                            (this.lights = t.lights),
                            (this.clipping = t.clipping),
                            (this.skinning = t.skinning),
                            (this.morphTargets = t.morphTargets),
                            (this.morphNormals = t.morphNormals),
                            (this.extensions = t.extensions),
                            this
                          );
                        }),
                        (on.prototype.toJSON = function(t) {
                          var e = an.prototype.toJSON.call(this, t);
                          return (
                            (e.uniforms = this.uniforms),
                            (e.vertexShader = this.vertexShader),
                            (e.fragmentShader = this.fragmentShader),
                            e
                          );
                        }),
                        (sn.prototype = Object.create(an.prototype)),
                        (sn.prototype.constructor = sn),
                        (sn.prototype.isMeshDepthMaterial = !0),
                        (sn.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            (this.depthPacking = t.depthPacking),
                            (this.skinning = t.skinning),
                            (this.morphTargets = t.morphTargets),
                            (this.map = t.map),
                            (this.alphaMap = t.alphaMap),
                            (this.displacementMap = t.displacementMap),
                            (this.displacementScale = t.displacementScale),
                            (this.displacementBias = t.displacementBias),
                            (this.wireframe = t.wireframe),
                            (this.wireframeLinewidth = t.wireframeLinewidth),
                            this
                          );
                        }),
                        (cn.prototype = Object.create(an.prototype)),
                        (cn.prototype.constructor = cn),
                        (cn.prototype.isMeshDistanceMaterial = !0),
                        (cn.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            this.referencePosition.copy(t.referencePosition),
                            (this.nearDistance = t.nearDistance),
                            (this.farDistance = t.farDistance),
                            (this.skinning = t.skinning),
                            (this.morphTargets = t.morphTargets),
                            (this.map = t.map),
                            (this.alphaMap = t.alphaMap),
                            (this.displacementMap = t.displacementMap),
                            (this.displacementScale = t.displacementScale),
                            (this.displacementBias = t.displacementBias),
                            this
                          );
                        }),
                        Object.assign(un.prototype, {
                          isBox3: !0,
                          set: function(t, e) {
                            return this.min.copy(t), this.max.copy(e), this;
                          },
                          setFromArray: function(t) {
                            for (
                              var e = 1 / 0,
                                i = 1 / 0,
                                n = 1 / 0,
                                r = -1 / 0,
                                a = -1 / 0,
                                o = -1 / 0,
                                s = 0,
                                c = t.length;
                              s < c;
                              s += 3
                            ) {
                              var u = t[s],
                                l = t[s + 1],
                                h = t[s + 2];
                              u < e && (e = u),
                                l < i && (i = l),
                                h < n && (n = h),
                                u > r && (r = u),
                                l > a && (a = l),
                                h > o && (o = h);
                            }
                            return (
                              this.min.set(e, i, n), this.max.set(r, a, o), this
                            );
                          },
                          setFromBufferAttribute: function(t) {
                            for (
                              var e = 1 / 0,
                                i = 1 / 0,
                                n = 1 / 0,
                                r = -1 / 0,
                                a = -1 / 0,
                                o = -1 / 0,
                                s = 0,
                                c = t.count;
                              s < c;
                              s++
                            ) {
                              var u = t.getX(s),
                                l = t.getY(s),
                                h = t.getZ(s);
                              u < e && (e = u),
                                l < i && (i = l),
                                h < n && (n = h),
                                u > r && (r = u),
                                l > a && (a = l),
                                h > o && (o = h);
                            }
                            return (
                              this.min.set(e, i, n), this.max.set(r, a, o), this
                            );
                          },
                          setFromPoints: function(t) {
                            this.makeEmpty();
                            for (var e = 0, i = t.length; e < i; e++)
                              this.expandByPoint(t[e]);
                            return this;
                          },
                          setFromCenterAndSize: ((Vi = new ke()),
                          function(t, e) {
                            var i = Vi.copy(e).multiplyScalar(0.5);
                            return (
                              this.min.copy(t).sub(i),
                              this.max.copy(t).add(i),
                              this
                            );
                          }),
                          setFromObject: function(t) {
                            return this.makeEmpty(), this.expandByObject(t);
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              this.min.copy(t.min), this.max.copy(t.max), this
                            );
                          },
                          makeEmpty: function() {
                            return (
                              (this.min.x = this.min.y = this.min.z = 1 / 0),
                              (this.max.x = this.max.y = this.max.z = -1 / 0),
                              this
                            );
                          },
                          isEmpty: function() {
                            return (
                              this.max.x < this.min.x ||
                              this.max.y < this.min.y ||
                              this.max.z < this.min.z
                            );
                          },
                          getCenter: function(t) {
                            var e = t || new ke();
                            return this.isEmpty()
                              ? e.set(0, 0, 0)
                              : e
                                  .addVectors(this.min, this.max)
                                  .multiplyScalar(0.5);
                          },
                          getSize: function(t) {
                            var e = t || new ke();
                            return this.isEmpty()
                              ? e.set(0, 0, 0)
                              : e.subVectors(this.max, this.min);
                          },
                          expandByPoint: function(t) {
                            return this.min.min(t), this.max.max(t), this;
                          },
                          expandByVector: function(t) {
                            return this.min.sub(t), this.max.add(t), this;
                          },
                          expandByScalar: function(t) {
                            return (
                              this.min.addScalar(-t),
                              this.max.addScalar(t),
                              this
                            );
                          },
                          expandByObject: ((Gi = new ke()),
                          function(t) {
                            var e = this;
                            return (
                              t.updateMatrixWorld(!0),
                              t.traverse(function(t) {
                                var i,
                                  n,
                                  r = t.geometry;
                                if (void 0 !== r)
                                  if (r.isGeometry) {
                                    var a = r.vertices;
                                    for (i = 0, n = a.length; i < n; i++)
                                      Gi.copy(a[i]),
                                        Gi.applyMatrix4(t.matrixWorld),
                                        e.expandByPoint(Gi);
                                  } else if (r.isBufferGeometry) {
                                    var o = r.attributes.position;
                                    if (void 0 !== o)
                                      for (i = 0, n = o.count; i < n; i++)
                                        Gi.fromBufferAttribute(
                                          o,
                                          i
                                        ).applyMatrix4(t.matrixWorld),
                                          e.expandByPoint(Gi);
                                  }
                              }),
                              this
                            );
                          }),
                          containsPoint: function(t) {
                            return !(
                              t.x < this.min.x ||
                              t.x > this.max.x ||
                              t.y < this.min.y ||
                              t.y > this.max.y ||
                              t.z < this.min.z ||
                              t.z > this.max.z
                            );
                          },
                          containsBox: function(t) {
                            return (
                              this.min.x <= t.min.x &&
                              t.max.x <= this.max.x &&
                              this.min.y <= t.min.y &&
                              t.max.y <= this.max.y &&
                              this.min.z <= t.min.z &&
                              t.max.z <= this.max.z
                            );
                          },
                          getParameter: function(t, e) {
                            return (e || new ke()).set(
                              (t.x - this.min.x) / (this.max.x - this.min.x),
                              (t.y - this.min.y) / (this.max.y - this.min.y),
                              (t.z - this.min.z) / (this.max.z - this.min.z)
                            );
                          },
                          intersectsBox: function(t) {
                            return !(
                              t.max.x < this.min.x ||
                              t.min.x > this.max.x ||
                              t.max.y < this.min.y ||
                              t.min.y > this.max.y ||
                              t.max.z < this.min.z ||
                              t.min.z > this.max.z
                            );
                          },
                          intersectsSphere: ((Fi = new ke()),
                          function(t) {
                            return (
                              this.clampPoint(t.center, Fi),
                              Fi.distanceToSquared(t.center) <=
                                t.radius * t.radius
                            );
                          }),
                          intersectsPlane: function(t) {
                            var e, i;
                            return (
                              t.normal.x > 0
                                ? ((e = t.normal.x * this.min.x),
                                  (i = t.normal.x * this.max.x))
                                : ((e = t.normal.x * this.max.x),
                                  (i = t.normal.x * this.min.x)),
                              t.normal.y > 0
                                ? ((e += t.normal.y * this.min.y),
                                  (i += t.normal.y * this.max.y))
                                : ((e += t.normal.y * this.max.y),
                                  (i += t.normal.y * this.min.y)),
                              t.normal.z > 0
                                ? ((e += t.normal.z * this.min.z),
                                  (i += t.normal.z * this.max.z))
                                : ((e += t.normal.z * this.max.z),
                                  (i += t.normal.z * this.min.z)),
                              e <= t.constant && i >= t.constant
                            );
                          },
                          clampPoint: function(t, e) {
                            return (e || new ke())
                              .copy(t)
                              .clamp(this.min, this.max);
                          },
                          distanceToPoint: ((Bi = new ke()),
                          function(t) {
                            return Bi.copy(t)
                              .clamp(this.min, this.max)
                              .sub(t)
                              .length();
                          }),
                          getBoundingSphere: ((Pi = new ke()),
                          function(t) {
                            var e = t || new ln();
                            return (
                              this.getCenter(e.center),
                              (e.radius = 0.5 * this.getSize(Pi).length()),
                              e
                            );
                          }),
                          intersect: function(t) {
                            return (
                              this.min.max(t.min),
                              this.max.min(t.max),
                              this.isEmpty() && this.makeEmpty(),
                              this
                            );
                          },
                          union: function(t) {
                            return (
                              this.min.min(t.min), this.max.max(t.max), this
                            );
                          },
                          applyMatrix4: ((Ui = [
                            new ke(),
                            new ke(),
                            new ke(),
                            new ke(),
                            new ke(),
                            new ke(),
                            new ke(),
                            new ke()
                          ]),
                          function(t) {
                            return this.isEmpty()
                              ? this
                              : (Ui[0]
                                  .set(this.min.x, this.min.y, this.min.z)
                                  .applyMatrix4(t),
                                Ui[1]
                                  .set(this.min.x, this.min.y, this.max.z)
                                  .applyMatrix4(t),
                                Ui[2]
                                  .set(this.min.x, this.max.y, this.min.z)
                                  .applyMatrix4(t),
                                Ui[3]
                                  .set(this.min.x, this.max.y, this.max.z)
                                  .applyMatrix4(t),
                                Ui[4]
                                  .set(this.max.x, this.min.y, this.min.z)
                                  .applyMatrix4(t),
                                Ui[5]
                                  .set(this.max.x, this.min.y, this.max.z)
                                  .applyMatrix4(t),
                                Ui[6]
                                  .set(this.max.x, this.max.y, this.min.z)
                                  .applyMatrix4(t),
                                Ui[7]
                                  .set(this.max.x, this.max.y, this.max.z)
                                  .applyMatrix4(t),
                                this.setFromPoints(Ui),
                                this);
                          }),
                          translate: function(t) {
                            return this.min.add(t), this.max.add(t), this;
                          },
                          equals: function(t) {
                            return (
                              t.min.equals(this.min) && t.max.equals(this.max)
                            );
                          }
                        }),
                        Object.assign(ln.prototype, {
                          set: function(t, e) {
                            return this.center.copy(t), (this.radius = e), this;
                          },
                          setFromPoints: ((Yi = new un()),
                          function(t, e) {
                            var i = this.center;
                            void 0 !== e
                              ? i.copy(e)
                              : Yi.setFromPoints(t).getCenter(i);
                            for (var n = 0, r = 0, a = t.length; r < a; r++)
                              n = Math.max(n, i.distanceToSquared(t[r]));
                            return (this.radius = Math.sqrt(n)), this;
                          }),
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              this.center.copy(t.center),
                              (this.radius = t.radius),
                              this
                            );
                          },
                          empty: function() {
                            return this.radius <= 0;
                          },
                          containsPoint: function(t) {
                            return (
                              t.distanceToSquared(this.center) <=
                              this.radius * this.radius
                            );
                          },
                          distanceToPoint: function(t) {
                            return t.distanceTo(this.center) - this.radius;
                          },
                          intersectsSphere: function(t) {
                            var e = this.radius + t.radius;
                            return (
                              t.center.distanceToSquared(this.center) <= e * e
                            );
                          },
                          intersectsBox: function(t) {
                            return t.intersectsSphere(this);
                          },
                          intersectsPlane: function(t) {
                            return (
                              Math.abs(t.distanceToPoint(this.center)) <=
                              this.radius
                            );
                          },
                          clampPoint: function(t, e) {
                            var i = this.center.distanceToSquared(t),
                              n = e || new ke();
                            return (
                              n.copy(t),
                              i > this.radius * this.radius &&
                                (n.sub(this.center).normalize(),
                                n.multiplyScalar(this.radius).add(this.center)),
                              n
                            );
                          },
                          getBoundingBox: function(t) {
                            var e = t || new un();
                            return (
                              e.set(this.center, this.center),
                              e.expandByScalar(this.radius),
                              e
                            );
                          },
                          applyMatrix4: function(t) {
                            return (
                              this.center.applyMatrix4(t),
                              (this.radius =
                                this.radius * t.getMaxScaleOnAxis()),
                              this
                            );
                          },
                          translate: function(t) {
                            return this.center.add(t), this;
                          },
                          equals: function(t) {
                            return (
                              t.center.equals(this.center) &&
                              t.radius === this.radius
                            );
                          }
                        }),
                        Object.assign(hn.prototype, {
                          isMatrix3: !0,
                          set: function(t, e, i, n, r, a, o, s, c) {
                            var u = this.elements;
                            return (
                              (u[0] = t),
                              (u[1] = n),
                              (u[2] = o),
                              (u[3] = e),
                              (u[4] = r),
                              (u[5] = s),
                              (u[6] = i),
                              (u[7] = a),
                              (u[8] = c),
                              this
                            );
                          },
                          identity: function() {
                            return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
                          },
                          clone: function() {
                            return new this.constructor().fromArray(
                              this.elements
                            );
                          },
                          copy: function(t) {
                            var e = this.elements,
                              i = t.elements;
                            return (
                              (e[0] = i[0]),
                              (e[1] = i[1]),
                              (e[2] = i[2]),
                              (e[3] = i[3]),
                              (e[4] = i[4]),
                              (e[5] = i[5]),
                              (e[6] = i[6]),
                              (e[7] = i[7]),
                              (e[8] = i[8]),
                              this
                            );
                          },
                          setFromMatrix4: function(t) {
                            var e = t.elements;
                            return (
                              this.set(
                                e[0],
                                e[4],
                                e[8],
                                e[1],
                                e[5],
                                e[9],
                                e[2],
                                e[6],
                                e[10]
                              ),
                              this
                            );
                          },
                          applyToBufferAttribute: ((Qi = new ke()),
                          function(t) {
                            for (var e = 0, i = t.count; e < i; e++)
                              (Qi.x = t.getX(e)),
                                (Qi.y = t.getY(e)),
                                (Qi.z = t.getZ(e)),
                                Qi.applyMatrix3(this),
                                t.setXYZ(e, Qi.x, Qi.y, Qi.z);
                            return t;
                          }),
                          multiply: function(t) {
                            return this.multiplyMatrices(this, t);
                          },
                          premultiply: function(t) {
                            return this.multiplyMatrices(t, this);
                          },
                          multiplyMatrices: function(t, e) {
                            var i = t.elements,
                              n = e.elements,
                              r = this.elements,
                              a = i[0],
                              o = i[3],
                              s = i[6],
                              c = i[1],
                              u = i[4],
                              l = i[7],
                              h = i[2],
                              d = i[5],
                              p = i[8],
                              f = n[0],
                              m = n[3],
                              g = n[6],
                              v = n[1],
                              y = n[4],
                              M = n[7],
                              w = n[2],
                              x = n[5],
                              A = n[8];
                            return (
                              (r[0] = a * f + o * v + s * w),
                              (r[3] = a * m + o * y + s * x),
                              (r[6] = a * g + o * M + s * A),
                              (r[1] = c * f + u * v + l * w),
                              (r[4] = c * m + u * y + l * x),
                              (r[7] = c * g + u * M + l * A),
                              (r[2] = h * f + d * v + p * w),
                              (r[5] = h * m + d * y + p * x),
                              (r[8] = h * g + d * M + p * A),
                              this
                            );
                          },
                          multiplyScalar: function(t) {
                            var e = this.elements;
                            return (
                              (e[0] *= t),
                              (e[3] *= t),
                              (e[6] *= t),
                              (e[1] *= t),
                              (e[4] *= t),
                              (e[7] *= t),
                              (e[2] *= t),
                              (e[5] *= t),
                              (e[8] *= t),
                              this
                            );
                          },
                          determinant: function() {
                            var t = this.elements,
                              e = t[0],
                              i = t[1],
                              n = t[2],
                              r = t[3],
                              a = t[4],
                              o = t[5],
                              s = t[6],
                              c = t[7],
                              u = t[8];
                            return (
                              e * a * u -
                              e * o * c -
                              i * r * u +
                              i * o * s +
                              n * r * c -
                              n * a * s
                            );
                          },
                          getInverse: function(t, e) {
                            t && t.isMatrix4;
                            var i = t.elements,
                              n = this.elements,
                              r = i[0],
                              a = i[1],
                              o = i[2],
                              s = i[3],
                              c = i[4],
                              u = i[5],
                              l = i[6],
                              h = i[7],
                              d = i[8],
                              p = d * c - u * h,
                              f = u * l - d * s,
                              m = h * s - c * l,
                              g = r * p + a * f + o * m;
                            if (0 === g) {
                              var v =
                                "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
                              if (!0 === e) throw new Error(v);
                              return this.identity();
                            }
                            var y = 1 / g;
                            return (
                              (n[0] = p * y),
                              (n[1] = (o * h - d * a) * y),
                              (n[2] = (u * a - o * c) * y),
                              (n[3] = f * y),
                              (n[4] = (d * r - o * l) * y),
                              (n[5] = (o * s - u * r) * y),
                              (n[6] = m * y),
                              (n[7] = (a * l - h * r) * y),
                              (n[8] = (c * r - a * s) * y),
                              this
                            );
                          },
                          transpose: function() {
                            var t,
                              e = this.elements;
                            return (
                              (t = e[1]),
                              (e[1] = e[3]),
                              (e[3] = t),
                              (t = e[2]),
                              (e[2] = e[6]),
                              (e[6] = t),
                              (t = e[5]),
                              (e[5] = e[7]),
                              (e[7] = t),
                              this
                            );
                          },
                          getNormalMatrix: function(t) {
                            return this.setFromMatrix4(t)
                              .getInverse(this)
                              .transpose();
                          },
                          transposeIntoArray: function(t) {
                            var e = this.elements;
                            return (
                              (t[0] = e[0]),
                              (t[1] = e[3]),
                              (t[2] = e[6]),
                              (t[3] = e[1]),
                              (t[4] = e[4]),
                              (t[5] = e[7]),
                              (t[6] = e[2]),
                              (t[7] = e[5]),
                              (t[8] = e[8]),
                              this
                            );
                          },
                          equals: function(t) {
                            for (
                              var e = this.elements, i = t.elements, n = 0;
                              n < 9;
                              n++
                            )
                              if (e[n] !== i[n]) return !1;
                            return !0;
                          },
                          fromArray: function(t, e) {
                            void 0 === e && (e = 0);
                            for (var i = 0; i < 9; i++)
                              this.elements[i] = t[i + e];
                            return this;
                          },
                          toArray: function(t, e) {
                            void 0 === t && (t = []), void 0 === e && (e = 0);
                            var i = this.elements;
                            return (
                              (t[e] = i[0]),
                              (t[e + 1] = i[1]),
                              (t[e + 2] = i[2]),
                              (t[e + 3] = i[3]),
                              (t[e + 4] = i[4]),
                              (t[e + 5] = i[5]),
                              (t[e + 6] = i[6]),
                              (t[e + 7] = i[7]),
                              (t[e + 8] = i[8]),
                              t
                            );
                          }
                        }),
                        Object.assign(dn.prototype, {
                          set: function(t, e) {
                            return (
                              this.normal.copy(t), (this.constant = e), this
                            );
                          },
                          setComponents: function(t, e, i, n) {
                            return (
                              this.normal.set(t, e, i),
                              (this.constant = n),
                              this
                            );
                          },
                          setFromNormalAndCoplanarPoint: function(t, e) {
                            return (
                              this.normal.copy(t),
                              (this.constant = -e.dot(this.normal)),
                              this
                            );
                          },
                          setFromCoplanarPoints: ((qi = new ke()),
                          (Zi = new ke()),
                          function(t, e, i) {
                            var n = qi
                              .subVectors(i, e)
                              .cross(Zi.subVectors(t, e))
                              .normalize();
                            return (
                              this.setFromNormalAndCoplanarPoint(n, t), this
                            );
                          }),
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              this.normal.copy(t.normal),
                              (this.constant = t.constant),
                              this
                            );
                          },
                          normalize: function() {
                            var t = 1 / this.normal.length();
                            return (
                              this.normal.multiplyScalar(t),
                              (this.constant *= t),
                              this
                            );
                          },
                          negate: function() {
                            return (
                              (this.constant *= -1), this.normal.negate(), this
                            );
                          },
                          distanceToPoint: function(t) {
                            return this.normal.dot(t) + this.constant;
                          },
                          distanceToSphere: function(t) {
                            return this.distanceToPoint(t.center) - t.radius;
                          },
                          projectPoint: function(t, e) {
                            return (e || new ke())
                              .copy(this.normal)
                              .multiplyScalar(-this.distanceToPoint(t))
                              .add(t);
                          },
                          intersectLine: ((Xi = new ke()),
                          function(t, e) {
                            var i = e || new ke(),
                              n = t.delta(Xi),
                              r = this.normal.dot(n);
                            if (0 === r)
                              return 0 === this.distanceToPoint(t.start)
                                ? i.copy(t.start)
                                : void 0;
                            var a =
                              -(t.start.dot(this.normal) + this.constant) / r;
                            return a < 0 || a > 1
                              ? void 0
                              : i
                                  .copy(n)
                                  .multiplyScalar(a)
                                  .add(t.start);
                          }),
                          intersectsLine: function(t) {
                            var e = this.distanceToPoint(t.start),
                              i = this.distanceToPoint(t.end);
                            return (e < 0 && i > 0) || (i < 0 && e > 0);
                          },
                          intersectsBox: function(t) {
                            return t.intersectsPlane(this);
                          },
                          intersectsSphere: function(t) {
                            return t.intersectsPlane(this);
                          },
                          coplanarPoint: function(t) {
                            return (t || new ke())
                              .copy(this.normal)
                              .multiplyScalar(-this.constant);
                          },
                          applyMatrix4: ((Hi = new ke()),
                          (Wi = new hn()),
                          function(t, e) {
                            var i = e || Wi.getNormalMatrix(t),
                              n = this.coplanarPoint(Hi).applyMatrix4(t),
                              r = this.normal.applyMatrix3(i).normalize();
                            return (this.constant = -n.dot(r)), this;
                          }),
                          translate: function(t) {
                            return (this.constant -= t.dot(this.normal)), this;
                          },
                          equals: function(t) {
                            return (
                              t.normal.equals(this.normal) &&
                              t.constant === this.constant
                            );
                          }
                        }),
                        Object.assign(pn.prototype, {
                          set: function(t, e, i, n, r, a) {
                            var o = this.planes;
                            return (
                              o[0].copy(t),
                              o[1].copy(e),
                              o[2].copy(i),
                              o[3].copy(n),
                              o[4].copy(r),
                              o[5].copy(a),
                              this
                            );
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            for (var e = this.planes, i = 0; i < 6; i++)
                              e[i].copy(t.planes[i]);
                            return this;
                          },
                          setFromMatrix: function(t) {
                            var e = this.planes,
                              i = t.elements,
                              n = i[0],
                              r = i[1],
                              a = i[2],
                              o = i[3],
                              s = i[4],
                              c = i[5],
                              u = i[6],
                              l = i[7],
                              h = i[8],
                              d = i[9],
                              p = i[10],
                              f = i[11],
                              m = i[12],
                              g = i[13],
                              v = i[14],
                              y = i[15];
                            return (
                              e[0]
                                .setComponents(o - n, l - s, f - h, y - m)
                                .normalize(),
                              e[1]
                                .setComponents(o + n, l + s, f + h, y + m)
                                .normalize(),
                              e[2]
                                .setComponents(o + r, l + c, f + d, y + g)
                                .normalize(),
                              e[3]
                                .setComponents(o - r, l - c, f - d, y - g)
                                .normalize(),
                              e[4]
                                .setComponents(o - a, l - u, f - p, y - v)
                                .normalize(),
                              e[5]
                                .setComponents(o + a, l + u, f + p, y + v)
                                .normalize(),
                              this
                            );
                          },
                          intersectsObject: ((tn = new ln()),
                          function(t) {
                            var e = t.geometry;
                            return (
                              null === e.boundingSphere &&
                                e.computeBoundingSphere(),
                              tn
                                .copy(e.boundingSphere)
                                .applyMatrix4(t.matrixWorld),
                              this.intersectsSphere(tn)
                            );
                          }),
                          intersectsSprite: (($i = new ln()),
                          function(t) {
                            return (
                              $i.center.set(0, 0, 0),
                              ($i.radius = 0.7071067811865476),
                              $i.applyMatrix4(t.matrixWorld),
                              this.intersectsSphere($i)
                            );
                          }),
                          intersectsSphere: function(t) {
                            for (
                              var e = this.planes,
                                i = t.center,
                                n = -t.radius,
                                r = 0;
                              r < 6;
                              r++
                            ) {
                              if (e[r].distanceToPoint(i) < n) return !1;
                            }
                            return !0;
                          },
                          intersectsBox: ((Ki = new ke()),
                          (Ji = new ke()),
                          function(t) {
                            for (var e = this.planes, i = 0; i < 6; i++) {
                              var n = e[i];
                              (Ki.x = n.normal.x > 0 ? t.min.x : t.max.x),
                                (Ji.x = n.normal.x > 0 ? t.max.x : t.min.x),
                                (Ki.y = n.normal.y > 0 ? t.min.y : t.max.y),
                                (Ji.y = n.normal.y > 0 ? t.max.y : t.min.y),
                                (Ki.z = n.normal.z > 0 ? t.min.z : t.max.z),
                                (Ji.z = n.normal.z > 0 ? t.max.z : t.min.z);
                              var r = n.distanceToPoint(Ki),
                                a = n.distanceToPoint(Ji);
                              if (r < 0 && a < 0) return !1;
                            }
                            return !0;
                          }),
                          containsPoint: function(t) {
                            for (var e = this.planes, i = 0; i < 6; i++)
                              if (e[i].distanceToPoint(t) < 0) return !1;
                            return !0;
                          }
                        }),
                        (gn.RotationOrders = [
                          'XYZ',
                          'YZX',
                          'ZXY',
                          'XZY',
                          'YXZ',
                          'ZYX'
                        ]),
                        (gn.DefaultOrder = 'XYZ'),
                        Object.defineProperties(gn.prototype, {
                          x: {
                            get: function() {
                              return this._x;
                            },
                            set: function(t) {
                              (this._x = t), this.onChangeCallback();
                            }
                          },
                          y: {
                            get: function() {
                              return this._y;
                            },
                            set: function(t) {
                              (this._y = t), this.onChangeCallback();
                            }
                          },
                          z: {
                            get: function() {
                              return this._z;
                            },
                            set: function(t) {
                              (this._z = t), this.onChangeCallback();
                            }
                          },
                          order: {
                            get: function() {
                              return this._order;
                            },
                            set: function(t) {
                              (this._order = t), this.onChangeCallback();
                            }
                          }
                        }),
                        Object.assign(gn.prototype, {
                          isEuler: !0,
                          set: function(t, e, i, n) {
                            return (
                              (this._x = t),
                              (this._y = e),
                              (this._z = i),
                              (this._order = n || this._order),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          clone: function() {
                            return new this.constructor(
                              this._x,
                              this._y,
                              this._z,
                              this._order
                            );
                          },
                          copy: function(t) {
                            return (
                              (this._x = t._x),
                              (this._y = t._y),
                              (this._z = t._z),
                              (this._order = t._order),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          setFromRotationMatrix: function(t, e, i) {
                            var n = le.clamp,
                              r = t.elements,
                              a = r[0],
                              o = r[4],
                              s = r[8],
                              c = r[1],
                              u = r[5],
                              l = r[9],
                              h = r[2],
                              d = r[6],
                              p = r[10];
                            return (
                              'XYZ' === (e = e || this._order)
                                ? ((this._y = Math.asin(n(s, -1, 1))),
                                  Math.abs(s) < 0.99999
                                    ? ((this._x = Math.atan2(-l, p)),
                                      (this._z = Math.atan2(-o, a)))
                                    : ((this._x = Math.atan2(d, u)),
                                      (this._z = 0)))
                                : 'YXZ' === e
                                  ? ((this._x = Math.asin(-n(l, -1, 1))),
                                    Math.abs(l) < 0.99999
                                      ? ((this._y = Math.atan2(s, p)),
                                        (this._z = Math.atan2(c, u)))
                                      : ((this._y = Math.atan2(-h, a)),
                                        (this._z = 0)))
                                  : 'ZXY' === e
                                    ? ((this._x = Math.asin(n(d, -1, 1))),
                                      Math.abs(d) < 0.99999
                                        ? ((this._y = Math.atan2(-h, p)),
                                          (this._z = Math.atan2(-o, u)))
                                        : ((this._y = 0),
                                          (this._z = Math.atan2(c, a))))
                                    : 'ZYX' === e
                                      ? ((this._y = Math.asin(-n(h, -1, 1))),
                                        Math.abs(h) < 0.99999
                                          ? ((this._x = Math.atan2(d, p)),
                                            (this._z = Math.atan2(c, a)))
                                          : ((this._x = 0),
                                            (this._z = Math.atan2(-o, u))))
                                      : 'YZX' === e
                                        ? ((this._z = Math.asin(n(c, -1, 1))),
                                          Math.abs(c) < 0.99999
                                            ? ((this._x = Math.atan2(-l, u)),
                                              (this._y = Math.atan2(-h, a)))
                                            : ((this._x = 0),
                                              (this._y = Math.atan2(s, p))))
                                        : 'XZY' === e &&
                                          ((this._z = Math.asin(-n(o, -1, 1))),
                                          Math.abs(o) < 0.99999
                                            ? ((this._x = Math.atan2(d, u)),
                                              (this._y = Math.atan2(s, a)))
                                            : ((this._x = Math.atan2(-l, p)),
                                              (this._y = 0))),
                              (this._order = e),
                              !1 !== i && this.onChangeCallback(),
                              this
                            );
                          },
                          setFromQuaternion: ((nn = new Ue()),
                          function(t, e, i) {
                            return (
                              nn.makeRotationFromQuaternion(t),
                              this.setFromRotationMatrix(nn, e, i)
                            );
                          }),
                          setFromVector3: function(t, e) {
                            return this.set(t.x, t.y, t.z, e || this._order);
                          },
                          reorder: ((en = new Re()),
                          function(t) {
                            return (
                              en.setFromEuler(this),
                              this.setFromQuaternion(en, t)
                            );
                          }),
                          equals: function(t) {
                            return (
                              t._x === this._x &&
                              t._y === this._y &&
                              t._z === this._z &&
                              t._order === this._order
                            );
                          },
                          fromArray: function(t) {
                            return (
                              (this._x = t[0]),
                              (this._y = t[1]),
                              (this._z = t[2]),
                              void 0 !== t[3] && (this._order = t[3]),
                              this.onChangeCallback(),
                              this
                            );
                          },
                          toArray: function(t, e) {
                            return (
                              void 0 === t && (t = []),
                              void 0 === e && (e = 0),
                              (t[e] = this._x),
                              (t[e + 1] = this._y),
                              (t[e + 2] = this._z),
                              (t[e + 3] = this._order),
                              t
                            );
                          },
                          toVector3: function(t) {
                            return t
                              ? t.set(this._x, this._y, this._z)
                              : new ke(this._x, this._y, this._z);
                          },
                          onChange: function(t) {
                            return (this.onChangeCallback = t), this;
                          },
                          onChangeCallback: function() {}
                        }),
                        Object.assign(vn.prototype, {
                          set: function(t) {
                            this.mask = (1 << t) | 0;
                          },
                          enable: function(t) {
                            this.mask |= (1 << t) | 0;
                          },
                          toggle: function(t) {
                            this.mask ^= (1 << t) | 0;
                          },
                          disable: function(t) {
                            this.mask &= ~((1 << t) | 0);
                          },
                          test: function(t) {
                            return 0 != (this.mask & t.mask);
                          }
                        });
                      var yn,
                        Mn,
                        wn,
                        xn,
                        An,
                        En,
                        bn,
                        Tn,
                        Ln,
                        Nn,
                        Dn,
                        Cn,
                        Sn,
                        In,
                        _n,
                        jn,
                        On,
                        zn = 0;
                      function Rn() {
                        Object.defineProperty(this, 'id', { value: zn++ }),
                          (this.uuid = le.generateUUID()),
                          (this.name = ''),
                          (this.type = 'Object3D'),
                          (this.parent = null),
                          (this.children = []),
                          (this.up = Rn.DefaultUp.clone());
                        var t = new ke(),
                          e = new gn(),
                          i = new Re(),
                          n = new ke(1, 1, 1);
                        e.onChange(function() {
                          i.setFromEuler(e, !1);
                        }),
                          i.onChange(function() {
                            e.setFromQuaternion(i, void 0, !1);
                          }),
                          Object.defineProperties(this, {
                            position: { enumerable: !0, value: t },
                            rotation: { enumerable: !0, value: e },
                            quaternion: { enumerable: !0, value: i },
                            scale: { enumerable: !0, value: n },
                            modelViewMatrix: { value: new Ue() },
                            normalMatrix: { value: new hn() }
                          }),
                          (this.matrix = new Ue()),
                          (this.matrixWorld = new Ue()),
                          (this.matrixAutoUpdate = Rn.DefaultMatrixAutoUpdate),
                          (this.matrixWorldNeedsUpdate = !1),
                          (this.layers = new vn()),
                          (this.visible = !0),
                          (this.castShadow = !1),
                          (this.receiveShadow = !1),
                          (this.frustumCulled = !1),
                          (this.renderOrder = 0),
                          (this.userData = {});
                      }
                      function kn() {
                        Rn.call(this),
                          (this.type = 'Camera'),
                          (this.matrixWorldInverse = new Ue()),
                          (this.projectionMatrix = new Ue());
                      }
                      function Un(t, e, i, n, r, a) {
                        kn.call(this),
                          (this.type = 'OrthographicCamera'),
                          (this.zoom = 1),
                          (this.view = null),
                          (this.left = t),
                          (this.right = e),
                          (this.top = i),
                          (this.bottom = n),
                          (this.near = void 0 !== r ? r : 0.1),
                          (this.far = void 0 !== a ? a : 2e3),
                          this.updateProjectionMatrix();
                      }
                      function Pn(t, e, i, n) {
                        kn.call(this),
                          (this.type = 'PerspectiveCamera'),
                          (this.fov = void 0 !== t ? t : 50),
                          (this.zoom = 1),
                          (this.near = void 0 !== i ? i : 0.1),
                          (this.far = void 0 !== n ? n : 2e3),
                          (this.focus = 10),
                          (this.aspect = void 0 !== e ? e : 1),
                          (this.view = null),
                          (this.filmGauge = 35),
                          (this.filmOffset = 0),
                          this.updateProjectionMatrix();
                      }
                      function Bn(t, e, i, n, r, a) {
                        (this.a = t),
                          (this.b = e),
                          (this.c = i),
                          (this.normal = n && n.isVector3 ? n : new ke()),
                          (this.vertexNormals = Array.isArray(n) ? n : []),
                          (this.color = r && r.isColor ? r : new Ni()),
                          (this.vertexColors = Array.isArray(r) ? r : []),
                          (this.materialIndex = void 0 !== a ? a : 0);
                      }
                      (Rn.DefaultUp = new ke(0, 1, 0)),
                        (Rn.DefaultMatrixAutoUpdate = !0),
                        Object.assign(Rn.prototype, e.prototype, {
                          isObject3D: !0,
                          onBeforeRender: function() {},
                          onAfterRender: function() {},
                          applyMatrix: function(t) {
                            this.matrix.multiplyMatrices(t, this.matrix),
                              this.matrix.decompose(
                                this.position,
                                this.quaternion,
                                this.scale
                              );
                          },
                          applyQuaternion: function(t) {
                            return this.quaternion.premultiply(t), this;
                          },
                          setRotationFromAxisAngle: function(t, e) {
                            this.quaternion.setFromAxisAngle(t, e);
                          },
                          setRotationFromEuler: function(t) {
                            this.quaternion.setFromEuler(t, !0);
                          },
                          setRotationFromMatrix: function(t) {
                            this.quaternion.setFromRotationMatrix(t);
                          },
                          setRotationFromQuaternion: function(t) {
                            this.quaternion.copy(t);
                          },
                          rotateOnAxis: ((jn = new Re()),
                          function(t, e) {
                            return (
                              jn.setFromAxisAngle(t, e),
                              this.quaternion.multiply(jn),
                              this
                            );
                          }),
                          rotateX: ((_n = new ke(1, 0, 0)),
                          function(t) {
                            return this.rotateOnAxis(_n, t);
                          }),
                          rotateY: ((In = new ke(0, 1, 0)),
                          function(t) {
                            return this.rotateOnAxis(In, t);
                          }),
                          rotateZ: ((Sn = new ke(0, 0, 1)),
                          function(t) {
                            return this.rotateOnAxis(Sn, t);
                          }),
                          translateOnAxis: ((Cn = new ke()),
                          function(t, e) {
                            return (
                              Cn.copy(t).applyQuaternion(this.quaternion),
                              this.position.add(Cn.multiplyScalar(e)),
                              this
                            );
                          }),
                          translateX: ((Dn = new ke(1, 0, 0)),
                          function(t) {
                            return this.translateOnAxis(Dn, t);
                          }),
                          translateY: ((Nn = new ke(0, 1, 0)),
                          function(t) {
                            return this.translateOnAxis(Nn, t);
                          }),
                          translateZ: ((Ln = new ke(0, 0, 1)),
                          function(t) {
                            return this.translateOnAxis(Ln, t);
                          }),
                          localToWorld: function(t) {
                            return t.applyMatrix4(this.matrixWorld);
                          },
                          worldToLocal: ((Tn = new Ue()),
                          function(t) {
                            return t.applyMatrix4(
                              Tn.getInverse(this.matrixWorld)
                            );
                          }),
                          lookAt: ((bn = new Ue()),
                          function(t) {
                            this.isCamera
                              ? bn.lookAt(this.position, t, this.up)
                              : bn.lookAt(t, this.position, this.up),
                              this.quaternion.setFromRotationMatrix(bn);
                          }),
                          add: function(t) {
                            if (arguments.length > 1) {
                              for (var e = 0; e < arguments.length; e++)
                                this.add(arguments[e]);
                              return this;
                            }
                            return t === this
                              ? this
                              : (t &&
                                  t.isObject3D &&
                                  (null !== t.parent && t.parent.remove(t),
                                  (t.parent = this),
                                  t.dispatchEvent({ type: 'added' }),
                                  this.children.push(t)),
                                this);
                          },
                          remove: function(t) {
                            if (arguments.length > 1) {
                              for (var e = 0; e < arguments.length; e++)
                                this.remove(arguments[e]);
                              return this;
                            }
                            var i = this.children.indexOf(t);
                            return (
                              -1 !== i &&
                                ((t.parent = null),
                                t.dispatchEvent({ type: 'removed' }),
                                this.children.splice(i, 1)),
                              this
                            );
                          },
                          getObjectById: function(t) {
                            return this.getObjectByProperty('id', t);
                          },
                          getObjectByName: function(t) {
                            return this.getObjectByProperty('name', t);
                          },
                          getObjectByProperty: function(t, e) {
                            if (this[t] === e) return this;
                            for (
                              var i = 0, n = this.children.length;
                              i < n;
                              i++
                            ) {
                              var r = this.children[i].getObjectByProperty(
                                t,
                                e
                              );
                              if (void 0 !== r) return r;
                            }
                          },
                          getWorldPosition: function(t) {
                            var e = t || new ke();
                            return (
                              this.updateMatrixWorld(!0),
                              e.setFromMatrixPosition(this.matrixWorld)
                            );
                          },
                          getWorldQuaternion: ((An = new ke()),
                          (En = new ke()),
                          function(t) {
                            var e = t || new Re();
                            return (
                              this.updateMatrixWorld(!0),
                              this.matrixWorld.decompose(An, e, En),
                              e
                            );
                          }),
                          getWorldRotation: ((xn = new Re()),
                          function(t) {
                            var e = t || new gn();
                            return (
                              this.getWorldQuaternion(xn),
                              e.setFromQuaternion(xn, this.rotation.order, !1)
                            );
                          }),
                          getWorldScale: ((Mn = new ke()),
                          (wn = new Re()),
                          function(t) {
                            var e = t || new ke();
                            return (
                              this.updateMatrixWorld(!0),
                              this.matrixWorld.decompose(Mn, wn, e),
                              e
                            );
                          }),
                          getWorldDirection: ((yn = new Re()),
                          function(t) {
                            var e = t || new ke();
                            return (
                              this.getWorldQuaternion(yn),
                              e.set(0, 0, 1).applyQuaternion(yn)
                            );
                          }),
                          raycast: function() {},
                          traverse: function(t) {
                            t(this);
                            for (
                              var e = this.children, i = 0, n = e.length;
                              i < n;
                              i++
                            )
                              e[i].traverse(t);
                          },
                          traverseVisible: function(t) {
                            if (!1 !== this.visible) {
                              t(this);
                              for (
                                var e = this.children, i = 0, n = e.length;
                                i < n;
                                i++
                              )
                                e[i].traverseVisible(t);
                            }
                          },
                          traverseAncestors: function(t) {
                            var e = this.parent;
                            null !== e && (t(e), e.traverseAncestors(t));
                          },
                          updateMatrix: function() {
                            this.matrix.compose(
                              this.position,
                              this.quaternion,
                              this.scale
                            ),
                              (this.matrixWorldNeedsUpdate = !0);
                          },
                          updateMatrixWorld: function(t) {
                            this.matrixAutoUpdate && this.updateMatrix(),
                              (this.matrixWorldNeedsUpdate || t) &&
                                (null === this.parent
                                  ? this.matrixWorld.copy(this.matrix)
                                  : this.matrixWorld.multiplyMatrices(
                                      this.parent.matrixWorld,
                                      this.matrix
                                    ),
                                (this.matrixWorldNeedsUpdate = !1),
                                (t = !0));
                            for (
                              var e = this.children, i = 0, n = e.length;
                              i < n;
                              i++
                            )
                              e[i].updateMatrixWorld(t);
                          },
                          toJSON: function(t) {
                            var e = void 0 === t || '' === t,
                              i = {};
                            e &&
                              ((t = {
                                geometries: {},
                                materials: {},
                                textures: {},
                                images: {}
                              }),
                              (i.metadata = {
                                version: 4.5,
                                type: 'Object',
                                generator: 'Object3D.toJSON'
                              }));
                            var n = {};
                            function r(e, i) {
                              return (
                                void 0 === e[i.uuid] &&
                                  (e[i.uuid] = i.toJSON(t)),
                                i.uuid
                              );
                            }
                            if (
                              ((n.uuid = this.uuid),
                              (n.type = this.type),
                              '' !== this.name && (n.name = this.name),
                              !0 === this.castShadow && (n.castShadow = !0),
                              !0 === this.receiveShadow &&
                                (n.receiveShadow = !0),
                              !1 === this.visible && (n.visible = !1),
                              '{}' !== JSON.stringify(this.userData) &&
                                (n.userData = this.userData),
                              (n.matrix = this.matrix.toArray()),
                              void 0 !== this.geometry &&
                                (n.geometry = r(t.geometries, this.geometry)),
                              void 0 !== this.material)
                            )
                              if (Array.isArray(this.material)) {
                                for (
                                  var a = [], o = 0, s = this.material.length;
                                  o < s;
                                  o++
                                )
                                  a.push(r(t.materials, this.material[o]));
                                n.material = a;
                              } else n.material = r(t.materials, this.material);
                            if (this.children.length > 0) {
                              n.children = [];
                              for (o = 0; o < this.children.length; o++)
                                n.children.push(
                                  this.children[o].toJSON(t).object
                                );
                            }
                            if (e) {
                              var c = d(t.geometries),
                                u = d(t.materials),
                                l = d(t.textures),
                                h = d(t.images);
                              c.length > 0 && (i.geometries = c),
                                u.length > 0 && (i.materials = u),
                                l.length > 0 && (i.textures = l),
                                h.length > 0 && (i.images = h);
                            }
                            return (i.object = n), i;
                            function d(t) {
                              var e = [];
                              for (var i in t) {
                                var n = t[i];
                                delete n.metadata, e.push(n);
                              }
                              return e;
                            }
                          },
                          clone: function(t) {
                            return new this.constructor().copy(this, t);
                          },
                          copy: function(t, e) {
                            if (
                              (void 0 === e && (e = !0),
                              (this.name = t.name),
                              this.up.copy(t.up),
                              this.position.copy(t.position),
                              this.quaternion.copy(t.quaternion),
                              this.scale.copy(t.scale),
                              this.matrix.copy(t.matrix),
                              this.matrixWorld.copy(t.matrixWorld),
                              (this.matrixAutoUpdate = t.matrixAutoUpdate),
                              (this.matrixWorldNeedsUpdate =
                                t.matrixWorldNeedsUpdate),
                              (this.layers.mask = t.layers.mask),
                              (this.visible = t.visible),
                              (this.castShadow = t.castShadow),
                              (this.receiveShadow = t.receiveShadow),
                              (this.frustumCulled = t.frustumCulled),
                              (this.renderOrder = t.renderOrder),
                              (this.userData = JSON.parse(
                                JSON.stringify(t.userData)
                              )),
                              !0 === e)
                            )
                              for (var i = 0; i < t.children.length; i++) {
                                var n = t.children[i];
                                this.add(n.clone());
                              }
                            return this;
                          }
                        }),
                        (kn.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: kn,
                            isCamera: !0,
                            copy: function(t, e) {
                              return (
                                Rn.prototype.copy.call(this, t, e),
                                this.matrixWorldInverse.copy(
                                  t.matrixWorldInverse
                                ),
                                this.projectionMatrix.copy(t.projectionMatrix),
                                this
                              );
                            },
                            getWorldDirection: ((On = new Re()),
                            function(t) {
                              var e = t || new ke();
                              return (
                                this.getWorldQuaternion(On),
                                e.set(0, 0, -1).applyQuaternion(On)
                              );
                            }),
                            updateMatrixWorld: function(t) {
                              Rn.prototype.updateMatrixWorld.call(this, t),
                                this.matrixWorldInverse.getInverse(
                                  this.matrixWorld
                                );
                            },
                            clone: function() {
                              return new this.constructor().copy(this);
                            }
                          }
                        )),
                        (Un.prototype = Object.assign(
                          Object.create(kn.prototype),
                          {
                            constructor: Un,
                            isOrthographicCamera: !0,
                            copy: function(t, e) {
                              return (
                                kn.prototype.copy.call(this, t, e),
                                (this.left = t.left),
                                (this.right = t.right),
                                (this.top = t.top),
                                (this.bottom = t.bottom),
                                (this.near = t.near),
                                (this.far = t.far),
                                (this.zoom = t.zoom),
                                (this.view =
                                  null === t.view
                                    ? null
                                    : Object.assign({}, t.view)),
                                this
                              );
                            },
                            setViewOffset: function(t, e, i, n, r, a) {
                              (this.view = {
                                fullWidth: t,
                                fullHeight: e,
                                offsetX: i,
                                offsetY: n,
                                width: r,
                                height: a
                              }),
                                this.updateProjectionMatrix();
                            },
                            clearViewOffset: function() {
                              (this.view = null), this.updateProjectionMatrix();
                            },
                            updateProjectionMatrix: function() {
                              var t =
                                  (this.right - this.left) / (2 * this.zoom),
                                e = (this.top - this.bottom) / (2 * this.zoom),
                                i = (this.right + this.left) / 2,
                                n = (this.top + this.bottom) / 2,
                                r = i - t,
                                a = i + t,
                                o = n + e,
                                s = n - e;
                              if (null !== this.view) {
                                var c =
                                    this.zoom /
                                    (this.view.width / this.view.fullWidth),
                                  u =
                                    this.zoom /
                                    (this.view.height / this.view.fullHeight),
                                  l =
                                    (this.right - this.left) / this.view.width,
                                  h =
                                    (this.top - this.bottom) / this.view.height;
                                (a =
                                  (r += l * (this.view.offsetX / c)) +
                                  l * (this.view.width / c)),
                                  (s =
                                    (o -= h * (this.view.offsetY / u)) -
                                    h * (this.view.height / u));
                              }
                              this.projectionMatrix.makeOrthographic(
                                r,
                                a,
                                o,
                                s,
                                this.near,
                                this.far
                              );
                            },
                            toJSON: function(t) {
                              var e = Rn.prototype.toJSON.call(this, t);
                              return (
                                (e.object.zoom = this.zoom),
                                (e.object.left = this.left),
                                (e.object.right = this.right),
                                (e.object.top = this.top),
                                (e.object.bottom = this.bottom),
                                (e.object.near = this.near),
                                (e.object.far = this.far),
                                null !== this.view &&
                                  (e.object.view = Object.assign(
                                    {},
                                    this.view
                                  )),
                                e
                              );
                            }
                          }
                        )),
                        (Pn.prototype = Object.assign(
                          Object.create(kn.prototype),
                          {
                            constructor: Pn,
                            isPerspectiveCamera: !0,
                            copy: function(t, e) {
                              return (
                                kn.prototype.copy.call(this, t, e),
                                (this.fov = t.fov),
                                (this.zoom = t.zoom),
                                (this.near = t.near),
                                (this.far = t.far),
                                (this.focus = t.focus),
                                (this.aspect = t.aspect),
                                (this.view =
                                  null === t.view
                                    ? null
                                    : Object.assign({}, t.view)),
                                (this.filmGauge = t.filmGauge),
                                (this.filmOffset = t.filmOffset),
                                this
                              );
                            },
                            setFocalLength: function(t) {
                              var e = 0.5 * this.getFilmHeight() / t;
                              (this.fov = 2 * le.RAD2DEG * Math.atan(e)),
                                this.updateProjectionMatrix();
                            },
                            getFocalLength: function() {
                              var t = Math.tan(0.5 * le.DEG2RAD * this.fov);
                              return 0.5 * this.getFilmHeight() / t;
                            },
                            getEffectiveFOV: function() {
                              return (
                                2 *
                                le.RAD2DEG *
                                Math.atan(
                                  Math.tan(0.5 * le.DEG2RAD * this.fov) /
                                    this.zoom
                                )
                              );
                            },
                            getFilmWidth: function() {
                              return this.filmGauge * Math.min(this.aspect, 1);
                            },
                            getFilmHeight: function() {
                              return this.filmGauge / Math.max(this.aspect, 1);
                            },
                            setViewOffset: function(t, e, i, n, r, a) {
                              (this.aspect = t / e),
                                (this.view = {
                                  fullWidth: t,
                                  fullHeight: e,
                                  offsetX: i,
                                  offsetY: n,
                                  width: r,
                                  height: a
                                }),
                                this.updateProjectionMatrix();
                            },
                            clearViewOffset: function() {
                              (this.view = null), this.updateProjectionMatrix();
                            },
                            updateProjectionMatrix: function() {
                              var t = this.near,
                                e =
                                  t *
                                  Math.tan(0.5 * le.DEG2RAD * this.fov) /
                                  this.zoom,
                                i = 2 * e,
                                n = this.aspect * i,
                                r = -0.5 * n,
                                a = this.view;
                              if (null !== a) {
                                var o = a.fullWidth,
                                  s = a.fullHeight;
                                (r += a.offsetX * n / o),
                                  (e -= a.offsetY * i / s),
                                  (n *= a.width / o),
                                  (i *= a.height / s);
                              }
                              var c = this.filmOffset;
                              0 !== c && (r += t * c / this.getFilmWidth()),
                                this.projectionMatrix.makePerspective(
                                  r,
                                  r + n,
                                  e,
                                  e - i,
                                  t,
                                  this.far
                                );
                            },
                            toJSON: function(t) {
                              var e = Rn.prototype.toJSON.call(this, t);
                              return (
                                (e.object.fov = this.fov),
                                (e.object.zoom = this.zoom),
                                (e.object.near = this.near),
                                (e.object.far = this.far),
                                (e.object.focus = this.focus),
                                (e.object.aspect = this.aspect),
                                null !== this.view &&
                                  (e.object.view = Object.assign(
                                    {},
                                    this.view
                                  )),
                                (e.object.filmGauge = this.filmGauge),
                                (e.object.filmOffset = this.filmOffset),
                                e
                              );
                            }
                          }
                        )),
                        Object.assign(Bn.prototype, {
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            (this.a = t.a),
                              (this.b = t.b),
                              (this.c = t.c),
                              this.normal.copy(t.normal),
                              this.color.copy(t.color),
                              (this.materialIndex = t.materialIndex);
                            for (
                              var e = 0, i = t.vertexNormals.length;
                              e < i;
                              e++
                            )
                              this.vertexNormals[e] = t.vertexNormals[
                                e
                              ].clone();
                            for (e = 0, i = t.vertexColors.length; e < i; e++)
                              this.vertexColors[e] = t.vertexColors[e].clone();
                            return this;
                          }
                        });
                      var Fn,
                        Gn,
                        Vn,
                        Yn,
                        Qn,
                        Hn,
                        Wn,
                        Xn,
                        qn,
                        Zn,
                        Kn,
                        Jn,
                        $n,
                        tr,
                        er,
                        ir,
                        nr,
                        rr,
                        ar,
                        or,
                        sr,
                        cr,
                        ur,
                        lr,
                        hr,
                        dr,
                        pr,
                        fr,
                        mr,
                        gr,
                        vr,
                        yr,
                        Mr,
                        wr,
                        xr,
                        Ar,
                        Er,
                        br,
                        Tr,
                        Lr = 0;
                      function Nr() {
                        return Lr++;
                      }
                      function Dr() {
                        Object.defineProperty(this, 'id', { value: Nr() }),
                          (this.uuid = le.generateUUID()),
                          (this.name = ''),
                          (this.type = 'Geometry'),
                          (this.vertices = []),
                          (this.colors = []),
                          (this.faces = []),
                          (this.faceVertexUvs = [[]]),
                          (this.morphTargets = []),
                          (this.morphNormals = []),
                          (this.skinWeights = []),
                          (this.skinIndices = []),
                          (this.lineDistances = []),
                          (this.boundingBox = null),
                          (this.boundingSphere = null),
                          (this.elementsNeedUpdate = !1),
                          (this.verticesNeedUpdate = !1),
                          (this.uvsNeedUpdate = !1),
                          (this.normalsNeedUpdate = !1),
                          (this.colorsNeedUpdate = !1),
                          (this.lineDistancesNeedUpdate = !1),
                          (this.groupsNeedUpdate = !1);
                      }
                      function Cr(t, e, i) {
                        if (Array.isArray(t))
                          throw new TypeError(
                            'THREE.BufferAttribute: array should be a Typed Array.'
                          );
                        (this.uuid = le.generateUUID()),
                          (this.name = ''),
                          (this.array = t),
                          (this.itemSize = e),
                          (this.count = void 0 !== t ? t.length / e : 0),
                          (this.normalized = !0 === i),
                          (this.dynamic = !1),
                          (this.updateRange = { offset: 0, count: -1 }),
                          (this.onUploadCallback = function() {}),
                          (this.version = 0);
                      }
                      function Sr(t, e) {
                        Cr.call(this, new Int8Array(t), e);
                      }
                      function Ir(t, e) {
                        Cr.call(this, new Uint8Array(t), e);
                      }
                      function _r(t, e) {
                        Cr.call(this, new Uint8ClampedArray(t), e);
                      }
                      function jr(t, e) {
                        Cr.call(this, new Int16Array(t), e);
                      }
                      function Or(t, e) {
                        Cr.call(this, new Uint16Array(t), e);
                      }
                      function zr(t, e) {
                        Cr.call(this, new Int32Array(t), e);
                      }
                      function Rr(t, e) {
                        Cr.call(this, new Uint32Array(t), e);
                      }
                      function kr(t, e) {
                        Cr.call(this, new Float32Array(t), e);
                      }
                      function Ur(t, e) {
                        Cr.call(this, new Float64Array(t), e);
                      }
                      function Pr() {
                        (this.indices = []),
                          (this.vertices = []),
                          (this.normals = []),
                          (this.colors = []),
                          (this.uvs = []),
                          (this.uvs2 = []),
                          (this.groups = []),
                          (this.morphTargets = {}),
                          (this.skinWeights = []),
                          (this.skinIndices = []),
                          (this.boundingBox = null),
                          (this.boundingSphere = null),
                          (this.verticesNeedUpdate = !1),
                          (this.normalsNeedUpdate = !1),
                          (this.colorsNeedUpdate = !1),
                          (this.uvsNeedUpdate = !1),
                          (this.groupsNeedUpdate = !1);
                      }
                      function Br(t) {
                        if (0 === t.length) return -1 / 0;
                        for (var e = t[0], i = 1, n = t.length; i < n; ++i)
                          t[i] > e && (e = t[i]);
                        return e;
                      }
                      function Fr() {
                        Object.defineProperty(this, 'id', { value: Nr() }),
                          (this.uuid = le.generateUUID()),
                          (this.name = ''),
                          (this.type = 'BufferGeometry'),
                          (this.index = null),
                          (this.attributes = {}),
                          (this.morphAttributes = {}),
                          (this.groups = []),
                          (this.boundingBox = null),
                          (this.boundingSphere = null),
                          (this.drawRange = { start: 0, count: 1 / 0 });
                      }
                      function Gr(t, e, i, n, r, a) {
                        Dr.call(this),
                          (this.type = 'BoxGeometry'),
                          (this.parameters = {
                            width: t,
                            height: e,
                            depth: i,
                            widthSegments: n,
                            heightSegments: r,
                            depthSegments: a
                          }),
                          this.fromBufferGeometry(new Vr(t, e, i, n, r, a)),
                          this.mergeVertices();
                      }
                      function Vr(t, e, i, n, r, a) {
                        Fr.call(this),
                          (this.type = 'BoxBufferGeometry'),
                          (this.parameters = {
                            width: t,
                            height: e,
                            depth: i,
                            widthSegments: n,
                            heightSegments: r,
                            depthSegments: a
                          });
                        var o = this;
                        (n = Math.floor(n) || 1), (r = Math.floor(r) || 1);
                        var s = [],
                          c = [],
                          u = [],
                          l = [],
                          h = 0,
                          d = 0;
                        function p(t, e, i, n, r, a, p, f, m, g, v) {
                          var y,
                            M,
                            w = a / m,
                            x = p / g,
                            A = a / 2,
                            E = p / 2,
                            b = f / 2,
                            T = m + 1,
                            L = g + 1,
                            N = 0,
                            D = 0,
                            C = new ke();
                          for (M = 0; M < L; M++) {
                            var S = M * x - E;
                            for (y = 0; y < T; y++) {
                              var I = y * w - A;
                              (C[t] = I * n),
                                (C[e] = S * r),
                                (C[i] = b),
                                c.push(C.x, C.y, C.z),
                                (C[t] = 0),
                                (C[e] = 0),
                                (C[i] = f > 0 ? 1 : -1),
                                u.push(C.x, C.y, C.z),
                                l.push(y / m),
                                l.push(1 - M / g),
                                (N += 1);
                            }
                          }
                          for (M = 0; M < g; M++)
                            for (y = 0; y < m; y++) {
                              var _ = h + y + T * M,
                                j = h + y + T * (M + 1),
                                O = h + (y + 1) + T * (M + 1),
                                z = h + (y + 1) + T * M;
                              s.push(_, j, z), s.push(j, O, z), (D += 6);
                            }
                          o.addGroup(d, D, v), (d += D), (h += N);
                        }
                        p(
                          'z',
                          'y',
                          'x',
                          -1,
                          -1,
                          i,
                          e,
                          t,
                          (a = Math.floor(a) || 1),
                          r,
                          0
                        ),
                          p('z', 'y', 'x', 1, -1, i, e, -t, a, r, 1),
                          p('x', 'z', 'y', 1, 1, t, i, e, n, a, 2),
                          p('x', 'z', 'y', 1, -1, t, i, -e, n, a, 3),
                          p('x', 'y', 'z', 1, -1, t, e, i, n, r, 4),
                          p('x', 'y', 'z', -1, -1, t, e, -i, n, r, 5),
                          this.setIndex(s),
                          this.addAttribute('position', new kr(c, 3)),
                          this.addAttribute('normal', new kr(u, 3)),
                          this.addAttribute('uv', new kr(l, 2));
                      }
                      function Yr(t, e, i, n) {
                        Dr.call(this),
                          (this.type = 'PlaneGeometry'),
                          (this.parameters = {
                            width: t,
                            height: e,
                            widthSegments: i,
                            heightSegments: n
                          }),
                          this.fromBufferGeometry(new Qr(t, e, i, n)),
                          this.mergeVertices();
                      }
                      function Qr(t, e, i, n) {
                        Fr.call(this),
                          (this.type = 'PlaneBufferGeometry'),
                          (this.parameters = {
                            width: t,
                            height: e,
                            widthSegments: i,
                            heightSegments: n
                          });
                        var r,
                          a,
                          o = t / 2,
                          s = e / 2,
                          c = Math.floor(i) || 1,
                          u = Math.floor(n) || 1,
                          l = c + 1,
                          h = u + 1,
                          d = t / c,
                          p = e / u,
                          f = [],
                          m = [],
                          g = [],
                          v = [];
                        for (a = 0; a < h; a++) {
                          var y = a * p - s;
                          for (r = 0; r < l; r++) {
                            var M = r * d - o;
                            m.push(M, -y, 0),
                              g.push(0, 0, 1),
                              v.push(r / c),
                              v.push(1 - a / u);
                          }
                        }
                        for (a = 0; a < u; a++)
                          for (r = 0; r < c; r++) {
                            var w = r + l * a,
                              x = r + l * (a + 1),
                              A = r + 1 + l * (a + 1),
                              E = r + 1 + l * a;
                            f.push(w, x, E), f.push(x, A, E);
                          }
                        this.setIndex(f),
                          this.addAttribute('position', new kr(m, 3)),
                          this.addAttribute('normal', new kr(g, 3)),
                          this.addAttribute('uv', new kr(v, 2));
                      }
                      function Hr(t) {
                        an.call(this),
                          (this.type = 'MeshBasicMaterial'),
                          (this.color = new Ni(16777215)),
                          (this.map = null),
                          (this.lightMap = null),
                          (this.lightMapIntensity = 1),
                          (this.aoMap = null),
                          (this.aoMapIntensity = 1),
                          (this.specularMap = null),
                          (this.alphaMap = null),
                          (this.envMap = null),
                          (this.combine = K),
                          (this.reflectivity = 1),
                          (this.refractionRatio = 0.98),
                          (this.wireframe = !1),
                          (this.wireframeLinewidth = 1),
                          (this.wireframeLinecap = 'round'),
                          (this.wireframeLinejoin = 'round'),
                          (this.skinning = !1),
                          (this.morphTargets = !1),
                          (this.lights = !1),
                          this.setValues(t);
                      }
                      function Wr(t, e) {
                        (this.origin = void 0 !== t ? t : new ke()),
                          (this.direction = void 0 !== e ? e : new ke());
                      }
                      function Xr(t, e) {
                        (this.start = void 0 !== t ? t : new ke()),
                          (this.end = void 0 !== e ? e : new ke());
                      }
                      function qr(t, e, i) {
                        (this.a = void 0 !== t ? t : new ke()),
                          (this.b = void 0 !== e ? e : new ke()),
                          (this.c = void 0 !== i ? i : new ke());
                      }
                      function Zr(t, e) {
                        Rn.call(this),
                          (this.type = 'Mesh'),
                          (this.geometry = void 0 !== t ? t : new Fr()),
                          (this.material =
                            void 0 !== e
                              ? e
                              : new Hr({ color: 16777215 * Math.random() })),
                          (this.drawMode = Jt),
                          this.updateMorphTargets();
                      }
                      function Kr(t, e) {
                        return t.renderOrder !== e.renderOrder
                          ? t.renderOrder - e.renderOrder
                          : t.program && e.program && t.program !== e.program
                            ? t.program.id - e.program.id
                            : t.material.id !== e.material.id
                              ? t.material.id - e.material.id
                              : t.z !== e.z ? t.z - e.z : t.id - e.id;
                      }
                      function Jr(t, e) {
                        return t.renderOrder !== e.renderOrder
                          ? t.renderOrder - e.renderOrder
                          : t.z !== e.z ? e.z - t.z : t.id - e.id;
                      }
                      function $r() {
                        var t = {};
                        return {
                          get: function(e, i) {
                            var n = e.id + ',' + i.id,
                              r = t[n];
                            return (
                              void 0 === r &&
                                ((r = new function() {
                                  var t = [],
                                    e = 0,
                                    i = [],
                                    n = [];
                                  return {
                                    opaque: i,
                                    transparent: n,
                                    init: function() {
                                      (e = 0), (i.length = 0), (n.length = 0);
                                    },
                                    push: function(r, a, o, s, c) {
                                      var u = t[e];
                                      void 0 === u
                                        ? ((u = {
                                            id: r.id,
                                            object: r,
                                            geometry: a,
                                            material: o,
                                            program: o.program,
                                            renderOrder: r.renderOrder,
                                            z: s,
                                            group: c
                                          }),
                                          (t[e] = u))
                                        : ((u.id = r.id),
                                          (u.object = r),
                                          (u.geometry = a),
                                          (u.material = o),
                                          (u.program = o.program),
                                          (u.renderOrder = r.renderOrder),
                                          (u.z = s),
                                          (u.group = c)),
                                        (!0 === o.transparent ? n : i).push(u),
                                        e++;
                                    },
                                    sort: function() {
                                      i.length > 1 && i.sort(Kr),
                                        n.length > 1 && n.sort(Jr);
                                    }
                                  };
                                }()),
                                (t[n] = r)),
                              r
                            );
                          },
                          dispose: function() {
                            t = {};
                          }
                        };
                      }
                      function ta(t, e) {
                        return Math.abs(e[1]) - Math.abs(t[1]);
                      }
                      function ea() {
                        var t = new function() {
                            var t = {};
                            return {
                              get: function(e) {
                                if (void 0 !== t[e.id]) return t[e.id];
                                var i;
                                switch (e.type) {
                                  case 'DirectionalLight':
                                    i = {
                                      direction: new ke(),
                                      color: new Ni(),
                                      shadow: !1,
                                      shadowBias: 0,
                                      shadowRadius: 1,
                                      shadowMapSize: new he()
                                    };
                                    break;
                                  case 'SpotLight':
                                    i = {
                                      position: new ke(),
                                      direction: new ke(),
                                      color: new Ni(),
                                      distance: 0,
                                      coneCos: 0,
                                      penumbraCos: 0,
                                      decay: 0,
                                      shadow: !1,
                                      shadowBias: 0,
                                      shadowRadius: 1,
                                      shadowMapSize: new he()
                                    };
                                    break;
                                  case 'PointLight':
                                    i = {
                                      position: new ke(),
                                      color: new Ni(),
                                      distance: 0,
                                      decay: 0,
                                      shadow: !1,
                                      shadowBias: 0,
                                      shadowRadius: 1,
                                      shadowMapSize: new he(),
                                      shadowCameraNear: 1,
                                      shadowCameraFar: 1e3
                                    };
                                    break;
                                  case 'HemisphereLight':
                                    i = {
                                      direction: new ke(),
                                      skyColor: new Ni(),
                                      groundColor: new Ni()
                                    };
                                    break;
                                  case 'RectAreaLight':
                                    i = {
                                      color: new Ni(),
                                      position: new ke(),
                                      halfWidth: new ke(),
                                      halfHeight: new ke()
                                    };
                                }
                                return (t[e.id] = i), i;
                              }
                            };
                          }(),
                          e = {
                            hash: '',
                            ambient: [0, 0, 0],
                            directional: [],
                            directionalShadowMap: [],
                            directionalShadowMatrix: [],
                            spot: [],
                            spotShadowMap: [],
                            spotShadowMatrix: [],
                            rectArea: [],
                            point: [],
                            pointShadowMap: [],
                            pointShadowMatrix: [],
                            hemi: []
                          },
                          i = new ke(),
                          n = new Ue(),
                          r = new Ue();
                        return {
                          setup: function(a, o, s) {
                            for (
                              var c = 0,
                                u = 0,
                                l = 0,
                                h = 0,
                                d = 0,
                                p = 0,
                                f = 0,
                                m = 0,
                                g = s.matrixWorldInverse,
                                v = 0,
                                y = a.length;
                              v < y;
                              v++
                            ) {
                              var M = a[v],
                                w = M.color,
                                x = M.intensity,
                                A = M.distance,
                                E =
                                  M.shadow && M.shadow.map
                                    ? M.shadow.map.texture
                                    : null;
                              if (M.isAmbientLight)
                                (c += w.r * x), (u += w.g * x), (l += w.b * x);
                              else if (M.isDirectionalLight) {
                                if (
                                  ((T = t.get(M)).color
                                    .copy(M.color)
                                    .multiplyScalar(M.intensity),
                                  T.direction.setFromMatrixPosition(
                                    M.matrixWorld
                                  ),
                                  i.setFromMatrixPosition(M.target.matrixWorld),
                                  T.direction.sub(i),
                                  T.direction.transformDirection(g),
                                  (T.shadow = M.castShadow),
                                  M.castShadow)
                                ) {
                                  var b = M.shadow;
                                  (T.shadowBias = b.bias),
                                    (T.shadowRadius = b.radius),
                                    (T.shadowMapSize = b.mapSize);
                                }
                                (e.directionalShadowMap[h] = E),
                                  (e.directionalShadowMatrix[h] =
                                    M.shadow.matrix),
                                  (e.directional[h] = T),
                                  h++;
                              } else if (M.isSpotLight)
                                (T = t.get(M)).position.setFromMatrixPosition(
                                  M.matrixWorld
                                ),
                                  T.position.applyMatrix4(g),
                                  T.color.copy(w).multiplyScalar(x),
                                  (T.distance = A),
                                  T.direction.setFromMatrixPosition(
                                    M.matrixWorld
                                  ),
                                  i.setFromMatrixPosition(M.target.matrixWorld),
                                  T.direction.sub(i),
                                  T.direction.transformDirection(g),
                                  (T.coneCos = Math.cos(M.angle)),
                                  (T.penumbraCos = Math.cos(
                                    M.angle * (1 - M.penumbra)
                                  )),
                                  (T.decay = 0 === M.distance ? 0 : M.decay),
                                  (T.shadow = M.castShadow),
                                  M.castShadow &&
                                    ((b = M.shadow),
                                    (T.shadowBias = b.bias),
                                    (T.shadowRadius = b.radius),
                                    (T.shadowMapSize = b.mapSize)),
                                  (e.spotShadowMap[p] = E),
                                  (e.spotShadowMatrix[p] = M.shadow.matrix),
                                  (e.spot[p] = T),
                                  p++;
                              else if (M.isRectAreaLight)
                                (T = t.get(M)).color
                                  .copy(w)
                                  .multiplyScalar(x / (M.width * M.height)),
                                  T.position.setFromMatrixPosition(
                                    M.matrixWorld
                                  ),
                                  T.position.applyMatrix4(g),
                                  r.identity(),
                                  n.copy(M.matrixWorld),
                                  n.premultiply(g),
                                  r.extractRotation(n),
                                  T.halfWidth.set(0.5 * M.width, 0, 0),
                                  T.halfHeight.set(0, 0.5 * M.height, 0),
                                  T.halfWidth.applyMatrix4(r),
                                  T.halfHeight.applyMatrix4(r),
                                  (e.rectArea[f] = T),
                                  f++;
                              else if (M.isPointLight)
                                (T = t.get(M)).position.setFromMatrixPosition(
                                  M.matrixWorld
                                ),
                                  T.position.applyMatrix4(g),
                                  T.color
                                    .copy(M.color)
                                    .multiplyScalar(M.intensity),
                                  (T.distance = M.distance),
                                  (T.decay = 0 === M.distance ? 0 : M.decay),
                                  (T.shadow = M.castShadow),
                                  M.castShadow &&
                                    ((b = M.shadow),
                                    (T.shadowBias = b.bias),
                                    (T.shadowRadius = b.radius),
                                    (T.shadowMapSize = b.mapSize),
                                    (T.shadowCameraNear = b.camera.near),
                                    (T.shadowCameraFar = b.camera.far)),
                                  (e.pointShadowMap[d] = E),
                                  (e.pointShadowMatrix[d] = M.shadow.matrix),
                                  (e.point[d] = T),
                                  d++;
                              else if (M.isHemisphereLight) {
                                var T;
                                (T = t.get(M)).direction.setFromMatrixPosition(
                                  M.matrixWorld
                                ),
                                  T.direction.transformDirection(g),
                                  T.direction.normalize(),
                                  T.skyColor.copy(M.color).multiplyScalar(x),
                                  T.groundColor
                                    .copy(M.groundColor)
                                    .multiplyScalar(x),
                                  (e.hemi[m] = T),
                                  m++;
                              }
                            }
                            (e.ambient[0] = c),
                              (e.ambient[1] = u),
                              (e.ambient[2] = l),
                              (e.directional.length = h),
                              (e.spot.length = p),
                              (e.rectArea.length = f),
                              (e.point.length = d),
                              (e.hemi.length = m),
                              (e.hash =
                                h +
                                ',' +
                                d +
                                ',' +
                                p +
                                ',' +
                                f +
                                ',' +
                                m +
                                ',' +
                                o.length);
                          },
                          state: e
                        };
                      }
                      function ia(t, e, i) {
                        var n = t.createShader(e);
                        return (
                          t.shaderSource(n, i),
                          t.compileShader(n),
                          t.getShaderParameter(n, t.COMPILE_STATUS),
                          t.getShaderInfoLog(n),
                          n
                        );
                      }
                      Object.assign(Dr.prototype, e.prototype, {
                        isGeometry: !0,
                        applyMatrix: function(t) {
                          for (
                            var e = new hn().getNormalMatrix(t),
                              i = 0,
                              n = this.vertices.length;
                            i < n;
                            i++
                          ) {
                            this.vertices[i].applyMatrix4(t);
                          }
                          for (i = 0, n = this.faces.length; i < n; i++) {
                            var r = this.faces[i];
                            r.normal.applyMatrix3(e).normalize();
                            for (
                              var a = 0, o = r.vertexNormals.length;
                              a < o;
                              a++
                            )
                              r.vertexNormals[a].applyMatrix3(e).normalize();
                          }
                          return (
                            null !== this.boundingBox &&
                              this.computeBoundingBox(),
                            null !== this.boundingSphere &&
                              this.computeBoundingSphere(),
                            (this.verticesNeedUpdate = !0),
                            (this.normalsNeedUpdate = !0),
                            this
                          );
                        },
                        rotateX: ((Hn = new Ue()),
                        function(t) {
                          return (
                            Hn.makeRotationX(t), this.applyMatrix(Hn), this
                          );
                        }),
                        rotateY: ((Qn = new Ue()),
                        function(t) {
                          return (
                            Qn.makeRotationY(t), this.applyMatrix(Qn), this
                          );
                        }),
                        rotateZ: ((Yn = new Ue()),
                        function(t) {
                          return (
                            Yn.makeRotationZ(t), this.applyMatrix(Yn), this
                          );
                        }),
                        translate: ((Vn = new Ue()),
                        function(t, e, i) {
                          return (
                            Vn.makeTranslation(t, e, i),
                            this.applyMatrix(Vn),
                            this
                          );
                        }),
                        scale: ((Gn = new Ue()),
                        function(t, e, i) {
                          return (
                            Gn.makeScale(t, e, i), this.applyMatrix(Gn), this
                          );
                        }),
                        lookAt: ((Fn = new Rn()),
                        function(t) {
                          Fn.lookAt(t),
                            Fn.updateMatrix(),
                            this.applyMatrix(Fn.matrix);
                        }),
                        fromBufferGeometry: function(t) {
                          var e = this,
                            i = null !== t.index ? t.index.array : void 0,
                            n = t.attributes,
                            r = n.position.array,
                            a = void 0 !== n.normal ? n.normal.array : void 0,
                            o = void 0 !== n.color ? n.color.array : void 0,
                            s = void 0 !== n.uv ? n.uv.array : void 0,
                            c = void 0 !== n.uv2 ? n.uv2.array : void 0;
                          void 0 !== c && (this.faceVertexUvs[1] = []);
                          for (
                            var u = [], l = [], h = [], d = 0, p = 0;
                            d < r.length;
                            d += 3, p += 2
                          )
                            e.vertices.push(new ke(r[d], r[d + 1], r[d + 2])),
                              void 0 !== a &&
                                u.push(new ke(a[d], a[d + 1], a[d + 2])),
                              void 0 !== o &&
                                e.colors.push(new Ni(o[d], o[d + 1], o[d + 2])),
                              void 0 !== s && l.push(new he(s[p], s[p + 1])),
                              void 0 !== c && h.push(new he(c[p], c[p + 1]));
                          function f(t, i, n, r) {
                            var d = new Bn(
                              t,
                              i,
                              n,
                              void 0 !== a
                                ? [u[t].clone(), u[i].clone(), u[n].clone()]
                                : [],
                              void 0 !== o
                                ? [
                                    e.colors[t].clone(),
                                    e.colors[i].clone(),
                                    e.colors[n].clone()
                                  ]
                                : [],
                              r
                            );
                            e.faces.push(d),
                              void 0 !== s &&
                                e.faceVertexUvs[0].push([
                                  l[t].clone(),
                                  l[i].clone(),
                                  l[n].clone()
                                ]),
                              void 0 !== c &&
                                e.faceVertexUvs[1].push([
                                  h[t].clone(),
                                  h[i].clone(),
                                  h[n].clone()
                                ]);
                          }
                          var m = t.groups;
                          if (m.length > 0)
                            for (d = 0; d < m.length; d++)
                              for (
                                var g = m[d],
                                  v = g.start,
                                  y = ((p = v), v + g.count);
                                p < y;
                                p += 3
                              )
                                void 0 !== i
                                  ? f(i[p], i[p + 1], i[p + 2], g.materialIndex)
                                  : f(p, p + 1, p + 2, g.materialIndex);
                          else if (void 0 !== i)
                            for (d = 0; d < i.length; d += 3)
                              f(i[d], i[d + 1], i[d + 2]);
                          else
                            for (d = 0; d < r.length / 3; d += 3)
                              f(d, d + 1, d + 2);
                          return (
                            this.computeFaceNormals(),
                            null !== t.boundingBox &&
                              (this.boundingBox = t.boundingBox.clone()),
                            null !== t.boundingSphere &&
                              (this.boundingSphere = t.boundingSphere.clone()),
                            this
                          );
                        },
                        center: function() {
                          this.computeBoundingBox();
                          var t = this.boundingBox.getCenter().negate();
                          return this.translate(t.x, t.y, t.z), t;
                        },
                        normalize: function() {
                          this.computeBoundingSphere();
                          var t = this.boundingSphere.center,
                            e = this.boundingSphere.radius,
                            i = 0 === e ? 1 : 1 / e,
                            n = new Ue();
                          return (
                            n.set(
                              i,
                              0,
                              0,
                              -i * t.x,
                              0,
                              i,
                              0,
                              -i * t.y,
                              0,
                              0,
                              i,
                              -i * t.z,
                              0,
                              0,
                              0,
                              1
                            ),
                            this.applyMatrix(n),
                            this
                          );
                        },
                        computeFaceNormals: function() {
                          for (
                            var t = new ke(),
                              e = new ke(),
                              i = 0,
                              n = this.faces.length;
                            i < n;
                            i++
                          ) {
                            var r = this.faces[i],
                              a = this.vertices[r.a],
                              o = this.vertices[r.b],
                              s = this.vertices[r.c];
                            t.subVectors(s, o),
                              e.subVectors(a, o),
                              t.cross(e),
                              t.normalize(),
                              r.normal.copy(t);
                          }
                        },
                        computeVertexNormals: function(t) {
                          var e, i, n, r, a, o;
                          for (
                            void 0 === t && (t = !0),
                              o = new Array(this.vertices.length),
                              e = 0,
                              i = this.vertices.length;
                            e < i;
                            e++
                          )
                            o[e] = new ke();
                          if (t) {
                            var s,
                              c,
                              u,
                              l = new ke(),
                              h = new ke();
                            for (n = 0, r = this.faces.length; n < r; n++)
                              (a = this.faces[n]),
                                (s = this.vertices[a.a]),
                                (c = this.vertices[a.b]),
                                (u = this.vertices[a.c]),
                                l.subVectors(u, c),
                                h.subVectors(s, c),
                                l.cross(h),
                                o[a.a].add(l),
                                o[a.b].add(l),
                                o[a.c].add(l);
                          } else
                            for (
                              this.computeFaceNormals(),
                                n = 0,
                                r = this.faces.length;
                              n < r;
                              n++
                            )
                              o[(a = this.faces[n]).a].add(a.normal),
                                o[a.b].add(a.normal),
                                o[a.c].add(a.normal);
                          for (e = 0, i = this.vertices.length; e < i; e++)
                            o[e].normalize();
                          for (n = 0, r = this.faces.length; n < r; n++) {
                            var d = (a = this.faces[n]).vertexNormals;
                            3 === d.length
                              ? (d[0].copy(o[a.a]),
                                d[1].copy(o[a.b]),
                                d[2].copy(o[a.c]))
                              : ((d[0] = o[a.a].clone()),
                                (d[1] = o[a.b].clone()),
                                (d[2] = o[a.c].clone()));
                          }
                          this.faces.length > 0 &&
                            (this.normalsNeedUpdate = !0);
                        },
                        computeFlatVertexNormals: function() {
                          var t, e, i;
                          for (
                            this.computeFaceNormals(),
                              t = 0,
                              e = this.faces.length;
                            t < e;
                            t++
                          ) {
                            var n = (i = this.faces[t]).vertexNormals;
                            3 === n.length
                              ? (n[0].copy(i.normal),
                                n[1].copy(i.normal),
                                n[2].copy(i.normal))
                              : ((n[0] = i.normal.clone()),
                                (n[1] = i.normal.clone()),
                                (n[2] = i.normal.clone()));
                          }
                          this.faces.length > 0 &&
                            (this.normalsNeedUpdate = !0);
                        },
                        computeMorphNormals: function() {
                          var t, e, i, n, r;
                          for (i = 0, n = this.faces.length; i < n; i++)
                            for (
                              (r = this.faces[i]).__originalFaceNormal
                                ? r.__originalFaceNormal.copy(r.normal)
                                : (r.__originalFaceNormal = r.normal.clone()),
                                r.__originalVertexNormals ||
                                  (r.__originalVertexNormals = []),
                                t = 0,
                                e = r.vertexNormals.length;
                              t < e;
                              t++
                            )
                              r.__originalVertexNormals[t]
                                ? r.__originalVertexNormals[t].copy(
                                    r.vertexNormals[t]
                                  )
                                : (r.__originalVertexNormals[
                                    t
                                  ] = r.vertexNormals[t].clone());
                          var a = new Dr();
                          for (
                            a.faces = this.faces,
                              t = 0,
                              e = this.morphTargets.length;
                            t < e;
                            t++
                          ) {
                            if (!this.morphNormals[t]) {
                              (this.morphNormals[t] = {}),
                                (this.morphNormals[t].faceNormals = []),
                                (this.morphNormals[t].vertexNormals = []);
                              var o = this.morphNormals[t].faceNormals,
                                s = this.morphNormals[t].vertexNormals;
                              for (i = 0, n = this.faces.length; i < n; i++)
                                (c = new ke()),
                                  (u = {
                                    a: new ke(),
                                    b: new ke(),
                                    c: new ke()
                                  }),
                                  o.push(c),
                                  s.push(u);
                            }
                            var c,
                              u,
                              l = this.morphNormals[t];
                            for (
                              a.vertices = this.morphTargets[t].vertices,
                                a.computeFaceNormals(),
                                a.computeVertexNormals(),
                                i = 0,
                                n = this.faces.length;
                              i < n;
                              i++
                            )
                              (r = this.faces[i]),
                                (c = l.faceNormals[i]),
                                (u = l.vertexNormals[i]),
                                c.copy(r.normal),
                                u.a.copy(r.vertexNormals[0]),
                                u.b.copy(r.vertexNormals[1]),
                                u.c.copy(r.vertexNormals[2]);
                          }
                          for (i = 0, n = this.faces.length; i < n; i++)
                            ((r = this.faces[i]).normal =
                              r.__originalFaceNormal),
                              (r.vertexNormals = r.__originalVertexNormals);
                        },
                        computeLineDistances: function() {
                          for (
                            var t = 0, e = this.vertices, i = 0, n = e.length;
                            i < n;
                            i++
                          )
                            i > 0 && (t += e[i].distanceTo(e[i - 1])),
                              (this.lineDistances[i] = t);
                        },
                        computeBoundingBox: function() {
                          null === this.boundingBox &&
                            (this.boundingBox = new un()),
                            this.boundingBox.setFromPoints(this.vertices);
                        },
                        computeBoundingSphere: function() {
                          null === this.boundingSphere &&
                            (this.boundingSphere = new ln()),
                            this.boundingSphere.setFromPoints(this.vertices);
                        },
                        merge: function(t, e, i) {
                          if (t && t.isGeometry) {
                            var n,
                              r = this.vertices.length,
                              a = this.vertices,
                              o = t.vertices,
                              s = this.faces,
                              c = t.faces,
                              u = this.faceVertexUvs[0],
                              l = t.faceVertexUvs[0],
                              h = this.colors,
                              d = t.colors;
                            void 0 === i && (i = 0),
                              void 0 !== e && (n = new hn().getNormalMatrix(e));
                            for (var p = 0, f = o.length; p < f; p++) {
                              var m = o[p].clone();
                              void 0 !== e && m.applyMatrix4(e), a.push(m);
                            }
                            for (p = 0, f = d.length; p < f; p++)
                              h.push(d[p].clone());
                            for (p = 0, f = c.length; p < f; p++) {
                              var g,
                                v,
                                y,
                                M = c[p],
                                w = M.vertexNormals,
                                x = M.vertexColors;
                              (g = new Bn(
                                M.a + r,
                                M.b + r,
                                M.c + r
                              )).normal.copy(M.normal),
                                void 0 !== n &&
                                  g.normal.applyMatrix3(n).normalize();
                              for (var A = 0, E = w.length; A < E; A++)
                                (v = w[A].clone()),
                                  void 0 !== n && v.applyMatrix3(n).normalize(),
                                  g.vertexNormals.push(v);
                              g.color.copy(M.color);
                              for (A = 0, E = x.length; A < E; A++)
                                (y = x[A]), g.vertexColors.push(y.clone());
                              (g.materialIndex = M.materialIndex + i),
                                s.push(g);
                            }
                            for (p = 0, f = l.length; p < f; p++) {
                              var b = l[p],
                                T = [];
                              if (void 0 !== b) {
                                for (A = 0, E = b.length; A < E; A++)
                                  T.push(b[A].clone());
                                u.push(T);
                              }
                            }
                          }
                        },
                        mergeMesh: function(t) {
                          t &&
                            t.isMesh &&
                            (t.matrixAutoUpdate && t.updateMatrix(),
                            this.merge(t.geometry, t.matrix));
                        },
                        mergeVertices: function() {
                          var t,
                            e,
                            i,
                            n,
                            r,
                            a,
                            o,
                            s,
                            c = {},
                            u = [],
                            l = [],
                            h = Math.pow(10, 4);
                          for (i = 0, n = this.vertices.length; i < n; i++)
                            (t = this.vertices[i]),
                              void 0 ===
                              c[
                                (e =
                                  Math.round(t.x * h) +
                                  '_' +
                                  Math.round(t.y * h) +
                                  '_' +
                                  Math.round(t.z * h))
                              ]
                                ? ((c[e] = i),
                                  u.push(this.vertices[i]),
                                  (l[i] = u.length - 1))
                                : (l[i] = l[c[e]]);
                          var d = [];
                          for (i = 0, n = this.faces.length; i < n; i++) {
                            ((r = this.faces[i]).a = l[r.a]),
                              (r.b = l[r.b]),
                              (r.c = l[r.c]),
                              (a = [r.a, r.b, r.c]);
                            for (var p = 0; p < 3; p++)
                              if (a[p] === a[(p + 1) % 3]) {
                                d.push(i);
                                break;
                              }
                          }
                          for (i = d.length - 1; i >= 0; i--) {
                            var f = d[i];
                            for (
                              this.faces.splice(f, 1),
                                o = 0,
                                s = this.faceVertexUvs.length;
                              o < s;
                              o++
                            )
                              this.faceVertexUvs[o].splice(f, 1);
                          }
                          var m = this.vertices.length - u.length;
                          return (this.vertices = u), m;
                        },
                        sortFacesByMaterialIndex: function() {
                          for (
                            var t = this.faces, e = t.length, i = 0;
                            i < e;
                            i++
                          )
                            t[i]._id = i;
                          t.sort(function(t, e) {
                            return t.materialIndex - e.materialIndex;
                          });
                          var n,
                            r,
                            a = this.faceVertexUvs[0],
                            o = this.faceVertexUvs[1];
                          a && a.length === e && (n = []),
                            o && o.length === e && (r = []);
                          for (i = 0; i < e; i++) {
                            var s = t[i]._id;
                            n && n.push(a[s]), r && r.push(o[s]);
                          }
                          n && (this.faceVertexUvs[0] = n),
                            r && (this.faceVertexUvs[1] = r);
                        },
                        toJSON: function() {
                          var t = {
                            metadata: {
                              version: 4.5,
                              type: 'Geometry',
                              generator: 'Geometry.toJSON'
                            }
                          };
                          if (
                            ((t.uuid = this.uuid),
                            (t.type = this.type),
                            '' !== this.name && (t.name = this.name),
                            void 0 !== this.parameters)
                          ) {
                            var e = this.parameters;
                            for (var i in e) void 0 !== e[i] && (t[i] = e[i]);
                            return t;
                          }
                          for (
                            var n = [], r = 0;
                            r < this.vertices.length;
                            r++
                          ) {
                            var a = this.vertices[r];
                            n.push(a.x, a.y, a.z);
                          }
                          var o = [],
                            s = [],
                            c = {},
                            u = [],
                            l = {},
                            h = [],
                            d = {};
                          for (r = 0; r < this.faces.length; r++) {
                            var p = this.faces[r],
                              f = void 0 !== this.faceVertexUvs[0][r],
                              m = p.normal.length() > 0,
                              g = p.vertexNormals.length > 0,
                              v =
                                1 !== p.color.r ||
                                1 !== p.color.g ||
                                1 !== p.color.b,
                              y = p.vertexColors.length > 0,
                              M = 0;
                            if (
                              ((M = E(
                                (M = E(
                                  (M = E(
                                    (M = E(
                                      (M = E(
                                        (M = E(
                                          (M = E((M = E(M, 0, 0)), 1, !0)),
                                          2,
                                          !1
                                        )),
                                        3,
                                        f
                                      )),
                                      4,
                                      m
                                    )),
                                    5,
                                    g
                                  )),
                                  6,
                                  v
                                )),
                                7,
                                y
                              )),
                              o.push(M),
                              o.push(p.a, p.b, p.c),
                              o.push(p.materialIndex),
                              f)
                            ) {
                              var w = this.faceVertexUvs[0][r];
                              o.push(L(w[0]), L(w[1]), L(w[2]));
                            }
                            if ((m && o.push(b(p.normal)), g)) {
                              var x = p.vertexNormals;
                              o.push(b(x[0]), b(x[1]), b(x[2]));
                            }
                            if ((v && o.push(T(p.color)), y)) {
                              var A = p.vertexColors;
                              o.push(T(A[0]), T(A[1]), T(A[2]));
                            }
                          }
                          function E(t, e, i) {
                            return i ? t | (1 << e) : t & ~(1 << e);
                          }
                          function b(t) {
                            var e =
                              t.x.toString() + t.y.toString() + t.z.toString();
                            return void 0 !== c[e]
                              ? c[e]
                              : ((c[e] = s.length / 3),
                                s.push(t.x, t.y, t.z),
                                c[e]);
                          }
                          function T(t) {
                            var e =
                              t.r.toString() + t.g.toString() + t.b.toString();
                            return void 0 !== l[e]
                              ? l[e]
                              : ((l[e] = u.length), u.push(t.getHex()), l[e]);
                          }
                          function L(t) {
                            var e = t.x.toString() + t.y.toString();
                            return void 0 !== d[e]
                              ? d[e]
                              : ((d[e] = h.length / 2), h.push(t.x, t.y), d[e]);
                          }
                          return (
                            (t.data = {}),
                            (t.data.vertices = n),
                            (t.data.normals = s),
                            u.length > 0 && (t.data.colors = u),
                            h.length > 0 && (t.data.uvs = [h]),
                            (t.data.faces = o),
                            t
                          );
                        },
                        clone: function() {
                          return new Dr().copy(this);
                        },
                        copy: function(t) {
                          var e, i, n, r, a, o;
                          (this.vertices = []),
                            (this.colors = []),
                            (this.faces = []),
                            (this.faceVertexUvs = [[]]),
                            (this.morphTargets = []),
                            (this.morphNormals = []),
                            (this.skinWeights = []),
                            (this.skinIndices = []),
                            (this.lineDistances = []),
                            (this.boundingBox = null),
                            (this.boundingSphere = null),
                            (this.name = t.name);
                          var s = t.vertices;
                          for (e = 0, i = s.length; e < i; e++)
                            this.vertices.push(s[e].clone());
                          var c = t.colors;
                          for (e = 0, i = c.length; e < i; e++)
                            this.colors.push(c[e].clone());
                          var u = t.faces;
                          for (e = 0, i = u.length; e < i; e++)
                            this.faces.push(u[e].clone());
                          for (e = 0, i = t.faceVertexUvs.length; e < i; e++) {
                            var l = t.faceVertexUvs[e];
                            for (
                              void 0 === this.faceVertexUvs[e] &&
                                (this.faceVertexUvs[e] = []),
                                n = 0,
                                r = l.length;
                              n < r;
                              n++
                            ) {
                              var h = l[n],
                                d = [];
                              for (a = 0, o = h.length; a < o; a++) {
                                var p = h[a];
                                d.push(p.clone());
                              }
                              this.faceVertexUvs[e].push(d);
                            }
                          }
                          var f = t.morphTargets;
                          for (e = 0, i = f.length; e < i; e++) {
                            var m = {};
                            if (
                              ((m.name = f[e].name), void 0 !== f[e].vertices)
                            )
                              for (
                                m.vertices = [],
                                  n = 0,
                                  r = f[e].vertices.length;
                                n < r;
                                n++
                              )
                                m.vertices.push(f[e].vertices[n].clone());
                            if (void 0 !== f[e].normals)
                              for (
                                m.normals = [], n = 0, r = f[e].normals.length;
                                n < r;
                                n++
                              )
                                m.normals.push(f[e].normals[n].clone());
                            this.morphTargets.push(m);
                          }
                          var g = t.morphNormals;
                          for (e = 0, i = g.length; e < i; e++) {
                            var v = {};
                            if (void 0 !== g[e].vertexNormals)
                              for (
                                v.vertexNormals = [],
                                  n = 0,
                                  r = g[e].vertexNormals.length;
                                n < r;
                                n++
                              ) {
                                var y = g[e].vertexNormals[n],
                                  M = {};
                                (M.a = y.a.clone()),
                                  (M.b = y.b.clone()),
                                  (M.c = y.c.clone()),
                                  v.vertexNormals.push(M);
                              }
                            if (void 0 !== g[e].faceNormals)
                              for (
                                v.faceNormals = [],
                                  n = 0,
                                  r = g[e].faceNormals.length;
                                n < r;
                                n++
                              )
                                v.faceNormals.push(g[e].faceNormals[n].clone());
                            this.morphNormals.push(v);
                          }
                          var w = t.skinWeights;
                          for (e = 0, i = w.length; e < i; e++)
                            this.skinWeights.push(w[e].clone());
                          var x = t.skinIndices;
                          for (e = 0, i = x.length; e < i; e++)
                            this.skinIndices.push(x[e].clone());
                          var A = t.lineDistances;
                          for (e = 0, i = A.length; e < i; e++)
                            this.lineDistances.push(A[e]);
                          var E = t.boundingBox;
                          null !== E && (this.boundingBox = E.clone());
                          var b = t.boundingSphere;
                          return (
                            null !== b && (this.boundingSphere = b.clone()),
                            (this.elementsNeedUpdate = t.elementsNeedUpdate),
                            (this.verticesNeedUpdate = t.verticesNeedUpdate),
                            (this.uvsNeedUpdate = t.uvsNeedUpdate),
                            (this.normalsNeedUpdate = t.normalsNeedUpdate),
                            (this.colorsNeedUpdate = t.colorsNeedUpdate),
                            (this.lineDistancesNeedUpdate =
                              t.lineDistancesNeedUpdate),
                            (this.groupsNeedUpdate = t.groupsNeedUpdate),
                            this
                          );
                        },
                        dispose: function() {
                          this.dispatchEvent({ type: 'dispose' });
                        }
                      }),
                        Object.defineProperty(Cr.prototype, 'needsUpdate', {
                          set: function(t) {
                            !0 === t && this.version++;
                          }
                        }),
                        Object.assign(Cr.prototype, {
                          isBufferAttribute: !0,
                          setArray: function(t) {
                            if (Array.isArray(t))
                              throw new TypeError(
                                'THREE.BufferAttribute: array should be a Typed Array.'
                              );
                            (this.count =
                              void 0 !== t ? t.length / this.itemSize : 0),
                              (this.array = t);
                          },
                          setDynamic: function(t) {
                            return (this.dynamic = t), this;
                          },
                          copy: function(t) {
                            return (
                              (this.array = new t.array.constructor(t.array)),
                              (this.itemSize = t.itemSize),
                              (this.count = t.count),
                              (this.normalized = t.normalized),
                              (this.dynamic = t.dynamic),
                              this
                            );
                          },
                          copyAt: function(t, e, i) {
                            (t *= this.itemSize), (i *= e.itemSize);
                            for (var n = 0, r = this.itemSize; n < r; n++)
                              this.array[t + n] = e.array[i + n];
                            return this;
                          },
                          copyArray: function(t) {
                            return this.array.set(t), this;
                          },
                          copyColorsArray: function(t) {
                            for (
                              var e = this.array, i = 0, n = 0, r = t.length;
                              n < r;
                              n++
                            ) {
                              var a = t[n];
                              void 0 === a && (a = new Ni()),
                                (e[i++] = a.r),
                                (e[i++] = a.g),
                                (e[i++] = a.b);
                            }
                            return this;
                          },
                          copyIndicesArray: function(t) {
                            for (
                              var e = this.array, i = 0, n = 0, r = t.length;
                              n < r;
                              n++
                            ) {
                              var a = t[n];
                              (e[i++] = a.a), (e[i++] = a.b), (e[i++] = a.c);
                            }
                            return this;
                          },
                          copyVector2sArray: function(t) {
                            for (
                              var e = this.array, i = 0, n = 0, r = t.length;
                              n < r;
                              n++
                            ) {
                              var a = t[n];
                              void 0 === a && (a = new he()),
                                (e[i++] = a.x),
                                (e[i++] = a.y);
                            }
                            return this;
                          },
                          copyVector3sArray: function(t) {
                            for (
                              var e = this.array, i = 0, n = 0, r = t.length;
                              n < r;
                              n++
                            ) {
                              var a = t[n];
                              void 0 === a && (a = new ke()),
                                (e[i++] = a.x),
                                (e[i++] = a.y),
                                (e[i++] = a.z);
                            }
                            return this;
                          },
                          copyVector4sArray: function(t) {
                            for (
                              var e = this.array, i = 0, n = 0, r = t.length;
                              n < r;
                              n++
                            ) {
                              var a = t[n];
                              void 0 === a && (a = new je()),
                                (e[i++] = a.x),
                                (e[i++] = a.y),
                                (e[i++] = a.z),
                                (e[i++] = a.w);
                            }
                            return this;
                          },
                          set: function(t, e) {
                            return (
                              void 0 === e && (e = 0),
                              this.array.set(t, e),
                              this
                            );
                          },
                          getX: function(t) {
                            return this.array[t * this.itemSize];
                          },
                          setX: function(t, e) {
                            return (this.array[t * this.itemSize] = e), this;
                          },
                          getY: function(t) {
                            return this.array[t * this.itemSize + 1];
                          },
                          setY: function(t, e) {
                            return (
                              (this.array[t * this.itemSize + 1] = e), this
                            );
                          },
                          getZ: function(t) {
                            return this.array[t * this.itemSize + 2];
                          },
                          setZ: function(t, e) {
                            return (
                              (this.array[t * this.itemSize + 2] = e), this
                            );
                          },
                          getW: function(t) {
                            return this.array[t * this.itemSize + 3];
                          },
                          setW: function(t, e) {
                            return (
                              (this.array[t * this.itemSize + 3] = e), this
                            );
                          },
                          setXY: function(t, e, i) {
                            return (
                              (t *= this.itemSize),
                              (this.array[t + 0] = e),
                              (this.array[t + 1] = i),
                              this
                            );
                          },
                          setXYZ: function(t, e, i, n) {
                            return (
                              (t *= this.itemSize),
                              (this.array[t + 0] = e),
                              (this.array[t + 1] = i),
                              (this.array[t + 2] = n),
                              this
                            );
                          },
                          setXYZW: function(t, e, i, n, r) {
                            return (
                              (t *= this.itemSize),
                              (this.array[t + 0] = e),
                              (this.array[t + 1] = i),
                              (this.array[t + 2] = n),
                              (this.array[t + 3] = r),
                              this
                            );
                          },
                          onUpload: function(t) {
                            return (this.onUploadCallback = t), this;
                          },
                          clone: function() {
                            return new this.constructor(
                              this.array,
                              this.itemSize
                            ).copy(this);
                          }
                        }),
                        (Sr.prototype = Object.create(Cr.prototype)),
                        (Sr.prototype.constructor = Sr),
                        (Ir.prototype = Object.create(Cr.prototype)),
                        (Ir.prototype.constructor = Ir),
                        (_r.prototype = Object.create(Cr.prototype)),
                        (_r.prototype.constructor = _r),
                        (jr.prototype = Object.create(Cr.prototype)),
                        (jr.prototype.constructor = jr),
                        (Or.prototype = Object.create(Cr.prototype)),
                        (Or.prototype.constructor = Or),
                        (zr.prototype = Object.create(Cr.prototype)),
                        (zr.prototype.constructor = zr),
                        (Rr.prototype = Object.create(Cr.prototype)),
                        (Rr.prototype.constructor = Rr),
                        (kr.prototype = Object.create(Cr.prototype)),
                        (kr.prototype.constructor = kr),
                        (Ur.prototype = Object.create(Cr.prototype)),
                        (Ur.prototype.constructor = Ur),
                        Object.assign(Pr.prototype, {
                          computeGroups: function(t) {
                            for (
                              var e, i = [], n = void 0, r = t.faces, a = 0;
                              a < r.length;
                              a++
                            ) {
                              var o = r[a];
                              o.materialIndex !== n &&
                                ((n = o.materialIndex),
                                void 0 !== e &&
                                  ((e.count = 3 * a - e.start), i.push(e)),
                                (e = { start: 3 * a, materialIndex: n }));
                            }
                            void 0 !== e &&
                              ((e.count = 3 * a - e.start), i.push(e)),
                              (this.groups = i);
                          },
                          fromGeometry: function(t) {
                            var e,
                              i = t.faces,
                              n = t.vertices,
                              r = t.faceVertexUvs,
                              a = r[0] && r[0].length > 0,
                              o = r[1] && r[1].length > 0,
                              s = t.morphTargets,
                              c = s.length;
                            if (c > 0) {
                              e = [];
                              for (var u = 0; u < c; u++) e[u] = [];
                              this.morphTargets.position = e;
                            }
                            var l,
                              h = t.morphNormals,
                              d = h.length;
                            if (d > 0) {
                              l = [];
                              for (u = 0; u < d; u++) l[u] = [];
                              this.morphTargets.normal = l;
                            }
                            var p = t.skinIndices,
                              f = t.skinWeights,
                              m = p.length === n.length,
                              g = f.length === n.length;
                            for (u = 0; u < i.length; u++) {
                              var v = i[u];
                              this.vertices.push(n[v.a], n[v.b], n[v.c]);
                              var y = v.vertexNormals;
                              if (3 === y.length)
                                this.normals.push(y[0], y[1], y[2]);
                              else {
                                var M = v.normal;
                                this.normals.push(M, M, M);
                              }
                              var w,
                                x = v.vertexColors;
                              if (3 === x.length)
                                this.colors.push(x[0], x[1], x[2]);
                              else {
                                var A = v.color;
                                this.colors.push(A, A, A);
                              }
                              if (!0 === a)
                                void 0 !== (w = r[0][u])
                                  ? this.uvs.push(w[0], w[1], w[2])
                                  : this.uvs.push(new he(), new he(), new he());
                              if (!0 === o)
                                void 0 !== (w = r[1][u])
                                  ? this.uvs2.push(w[0], w[1], w[2])
                                  : this.uvs2.push(
                                      new he(),
                                      new he(),
                                      new he()
                                    );
                              for (var E = 0; E < c; E++) {
                                var b = s[E].vertices;
                                e[E].push(b[v.a], b[v.b], b[v.c]);
                              }
                              for (E = 0; E < d; E++) {
                                var T = h[E].vertexNormals[u];
                                l[E].push(T.a, T.b, T.c);
                              }
                              m &&
                                this.skinIndices.push(p[v.a], p[v.b], p[v.c]),
                                g &&
                                  this.skinWeights.push(f[v.a], f[v.b], f[v.c]);
                            }
                            return (
                              this.computeGroups(t),
                              (this.verticesNeedUpdate = t.verticesNeedUpdate),
                              (this.normalsNeedUpdate = t.normalsNeedUpdate),
                              (this.colorsNeedUpdate = t.colorsNeedUpdate),
                              (this.uvsNeedUpdate = t.uvsNeedUpdate),
                              (this.groupsNeedUpdate = t.groupsNeedUpdate),
                              this
                            );
                          }
                        }),
                        (Fr.MaxIndex = 65535),
                        Object.assign(Fr.prototype, e.prototype, {
                          isBufferGeometry: !0,
                          getIndex: function() {
                            return this.index;
                          },
                          setIndex: function(t) {
                            Array.isArray(t)
                              ? (this.index = new (Br(t) > 65535 ? Rr : Or)(
                                  t,
                                  1
                                ))
                              : (this.index = t);
                          },
                          addAttribute: function(t, e) {
                            if (
                              (e && e.isBufferAttribute) ||
                              (e && e.isInterleavedBufferAttribute)
                            ) {
                              if ('index' !== t)
                                return (this.attributes[t] = e), this;
                              this.setIndex(e);
                            } else
                              this.addAttribute(
                                t,
                                new Cr(arguments[1], arguments[2])
                              );
                          },
                          getAttribute: function(t) {
                            return this.attributes[t];
                          },
                          removeAttribute: function(t) {
                            return delete this.attributes[t], this;
                          },
                          addGroup: function(t, e, i) {
                            this.groups.push({
                              start: t,
                              count: e,
                              materialIndex: void 0 !== i ? i : 0
                            });
                          },
                          clearGroups: function() {
                            this.groups = [];
                          },
                          setDrawRange: function(t, e) {
                            (this.drawRange.start = t),
                              (this.drawRange.count = e);
                          },
                          applyMatrix: function(t) {
                            var e = this.attributes.position;
                            void 0 !== e &&
                              (t.applyToBufferAttribute(e),
                              (e.needsUpdate = !0));
                            var i = this.attributes.normal;
                            void 0 !== i &&
                              (new hn()
                                .getNormalMatrix(t)
                                .applyToBufferAttribute(i),
                              (i.needsUpdate = !0));
                            return (
                              null !== this.boundingBox &&
                                this.computeBoundingBox(),
                              null !== this.boundingSphere &&
                                this.computeBoundingSphere(),
                              this
                            );
                          },
                          rotateX: ((er = new Ue()),
                          function(t) {
                            return (
                              er.makeRotationX(t), this.applyMatrix(er), this
                            );
                          }),
                          rotateY: ((tr = new Ue()),
                          function(t) {
                            return (
                              tr.makeRotationY(t), this.applyMatrix(tr), this
                            );
                          }),
                          rotateZ: (($n = new Ue()),
                          function(t) {
                            return (
                              $n.makeRotationZ(t), this.applyMatrix($n), this
                            );
                          }),
                          translate: ((Jn = new Ue()),
                          function(t, e, i) {
                            return (
                              Jn.makeTranslation(t, e, i),
                              this.applyMatrix(Jn),
                              this
                            );
                          }),
                          scale: ((Kn = new Ue()),
                          function(t, e, i) {
                            return (
                              Kn.makeScale(t, e, i), this.applyMatrix(Kn), this
                            );
                          }),
                          lookAt: ((Zn = new Rn()),
                          function(t) {
                            Zn.lookAt(t),
                              Zn.updateMatrix(),
                              this.applyMatrix(Zn.matrix);
                          }),
                          center: function() {
                            this.computeBoundingBox();
                            var t = this.boundingBox.getCenter().negate();
                            return this.translate(t.x, t.y, t.z), t;
                          },
                          setFromObject: function(t) {
                            var e = t.geometry;
                            if (t.isPoints || t.isLine) {
                              var i = new kr(3 * e.vertices.length, 3),
                                n = new kr(3 * e.colors.length, 3);
                              if (
                                (this.addAttribute(
                                  'position',
                                  i.copyVector3sArray(e.vertices)
                                ),
                                this.addAttribute(
                                  'color',
                                  n.copyColorsArray(e.colors)
                                ),
                                e.lineDistances &&
                                  e.lineDistances.length === e.vertices.length)
                              ) {
                                var r = new kr(e.lineDistances.length, 1);
                                this.addAttribute(
                                  'lineDistance',
                                  r.copyArray(e.lineDistances)
                                );
                              }
                              null !== e.boundingSphere &&
                                (this.boundingSphere = e.boundingSphere.clone()),
                                null !== e.boundingBox &&
                                  (this.boundingBox = e.boundingBox.clone());
                            } else
                              t.isMesh &&
                                e &&
                                e.isGeometry &&
                                this.fromGeometry(e);
                            return this;
                          },
                          updateFromObject: function(t) {
                            var e,
                              i = t.geometry;
                            if (t.isMesh) {
                              var n = i.__directGeometry;
                              if (
                                (!0 === i.elementsNeedUpdate &&
                                  ((n = void 0), (i.elementsNeedUpdate = !1)),
                                void 0 === n)
                              )
                                return this.fromGeometry(i);
                              (n.verticesNeedUpdate = i.verticesNeedUpdate),
                                (n.normalsNeedUpdate = i.normalsNeedUpdate),
                                (n.colorsNeedUpdate = i.colorsNeedUpdate),
                                (n.uvsNeedUpdate = i.uvsNeedUpdate),
                                (n.groupsNeedUpdate = i.groupsNeedUpdate),
                                (i.verticesNeedUpdate = !1),
                                (i.normalsNeedUpdate = !1),
                                (i.colorsNeedUpdate = !1),
                                (i.uvsNeedUpdate = !1),
                                (i.groupsNeedUpdate = !1),
                                (i = n);
                            }
                            return (
                              !0 === i.verticesNeedUpdate &&
                                (void 0 !== (e = this.attributes.position) &&
                                  (e.copyVector3sArray(i.vertices),
                                  (e.needsUpdate = !0)),
                                (i.verticesNeedUpdate = !1)),
                              !0 === i.normalsNeedUpdate &&
                                (void 0 !== (e = this.attributes.normal) &&
                                  (e.copyVector3sArray(i.normals),
                                  (e.needsUpdate = !0)),
                                (i.normalsNeedUpdate = !1)),
                              !0 === i.colorsNeedUpdate &&
                                (void 0 !== (e = this.attributes.color) &&
                                  (e.copyColorsArray(i.colors),
                                  (e.needsUpdate = !0)),
                                (i.colorsNeedUpdate = !1)),
                              i.uvsNeedUpdate &&
                                (void 0 !== (e = this.attributes.uv) &&
                                  (e.copyVector2sArray(i.uvs),
                                  (e.needsUpdate = !0)),
                                (i.uvsNeedUpdate = !1)),
                              i.lineDistancesNeedUpdate &&
                                (void 0 !==
                                  (e = this.attributes.lineDistance) &&
                                  (e.copyArray(i.lineDistances),
                                  (e.needsUpdate = !0)),
                                (i.lineDistancesNeedUpdate = !1)),
                              i.groupsNeedUpdate &&
                                (i.computeGroups(t.geometry),
                                (this.groups = i.groups),
                                (i.groupsNeedUpdate = !1)),
                              this
                            );
                          },
                          fromGeometry: function(t) {
                            return (
                              (t.__directGeometry = new Pr().fromGeometry(t)),
                              this.fromDirectGeometry(t.__directGeometry)
                            );
                          },
                          fromDirectGeometry: function(t) {
                            var e = new Float32Array(3 * t.vertices.length);
                            if (
                              (this.addAttribute(
                                'position',
                                new Cr(e, 3).copyVector3sArray(t.vertices)
                              ),
                              t.normals.length > 0)
                            ) {
                              var i = new Float32Array(3 * t.normals.length);
                              this.addAttribute(
                                'normal',
                                new Cr(i, 3).copyVector3sArray(t.normals)
                              );
                            }
                            if (t.colors.length > 0) {
                              var n = new Float32Array(3 * t.colors.length);
                              this.addAttribute(
                                'color',
                                new Cr(n, 3).copyColorsArray(t.colors)
                              );
                            }
                            if (t.uvs.length > 0) {
                              var r = new Float32Array(2 * t.uvs.length);
                              this.addAttribute(
                                'uv',
                                new Cr(r, 2).copyVector2sArray(t.uvs)
                              );
                            }
                            if (t.uvs2.length > 0) {
                              var a = new Float32Array(2 * t.uvs2.length);
                              this.addAttribute(
                                'uv2',
                                new Cr(a, 2).copyVector2sArray(t.uvs2)
                              );
                            }
                            if (t.indices.length > 0) {
                              var o = new (Br(t.indices) > 65535
                                ? Uint32Array
                                : Uint16Array)(3 * t.indices.length);
                              this.setIndex(
                                new Cr(o, 1).copyIndicesArray(t.indices)
                              );
                            }
                            this.groups = t.groups;
                            for (var s in t.morphTargets) {
                              for (
                                var c = [],
                                  u = t.morphTargets[s],
                                  l = 0,
                                  h = u.length;
                                l < h;
                                l++
                              ) {
                                var d = u[l],
                                  p = new kr(3 * d.length, 3);
                                c.push(p.copyVector3sArray(d));
                              }
                              this.morphAttributes[s] = c;
                            }
                            if (t.skinIndices.length > 0) {
                              var f = new kr(4 * t.skinIndices.length, 4);
                              this.addAttribute(
                                'skinIndex',
                                f.copyVector4sArray(t.skinIndices)
                              );
                            }
                            if (t.skinWeights.length > 0) {
                              var m = new kr(4 * t.skinWeights.length, 4);
                              this.addAttribute(
                                'skinWeight',
                                m.copyVector4sArray(t.skinWeights)
                              );
                            }
                            return (
                              null !== t.boundingSphere &&
                                (this.boundingSphere = t.boundingSphere.clone()),
                              null !== t.boundingBox &&
                                (this.boundingBox = t.boundingBox.clone()),
                              this
                            );
                          },
                          computeBoundingBox: function() {
                            null === this.boundingBox &&
                              (this.boundingBox = new un());
                            var t = this.attributes.position;
                            void 0 !== t
                              ? this.boundingBox.setFromBufferAttribute(t)
                              : this.boundingBox.makeEmpty(),
                              isNaN(this.boundingBox.min.x) ||
                                isNaN(this.boundingBox.min.y) ||
                                isNaN(this.boundingBox.min.z);
                          },
                          computeBoundingSphere: ((Xn = new un()),
                          (qn = new ke()),
                          function() {
                            null === this.boundingSphere &&
                              (this.boundingSphere = new ln());
                            var t = this.attributes.position;
                            if (t) {
                              var e = this.boundingSphere.center;
                              Xn.setFromBufferAttribute(t), Xn.getCenter(e);
                              for (var i = 0, n = 0, r = t.count; n < r; n++)
                                (qn.x = t.getX(n)),
                                  (qn.y = t.getY(n)),
                                  (qn.z = t.getZ(n)),
                                  (i = Math.max(i, e.distanceToSquared(qn)));
                              (this.boundingSphere.radius = Math.sqrt(i)),
                                isNaN(this.boundingSphere.radius);
                            }
                          }),
                          computeFaceNormals: function() {},
                          computeVertexNormals: function() {
                            var t = this.index,
                              e = this.attributes,
                              i = this.groups;
                            if (e.position) {
                              var n = e.position.array;
                              if (void 0 === e.normal)
                                this.addAttribute(
                                  'normal',
                                  new Cr(new Float32Array(n.length), 3)
                                );
                              else
                                for (
                                  var r = e.normal.array, a = 0, o = r.length;
                                  a < o;
                                  a++
                                )
                                  r[a] = 0;
                              var s,
                                c,
                                u,
                                l = e.normal.array,
                                h = new ke(),
                                d = new ke(),
                                p = new ke(),
                                f = new ke(),
                                m = new ke();
                              if (t) {
                                var g = t.array;
                                0 === i.length && this.addGroup(0, g.length);
                                for (var v = 0, y = i.length; v < y; ++v) {
                                  var M = i[v],
                                    w = M.start;
                                  for (a = w, o = w + M.count; a < o; a += 3)
                                    (s = 3 * g[a + 0]),
                                      (c = 3 * g[a + 1]),
                                      (u = 3 * g[a + 2]),
                                      h.fromArray(n, s),
                                      d.fromArray(n, c),
                                      p.fromArray(n, u),
                                      f.subVectors(p, d),
                                      m.subVectors(h, d),
                                      f.cross(m),
                                      (l[s] += f.x),
                                      (l[s + 1] += f.y),
                                      (l[s + 2] += f.z),
                                      (l[c] += f.x),
                                      (l[c + 1] += f.y),
                                      (l[c + 2] += f.z),
                                      (l[u] += f.x),
                                      (l[u + 1] += f.y),
                                      (l[u + 2] += f.z);
                                }
                              } else
                                for (a = 0, o = n.length; a < o; a += 9)
                                  h.fromArray(n, a),
                                    d.fromArray(n, a + 3),
                                    p.fromArray(n, a + 6),
                                    f.subVectors(p, d),
                                    m.subVectors(h, d),
                                    f.cross(m),
                                    (l[a] = f.x),
                                    (l[a + 1] = f.y),
                                    (l[a + 2] = f.z),
                                    (l[a + 3] = f.x),
                                    (l[a + 4] = f.y),
                                    (l[a + 5] = f.z),
                                    (l[a + 6] = f.x),
                                    (l[a + 7] = f.y),
                                    (l[a + 8] = f.z);
                              this.normalizeNormals(),
                                (e.normal.needsUpdate = !0);
                            }
                          },
                          merge: function(t, e) {
                            if (t && t.isBufferGeometry) {
                              void 0 === e && (e = 0);
                              var i = this.attributes;
                              for (var n in i)
                                if (void 0 !== t.attributes[n])
                                  for (
                                    var r = i[n].array,
                                      a = t.attributes[n],
                                      o = a.array,
                                      s = 0,
                                      c = a.itemSize * e;
                                    s < o.length;
                                    s++, c++
                                  )
                                    r[c] = o[s];
                              return this;
                            }
                          },
                          normalizeNormals: ((Wn = new ke()),
                          function() {
                            for (
                              var t = this.attributes.normal,
                                e = 0,
                                i = t.count;
                              e < i;
                              e++
                            )
                              (Wn.x = t.getX(e)),
                                (Wn.y = t.getY(e)),
                                (Wn.z = t.getZ(e)),
                                Wn.normalize(),
                                t.setXYZ(e, Wn.x, Wn.y, Wn.z);
                          }),
                          toNonIndexed: function() {
                            if (null === this.index) return this;
                            var t = new Fr(),
                              e = this.index.array,
                              i = this.attributes;
                            for (var n in i) {
                              for (
                                var r = i[n],
                                  a = r.array,
                                  o = r.itemSize,
                                  s = new a.constructor(e.length * o),
                                  c = 0,
                                  u = 0,
                                  l = 0,
                                  h = e.length;
                                l < h;
                                l++
                              ) {
                                c = e[l] * o;
                                for (var d = 0; d < o; d++) s[u++] = a[c++];
                              }
                              t.addAttribute(n, new Cr(s, o));
                            }
                            return t;
                          },
                          toJSON: function() {
                            var t = {
                              metadata: {
                                version: 4.5,
                                type: 'BufferGeometry',
                                generator: 'BufferGeometry.toJSON'
                              }
                            };
                            if (
                              ((t.uuid = this.uuid),
                              (t.type = this.type),
                              '' !== this.name && (t.name = this.name),
                              void 0 !== this.parameters)
                            ) {
                              var e = this.parameters;
                              for (var i in e) void 0 !== e[i] && (t[i] = e[i]);
                              return t;
                            }
                            t.data = { attributes: {} };
                            var n = this.index;
                            if (null !== n) {
                              var r = Array.prototype.slice.call(n.array);
                              t.data.index = {
                                type: n.array.constructor.name,
                                array: r
                              };
                            }
                            var a = this.attributes;
                            for (var i in a) {
                              var o = a[i];
                              r = Array.prototype.slice.call(o.array);
                              t.data.attributes[i] = {
                                itemSize: o.itemSize,
                                type: o.array.constructor.name,
                                array: r,
                                normalized: o.normalized
                              };
                            }
                            var s = this.groups;
                            s.length > 0 &&
                              (t.data.groups = JSON.parse(JSON.stringify(s)));
                            var c = this.boundingSphere;
                            return (
                              null !== c &&
                                (t.data.boundingSphere = {
                                  center: c.center.toArray(),
                                  radius: c.radius
                                }),
                              t
                            );
                          },
                          clone: function() {
                            return new Fr().copy(this);
                          },
                          copy: function(t) {
                            var e, i, n;
                            (this.index = null),
                              (this.attributes = {}),
                              (this.morphAttributes = {}),
                              (this.groups = []),
                              (this.boundingBox = null),
                              (this.boundingSphere = null),
                              (this.name = t.name);
                            var r = t.index;
                            null !== r && this.setIndex(r.clone());
                            var a = t.attributes;
                            for (e in a) {
                              var o = a[e];
                              this.addAttribute(e, o.clone());
                            }
                            var s = t.morphAttributes;
                            for (e in s) {
                              var c = [],
                                u = s[e];
                              for (i = 0, n = u.length; i < n; i++)
                                c.push(u[i].clone());
                              this.morphAttributes[e] = c;
                            }
                            var l = t.groups;
                            for (i = 0, n = l.length; i < n; i++) {
                              var h = l[i];
                              this.addGroup(h.start, h.count, h.materialIndex);
                            }
                            var d = t.boundingBox;
                            null !== d && (this.boundingBox = d.clone());
                            var p = t.boundingSphere;
                            return (
                              null !== p && (this.boundingSphere = p.clone()),
                              (this.drawRange.start = t.drawRange.start),
                              (this.drawRange.count = t.drawRange.count),
                              this
                            );
                          },
                          dispose: function() {
                            this.dispatchEvent({ type: 'dispose' });
                          }
                        }),
                        (Gr.prototype = Object.create(Dr.prototype)),
                        (Gr.prototype.constructor = Gr),
                        (Vr.prototype = Object.create(Fr.prototype)),
                        (Vr.prototype.constructor = Vr),
                        (Yr.prototype = Object.create(Dr.prototype)),
                        (Yr.prototype.constructor = Yr),
                        (Qr.prototype = Object.create(Fr.prototype)),
                        (Qr.prototype.constructor = Qr),
                        (Hr.prototype = Object.create(an.prototype)),
                        (Hr.prototype.constructor = Hr),
                        (Hr.prototype.isMeshBasicMaterial = !0),
                        (Hr.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            this.color.copy(t.color),
                            (this.map = t.map),
                            (this.lightMap = t.lightMap),
                            (this.lightMapIntensity = t.lightMapIntensity),
                            (this.aoMap = t.aoMap),
                            (this.aoMapIntensity = t.aoMapIntensity),
                            (this.specularMap = t.specularMap),
                            (this.alphaMap = t.alphaMap),
                            (this.envMap = t.envMap),
                            (this.combine = t.combine),
                            (this.reflectivity = t.reflectivity),
                            (this.refractionRatio = t.refractionRatio),
                            (this.wireframe = t.wireframe),
                            (this.wireframeLinewidth = t.wireframeLinewidth),
                            (this.wireframeLinecap = t.wireframeLinecap),
                            (this.wireframeLinejoin = t.wireframeLinejoin),
                            (this.skinning = t.skinning),
                            (this.morphTargets = t.morphTargets),
                            this
                          );
                        }),
                        Object.assign(Wr.prototype, {
                          set: function(t, e) {
                            return (
                              this.origin.copy(t), this.direction.copy(e), this
                            );
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              this.origin.copy(t.origin),
                              this.direction.copy(t.direction),
                              this
                            );
                          },
                          at: function(t, e) {
                            return (e || new ke())
                              .copy(this.direction)
                              .multiplyScalar(t)
                              .add(this.origin);
                          },
                          lookAt: function(t) {
                            return (
                              this.direction
                                .copy(t)
                                .sub(this.origin)
                                .normalize(),
                              this
                            );
                          },
                          recast: ((dr = new ke()),
                          function(t) {
                            return this.origin.copy(this.at(t, dr)), this;
                          }),
                          closestPointToPoint: function(t, e) {
                            var i = e || new ke();
                            i.subVectors(t, this.origin);
                            var n = i.dot(this.direction);
                            return n < 0
                              ? i.copy(this.origin)
                              : i
                                  .copy(this.direction)
                                  .multiplyScalar(n)
                                  .add(this.origin);
                          },
                          distanceToPoint: function(t) {
                            return Math.sqrt(this.distanceSqToPoint(t));
                          },
                          distanceSqToPoint: ((hr = new ke()),
                          function(t) {
                            var e = hr
                              .subVectors(t, this.origin)
                              .dot(this.direction);
                            return e < 0
                              ? this.origin.distanceToSquared(t)
                              : (hr
                                  .copy(this.direction)
                                  .multiplyScalar(e)
                                  .add(this.origin),
                                hr.distanceToSquared(t));
                          }),
                          distanceSqToSegment: ((cr = new ke()),
                          (ur = new ke()),
                          (lr = new ke()),
                          function(t, e, i, n) {
                            cr
                              .copy(t)
                              .add(e)
                              .multiplyScalar(0.5),
                              ur
                                .copy(e)
                                .sub(t)
                                .normalize(),
                              lr.copy(this.origin).sub(cr);
                            var r,
                              a,
                              o,
                              s,
                              c = 0.5 * t.distanceTo(e),
                              u = -this.direction.dot(ur),
                              l = lr.dot(this.direction),
                              h = -lr.dot(ur),
                              d = lr.lengthSq(),
                              p = Math.abs(1 - u * u);
                            if (p > 0)
                              if (
                                ((a = u * l - h),
                                (s = c * p),
                                (r = u * h - l) >= 0)
                              )
                                if (a >= -s)
                                  if (a <= s) {
                                    var f = 1 / p;
                                    o =
                                      (r *= f) * (r + u * (a *= f) + 2 * l) +
                                      a * (u * r + a + 2 * h) +
                                      d;
                                  } else
                                    (a = c),
                                      (o =
                                        -(r = Math.max(0, -(u * a + l))) * r +
                                        a * (a + 2 * h) +
                                        d);
                                else
                                  (a = -c),
                                    (o =
                                      -(r = Math.max(0, -(u * a + l))) * r +
                                      a * (a + 2 * h) +
                                      d);
                              else
                                a <= -s
                                  ? (o =
                                      -(r = Math.max(0, -(-u * c + l))) * r +
                                      (a =
                                        r > 0
                                          ? -c
                                          : Math.min(Math.max(-c, -h), c)) *
                                        (a + 2 * h) +
                                      d)
                                  : a <= s
                                    ? ((r = 0),
                                      (o =
                                        (a = Math.min(Math.max(-c, -h), c)) *
                                          (a + 2 * h) +
                                        d))
                                    : (o =
                                        -(r = Math.max(0, -(u * c + l))) * r +
                                        (a =
                                          r > 0
                                            ? c
                                            : Math.min(Math.max(-c, -h), c)) *
                                          (a + 2 * h) +
                                        d);
                            else
                              (a = u > 0 ? -c : c),
                                (o =
                                  -(r = Math.max(0, -(u * a + l))) * r +
                                  a * (a + 2 * h) +
                                  d);
                            return (
                              i &&
                                i
                                  .copy(this.direction)
                                  .multiplyScalar(r)
                                  .add(this.origin),
                              n &&
                                n
                                  .copy(ur)
                                  .multiplyScalar(a)
                                  .add(cr),
                              o
                            );
                          }),
                          intersectSphere: ((sr = new ke()),
                          function(t, e) {
                            sr.subVectors(t.center, this.origin);
                            var i = sr.dot(this.direction),
                              n = sr.dot(sr) - i * i,
                              r = t.radius * t.radius;
                            if (n > r) return null;
                            var a = Math.sqrt(r - n),
                              o = i - a,
                              s = i + a;
                            return o < 0 && s < 0
                              ? null
                              : o < 0 ? this.at(s, e) : this.at(o, e);
                          }),
                          intersectsSphere: function(t) {
                            return this.distanceToPoint(t.center) <= t.radius;
                          },
                          distanceToPlane: function(t) {
                            var e = t.normal.dot(this.direction);
                            if (0 === e)
                              return 0 === t.distanceToPoint(this.origin)
                                ? 0
                                : null;
                            var i =
                              -(this.origin.dot(t.normal) + t.constant) / e;
                            return i >= 0 ? i : null;
                          },
                          intersectPlane: function(t, e) {
                            var i = this.distanceToPlane(t);
                            return null === i ? null : this.at(i, e);
                          },
                          intersectsPlane: function(t) {
                            var e = t.distanceToPoint(this.origin);
                            return (
                              0 === e || t.normal.dot(this.direction) * e < 0
                            );
                          },
                          intersectBox: function(t, e) {
                            var i,
                              n,
                              r,
                              a,
                              o,
                              s,
                              c = 1 / this.direction.x,
                              u = 1 / this.direction.y,
                              l = 1 / this.direction.z,
                              h = this.origin;
                            return (
                              c >= 0
                                ? ((i = (t.min.x - h.x) * c),
                                  (n = (t.max.x - h.x) * c))
                                : ((i = (t.max.x - h.x) * c),
                                  (n = (t.min.x - h.x) * c)),
                              u >= 0
                                ? ((r = (t.min.y - h.y) * u),
                                  (a = (t.max.y - h.y) * u))
                                : ((r = (t.max.y - h.y) * u),
                                  (a = (t.min.y - h.y) * u)),
                              i > a || r > n
                                ? null
                                : ((r > i || i != i) && (i = r),
                                  (a < n || n != n) && (n = a),
                                  l >= 0
                                    ? ((o = (t.min.z - h.z) * l),
                                      (s = (t.max.z - h.z) * l))
                                    : ((o = (t.max.z - h.z) * l),
                                      (s = (t.min.z - h.z) * l)),
                                  i > s || o > n
                                    ? null
                                    : ((o > i || i != i) && (i = o),
                                      (s < n || n != n) && (n = s),
                                      n < 0
                                        ? null
                                        : this.at(i >= 0 ? i : n, e)))
                            );
                          },
                          intersectsBox: ((or = new ke()),
                          function(t) {
                            return null !== this.intersectBox(t, or);
                          }),
                          intersectTriangle: ((ir = new ke()),
                          (nr = new ke()),
                          (rr = new ke()),
                          (ar = new ke()),
                          function(t, e, i, n, r) {
                            nr.subVectors(e, t),
                              rr.subVectors(i, t),
                              ar.crossVectors(nr, rr);
                            var a,
                              o = this.direction.dot(ar);
                            if (o > 0) {
                              if (n) return null;
                              a = 1;
                            } else {
                              if (!(o < 0)) return null;
                              (a = -1), (o = -o);
                            }
                            ir.subVectors(this.origin, t);
                            var s =
                              a * this.direction.dot(rr.crossVectors(ir, rr));
                            if (s < 0) return null;
                            var c = a * this.direction.dot(nr.cross(ir));
                            if (c < 0) return null;
                            if (s + c > o) return null;
                            var u = -a * ir.dot(ar);
                            return u < 0 ? null : this.at(u / o, r);
                          }),
                          applyMatrix4: function(t) {
                            return (
                              this.origin.applyMatrix4(t),
                              this.direction.transformDirection(t),
                              this
                            );
                          },
                          equals: function(t) {
                            return (
                              t.origin.equals(this.origin) &&
                              t.direction.equals(this.direction)
                            );
                          }
                        }),
                        Object.assign(Xr.prototype, {
                          set: function(t, e) {
                            return this.start.copy(t), this.end.copy(e), this;
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              this.start.copy(t.start),
                              this.end.copy(t.end),
                              this
                            );
                          },
                          getCenter: function(t) {
                            return (t || new ke())
                              .addVectors(this.start, this.end)
                              .multiplyScalar(0.5);
                          },
                          delta: function(t) {
                            return (t || new ke()).subVectors(
                              this.end,
                              this.start
                            );
                          },
                          distanceSq: function() {
                            return this.start.distanceToSquared(this.end);
                          },
                          distance: function() {
                            return this.start.distanceTo(this.end);
                          },
                          at: function(t, e) {
                            var i = e || new ke();
                            return this.delta(i)
                              .multiplyScalar(t)
                              .add(this.start);
                          },
                          closestPointToPointParameter: ((pr = new ke()),
                          (fr = new ke()),
                          function(t, e) {
                            pr.subVectors(t, this.start),
                              fr.subVectors(this.end, this.start);
                            var i = fr.dot(fr),
                              n = fr.dot(pr) / i;
                            return e && (n = le.clamp(n, 0, 1)), n;
                          }),
                          closestPointToPoint: function(t, e, i) {
                            var n = this.closestPointToPointParameter(t, e),
                              r = i || new ke();
                            return this.delta(r)
                              .multiplyScalar(n)
                              .add(this.start);
                          },
                          applyMatrix4: function(t) {
                            return (
                              this.start.applyMatrix4(t),
                              this.end.applyMatrix4(t),
                              this
                            );
                          },
                          equals: function(t) {
                            return (
                              t.start.equals(this.start) &&
                              t.end.equals(this.end)
                            );
                          }
                        }),
                        Object.assign(qr, {
                          normal: ((Mr = new ke()),
                          function(t, e, i, n) {
                            var r = n || new ke();
                            r.subVectors(i, e),
                              Mr.subVectors(t, e),
                              r.cross(Mr);
                            var a = r.lengthSq();
                            return a > 0
                              ? r.multiplyScalar(1 / Math.sqrt(a))
                              : r.set(0, 0, 0);
                          }),
                          barycoordFromPoint: ((gr = new ke()),
                          (vr = new ke()),
                          (yr = new ke()),
                          function(t, e, i, n, r) {
                            gr.subVectors(n, e),
                              vr.subVectors(i, e),
                              yr.subVectors(t, e);
                            var a = gr.dot(gr),
                              o = gr.dot(vr),
                              s = gr.dot(yr),
                              c = vr.dot(vr),
                              u = vr.dot(yr),
                              l = a * c - o * o,
                              h = r || new ke();
                            if (0 === l) return h.set(-2, -1, -1);
                            var d = 1 / l,
                              p = (c * s - o * u) * d,
                              f = (a * u - o * s) * d;
                            return h.set(1 - p - f, f, p);
                          }),
                          containsPoint: ((mr = new ke()),
                          function(t, e, i, n) {
                            var r = qr.barycoordFromPoint(t, e, i, n, mr);
                            return r.x >= 0 && r.y >= 0 && r.x + r.y <= 1;
                          })
                        }),
                        Object.assign(qr.prototype, {
                          set: function(t, e, i) {
                            return (
                              this.a.copy(t),
                              this.b.copy(e),
                              this.c.copy(i),
                              this
                            );
                          },
                          setFromPointsAndIndices: function(t, e, i, n) {
                            return (
                              this.a.copy(t[e]),
                              this.b.copy(t[i]),
                              this.c.copy(t[n]),
                              this
                            );
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              this.a.copy(t.a),
                              this.b.copy(t.b),
                              this.c.copy(t.c),
                              this
                            );
                          },
                          area: ((br = new ke()),
                          (Tr = new ke()),
                          function() {
                            return (
                              br.subVectors(this.c, this.b),
                              Tr.subVectors(this.a, this.b),
                              0.5 * br.cross(Tr).length()
                            );
                          }),
                          midpoint: function(t) {
                            return (t || new ke())
                              .addVectors(this.a, this.b)
                              .add(this.c)
                              .multiplyScalar(1 / 3);
                          },
                          normal: function(t) {
                            return qr.normal(this.a, this.b, this.c, t);
                          },
                          plane: function(t) {
                            return (t || new dn()).setFromCoplanarPoints(
                              this.a,
                              this.b,
                              this.c
                            );
                          },
                          barycoordFromPoint: function(t, e) {
                            return qr.barycoordFromPoint(
                              t,
                              this.a,
                              this.b,
                              this.c,
                              e
                            );
                          },
                          containsPoint: function(t) {
                            return qr.containsPoint(t, this.a, this.b, this.c);
                          },
                          closestPointToPoint: ((wr = new dn()),
                          (xr = [new Xr(), new Xr(), new Xr()]),
                          (Ar = new ke()),
                          (Er = new ke()),
                          function(t, e) {
                            var i = e || new ke(),
                              n = 1 / 0;
                            if (
                              (wr.setFromCoplanarPoints(this.a, this.b, this.c),
                              wr.projectPoint(t, Ar),
                              !0 === this.containsPoint(Ar))
                            )
                              i.copy(Ar);
                            else {
                              xr[0].set(this.a, this.b),
                                xr[1].set(this.b, this.c),
                                xr[2].set(this.c, this.a);
                              for (var r = 0; r < xr.length; r++) {
                                xr[r].closestPointToPoint(Ar, !0, Er);
                                var a = Ar.distanceToSquared(Er);
                                a < n && ((n = a), i.copy(Er));
                              }
                            }
                            return i;
                          }),
                          equals: function(t) {
                            return (
                              t.a.equals(this.a) &&
                              t.b.equals(this.b) &&
                              t.c.equals(this.c)
                            );
                          }
                        }),
                        (Zr.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: Zr,
                            isMesh: !0,
                            setDrawMode: function(t) {
                              this.drawMode = t;
                            },
                            copy: function(t) {
                              return (
                                Rn.prototype.copy.call(this, t),
                                (this.drawMode = t.drawMode),
                                this
                              );
                            },
                            updateMorphTargets: function() {
                              var t,
                                e,
                                i,
                                n = this.geometry;
                              if (n.isBufferGeometry) {
                                var r = n.morphAttributes,
                                  a = Object.keys(r);
                                if (a.length > 0) {
                                  var o = r[a[0]];
                                  if (void 0 !== o)
                                    for (
                                      this.morphTargetInfluences = [],
                                        this.morphTargetDictionary = {},
                                        t = 0,
                                        e = o.length;
                                      t < e;
                                      t++
                                    )
                                      (i = o[t].name || String(t)),
                                        this.morphTargetInfluences.push(0),
                                        (this.morphTargetDictionary[i] = t);
                                }
                              } else {
                                var s = n.morphTargets;
                                if (void 0 !== s && s.length > 0)
                                  for (
                                    this.morphTargetInfluences = [],
                                      this.morphTargetDictionary = {},
                                      t = 0,
                                      e = s.length;
                                    t < e;
                                    t++
                                  )
                                    (i = s[t].name || String(t)),
                                      this.morphTargetInfluences.push(0),
                                      (this.morphTargetDictionary[i] = t);
                              }
                            },
                            raycast: (function() {
                              var t = new Ue(),
                                e = new Wr(),
                                i = new ln(),
                                n = new ke(),
                                r = new ke(),
                                a = new ke(),
                                o = new ke(),
                                s = new ke(),
                                c = new ke(),
                                u = new he(),
                                l = new he(),
                                h = new he(),
                                d = new ke(),
                                p = new ke(),
                                f = new ke();
                              function m(t, e, i, n, r, a, o) {
                                return (
                                  qr.barycoordFromPoint(t, e, i, n, d),
                                  r.multiplyScalar(d.x),
                                  a.multiplyScalar(d.y),
                                  o.multiplyScalar(d.z),
                                  r.add(a).add(o),
                                  r.clone()
                                );
                              }
                              function y(t, e, i, n, r, a, o, s) {
                                if (
                                  null ===
                                  (e.side === g
                                    ? n.intersectTriangle(o, a, r, !0, s)
                                    : n.intersectTriangle(
                                        r,
                                        a,
                                        o,
                                        e.side !== v,
                                        s
                                      ))
                                )
                                  return null;
                                f.copy(s), f.applyMatrix4(t.matrixWorld);
                                var c = i.ray.origin.distanceTo(f);
                                return c < i.near || c > i.far
                                  ? null
                                  : {
                                      distance: c,
                                      point: f.clone(),
                                      object: t
                                    };
                              }
                              function M(t, e, i, o, s, c, d, f) {
                                n.fromBufferAttribute(o, c),
                                  r.fromBufferAttribute(o, d),
                                  a.fromBufferAttribute(o, f);
                                var g = y(t, t.material, e, i, n, r, a, p);
                                return (
                                  g &&
                                    (s &&
                                      (u.fromBufferAttribute(s, c),
                                      l.fromBufferAttribute(s, d),
                                      h.fromBufferAttribute(s, f),
                                      (g.uv = m(p, n, r, a, u, l, h))),
                                    (g.face = new Bn(
                                      c,
                                      d,
                                      f,
                                      qr.normal(n, r, a)
                                    )),
                                    (g.faceIndex = c)),
                                  g
                                );
                              }
                              return function(d, f) {
                                var g,
                                  v = this.geometry,
                                  w = this.material,
                                  x = this.matrixWorld;
                                if (
                                  void 0 !== w &&
                                  (null === v.boundingSphere &&
                                    v.computeBoundingSphere(),
                                  i.copy(v.boundingSphere),
                                  i.applyMatrix4(x),
                                  !1 !== d.ray.intersectsSphere(i) &&
                                    (t.getInverse(x),
                                    e.copy(d.ray).applyMatrix4(t),
                                    null === v.boundingBox ||
                                      !1 !== e.intersectsBox(v.boundingBox)))
                                )
                                  if (v.isBufferGeometry) {
                                    var A,
                                      E,
                                      b,
                                      T,
                                      L,
                                      N = v.index,
                                      D = v.attributes.position,
                                      C = v.attributes.uv;
                                    if (null !== N)
                                      for (T = 0, L = N.count; T < L; T += 3)
                                        (A = N.getX(T)),
                                          (E = N.getX(T + 1)),
                                          (b = N.getX(T + 2)),
                                          (g = M(this, d, e, D, C, A, E, b)) &&
                                            ((g.faceIndex = Math.floor(T / 3)),
                                            f.push(g));
                                    else
                                      for (T = 0, L = D.count; T < L; T += 3)
                                        (g = M(
                                          this,
                                          d,
                                          e,
                                          D,
                                          C,
                                          (A = T),
                                          (E = T + 1),
                                          (b = T + 2)
                                        )) && ((g.index = A), f.push(g));
                                  } else if (v.isGeometry) {
                                    var S,
                                      I,
                                      _,
                                      j,
                                      O = Array.isArray(w),
                                      z = v.vertices,
                                      R = v.faces,
                                      k = v.faceVertexUvs[0];
                                    k.length > 0 && (j = k);
                                    for (var U = 0, P = R.length; U < P; U++) {
                                      var B = R[U],
                                        F = O ? w[B.materialIndex] : w;
                                      if (void 0 !== F) {
                                        if (
                                          ((S = z[B.a]),
                                          (I = z[B.b]),
                                          (_ = z[B.c]),
                                          !0 === F.morphTargets)
                                        ) {
                                          var G = v.morphTargets,
                                            V = this.morphTargetInfluences;
                                          n.set(0, 0, 0),
                                            r.set(0, 0, 0),
                                            a.set(0, 0, 0);
                                          for (
                                            var Y = 0, Q = G.length;
                                            Y < Q;
                                            Y++
                                          ) {
                                            var H = V[Y];
                                            if (0 !== H) {
                                              var W = G[Y].vertices;
                                              n.addScaledVector(
                                                o.subVectors(W[B.a], S),
                                                H
                                              ),
                                                r.addScaledVector(
                                                  s.subVectors(W[B.b], I),
                                                  H
                                                ),
                                                a.addScaledVector(
                                                  c.subVectors(W[B.c], _),
                                                  H
                                                );
                                            }
                                          }
                                          n.add(S),
                                            r.add(I),
                                            a.add(_),
                                            (S = n),
                                            (I = r),
                                            (_ = a);
                                        }
                                        if (
                                          (g = y(this, F, d, e, S, I, _, p))
                                        ) {
                                          if (j && j[U]) {
                                            var X = j[U];
                                            u.copy(X[0]),
                                              l.copy(X[1]),
                                              h.copy(X[2]),
                                              (g.uv = m(p, S, I, _, u, l, h));
                                          }
                                          (g.face = B),
                                            (g.faceIndex = U),
                                            f.push(g);
                                        }
                                      }
                                    }
                                  }
                              };
                            })(),
                            clone: function() {
                              return new this.constructor(
                                this.geometry,
                                this.material
                              ).copy(this);
                            }
                          }
                        ));
                      var na,
                        ra,
                        aa,
                        oa,
                        sa,
                        ca,
                        ua,
                        la,
                        ha,
                        da,
                        pa,
                        fa,
                        ma,
                        ga,
                        va = 0;
                      function ya(t) {
                        switch (t) {
                          case ee:
                            return ['Linear', '( value )'];
                          case ie:
                            return ['sRGB', '( value )'];
                          case re:
                            return ['RGBE', '( value )'];
                          case ae:
                            return ['RGBM', '( value, 7.0 )'];
                          case oe:
                            return ['RGBM', '( value, 16.0 )'];
                          case se:
                            return ['RGBD', '( value, 256.0 )'];
                          case ne:
                            return [
                              'Gamma',
                              '( value, float( GAMMA_FACTOR ) )'
                            ];
                          default:
                            throw new Error('unsupported encoding: ' + t);
                        }
                      }
                      function Ma(t, e) {
                        var i = ya(e);
                        return (
                          'vec4 ' +
                          t +
                          '( vec4 value ) { return ' +
                          i[0] +
                          'ToLinear' +
                          i[1] +
                          '; }'
                        );
                      }
                      function wa(t) {
                        return '' !== t;
                      }
                      function xa(t, e) {
                        return t
                          .replace(/NUM_DIR_LIGHTS/g, e.numDirLights)
                          .replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights)
                          .replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights)
                          .replace(/NUM_POINT_LIGHTS/g, e.numPointLights)
                          .replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights);
                      }
                      function Aa(t) {
                        return t.replace(
                          /^[ \t]*#include +<([\w\d.]+)>/gm,
                          function(t, e) {
                            var i = _i[e];
                            if (void 0 === i)
                              throw new Error(
                                'Can not resolve #include <' + e + '>'
                              );
                            return Aa(i);
                          }
                        );
                      }
                      function Ea(t) {
                        return t.replace(
                          /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
                          function(t, e, i, n) {
                            for (
                              var r = '', a = parseInt(e);
                              a < parseInt(i);
                              a++
                            )
                              r += n.replace(/\[ i \]/g, '[ ' + a + ' ]');
                            return r;
                          }
                        );
                      }
                      function ba(t, e, i, n, r, a) {
                        var o = t.context,
                          s = n.defines,
                          c = r.vertexShader,
                          u = r.fragmentShader,
                          l = 'SHADOWMAP_TYPE_BASIC';
                        a.shadowMapType === p
                          ? (l = 'SHADOWMAP_TYPE_PCF')
                          : a.shadowMapType === f &&
                            (l = 'SHADOWMAP_TYPE_PCF_SOFT');
                        var h = 'ENVMAP_TYPE_CUBE',
                          d = 'ENVMAP_MODE_REFLECTION',
                          m = 'ENVMAP_BLENDING_MULTIPLY';
                        if (a.envMap) {
                          switch (n.envMap.mapping) {
                            case at:
                            case ot:
                              h = 'ENVMAP_TYPE_CUBE';
                              break;
                            case lt:
                            case ht:
                              h = 'ENVMAP_TYPE_CUBE_UV';
                              break;
                            case st:
                            case ct:
                              h = 'ENVMAP_TYPE_EQUIREC';
                              break;
                            case ut:
                              h = 'ENVMAP_TYPE_SPHERE';
                          }
                          switch (n.envMap.mapping) {
                            case ot:
                            case ct:
                              d = 'ENVMAP_MODE_REFRACTION';
                          }
                          switch (n.combine) {
                            case K:
                              m = 'ENVMAP_BLENDING_MULTIPLY';
                              break;
                            case J:
                              m = 'ENVMAP_BLENDING_MIX';
                              break;
                            case $:
                              m = 'ENVMAP_BLENDING_ADD';
                          }
                        }
                        var g,
                          v,
                          y,
                          M,
                          w,
                          x,
                          A,
                          E,
                          b = t.gammaFactor > 0 ? t.gammaFactor : 1,
                          T = ((g = n.extensions),
                          (v = a),
                          (y = e),
                          [
                            (g = g || {}).derivatives ||
                            v.envMapCubeUV ||
                            v.bumpMap ||
                            v.normalMap ||
                            v.flatShading
                              ? '#extension GL_OES_standard_derivatives : enable'
                              : '',
                            (g.fragDepth || v.logarithmicDepthBuffer) &&
                            y.get('EXT_frag_depth')
                              ? '#extension GL_EXT_frag_depth : enable'
                              : '',
                            g.drawBuffers && y.get('WEBGL_draw_buffers')
                              ? '#extension GL_EXT_draw_buffers : require'
                              : '',
                            (g.shaderTextureLOD || v.envMap) &&
                            y.get('EXT_shader_texture_lod')
                              ? '#extension GL_EXT_shader_texture_lod : enable'
                              : ''
                          ]
                            .filter(wa)
                            .join('\n')),
                          L = (function(t) {
                            var e = [];
                            for (var i in t) {
                              var n = t[i];
                              !1 !== n && e.push('#define ' + i + ' ' + n);
                            }
                            return e.join('\n');
                          })(s),
                          N = o.createProgram();
                        n.isRawShaderMaterial
                          ? ((M = [L, '\n'].filter(wa).join('\n')),
                            (w = [T, L, '\n'].filter(wa).join('\n')))
                          : ((M = [
                              'precision ' + a.precision + ' float;',
                              'precision ' + a.precision + ' int;',
                              '#define SHADER_NAME ' + r.name,
                              L,
                              a.supportsVertexTextures
                                ? '#define VERTEX_TEXTURES'
                                : '',
                              '#define GAMMA_FACTOR ' + b,
                              '#define MAX_BONES ' + a.maxBones,
                              a.useFog && a.fog ? '#define USE_FOG' : '',
                              a.useFog && a.fogExp ? '#define FOG_EXP2' : '',
                              a.map ? '#define USE_MAP' : '',
                              a.envMap ? '#define USE_ENVMAP' : '',
                              a.envMap ? '#define ' + d : '',
                              a.lightMap ? '#define USE_LIGHTMAP' : '',
                              a.aoMap ? '#define USE_AOMAP' : '',
                              a.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                              a.bumpMap ? '#define USE_BUMPMAP' : '',
                              a.normalMap ? '#define USE_NORMALMAP' : '',
                              a.displacementMap && a.supportsVertexTextures
                                ? '#define USE_DISPLACEMENTMAP'
                                : '',
                              a.specularMap ? '#define USE_SPECULARMAP' : '',
                              a.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                              a.metalnessMap ? '#define USE_METALNESSMAP' : '',
                              a.alphaMap ? '#define USE_ALPHAMAP' : '',
                              a.vertexColors ? '#define USE_COLOR' : '',
                              a.flatShading ? '#define FLAT_SHADED' : '',
                              a.skinning ? '#define USE_SKINNING' : '',
                              a.useVertexTexture ? '#define BONE_TEXTURE' : '',
                              a.morphTargets ? '#define USE_MORPHTARGETS' : '',
                              a.morphNormals && !1 === a.flatShading
                                ? '#define USE_MORPHNORMALS'
                                : '',
                              a.doubleSided ? '#define DOUBLE_SIDED' : '',
                              a.flipSided ? '#define FLIP_SIDED' : '',
                              '#define NUM_CLIPPING_PLANES ' +
                                a.numClippingPlanes,
                              a.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                              a.shadowMapEnabled ? '#define ' + l : '',
                              a.sizeAttenuation
                                ? '#define USE_SIZEATTENUATION'
                                : '',
                              a.logarithmicDepthBuffer
                                ? '#define USE_LOGDEPTHBUF'
                                : '',
                              a.logarithmicDepthBuffer &&
                              e.get('EXT_frag_depth')
                                ? '#define USE_LOGDEPTHBUF_EXT'
                                : '',
                              'uniform mat4 modelMatrix;',
                              'uniform mat4 modelViewMatrix;',
                              'uniform mat4 projectionMatrix;',
                              'uniform mat4 viewMatrix;',
                              'uniform mat3 normalMatrix;',
                              'uniform vec3 cameraPosition;',
                              'attribute vec3 position;',
                              'attribute vec3 normal;',
                              'attribute vec2 uv;',
                              '#ifdef USE_COLOR',
                              '\tattribute vec3 color;',
                              '#endif',
                              '#ifdef USE_MORPHTARGETS',
                              '\tattribute vec3 morphTarget0;',
                              '\tattribute vec3 morphTarget1;',
                              '\tattribute vec3 morphTarget2;',
                              '\tattribute vec3 morphTarget3;',
                              '\t#ifdef USE_MORPHNORMALS',
                              '\t\tattribute vec3 morphNormal0;',
                              '\t\tattribute vec3 morphNormal1;',
                              '\t\tattribute vec3 morphNormal2;',
                              '\t\tattribute vec3 morphNormal3;',
                              '\t#else',
                              '\t\tattribute vec3 morphTarget4;',
                              '\t\tattribute vec3 morphTarget5;',
                              '\t\tattribute vec3 morphTarget6;',
                              '\t\tattribute vec3 morphTarget7;',
                              '\t#endif',
                              '#endif',
                              '#ifdef USE_SKINNING',
                              '\tattribute vec4 skinIndex;',
                              '\tattribute vec4 skinWeight;',
                              '#endif',
                              '\n'
                            ]
                              .filter(wa)
                              .join('\n')),
                            (w = [
                              T,
                              'precision ' + a.precision + ' float;',
                              'precision ' + a.precision + ' int;',
                              '#define SHADER_NAME ' + r.name,
                              L,
                              a.alphaTest
                                ? '#define ALPHATEST ' + a.alphaTest
                                : '',
                              '#define GAMMA_FACTOR ' + b,
                              a.useFog && a.fog ? '#define USE_FOG' : '',
                              a.useFog && a.fogExp ? '#define FOG_EXP2' : '',
                              a.map ? '#define USE_MAP' : '',
                              a.envMap ? '#define USE_ENVMAP' : '',
                              a.envMap ? '#define ' + h : '',
                              a.envMap ? '#define ' + d : '',
                              a.envMap ? '#define ' + m : '',
                              a.lightMap ? '#define USE_LIGHTMAP' : '',
                              a.aoMap ? '#define USE_AOMAP' : '',
                              a.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                              a.bumpMap ? '#define USE_BUMPMAP' : '',
                              a.normalMap ? '#define USE_NORMALMAP' : '',
                              a.specularMap ? '#define USE_SPECULARMAP' : '',
                              a.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                              a.metalnessMap ? '#define USE_METALNESSMAP' : '',
                              a.alphaMap ? '#define USE_ALPHAMAP' : '',
                              a.vertexColors ? '#define USE_COLOR' : '',
                              a.gradientMap ? '#define USE_GRADIENTMAP' : '',
                              a.flatShading ? '#define FLAT_SHADED' : '',
                              a.doubleSided ? '#define DOUBLE_SIDED' : '',
                              a.flipSided ? '#define FLIP_SIDED' : '',
                              '#define NUM_CLIPPING_PLANES ' +
                                a.numClippingPlanes,
                              '#define UNION_CLIPPING_PLANES ' +
                                (a.numClippingPlanes - a.numClipIntersection),
                              a.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                              a.shadowMapEnabled ? '#define ' + l : '',
                              a.premultipliedAlpha
                                ? '#define PREMULTIPLIED_ALPHA'
                                : '',
                              a.physicallyCorrectLights
                                ? '#define PHYSICALLY_CORRECT_LIGHTS'
                                : '',
                              a.logarithmicDepthBuffer
                                ? '#define USE_LOGDEPTHBUF'
                                : '',
                              a.logarithmicDepthBuffer &&
                              e.get('EXT_frag_depth')
                                ? '#define USE_LOGDEPTHBUF_EXT'
                                : '',
                              a.envMap && e.get('EXT_shader_texture_lod')
                                ? '#define TEXTURE_LOD_EXT'
                                : '',
                              'uniform mat4 viewMatrix;',
                              'uniform vec3 cameraPosition;',
                              a.toneMapping !== tt
                                ? '#define TONE_MAPPING'
                                : '',
                              a.toneMapping !== tt
                                ? _i.tonemapping_pars_fragment
                                : '',
                              a.toneMapping !== tt
                                ? (function(t, e) {
                                    var i;
                                    switch (e) {
                                      case et:
                                        i = 'Linear';
                                        break;
                                      case it:
                                        i = 'Reinhard';
                                        break;
                                      case nt:
                                        i = 'Uncharted2';
                                        break;
                                      case rt:
                                        i = 'OptimizedCineon';
                                        break;
                                      default:
                                        throw new Error(
                                          'unsupported toneMapping: ' + e
                                        );
                                    }
                                    return (
                                      'vec3 ' +
                                      t +
                                      '( vec3 color ) { return ' +
                                      i +
                                      'ToneMapping( color ); }'
                                    );
                                  })('toneMapping', a.toneMapping)
                                : '',
                              a.dithering ? '#define DITHERING' : '',
                              a.outputEncoding ||
                              a.mapEncoding ||
                              a.envMapEncoding ||
                              a.emissiveMapEncoding
                                ? _i.encodings_pars_fragment
                                : '',
                              a.mapEncoding
                                ? Ma('mapTexelToLinear', a.mapEncoding)
                                : '',
                              a.envMapEncoding
                                ? Ma('envMapTexelToLinear', a.envMapEncoding)
                                : '',
                              a.emissiveMapEncoding
                                ? Ma(
                                    'emissiveMapTexelToLinear',
                                    a.emissiveMapEncoding
                                  )
                                : '',
                              a.outputEncoding
                                ? ((x = 'linearToOutputTexel'),
                                  (A = a.outputEncoding),
                                  (E = ya(A)),
                                  'vec4 ' +
                                    x +
                                    '( vec4 value ) { return LinearTo' +
                                    E[0] +
                                    E[1] +
                                    '; }')
                                : '',
                              a.depthPacking
                                ? '#define DEPTH_PACKING ' + n.depthPacking
                                : '',
                              '\n'
                            ]
                              .filter(wa)
                              .join('\n'))),
                          (c = xa((c = Aa(c)), a)),
                          (u = xa((u = Aa(u)), a)),
                          n.isShaderMaterial || ((c = Ea(c)), (u = Ea(u)));
                        var D = M + c,
                          C = w + u,
                          S = ia(o, o.VERTEX_SHADER, D),
                          I = ia(o, o.FRAGMENT_SHADER, C);
                        o.attachShader(N, S),
                          o.attachShader(N, I),
                          void 0 !== n.index0AttributeName
                            ? o.bindAttribLocation(N, 0, n.index0AttributeName)
                            : !0 === a.morphTargets &&
                              o.bindAttribLocation(N, 0, 'position'),
                          o.linkProgram(N);
                        var _,
                          j,
                          O = o.getProgramInfoLog(N),
                          z = o.getShaderInfoLog(S),
                          R = o.getShaderInfoLog(I),
                          k = !0,
                          U = !0;
                        return (
                          !1 === o.getProgramParameter(N, o.LINK_STATUS)
                            ? (k = !1)
                            : '' !== O || ('' !== z && '' !== R) || (U = !1),
                          U &&
                            (this.diagnostics = {
                              runnable: k,
                              material: n,
                              programLog: O,
                              vertexShader: { log: z, prefix: M },
                              fragmentShader: { log: R, prefix: w }
                            }),
                          o.deleteShader(S),
                          o.deleteShader(I),
                          (this.getUniforms = function() {
                            return void 0 === _ && (_ = new Ti(o, N, t)), _;
                          }),
                          (this.getAttributes = function() {
                            return (
                              void 0 === j &&
                                (j = (function(t, e, i) {
                                  for (
                                    var n = {},
                                      r = t.getProgramParameter(
                                        e,
                                        t.ACTIVE_ATTRIBUTES
                                      ),
                                      a = 0;
                                    a < r;
                                    a++
                                  ) {
                                    var o = t.getActiveAttrib(e, a).name;
                                    n[o] = t.getAttribLocation(e, o);
                                  }
                                  return n;
                                })(o, N)),
                              j
                            );
                          }),
                          (this.destroy = function() {
                            o.deleteProgram(N), (this.program = void 0);
                          }),
                          Object.defineProperties(this, {
                            uniforms: {
                              get: function() {
                                return this.getUniforms();
                              }
                            },
                            attributes: {
                              get: function() {
                                return this.getAttributes();
                              }
                            }
                          }),
                          (this.id = va++),
                          (this.code = i),
                          (this.usedTimes = 1),
                          (this.program = N),
                          (this.vertexShader = S),
                          (this.fragmentShader = I),
                          this
                        );
                      }
                      function Ta(t, e, i) {
                        var n = [],
                          r = {
                            MeshDepthMaterial: 'depth',
                            MeshDistanceMaterial: 'distanceRGBA',
                            MeshNormalMaterial: 'normal',
                            MeshBasicMaterial: 'basic',
                            MeshLambertMaterial: 'lambert',
                            MeshPhongMaterial: 'phong',
                            MeshToonMaterial: 'phong',
                            MeshStandardMaterial: 'physical',
                            MeshPhysicalMaterial: 'physical',
                            LineBasicMaterial: 'basic',
                            LineDashedMaterial: 'dashed',
                            PointsMaterial: 'points',
                            ShadowMaterial: 'shadow'
                          },
                          a = [
                            'precision',
                            'supportsVertexTextures',
                            'map',
                            'mapEncoding',
                            'envMap',
                            'envMapMode',
                            'envMapEncoding',
                            'lightMap',
                            'aoMap',
                            'emissiveMap',
                            'emissiveMapEncoding',
                            'bumpMap',
                            'normalMap',
                            'displacementMap',
                            'specularMap',
                            'roughnessMap',
                            'metalnessMap',
                            'gradientMap',
                            'alphaMap',
                            'combine',
                            'vertexColors',
                            'fog',
                            'useFog',
                            'fogExp',
                            'flatShading',
                            'sizeAttenuation',
                            'logarithmicDepthBuffer',
                            'skinning',
                            'maxBones',
                            'useVertexTexture',
                            'morphTargets',
                            'morphNormals',
                            'maxMorphTargets',
                            'maxMorphNormals',
                            'premultipliedAlpha',
                            'numDirLights',
                            'numPointLights',
                            'numSpotLights',
                            'numHemiLights',
                            'numRectAreaLights',
                            'shadowMapEnabled',
                            'shadowMapType',
                            'toneMapping',
                            'physicallyCorrectLights',
                            'alphaTest',
                            'doubleSided',
                            'flipSided',
                            'numClippingPlanes',
                            'numClipIntersection',
                            'depthPacking',
                            'dithering'
                          ];
                        function o(t, e) {
                          var i;
                          return (
                            t
                              ? t.isTexture
                                ? (i = t.encoding)
                                : t.isWebGLRenderTarget &&
                                  (i = t.texture.encoding)
                              : (i = ee),
                            i === ee && e && (i = ne),
                            i
                          );
                        }
                        (this.getParameters = function(e, n, a, s, c, u, l) {
                          var h = r[e.type],
                            d = l.isSkinnedMesh
                              ? (function(t) {
                                  var e = t.skeleton.bones;
                                  if (i.floatVertexTextures) return 1024;
                                  var n = i.maxVertexUniforms,
                                    r = Math.floor((n - 20) / 4),
                                    a = Math.min(r, e.length);
                                  return a < e.length ? 0 : a;
                                })(l)
                              : 0,
                            p = i.precision;
                          null !== e.precision &&
                            ((p = i.getMaxPrecision(e.precision)), e.precision);
                          var f = t.getRenderTarget();
                          return {
                            shaderID: h,
                            precision: p,
                            supportsVertexTextures: i.vertexTextures,
                            outputEncoding: o(
                              f ? f.texture : null,
                              t.gammaOutput
                            ),
                            map: !!e.map,
                            mapEncoding: o(e.map, t.gammaInput),
                            envMap: !!e.envMap,
                            envMapMode: e.envMap && e.envMap.mapping,
                            envMapEncoding: o(e.envMap, t.gammaInput),
                            envMapCubeUV:
                              !!e.envMap &&
                              (e.envMap.mapping === lt ||
                                e.envMap.mapping === ht),
                            lightMap: !!e.lightMap,
                            aoMap: !!e.aoMap,
                            emissiveMap: !!e.emissiveMap,
                            emissiveMapEncoding: o(e.emissiveMap, t.gammaInput),
                            bumpMap: !!e.bumpMap,
                            normalMap: !!e.normalMap,
                            displacementMap: !!e.displacementMap,
                            roughnessMap: !!e.roughnessMap,
                            metalnessMap: !!e.metalnessMap,
                            specularMap: !!e.specularMap,
                            alphaMap: !!e.alphaMap,
                            gradientMap: !!e.gradientMap,
                            combine: e.combine,
                            vertexColors: e.vertexColors,
                            fog: !!s,
                            useFog: e.fog,
                            fogExp: s && s.isFogExp2,
                            flatShading: e.flatShading,
                            sizeAttenuation: e.sizeAttenuation,
                            logarithmicDepthBuffer: i.logarithmicDepthBuffer,
                            skinning: e.skinning && d > 0,
                            maxBones: d,
                            useVertexTexture: i.floatVertexTextures,
                            morphTargets: e.morphTargets,
                            morphNormals: e.morphNormals,
                            maxMorphTargets: t.maxMorphTargets,
                            maxMorphNormals: t.maxMorphNormals,
                            numDirLights: n.directional.length,
                            numPointLights: n.point.length,
                            numSpotLights: n.spot.length,
                            numRectAreaLights: n.rectArea.length,
                            numHemiLights: n.hemi.length,
                            numClippingPlanes: c,
                            numClipIntersection: u,
                            dithering: e.dithering,
                            shadowMapEnabled:
                              t.shadowMap.enabled &&
                              l.receiveShadow &&
                              a.length > 0,
                            shadowMapType: t.shadowMap.type,
                            toneMapping: t.toneMapping,
                            physicallyCorrectLights: t.physicallyCorrectLights,
                            premultipliedAlpha: e.premultipliedAlpha,
                            alphaTest: e.alphaTest,
                            doubleSided: e.side === v,
                            flipSided: e.side === g,
                            depthPacking:
                              void 0 !== e.depthPacking && e.depthPacking
                          };
                        }),
                          (this.getProgramCode = function(e, i) {
                            var n = [];
                            if (
                              (i.shaderID
                                ? n.push(i.shaderID)
                                : (n.push(e.fragmentShader),
                                  n.push(e.vertexShader)),
                              void 0 !== e.defines)
                            )
                              for (var r in e.defines)
                                n.push(r), n.push(e.defines[r]);
                            for (var o = 0; o < a.length; o++) n.push(i[a[o]]);
                            return (
                              n.push(e.onBeforeCompile.toString()),
                              n.push(t.gammaOutput),
                              n.join()
                            );
                          }),
                          (this.acquireProgram = function(i, r, a, o) {
                            for (var s, c = 0, u = n.length; c < u; c++) {
                              var l = n[c];
                              if (l.code === o) {
                                ++(s = l).usedTimes;
                                break;
                              }
                            }
                            return (
                              void 0 === s &&
                                ((s = new ba(t, e, o, i, r, a)), n.push(s)),
                              s
                            );
                          }),
                          (this.releaseProgram = function(t) {
                            if (0 == --t.usedTimes) {
                              var e = n.indexOf(t);
                              (n[e] = n[n.length - 1]), n.pop(), t.destroy();
                            }
                          }),
                          (this.programs = n);
                      }
                      function La(t, e, i, n, r, a, o) {
                        var s =
                          'undefined' != typeof WebGL2RenderingContext &&
                          t instanceof WebGL2RenderingContext;
                        function c(t, e) {
                          if (t.width > e || t.height > e) {
                            var i = e / Math.max(t.width, t.height),
                              n = document.createElementNS(
                                'http://www.w3.org/1999/xhtml',
                                'canvas'
                              );
                            return (
                              (n.width = Math.floor(t.width * i)),
                              (n.height = Math.floor(t.height * i)),
                              n
                                .getContext('2d')
                                .drawImage(
                                  t,
                                  0,
                                  0,
                                  t.width,
                                  t.height,
                                  0,
                                  0,
                                  n.width,
                                  n.height
                                ),
                              n
                            );
                          }
                          return t;
                        }
                        function u(t) {
                          return (
                            le.isPowerOfTwo(t.width) &&
                            le.isPowerOfTwo(t.height)
                          );
                        }
                        function l(t, e) {
                          return (
                            t.generateMipmaps &&
                            e &&
                            t.minFilter !== mt &&
                            t.minFilter !== yt
                          );
                        }
                        function h(e) {
                          return e === mt || e === gt || e === vt
                            ? t.NEAREST
                            : t.LINEAR;
                        }
                        function d(e) {
                          var i = e.target;
                          i.removeEventListener('dispose', d),
                            (function(e) {
                              var i = n.get(e);
                              if (e.image && i.__image__webglTextureCube)
                                t.deleteTexture(i.__image__webglTextureCube);
                              else {
                                if (void 0 === i.__webglInit) return;
                                t.deleteTexture(i.__webglTexture);
                              }
                              n.remove(e);
                            })(i),
                            o.textures--;
                        }
                        function p(e) {
                          var i = e.target;
                          i.removeEventListener('dispose', p),
                            (function(e) {
                              var i = n.get(e),
                                r = n.get(e.texture);
                              if (!e) return;
                              void 0 !== r.__webglTexture &&
                                t.deleteTexture(r.__webglTexture);
                              e.depthTexture && e.depthTexture.dispose();
                              if (e.isWebGLRenderTargetCube)
                                for (var a = 0; a < 6; a++)
                                  t.deleteFramebuffer(i.__webglFramebuffer[a]),
                                    i.__webglDepthbuffer &&
                                      t.deleteRenderbuffer(
                                        i.__webglDepthbuffer[a]
                                      );
                              else
                                t.deleteFramebuffer(i.__webglFramebuffer),
                                  i.__webglDepthbuffer &&
                                    t.deleteRenderbuffer(i.__webglDepthbuffer);
                              n.remove(e.texture), n.remove(e);
                            })(i),
                            o.textures--;
                        }
                        function f(e, h) {
                          var p = n.get(e);
                          if (e.version > 0 && p.__version !== e.version) {
                            var f = e.image;
                            if (void 0 === f);
                            else if (!1 !== f.complete)
                              return void (function(e, n, h) {
                                void 0 === e.__webglInit &&
                                  ((e.__webglInit = !0),
                                  n.addEventListener('dispose', d),
                                  (e.__webglTexture = t.createTexture()),
                                  o.textures++);
                                i.activeTexture(t.TEXTURE0 + h),
                                  i.bindTexture(t.TEXTURE_2D, e.__webglTexture),
                                  t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, n.flipY),
                                  t.pixelStorei(
                                    t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                                    n.premultiplyAlpha
                                  ),
                                  t.pixelStorei(
                                    t.UNPACK_ALIGNMENT,
                                    n.unpackAlignment
                                  );
                                var p = c(n.image, r.maxTextureSize);
                                (f = n),
                                  (f.wrapS !== pt ||
                                    f.wrapT !== pt ||
                                    (f.minFilter !== mt &&
                                      f.minFilter !== yt)) &&
                                    !1 === u(p) &&
                                    (p = (function(t) {
                                      if (
                                        t instanceof HTMLImageElement ||
                                        t instanceof HTMLCanvasElement
                                      ) {
                                        var e = document.createElementNS(
                                          'http://www.w3.org/1999/xhtml',
                                          'canvas'
                                        );
                                        return (
                                          (e.width = le.nearestPowerOfTwo(
                                            t.width
                                          )),
                                          (e.height = le.nearestPowerOfTwo(
                                            t.height
                                          )),
                                          e
                                            .getContext('2d')
                                            .drawImage(
                                              t,
                                              0,
                                              0,
                                              e.width,
                                              e.height
                                            ),
                                          e
                                        );
                                      }
                                      return t;
                                    })(p));
                                var f;
                                var g = u(p),
                                  v = a.convert(n.format),
                                  y = a.convert(n.type);
                                m(t.TEXTURE_2D, n, g);
                                var M,
                                  w = n.mipmaps;
                                if (n.isDepthTexture) {
                                  var x = t.DEPTH_COMPONENT;
                                  if (n.type === Nt) {
                                    if (!s)
                                      throw new Error(
                                        'Float Depth Texture only supported in WebGL2.0'
                                      );
                                    x = t.DEPTH_COMPONENT32F;
                                  } else s && (x = t.DEPTH_COMPONENT16);
                                  n.format === Pt &&
                                    x === t.DEPTH_COMPONENT &&
                                    n.type !== bt &&
                                    n.type !== Lt &&
                                    ((n.type = bt), (y = a.convert(n.type))),
                                    n.format === Bt &&
                                      ((x = t.DEPTH_STENCIL),
                                      n.type !== _t &&
                                        ((n.type = _t),
                                        (y = a.convert(n.type)))),
                                    i.texImage2D(
                                      t.TEXTURE_2D,
                                      0,
                                      x,
                                      p.width,
                                      p.height,
                                      0,
                                      v,
                                      y,
                                      null
                                    );
                                } else if (n.isDataTexture)
                                  if (w.length > 0 && g) {
                                    for (var A = 0, E = w.length; A < E; A++)
                                      (M = w[A]),
                                        i.texImage2D(
                                          t.TEXTURE_2D,
                                          A,
                                          v,
                                          M.width,
                                          M.height,
                                          0,
                                          v,
                                          y,
                                          M.data
                                        );
                                    n.generateMipmaps = !1;
                                  } else
                                    i.texImage2D(
                                      t.TEXTURE_2D,
                                      0,
                                      v,
                                      p.width,
                                      p.height,
                                      0,
                                      v,
                                      y,
                                      p.data
                                    );
                                else if (n.isCompressedTexture)
                                  for (var A = 0, E = w.length; A < E; A++)
                                    (M = w[A]),
                                      n.format !== zt && n.format !== Ot
                                        ? i
                                            .getCompressedTextureFormats()
                                            .indexOf(v) > -1 &&
                                          i.compressedTexImage2D(
                                            t.TEXTURE_2D,
                                            A,
                                            v,
                                            M.width,
                                            M.height,
                                            0,
                                            M.data
                                          )
                                        : i.texImage2D(
                                            t.TEXTURE_2D,
                                            A,
                                            v,
                                            M.width,
                                            M.height,
                                            0,
                                            v,
                                            y,
                                            M.data
                                          );
                                else if (w.length > 0 && g) {
                                  for (var A = 0, E = w.length; A < E; A++)
                                    (M = w[A]),
                                      i.texImage2D(t.TEXTURE_2D, A, v, v, y, M);
                                  n.generateMipmaps = !1;
                                } else
                                  i.texImage2D(t.TEXTURE_2D, 0, v, v, y, p);
                                l(n, g) && t.generateMipmap(t.TEXTURE_2D);
                                (e.__version = n.version),
                                  n.onUpdate && n.onUpdate(n);
                              })(p, e, h);
                          }
                          i.activeTexture(t.TEXTURE0 + h),
                            i.bindTexture(t.TEXTURE_2D, p.__webglTexture);
                        }
                        function m(i, o, s) {
                          var c;
                          if (
                            (s
                              ? (t.texParameteri(
                                  i,
                                  t.TEXTURE_WRAP_S,
                                  a.convert(o.wrapS)
                                ),
                                t.texParameteri(
                                  i,
                                  t.TEXTURE_WRAP_T,
                                  a.convert(o.wrapT)
                                ),
                                t.texParameteri(
                                  i,
                                  t.TEXTURE_MAG_FILTER,
                                  a.convert(o.magFilter)
                                ),
                                t.texParameteri(
                                  i,
                                  t.TEXTURE_MIN_FILTER,
                                  a.convert(o.minFilter)
                                ))
                              : (t.texParameteri(
                                  i,
                                  t.TEXTURE_WRAP_S,
                                  t.CLAMP_TO_EDGE
                                ),
                                t.texParameteri(
                                  i,
                                  t.TEXTURE_WRAP_T,
                                  t.CLAMP_TO_EDGE
                                ),
                                o.wrapS !== pt || o.wrapT,
                                t.texParameteri(
                                  i,
                                  t.TEXTURE_MAG_FILTER,
                                  h(o.magFilter)
                                ),
                                t.texParameteri(
                                  i,
                                  t.TEXTURE_MIN_FILTER,
                                  h(o.minFilter)
                                ),
                                o.minFilter !== mt && o.minFilter),
                            (c = e.get('EXT_texture_filter_anisotropic')))
                          ) {
                            if (
                              o.type === Nt &&
                              null === e.get('OES_texture_float_linear')
                            )
                              return;
                            if (
                              o.type === Dt &&
                              null === e.get('OES_texture_half_float_linear')
                            )
                              return;
                            (o.anisotropy > 1 ||
                              n.get(o).__currentAnisotropy) &&
                              (t.texParameterf(
                                i,
                                c.TEXTURE_MAX_ANISOTROPY_EXT,
                                Math.min(o.anisotropy, r.getMaxAnisotropy())
                              ),
                              (n.get(o).__currentAnisotropy = o.anisotropy));
                          }
                        }
                        function g(e, r, o, s) {
                          var c = a.convert(r.texture.format),
                            u = a.convert(r.texture.type);
                          i.texImage2D(
                            s,
                            0,
                            c,
                            r.width,
                            r.height,
                            0,
                            c,
                            u,
                            null
                          ),
                            t.bindFramebuffer(t.FRAMEBUFFER, e),
                            t.framebufferTexture2D(
                              t.FRAMEBUFFER,
                              o,
                              s,
                              n.get(r.texture).__webglTexture,
                              0
                            ),
                            t.bindFramebuffer(t.FRAMEBUFFER, null);
                        }
                        function v(e, i) {
                          t.bindRenderbuffer(t.RENDERBUFFER, e),
                            i.depthBuffer && !i.stencilBuffer
                              ? (t.renderbufferStorage(
                                  t.RENDERBUFFER,
                                  t.DEPTH_COMPONENT16,
                                  i.width,
                                  i.height
                                ),
                                t.framebufferRenderbuffer(
                                  t.FRAMEBUFFER,
                                  t.DEPTH_ATTACHMENT,
                                  t.RENDERBUFFER,
                                  e
                                ))
                              : i.depthBuffer && i.stencilBuffer
                                ? (t.renderbufferStorage(
                                    t.RENDERBUFFER,
                                    t.DEPTH_STENCIL,
                                    i.width,
                                    i.height
                                  ),
                                  t.framebufferRenderbuffer(
                                    t.FRAMEBUFFER,
                                    t.DEPTH_STENCIL_ATTACHMENT,
                                    t.RENDERBUFFER,
                                    e
                                  ))
                                : t.renderbufferStorage(
                                    t.RENDERBUFFER,
                                    t.RGBA4,
                                    i.width,
                                    i.height
                                  ),
                            t.bindRenderbuffer(t.RENDERBUFFER, null);
                        }
                        function y(e) {
                          var i = n.get(e),
                            r = !0 === e.isWebGLRenderTargetCube;
                          if (e.depthTexture) {
                            if (r)
                              throw new Error(
                                'target.depthTexture not supported in Cube render targets'
                              );
                            !(function(e, i) {
                              if (i && i.isWebGLRenderTargetCube)
                                throw new Error(
                                  'Depth Texture with cube render targets is not supported'
                                );
                              if (
                                (t.bindFramebuffer(t.FRAMEBUFFER, e),
                                !i.depthTexture ||
                                  !i.depthTexture.isDepthTexture)
                              )
                                throw new Error(
                                  'renderTarget.depthTexture must be an instance of THREE.DepthTexture'
                                );
                              (n.get(i.depthTexture).__webglTexture &&
                                i.depthTexture.image.width === i.width &&
                                i.depthTexture.image.height === i.height) ||
                                ((i.depthTexture.image.width = i.width),
                                (i.depthTexture.image.height = i.height),
                                (i.depthTexture.needsUpdate = !0)),
                                f(i.depthTexture, 0);
                              var r = n.get(i.depthTexture).__webglTexture;
                              if (i.depthTexture.format === Pt)
                                t.framebufferTexture2D(
                                  t.FRAMEBUFFER,
                                  t.DEPTH_ATTACHMENT,
                                  t.TEXTURE_2D,
                                  r,
                                  0
                                );
                              else {
                                if (i.depthTexture.format !== Bt)
                                  throw new Error(
                                    'Unknown depthTexture format'
                                  );
                                t.framebufferTexture2D(
                                  t.FRAMEBUFFER,
                                  t.DEPTH_STENCIL_ATTACHMENT,
                                  t.TEXTURE_2D,
                                  r,
                                  0
                                );
                              }
                            })(i.__webglFramebuffer, e);
                          } else if (r) {
                            i.__webglDepthbuffer = [];
                            for (var a = 0; a < 6; a++)
                              t.bindFramebuffer(
                                t.FRAMEBUFFER,
                                i.__webglFramebuffer[a]
                              ),
                                (i.__webglDepthbuffer[
                                  a
                                ] = t.createRenderbuffer()),
                                v(i.__webglDepthbuffer[a], e);
                          } else
                            t.bindFramebuffer(
                              t.FRAMEBUFFER,
                              i.__webglFramebuffer
                            ),
                              (i.__webglDepthbuffer = t.createRenderbuffer()),
                              v(i.__webglDepthbuffer, e);
                          t.bindFramebuffer(t.FRAMEBUFFER, null);
                        }
                        (this.setTexture2D = f),
                          (this.setTextureCube = function(e, s) {
                            var h = n.get(e);
                            if (6 === e.image.length)
                              if (e.version > 0 && h.__version !== e.version) {
                                h.__image__webglTextureCube ||
                                  (e.addEventListener('dispose', d),
                                  (h.__image__webglTextureCube = t.createTexture()),
                                  o.textures++),
                                  i.activeTexture(t.TEXTURE0 + s),
                                  i.bindTexture(
                                    t.TEXTURE_CUBE_MAP,
                                    h.__image__webglTextureCube
                                  ),
                                  t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, e.flipY);
                                for (
                                  var p = e && e.isCompressedTexture,
                                    f = e.image[0] && e.image[0].isDataTexture,
                                    g = [],
                                    v = 0;
                                  v < 6;
                                  v++
                                )
                                  g[v] =
                                    p || f
                                      ? f ? e.image[v].image : e.image[v]
                                      : c(e.image[v], r.maxCubemapSize);
                                var y = u(g[0]),
                                  M = a.convert(e.format),
                                  w = a.convert(e.type);
                                for (
                                  m(t.TEXTURE_CUBE_MAP, e, y), v = 0;
                                  v < 6;
                                  v++
                                )
                                  if (p)
                                    for (
                                      var x,
                                        A = g[v].mipmaps,
                                        E = 0,
                                        b = A.length;
                                      E < b;
                                      E++
                                    )
                                      (x = A[E]),
                                        e.format !== zt && e.format !== Ot
                                          ? i
                                              .getCompressedTextureFormats()
                                              .indexOf(M) > -1 &&
                                            i.compressedTexImage2D(
                                              t.TEXTURE_CUBE_MAP_POSITIVE_X + v,
                                              E,
                                              M,
                                              x.width,
                                              x.height,
                                              0,
                                              x.data
                                            )
                                          : i.texImage2D(
                                              t.TEXTURE_CUBE_MAP_POSITIVE_X + v,
                                              E,
                                              M,
                                              x.width,
                                              x.height,
                                              0,
                                              M,
                                              w,
                                              x.data
                                            );
                                  else
                                    f
                                      ? i.texImage2D(
                                          t.TEXTURE_CUBE_MAP_POSITIVE_X + v,
                                          0,
                                          M,
                                          g[v].width,
                                          g[v].height,
                                          0,
                                          M,
                                          w,
                                          g[v].data
                                        )
                                      : i.texImage2D(
                                          t.TEXTURE_CUBE_MAP_POSITIVE_X + v,
                                          0,
                                          M,
                                          M,
                                          w,
                                          g[v]
                                        );
                                l(e, y) && t.generateMipmap(t.TEXTURE_CUBE_MAP),
                                  (h.__version = e.version),
                                  e.onUpdate && e.onUpdate(e);
                              } else
                                i.activeTexture(t.TEXTURE0 + s),
                                  i.bindTexture(
                                    t.TEXTURE_CUBE_MAP,
                                    h.__image__webglTextureCube
                                  );
                          }),
                          (this.setTextureCubeDynamic = function(e, r) {
                            i.activeTexture(t.TEXTURE0 + r),
                              i.bindTexture(
                                t.TEXTURE_CUBE_MAP,
                                n.get(e).__webglTexture
                              );
                          }),
                          (this.setupRenderTarget = function(e) {
                            var r = n.get(e),
                              a = n.get(e.texture);
                            e.addEventListener('dispose', p),
                              (a.__webglTexture = t.createTexture()),
                              o.textures++;
                            var s = !0 === e.isWebGLRenderTargetCube,
                              c = u(e);
                            if (s) {
                              r.__webglFramebuffer = [];
                              for (var h = 0; h < 6; h++)
                                r.__webglFramebuffer[h] = t.createFramebuffer();
                            } else r.__webglFramebuffer = t.createFramebuffer();
                            if (s) {
                              for (
                                i.bindTexture(
                                  t.TEXTURE_CUBE_MAP,
                                  a.__webglTexture
                                ),
                                  m(t.TEXTURE_CUBE_MAP, e.texture, c),
                                  h = 0;
                                h < 6;
                                h++
                              )
                                g(
                                  r.__webglFramebuffer[h],
                                  e,
                                  t.COLOR_ATTACHMENT0,
                                  t.TEXTURE_CUBE_MAP_POSITIVE_X + h
                                );
                              l(e.texture, c) &&
                                t.generateMipmap(t.TEXTURE_CUBE_MAP),
                                i.bindTexture(t.TEXTURE_CUBE_MAP, null);
                            } else
                              i.bindTexture(t.TEXTURE_2D, a.__webglTexture),
                                m(t.TEXTURE_2D, e.texture, c),
                                g(
                                  r.__webglFramebuffer,
                                  e,
                                  t.COLOR_ATTACHMENT0,
                                  t.TEXTURE_2D
                                ),
                                l(e.texture, c) &&
                                  t.generateMipmap(t.TEXTURE_2D),
                                i.bindTexture(t.TEXTURE_2D, null);
                            e.depthBuffer && y(e);
                          }),
                          (this.updateRenderTargetMipmap = function(e) {
                            var r = e.texture;
                            if (l(r, u(e))) {
                              var a = e.isWebGLRenderTargetCube
                                  ? t.TEXTURE_CUBE_MAP
                                  : t.TEXTURE_2D,
                                o = n.get(r).__webglTexture;
                              i.bindTexture(a, o),
                                t.generateMipmap(a),
                                i.bindTexture(a, null);
                            }
                          });
                      }
                      function Na(t) {
                        Pn.call(this), (this.cameras = t || []);
                      }
                      function Da(t, e) {
                        return {
                          convert: function(i) {
                            var n;
                            if (i === dt) return t.REPEAT;
                            if (i === pt) return t.CLAMP_TO_EDGE;
                            if (i === ft) return t.MIRRORED_REPEAT;
                            if (i === mt) return t.NEAREST;
                            if (i === gt) return t.NEAREST_MIPMAP_NEAREST;
                            if (i === vt) return t.NEAREST_MIPMAP_LINEAR;
                            if (i === yt) return t.LINEAR;
                            if (i === Mt) return t.LINEAR_MIPMAP_NEAREST;
                            if (i === wt) return t.LINEAR_MIPMAP_LINEAR;
                            if (i === xt) return t.UNSIGNED_BYTE;
                            if (i === Ct) return t.UNSIGNED_SHORT_4_4_4_4;
                            if (i === St) return t.UNSIGNED_SHORT_5_5_5_1;
                            if (i === It) return t.UNSIGNED_SHORT_5_6_5;
                            if (i === At) return t.BYTE;
                            if (i === Et) return t.SHORT;
                            if (i === bt) return t.UNSIGNED_SHORT;
                            if (i === Tt) return t.INT;
                            if (i === Lt) return t.UNSIGNED_INT;
                            if (i === Nt) return t.FLOAT;
                            if (
                              i === Dt &&
                              null !== (n = e.get('OES_texture_half_float'))
                            )
                              return n.HALF_FLOAT_OES;
                            if (i === jt) return t.ALPHA;
                            if (i === Ot) return t.RGB;
                            if (i === zt) return t.RGBA;
                            if (i === Rt) return t.LUMINANCE;
                            if (i === kt) return t.LUMINANCE_ALPHA;
                            if (i === Pt) return t.DEPTH_COMPONENT;
                            if (i === Bt) return t.DEPTH_STENCIL;
                            if (i === N) return t.FUNC_ADD;
                            if (i === D) return t.FUNC_SUBTRACT;
                            if (i === C) return t.FUNC_REVERSE_SUBTRACT;
                            if (i === _) return t.ZERO;
                            if (i === j) return t.ONE;
                            if (i === O) return t.SRC_COLOR;
                            if (i === z) return t.ONE_MINUS_SRC_COLOR;
                            if (i === R) return t.SRC_ALPHA;
                            if (i === k) return t.ONE_MINUS_SRC_ALPHA;
                            if (i === U) return t.DST_ALPHA;
                            if (i === P) return t.ONE_MINUS_DST_ALPHA;
                            if (i === B) return t.DST_COLOR;
                            if (i === F) return t.ONE_MINUS_DST_COLOR;
                            if (i === G) return t.SRC_ALPHA_SATURATE;
                            if (
                              (i === Ft || i === Gt || i === Vt || i === Yt) &&
                              null !==
                                (n = e.get('WEBGL_compressed_texture_s3tc'))
                            ) {
                              if (i === Ft)
                                return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
                              if (i === Gt)
                                return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                              if (i === Vt)
                                return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                              if (i === Yt)
                                return n.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                            }
                            if (
                              (i === Qt || i === Ht || i === Wt || i === Xt) &&
                              null !==
                                (n = e.get('WEBGL_compressed_texture_pvrtc'))
                            ) {
                              if (i === Qt)
                                return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                              if (i === Ht)
                                return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                              if (i === Wt)
                                return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                              if (i === Xt)
                                return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                            }
                            if (
                              i === qt &&
                              null !==
                                (n = e.get('WEBGL_compressed_texture_etc1'))
                            )
                              return n.COMPRESSED_RGB_ETC1_WEBGL;
                            if (
                              (i === S || i === I) &&
                              null !== (n = e.get('EXT_blend_minmax'))
                            ) {
                              if (i === S) return n.MIN_EXT;
                              if (i === I) return n.MAX_EXT;
                            }
                            return i === _t &&
                              null !== (n = e.get('WEBGL_depth_texture'))
                              ? n.UNSIGNED_INT_24_8_WEBGL
                              : 0;
                          }
                        };
                      }
                      function Ca(t) {
                        var e =
                            void 0 !== (t = t || {}).canvas
                              ? t.canvas
                              : document.createElementNS(
                                  'http://www.w3.org/1999/xhtml',
                                  'canvas'
                                ),
                          i = void 0 !== t.context ? t.context : null,
                          n = void 0 !== t.alpha && t.alpha,
                          r = void 0 === t.depth || t.depth,
                          a = void 0 === t.stencil || t.stencil,
                          o = void 0 !== t.antialias && t.antialias,
                          s =
                            void 0 === t.premultipliedAlpha ||
                            t.premultipliedAlpha,
                          c =
                            void 0 !== t.preserveDrawingBuffer &&
                            t.preserveDrawingBuffer,
                          p = [],
                          f = [],
                          m = null,
                          M = [],
                          w = [];
                        (this.domElement = e),
                          (this.context = null),
                          (this.autoClear = !0),
                          (this.autoClearColor = !0),
                          (this.autoClearDepth = !0),
                          (this.autoClearStencil = !0),
                          (this.sortObjects = !0),
                          (this.clippingPlanes = []),
                          (this.localClippingEnabled = !1),
                          (this.gammaFactor = 2),
                          (this.gammaInput = !1),
                          (this.gammaOutput = !1),
                          (this.physicallyCorrectLights = !1),
                          (this.toneMapping = et),
                          (this.toneMappingExposure = 1),
                          (this.toneMappingWhitePoint = 1),
                          (this.maxMorphTargets = 8),
                          (this.maxMorphNormals = 4);
                        var N,
                          D,
                          C,
                          S,
                          I,
                          _,
                          j,
                          O,
                          z,
                          R,
                          k,
                          U,
                          P,
                          B,
                          F,
                          G,
                          K,
                          J,
                          $,
                          tt = this,
                          it = !1,
                          nt = null,
                          rt = null,
                          at = -1,
                          ot = '',
                          st = null,
                          ct = null,
                          ut = new je(),
                          lt = new je(),
                          ht = null,
                          dt = 0,
                          pt = e.width,
                          ft = e.height,
                          mt = 1,
                          gt = new je(0, 0, pt, ft),
                          vt = new je(0, 0, pt, ft),
                          yt = !1,
                          Mt = new pn(),
                          wt = new function() {
                            var t = this,
                              e = null,
                              i = 0,
                              n = !1,
                              r = !1,
                              a = new dn(),
                              o = new hn(),
                              s = { value: null, needsUpdate: !1 };
                            function c() {
                              s.value !== e &&
                                ((s.value = e), (s.needsUpdate = i > 0)),
                                (t.numPlanes = i),
                                (t.numIntersection = 0);
                            }
                            function u(e, i, n, r) {
                              var c = null !== e ? e.length : 0,
                                u = null;
                              if (0 !== c) {
                                if (((u = s.value), !0 !== r || null === u)) {
                                  var l = n + 4 * c,
                                    h = i.matrixWorldInverse;
                                  o.getNormalMatrix(h),
                                    (null === u || u.length < l) &&
                                      (u = new Float32Array(l));
                                  for (var d = 0, p = n; d !== c; ++d, p += 4)
                                    a.copy(e[d]).applyMatrix4(h, o),
                                      a.normal.toArray(u, p),
                                      (u[p + 3] = a.constant);
                                }
                                (s.value = u), (s.needsUpdate = !0);
                              }
                              return (t.numPlanes = c), u;
                            }
                            (this.uniform = s),
                              (this.numPlanes = 0),
                              (this.numIntersection = 0),
                              (this.init = function(t, r, a) {
                                var o = 0 !== t.length || r || 0 !== i || n;
                                return (
                                  (n = r), (e = u(t, a, 0)), (i = t.length), o
                                );
                              }),
                              (this.beginShadows = function() {
                                (r = !0), u(null);
                              }),
                              (this.endShadows = function() {
                                (r = !1), c();
                              }),
                              (this.setState = function(t, a, o, l, h, d) {
                                if (
                                  !n ||
                                  null === t ||
                                  0 === t.length ||
                                  (r && !o)
                                )
                                  r ? u(null) : c();
                                else {
                                  var p = r ? 0 : i,
                                    f = 4 * p,
                                    m = h.clippingState || null;
                                  (s.value = m), (m = u(t, l, f, d));
                                  for (var g = 0; g !== f; ++g) m[g] = e[g];
                                  (h.clippingState = m),
                                    (this.numIntersection = a
                                      ? this.numPlanes
                                      : 0),
                                    (this.numPlanes += p);
                                }
                              });
                          }(),
                          At = !1,
                          Et = !1,
                          bt = new Ue(),
                          Tt = new ke(),
                          Lt = { geometries: 0, textures: 0 },
                          Ct = {
                            frame: 0,
                            calls: 0,
                            vertices: 0,
                            faces: 0,
                            points: 0
                          };
                        function St() {
                          return null === nt ? mt : 1;
                        }
                        this.info = { render: Ct, memory: Lt, programs: null };
                        try {
                          var It = {
                            alpha: n,
                            depth: r,
                            stencil: a,
                            antialias: o,
                            premultipliedAlpha: s,
                            preserveDrawingBuffer: c
                          };
                          if (
                            null ===
                            (N =
                              i ||
                              e.getContext('webgl', It) ||
                              e.getContext('experimental-webgl', It))
                          )
                            throw null !== e.getContext('webgl')
                              ? 'Error creating WebGL context with your selected attributes.'
                              : 'Error creating WebGL context.';
                          void 0 === N.getShaderPrecisionFormat &&
                            (N.getShaderPrecisionFormat = function() {
                              return { rangeMin: 1, rangeMax: 1, precision: 1 };
                            }),
                            e.addEventListener('webglcontextlost', Rt, !1),
                            e.addEventListener('webglcontextrestored', kt, !1);
                        } catch (t) {}
                        function _t() {
                          (D = new function(t) {
                            var e = {};
                            return {
                              get: function(i) {
                                if (void 0 !== e[i]) return e[i];
                                var n;
                                switch (i) {
                                  case 'WEBGL_depth_texture':
                                    n =
                                      t.getExtension('WEBGL_depth_texture') ||
                                      t.getExtension(
                                        'MOZ_WEBGL_depth_texture'
                                      ) ||
                                      t.getExtension(
                                        'WEBKIT_WEBGL_depth_texture'
                                      );
                                    break;
                                  case 'EXT_texture_filter_anisotropic':
                                    n =
                                      t.getExtension(
                                        'EXT_texture_filter_anisotropic'
                                      ) ||
                                      t.getExtension(
                                        'MOZ_EXT_texture_filter_anisotropic'
                                      ) ||
                                      t.getExtension(
                                        'WEBKIT_EXT_texture_filter_anisotropic'
                                      );
                                    break;
                                  case 'WEBGL_compressed_texture_s3tc':
                                    n =
                                      t.getExtension(
                                        'WEBGL_compressed_texture_s3tc'
                                      ) ||
                                      t.getExtension(
                                        'MOZ_WEBGL_compressed_texture_s3tc'
                                      ) ||
                                      t.getExtension(
                                        'WEBKIT_WEBGL_compressed_texture_s3tc'
                                      );
                                    break;
                                  case 'WEBGL_compressed_texture_pvrtc':
                                    n =
                                      t.getExtension(
                                        'WEBGL_compressed_texture_pvrtc'
                                      ) ||
                                      t.getExtension(
                                        'WEBKIT_WEBGL_compressed_texture_pvrtc'
                                      );
                                    break;
                                  case 'WEBGL_compressed_texture_etc1':
                                    n = t.getExtension(
                                      'WEBGL_compressed_texture_etc1'
                                    );
                                    break;
                                  default:
                                    n = t.getExtension(i);
                                }
                                return (e[i] = n), n;
                              }
                            };
                          }(N)).get('WEBGL_depth_texture'),
                            D.get('OES_texture_float'),
                            D.get('OES_texture_float_linear'),
                            D.get('OES_texture_half_float'),
                            D.get('OES_texture_half_float_linear'),
                            D.get('OES_standard_derivatives'),
                            D.get('ANGLE_instanced_arrays'),
                            D.get('OES_element_index_uint') &&
                              (Fr.MaxIndex = 4294967296),
                            ($ = new Da(N, D)),
                            (C = new function(t, e, i) {
                              var n;
                              function r(e) {
                                if ('highp' === e) {
                                  if (
                                    t.getShaderPrecisionFormat(
                                      t.VERTEX_SHADER,
                                      t.HIGH_FLOAT
                                    ).precision > 0 &&
                                    t.getShaderPrecisionFormat(
                                      t.FRAGMENT_SHADER,
                                      t.HIGH_FLOAT
                                    ).precision > 0
                                  )
                                    return 'highp';
                                  e = 'mediump';
                                }
                                return 'mediump' === e &&
                                  t.getShaderPrecisionFormat(
                                    t.VERTEX_SHADER,
                                    t.MEDIUM_FLOAT
                                  ).precision > 0 &&
                                  t.getShaderPrecisionFormat(
                                    t.FRAGMENT_SHADER,
                                    t.MEDIUM_FLOAT
                                  ).precision > 0
                                  ? 'mediump'
                                  : 'lowp';
                              }
                              var a =
                                  void 0 !== i.precision
                                    ? i.precision
                                    : 'highp',
                                o = r(a);
                              o !== a && (a = o);
                              var s =
                                  !0 === i.logarithmicDepthBuffer &&
                                  !!e.get('EXT_frag_depth'),
                                c = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),
                                u = t.getParameter(
                                  t.MAX_VERTEX_TEXTURE_IMAGE_UNITS
                                ),
                                l = t.getParameter(t.MAX_TEXTURE_SIZE),
                                h = t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),
                                d = t.getParameter(t.MAX_VERTEX_ATTRIBS),
                                p = t.getParameter(
                                  t.MAX_VERTEX_UNIFORM_VECTORS
                                ),
                                f = t.getParameter(t.MAX_VARYING_VECTORS),
                                m = t.getParameter(
                                  t.MAX_FRAGMENT_UNIFORM_VECTORS
                                ),
                                g = u > 0,
                                v = !!e.get('OES_texture_float');
                              return {
                                getMaxAnisotropy: function() {
                                  if (void 0 !== n) return n;
                                  var i = e.get(
                                    'EXT_texture_filter_anisotropic'
                                  );
                                  return (n =
                                    null !== i
                                      ? t.getParameter(
                                          i.MAX_TEXTURE_MAX_ANISOTROPY_EXT
                                        )
                                      : 0);
                                },
                                getMaxPrecision: r,
                                precision: a,
                                logarithmicDepthBuffer: s,
                                maxTextures: c,
                                maxVertexTextures: u,
                                maxTextureSize: l,
                                maxCubemapSize: h,
                                maxAttributes: d,
                                maxVertexUniforms: p,
                                maxVaryings: f,
                                maxFragmentUniforms: m,
                                vertexTextures: g,
                                floatFragmentTextures: v,
                                floatVertexTextures: g && v
                              };
                            }(N, D, t)),
                            (S = new function(t, e, i) {
                              var n = new function() {
                                  var e = !1,
                                    i = new je(),
                                    n = null,
                                    r = new je(0, 0, 0, 0);
                                  return {
                                    setMask: function(i) {
                                      n === i ||
                                        e ||
                                        (t.colorMask(i, i, i, i), (n = i));
                                    },
                                    setLocked: function(t) {
                                      e = t;
                                    },
                                    setClear: function(e, n, a, o, s) {
                                      !0 === s &&
                                        ((e *= o), (n *= o), (a *= o)),
                                        i.set(e, n, a, o),
                                        !1 === r.equals(i) &&
                                          (t.clearColor(e, n, a, o), r.copy(i));
                                    },
                                    reset: function() {
                                      (e = !1), (n = null), r.set(-1, 0, 0, 0);
                                    }
                                  };
                                }(),
                                r = new function() {
                                  var e = !1,
                                    i = null,
                                    n = null,
                                    r = null;
                                  return {
                                    setTest: function(e) {
                                      e ? tt(t.DEPTH_TEST) : et(t.DEPTH_TEST);
                                    },
                                    setMask: function(n) {
                                      i === n || e || (t.depthMask(n), (i = n));
                                    },
                                    setFunc: function(e) {
                                      if (n !== e) {
                                        if (e)
                                          switch (e) {
                                            case V:
                                              t.depthFunc(t.NEVER);
                                              break;
                                            case Y:
                                              t.depthFunc(t.ALWAYS);
                                              break;
                                            case Q:
                                              t.depthFunc(t.LESS);
                                              break;
                                            case H:
                                              t.depthFunc(t.LEQUAL);
                                              break;
                                            case W:
                                              t.depthFunc(t.EQUAL);
                                              break;
                                            case X:
                                              t.depthFunc(t.GEQUAL);
                                              break;
                                            case q:
                                              t.depthFunc(t.GREATER);
                                              break;
                                            case Z:
                                              t.depthFunc(t.NOTEQUAL);
                                              break;
                                            default:
                                              t.depthFunc(t.LEQUAL);
                                          }
                                        else t.depthFunc(t.LEQUAL);
                                        n = e;
                                      }
                                    },
                                    setLocked: function(t) {
                                      e = t;
                                    },
                                    setClear: function(e) {
                                      r !== e && (t.clearDepth(e), (r = e));
                                    },
                                    reset: function() {
                                      (e = !1),
                                        (i = null),
                                        (n = null),
                                        (r = null);
                                    }
                                  };
                                }(),
                                a = new function() {
                                  var e = !1,
                                    i = null,
                                    n = null,
                                    r = null,
                                    a = null,
                                    o = null,
                                    s = null,
                                    c = null,
                                    u = null;
                                  return {
                                    setTest: function(e) {
                                      e
                                        ? tt(t.STENCIL_TEST)
                                        : et(t.STENCIL_TEST);
                                    },
                                    setMask: function(n) {
                                      i === n ||
                                        e ||
                                        (t.stencilMask(n), (i = n));
                                    },
                                    setFunc: function(e, i, o) {
                                      (n === e && r === i && a === o) ||
                                        (t.stencilFunc(e, i, o),
                                        (n = e),
                                        (r = i),
                                        (a = o));
                                    },
                                    setOp: function(e, i, n) {
                                      (o === e && s === i && c === n) ||
                                        (t.stencilOp(e, i, n),
                                        (o = e),
                                        (s = i),
                                        (c = n));
                                    },
                                    setLocked: function(t) {
                                      e = t;
                                    },
                                    setClear: function(e) {
                                      u !== e && (t.clearStencil(e), (u = e));
                                    },
                                    reset: function() {
                                      (e = !1),
                                        (i = null),
                                        (n = null),
                                        (r = null),
                                        (a = null),
                                        (o = null),
                                        (s = null),
                                        (c = null),
                                        (u = null);
                                    }
                                  };
                                }(),
                                o = t.getParameter(t.MAX_VERTEX_ATTRIBS),
                                s = new Uint8Array(o),
                                c = new Uint8Array(o),
                                d = new Uint8Array(o),
                                p = {},
                                f = null,
                                m = null,
                                y = null,
                                M = null,
                                w = null,
                                N = null,
                                D = null,
                                C = null,
                                S = null,
                                I = !1,
                                _ = null,
                                j = null,
                                O = null,
                                z = null,
                                R = null,
                                k = t.getParameter(
                                  t.MAX_COMBINED_TEXTURE_IMAGE_UNITS
                                ),
                                U = parseFloat(
                                  /^WebGL\ ([0-9])/.exec(
                                    t.getParameter(t.VERSION)
                                  )[1]
                                ),
                                P = parseFloat(U) >= 1,
                                B = null,
                                F = {},
                                G = new je(),
                                K = new je();
                              function J(e, i, n) {
                                var r = new Uint8Array(4),
                                  a = t.createTexture();
                                t.bindTexture(e, a),
                                  t.texParameteri(
                                    e,
                                    t.TEXTURE_MIN_FILTER,
                                    t.NEAREST
                                  ),
                                  t.texParameteri(
                                    e,
                                    t.TEXTURE_MAG_FILTER,
                                    t.NEAREST
                                  );
                                for (var o = 0; o < n; o++)
                                  t.texImage2D(
                                    i + o,
                                    0,
                                    t.RGBA,
                                    1,
                                    1,
                                    0,
                                    t.RGBA,
                                    t.UNSIGNED_BYTE,
                                    r
                                  );
                                return a;
                              }
                              var $ = {};
                              function tt(e) {
                                !0 !== p[e] && (t.enable(e), (p[e] = !0));
                              }
                              function et(e) {
                                !1 !== p[e] && (t.disable(e), (p[e] = !1));
                              }
                              function it(e, n, r, a, o, s, c, u) {
                                if (
                                  (e !== x ? tt(t.BLEND) : et(t.BLEND), e !== L)
                                ) {
                                  if (e !== y || u !== I)
                                    switch (e) {
                                      case E:
                                        u
                                          ? (t.blendEquationSeparate(
                                              t.FUNC_ADD,
                                              t.FUNC_ADD
                                            ),
                                            t.blendFuncSeparate(
                                              t.ONE,
                                              t.ONE,
                                              t.ONE,
                                              t.ONE
                                            ))
                                          : (t.blendEquation(t.FUNC_ADD),
                                            t.blendFunc(t.SRC_ALPHA, t.ONE));
                                        break;
                                      case b:
                                        u
                                          ? (t.blendEquationSeparate(
                                              t.FUNC_ADD,
                                              t.FUNC_ADD
                                            ),
                                            t.blendFuncSeparate(
                                              t.ZERO,
                                              t.ZERO,
                                              t.ONE_MINUS_SRC_COLOR,
                                              t.ONE_MINUS_SRC_ALPHA
                                            ))
                                          : (t.blendEquation(t.FUNC_ADD),
                                            t.blendFunc(
                                              t.ZERO,
                                              t.ONE_MINUS_SRC_COLOR
                                            ));
                                        break;
                                      case T:
                                        u
                                          ? (t.blendEquationSeparate(
                                              t.FUNC_ADD,
                                              t.FUNC_ADD
                                            ),
                                            t.blendFuncSeparate(
                                              t.ZERO,
                                              t.SRC_COLOR,
                                              t.ZERO,
                                              t.SRC_ALPHA
                                            ))
                                          : (t.blendEquation(t.FUNC_ADD),
                                            t.blendFunc(t.ZERO, t.SRC_COLOR));
                                        break;
                                      default:
                                        u
                                          ? (t.blendEquationSeparate(
                                              t.FUNC_ADD,
                                              t.FUNC_ADD
                                            ),
                                            t.blendFuncSeparate(
                                              t.ONE,
                                              t.ONE_MINUS_SRC_ALPHA,
                                              t.ONE,
                                              t.ONE_MINUS_SRC_ALPHA
                                            ))
                                          : (t.blendEquationSeparate(
                                              t.FUNC_ADD,
                                              t.FUNC_ADD
                                            ),
                                            t.blendFuncSeparate(
                                              t.SRC_ALPHA,
                                              t.ONE_MINUS_SRC_ALPHA,
                                              t.ONE,
                                              t.ONE_MINUS_SRC_ALPHA
                                            ));
                                    }
                                  (M = null),
                                    (w = null),
                                    (N = null),
                                    (D = null),
                                    (C = null),
                                    (S = null);
                                } else
                                  (o = o || n),
                                    (s = s || r),
                                    (c = c || a),
                                    (n === M && o === D) ||
                                      (t.blendEquationSeparate(
                                        i.convert(n),
                                        i.convert(o)
                                      ),
                                      (M = n),
                                      (D = o)),
                                    (r === w &&
                                      a === N &&
                                      s === C &&
                                      c === S) ||
                                      (t.blendFuncSeparate(
                                        i.convert(r),
                                        i.convert(a),
                                        i.convert(s),
                                        i.convert(c)
                                      ),
                                      (w = r),
                                      (N = a),
                                      (C = s),
                                      (S = c));
                                (y = e), (I = u);
                              }
                              function nt(e) {
                                _ !== e &&
                                  (e ? t.frontFace(t.CW) : t.frontFace(t.CCW),
                                  (_ = e));
                              }
                              function rt(e) {
                                e !== u
                                  ? (tt(t.CULL_FACE),
                                    e !== j &&
                                      (e === l
                                        ? t.cullFace(t.BACK)
                                        : e === h
                                          ? t.cullFace(t.FRONT)
                                          : t.cullFace(t.FRONT_AND_BACK)))
                                  : et(t.CULL_FACE),
                                  (j = e);
                              }
                              function at(e, i, n) {
                                e
                                  ? (tt(t.POLYGON_OFFSET_FILL),
                                    (z === i && R === n) ||
                                      (t.polygonOffset(i, n), (z = i), (R = n)))
                                  : et(t.POLYGON_OFFSET_FILL);
                              }
                              function ot(e) {
                                void 0 === e && (e = t.TEXTURE0 + k - 1),
                                  B !== e && (t.activeTexture(e), (B = e));
                              }
                              return (
                                ($[t.TEXTURE_2D] = J(
                                  t.TEXTURE_2D,
                                  t.TEXTURE_2D,
                                  1
                                )),
                                ($[t.TEXTURE_CUBE_MAP] = J(
                                  t.TEXTURE_CUBE_MAP,
                                  t.TEXTURE_CUBE_MAP_POSITIVE_X,
                                  6
                                )),
                                n.setClear(0, 0, 0, 1),
                                r.setClear(1),
                                a.setClear(0),
                                tt(t.DEPTH_TEST),
                                r.setFunc(H),
                                nt(!1),
                                rt(l),
                                tt(t.CULL_FACE),
                                tt(t.BLEND),
                                it(A),
                                {
                                  buffers: { color: n, depth: r, stencil: a },
                                  initAttributes: function() {
                                    for (var t = 0, e = s.length; t < e; t++)
                                      s[t] = 0;
                                  },
                                  enableAttribute: function(i) {
                                    (s[i] = 1),
                                      0 === c[i] &&
                                        (t.enableVertexAttribArray(i),
                                        (c[i] = 1)),
                                      0 !== d[i] &&
                                        (e
                                          .get('ANGLE_instanced_arrays')
                                          .vertexAttribDivisorANGLE(i, 0),
                                        (d[i] = 0));
                                  },
                                  enableAttributeAndDivisor: function(i, n) {
                                    (s[i] = 1),
                                      0 === c[i] &&
                                        (t.enableVertexAttribArray(i),
                                        (c[i] = 1)),
                                      d[i] !== n &&
                                        (e
                                          .get('ANGLE_instanced_arrays')
                                          .vertexAttribDivisorANGLE(i, n),
                                        (d[i] = n));
                                  },
                                  disableUnusedAttributes: function() {
                                    for (var e = 0, i = c.length; e !== i; ++e)
                                      c[e] !== s[e] &&
                                        (t.disableVertexAttribArray(e),
                                        (c[e] = 0));
                                  },
                                  enable: tt,
                                  disable: et,
                                  getCompressedTextureFormats: function() {
                                    if (
                                      null === f &&
                                      ((f = []),
                                      e.get('WEBGL_compressed_texture_pvrtc') ||
                                        e.get(
                                          'WEBGL_compressed_texture_s3tc'
                                        ) ||
                                        e.get('WEBGL_compressed_texture_etc1'))
                                    )
                                      for (
                                        var i = t.getParameter(
                                            t.COMPRESSED_TEXTURE_FORMATS
                                          ),
                                          n = 0;
                                        n < i.length;
                                        n++
                                      )
                                        f.push(i[n]);
                                    return f;
                                  },
                                  useProgram: function(e) {
                                    return (
                                      m !== e && (t.useProgram(e), (m = e), !0)
                                    );
                                  },
                                  setBlending: it,
                                  setMaterial: function(e) {
                                    e.side === v
                                      ? et(t.CULL_FACE)
                                      : tt(t.CULL_FACE),
                                      nt(e.side === g),
                                      !0 === e.transparent
                                        ? it(
                                            e.blending,
                                            e.blendEquation,
                                            e.blendSrc,
                                            e.blendDst,
                                            e.blendEquationAlpha,
                                            e.blendSrcAlpha,
                                            e.blendDstAlpha,
                                            e.premultipliedAlpha
                                          )
                                        : it(x),
                                      r.setFunc(e.depthFunc),
                                      r.setTest(e.depthTest),
                                      r.setMask(e.depthWrite),
                                      n.setMask(e.colorWrite),
                                      at(
                                        e.polygonOffset,
                                        e.polygonOffsetFactor,
                                        e.polygonOffsetUnits
                                      );
                                  },
                                  setFlipSided: nt,
                                  setCullFace: rt,
                                  setLineWidth: function(e) {
                                    e !== O && (P && t.lineWidth(e), (O = e));
                                  },
                                  setPolygonOffset: at,
                                  setScissorTest: function(e) {
                                    e ? tt(t.SCISSOR_TEST) : et(t.SCISSOR_TEST);
                                  },
                                  activeTexture: ot,
                                  bindTexture: function(e, i) {
                                    null === B && ot();
                                    var n = F[B];
                                    void 0 === n &&
                                      ((n = { type: void 0, texture: void 0 }),
                                      (F[B] = n)),
                                      (n.type === e && n.texture === i) ||
                                        (t.bindTexture(e, i || $[e]),
                                        (n.type = e),
                                        (n.texture = i));
                                  },
                                  compressedTexImage2D: function() {
                                    try {
                                      t.compressedTexImage2D.apply(
                                        t,
                                        arguments
                                      );
                                    } catch (t) {}
                                  },
                                  texImage2D: function() {
                                    try {
                                      t.texImage2D.apply(t, arguments);
                                    } catch (t) {}
                                  },
                                  scissor: function(e) {
                                    !1 === G.equals(e) &&
                                      (t.scissor(e.x, e.y, e.z, e.w),
                                      G.copy(e));
                                  },
                                  viewport: function(e) {
                                    !1 === K.equals(e) &&
                                      (t.viewport(e.x, e.y, e.z, e.w),
                                      K.copy(e));
                                  },
                                  reset: function() {
                                    for (var e = 0; e < c.length; e++)
                                      1 === c[e] &&
                                        (t.disableVertexAttribArray(e),
                                        (c[e] = 0));
                                    (p = {}),
                                      (f = null),
                                      (B = null),
                                      (F = {}),
                                      (m = null),
                                      (y = null),
                                      (_ = null),
                                      (j = null),
                                      n.reset(),
                                      r.reset(),
                                      a.reset();
                                  }
                                }
                              );
                            }(N, D, $)).scissor(lt.copy(vt).multiplyScalar(mt)),
                            S.viewport(ut.copy(gt).multiplyScalar(mt)),
                            (I = new function() {
                              var t = {};
                              return {
                                get: function(e) {
                                  var i = e.uuid,
                                    n = t[i];
                                  return (
                                    void 0 === n && ((n = {}), (t[i] = n)), n
                                  );
                                },
                                remove: function(e) {
                                  delete t[e.uuid];
                                },
                                clear: function() {
                                  t = {};
                                }
                              };
                            }()),
                            (_ = new La(N, D, S, I, C, $, Lt)),
                            (j = new mn(N)),
                            (O = new function(t, e, i) {
                              var n = {},
                                r = {};
                              function a(t) {
                                var o = t.target,
                                  s = n[o.id];
                                null !== s.index && e.remove(s.index);
                                for (var c in s.attributes)
                                  e.remove(s.attributes[c]);
                                o.removeEventListener('dispose', a),
                                  delete n[o.id];
                                var u = r[o.id];
                                u && (e.remove(u), delete r[o.id]),
                                  (u = r[s.id]) &&
                                    (e.remove(u), delete r[s.id]),
                                  i.geometries--;
                              }
                              return {
                                get: function(t, e) {
                                  var r = n[e.id];
                                  return (
                                    r ||
                                    (e.addEventListener('dispose', a),
                                    e.isBufferGeometry
                                      ? (r = e)
                                      : e.isGeometry &&
                                        (void 0 === e._bufferGeometry &&
                                          (e._bufferGeometry = new Fr().setFromObject(
                                            t
                                          )),
                                        (r = e._bufferGeometry)),
                                    (n[e.id] = r),
                                    i.geometries++,
                                    r)
                                  );
                                },
                                update: function(i) {
                                  var n = i.index,
                                    r = i.attributes;
                                  null !== n &&
                                    e.update(n, t.ELEMENT_ARRAY_BUFFER);
                                  for (var a in r)
                                    e.update(r[a], t.ARRAY_BUFFER);
                                  var o = i.morphAttributes;
                                  for (var a in o)
                                    for (
                                      var s = o[a], c = 0, u = s.length;
                                      c < u;
                                      c++
                                    )
                                      e.update(s[c], t.ARRAY_BUFFER);
                                },
                                getWireframeAttribute: function(i) {
                                  var n = r[i.id];
                                  if (n) return n;
                                  var a,
                                    o = [],
                                    s = i.index,
                                    c = i.attributes;
                                  if (null !== s)
                                    for (
                                      var u = 0, l = (a = s.array).length;
                                      u < l;
                                      u += 3
                                    ) {
                                      var h = a[u + 0],
                                        d = a[u + 1],
                                        p = a[u + 2];
                                      o.push(h, d, d, p, p, h);
                                    }
                                  else
                                    for (
                                      u = 0,
                                        l =
                                          (a = c.position.array).length / 3 - 1;
                                      u < l;
                                      u += 3
                                    )
                                      (h = u + 0),
                                        (d = u + 1),
                                        (p = u + 2),
                                        o.push(h, d, d, p, p, h);
                                  return (
                                    (n = new (Br(o) > 65535 ? Rr : Or)(o, 1)),
                                    e.update(n, t.ELEMENT_ARRAY_BUFFER),
                                    (r[i.id] = n),
                                    n
                                  );
                                }
                              };
                            }(N, j, Lt)),
                            (z = new function(t, e) {
                              var i = {};
                              return {
                                update: function(n) {
                                  var r = e.frame,
                                    a = n.geometry,
                                    o = t.get(n, a);
                                  return (
                                    i[o.id] !== r &&
                                      (a.isGeometry && o.updateFromObject(n),
                                      t.update(o),
                                      (i[o.id] = r)),
                                    o
                                  );
                                },
                                clear: function() {
                                  i = {};
                                }
                              };
                            }(O, Ct)),
                            (B = new function(t) {
                              var e = {},
                                i = new Float32Array(8);
                              return {
                                update: function(n, r, a, o) {
                                  var s = n.morphTargetInfluences,
                                    c = s.length,
                                    u = e[r.id];
                                  if (void 0 === u) {
                                    u = [];
                                    for (var l = 0; l < c; l++) u[l] = [l, 0];
                                    e[r.id] = u;
                                  }
                                  var h =
                                      a.morphTargets &&
                                      r.morphAttributes.position,
                                    d =
                                      a.morphNormals &&
                                      r.morphAttributes.normal;
                                  for (l = 0; l < c; l++)
                                    0 !== (p = u[l])[1] &&
                                      (h &&
                                        r.removeAttribute('morphTarget' + l),
                                      d &&
                                        r.removeAttribute('morphNormal' + l));
                                  for (l = 0; l < c; l++)
                                    ((p = u[l])[0] = l), (p[1] = s[l]);
                                  for (u.sort(ta), l = 0; l < 8; l++) {
                                    var p;
                                    if ((p = u[l])) {
                                      var f = p[0],
                                        m = p[1];
                                      if (m) {
                                        h &&
                                          r.addAttribute(
                                            'morphTarget' + l,
                                            h[f]
                                          ),
                                          d &&
                                            r.addAttribute(
                                              'morphNormal' + l,
                                              d[f]
                                            ),
                                          (i[l] = m);
                                        continue;
                                      }
                                    }
                                    i[l] = 0;
                                  }
                                  o
                                    .getUniforms()
                                    .setValue(t, 'morphTargetInfluences', i);
                                }
                              };
                            }(N)),
                            (k = new Ta(tt, D, C)),
                            (R = new ea()),
                            (U = new $r()),
                            (P = new function(t, e, i, n) {
                              var r,
                                a,
                                o,
                                s = new Ni(0),
                                c = 0;
                              function u(t, i) {
                                e.buffers.color.setClear(t.r, t.g, t.b, i, n);
                              }
                              return {
                                getClearColor: function() {
                                  return s;
                                },
                                setClearColor: function(t, e) {
                                  s.set(t), u(s, (c = void 0 !== e ? e : 1));
                                },
                                getClearAlpha: function() {
                                  return c;
                                },
                                setClearAlpha: function(t) {
                                  u(s, (c = t));
                                },
                                render: function(e, n, l, h) {
                                  var d = n.background;
                                  null === d
                                    ? u(s, c)
                                    : d && d.isColor && (u(d, 1), (h = !0)),
                                    (t.autoClear || h) &&
                                      t.clear(
                                        t.autoClearColor,
                                        t.autoClearDepth,
                                        t.autoClearStencil
                                      ),
                                    d && d.isCubeTexture
                                      ? (void 0 === o &&
                                          ((o = new Zr(
                                            new Vr(1, 1, 1),
                                            new on({
                                              uniforms: ji.cube.uniforms,
                                              vertexShader:
                                                ji.cube.vertexShader,
                                              fragmentShader:
                                                ji.cube.fragmentShader,
                                              side: g,
                                              depthTest: !0,
                                              depthWrite: !1,
                                              polygonOffset: !0,
                                              fog: !1
                                            })
                                          )).geometry.removeAttribute('normal'),
                                          o.geometry.removeAttribute('uv'),
                                          (o.onBeforeRender = function(
                                            t,
                                            e,
                                            i
                                          ) {
                                            var n = i.far;
                                            this.matrixWorld.makeScale(n, n, n),
                                              this.matrixWorld.copyPosition(
                                                i.matrixWorld
                                              ),
                                              (this.material.polygonOffsetUnits =
                                                10 * n);
                                          }),
                                          i.update(o.geometry)),
                                        (o.material.uniforms.tCube.value = d),
                                        e.push(
                                          o,
                                          o.geometry,
                                          o.material,
                                          0,
                                          null
                                        ))
                                      : d &&
                                        d.isTexture &&
                                        (void 0 === r &&
                                          ((r = new Un(-1, 1, 1, -1, 0, 1)),
                                          (a = new Zr(
                                            new Qr(2, 2),
                                            new Hr({
                                              depthTest: !1,
                                              depthWrite: !1,
                                              fog: !1
                                            })
                                          )),
                                          i.update(a.geometry)),
                                        (a.material.map = d),
                                        t.renderBufferDirect(
                                          r,
                                          null,
                                          a.geometry,
                                          a.material,
                                          a,
                                          null
                                        ));
                                }
                              };
                            }(tt, S, O, s)),
                            (F = new function(t, e, i) {
                              var n;
                              (this.setMode = function(t) {
                                n = t;
                              }),
                                (this.render = function(e, r) {
                                  t.drawArrays(n, e, r),
                                    i.calls++,
                                    (i.vertices += r),
                                    n === t.TRIANGLES
                                      ? (i.faces += r / 3)
                                      : n === t.POINTS && (i.points += r);
                                }),
                                (this.renderInstances = function(r, a, o) {
                                  var s = e.get('ANGLE_instanced_arrays');
                                  if (null !== s) {
                                    var c = r.attributes.position;
                                    c.isInterleavedBufferAttribute
                                      ? ((o = c.data.count),
                                        s.drawArraysInstancedANGLE(
                                          n,
                                          0,
                                          o,
                                          r.maxInstancedCount
                                        ))
                                      : s.drawArraysInstancedANGLE(
                                          n,
                                          a,
                                          o,
                                          r.maxInstancedCount
                                        ),
                                      i.calls++,
                                      (i.vertices += o * r.maxInstancedCount),
                                      n === t.TRIANGLES
                                        ? (i.faces +=
                                            r.maxInstancedCount * o / 3)
                                        : n === t.POINTS &&
                                          (i.points += r.maxInstancedCount * o);
                                  }
                                });
                            }(N, D, Ct)),
                            (G = new function(t, e, i) {
                              var n, r, a;
                              (this.setMode = function(t) {
                                n = t;
                              }),
                                (this.setIndex = function(t) {
                                  (r = t.type), (a = t.bytesPerElement);
                                }),
                                (this.render = function(e, o) {
                                  t.drawElements(n, o, r, e * a),
                                    i.calls++,
                                    (i.vertices += o),
                                    n === t.TRIANGLES
                                      ? (i.faces += o / 3)
                                      : n === t.POINTS && (i.points += o);
                                }),
                                (this.renderInstances = function(o, s, c) {
                                  var u = e.get('ANGLE_instanced_arrays');
                                  null !== u &&
                                    (u.drawElementsInstancedANGLE(
                                      n,
                                      c,
                                      r,
                                      s * a,
                                      o.maxInstancedCount
                                    ),
                                    i.calls++,
                                    (i.vertices += c * o.maxInstancedCount),
                                    n === t.TRIANGLES
                                      ? (i.faces += o.maxInstancedCount * c / 3)
                                      : n === t.POINTS &&
                                        (i.points += o.maxInstancedCount * c));
                                });
                            }(N, D, Ct)),
                            (K = new zi(tt, N, S, _, C)),
                            (J = new ki(tt, N, S, _, C)),
                            (tt.info.programs = k.programs),
                            (tt.context = N),
                            (tt.capabilities = C),
                            (tt.extensions = D),
                            (tt.properties = I),
                            (tt.renderLists = U),
                            (tt.state = S);
                        }
                        _t();
                        var jt = new function(t) {
                          var e = this,
                            i = null,
                            n = null;
                          'VRFrameData' in window &&
                            (n = new window.VRFrameData());
                          var r = new Ue(),
                            a = new Ue(),
                            o = new Ue(),
                            s = new Pn();
                          (s.bounds = new je(0, 0, 0.5, 1)), s.layers.enable(1);
                          var c = new Pn();
                          (c.bounds = new je(0.5, 0, 0.5, 1)),
                            c.layers.enable(2);
                          var u,
                            l,
                            h = new Na([s, c]);
                          function d() {
                            if (null !== i && i.isPresenting) {
                              var n = i.getEyeParameters('left'),
                                r = n.renderWidth,
                                a = n.renderHeight;
                              (l = t.getPixelRatio()),
                                (u = t.getSize()),
                                t.setDrawingBufferSize(2 * r, a, 1);
                            } else
                              e.enabled &&
                                t.setDrawingBufferSize(u.width, u.height, l);
                          }
                          h.layers.enable(1),
                            h.layers.enable(2),
                            window.addEventListener(
                              'vrdisplaypresentchange',
                              d,
                              !1
                            ),
                            (this.enabled = !1),
                            (this.standing = !1),
                            (this.getDevice = function() {
                              return i;
                            }),
                            (this.setDevice = function(t) {
                              void 0 !== t && (i = t);
                            }),
                            (this.getCamera = function(t) {
                              if (null === i) return t;
                              (i.depthNear = t.near),
                                (i.depthFar = t.far),
                                i.getFrameData(n);
                              var e = n.pose;
                              null !== e.position
                                ? t.position.fromArray(e.position)
                                : t.position.set(0, 0, 0),
                                null !== e.orientation &&
                                  t.quaternion.fromArray(e.orientation),
                                t.updateMatrixWorld();
                              var u = i.stageParameters;
                              if (
                                (this.standing &&
                                  u &&
                                  (a.fromArray(u.sittingToStandingTransform),
                                  o.getInverse(a),
                                  t.matrixWorld.multiply(a),
                                  t.matrixWorldInverse.multiply(o)),
                                !1 === i.isPresenting)
                              )
                                return t;
                              (s.near = t.near),
                                (c.near = t.near),
                                (s.far = t.far),
                                (c.far = t.far),
                                h.matrixWorld.copy(t.matrixWorld),
                                h.matrixWorldInverse.copy(t.matrixWorldInverse),
                                s.matrixWorldInverse.fromArray(
                                  n.leftViewMatrix
                                ),
                                c.matrixWorldInverse.fromArray(
                                  n.rightViewMatrix
                                ),
                                this.standing &&
                                  u &&
                                  (s.matrixWorldInverse.multiply(o),
                                  c.matrixWorldInverse.multiply(o));
                              var l = t.parent;
                              null !== l &&
                                (r.getInverse(l.matrixWorld),
                                s.matrixWorldInverse.multiply(r),
                                c.matrixWorldInverse.multiply(r)),
                                s.matrixWorld.getInverse(s.matrixWorldInverse),
                                c.matrixWorld.getInverse(c.matrixWorldInverse),
                                s.projectionMatrix.fromArray(
                                  n.leftProjectionMatrix
                                ),
                                c.projectionMatrix.fromArray(
                                  n.rightProjectionMatrix
                                ),
                                h.projectionMatrix.copy(s.projectionMatrix);
                              var d = i.getLayers();
                              if (d.length) {
                                var p = d[0];
                                null !== p.leftBounds &&
                                  4 === p.leftBounds.length &&
                                  s.bounds.fromArray(p.leftBounds),
                                  null !== p.rightBounds &&
                                    4 === p.rightBounds.length &&
                                    c.bounds.fromArray(p.rightBounds);
                              }
                              return h;
                            }),
                            (this.getStandingMatrix = function() {
                              return a;
                            }),
                            (this.submitFrame = function() {
                              i && i.isPresenting && i.submitFrame();
                            }),
                            (this.dispose = function() {
                              window.removeEventListener(
                                'vrdisplaypresentchange',
                                d
                              );
                            });
                        }(tt);
                        this.vr = jt;
                        var Ot = new fn(tt, z, C.maxTextureSize);
                        function Rt(t) {
                          t.preventDefault(), (it = !0);
                        }
                        function kt(t) {
                          (it = !1), _t();
                        }
                        function Ut(t) {
                          var e,
                            i = t.target;
                          i.removeEventListener('dispose', Ut),
                            Pt((e = i)),
                            I.remove(e);
                        }
                        function Pt(t) {
                          var e = I.get(t).program;
                          (t.program = void 0),
                            void 0 !== e && k.releaseProgram(e);
                        }
                        (this.shadowMap = Ot),
                          (this.getContext = function() {
                            return N;
                          }),
                          (this.getContextAttributes = function() {
                            return N.getContextAttributes();
                          }),
                          (this.forceContextLoss = function() {
                            var t = D.get('WEBGL_lose_context');
                            t && t.loseContext();
                          }),
                          (this.forceContextRestore = function() {
                            var t = D.get('WEBGL_lose_context');
                            t && t.restoreContext();
                          }),
                          (this.getPixelRatio = function() {
                            return mt;
                          }),
                          (this.setPixelRatio = function(t) {
                            void 0 !== t &&
                              ((mt = t), this.setSize(pt, ft, !1));
                          }),
                          (this.getSize = function() {
                            return { width: pt, height: ft };
                          }),
                          (this.setSize = function(t, i, n) {
                            var r = jt.getDevice();
                            (r && r.isPresenting) ||
                              ((pt = t),
                              (ft = i),
                              (e.width = t * mt),
                              (e.height = i * mt),
                              !1 !== n &&
                                ((e.style.width = t + 'px'),
                                (e.style.height = i + 'px')),
                              this.setViewport(0, 0, t, i));
                          }),
                          (this.getDrawingBufferSize = function() {
                            return { width: pt * mt, height: ft * mt };
                          }),
                          (this.setDrawingBufferSize = function(t, i, n) {
                            (pt = t),
                              (ft = i),
                              (mt = n),
                              (e.width = t * n),
                              (e.height = i * n),
                              this.setViewport(0, 0, t, i);
                          }),
                          (this.setViewport = function(t, e, i, n) {
                            gt.set(t, ft - e - n, i, n),
                              S.viewport(ut.copy(gt).multiplyScalar(mt));
                          }),
                          (this.setScissor = function(t, e, i, n) {
                            vt.set(t, ft - e - n, i, n),
                              S.scissor(lt.copy(vt).multiplyScalar(mt));
                          }),
                          (this.setScissorTest = function(t) {
                            S.setScissorTest((yt = t));
                          }),
                          (this.getClearColor = P.getClearColor),
                          (this.setClearColor = P.setClearColor),
                          (this.getClearAlpha = P.getClearAlpha),
                          (this.setClearAlpha = P.setClearAlpha),
                          (this.clear = function(t, e, i) {
                            var n = 0;
                            (void 0 === t || t) && (n |= N.COLOR_BUFFER_BIT),
                              (void 0 === e || e) && (n |= N.DEPTH_BUFFER_BIT),
                              (void 0 === i || i) &&
                                (n |= N.STENCIL_BUFFER_BIT),
                              N.clear(n);
                          }),
                          (this.clearColor = function() {
                            this.clear(!0, !1, !1);
                          }),
                          (this.clearDepth = function() {
                            this.clear(!1, !0, !1);
                          }),
                          (this.clearStencil = function() {
                            this.clear(!1, !1, !0);
                          }),
                          (this.clearTarget = function(t, e, i, n) {
                            this.setRenderTarget(t), this.clear(e, i, n);
                          }),
                          (this.dispose = function() {
                            e.removeEventListener('webglcontextlost', Rt, !1),
                              e.removeEventListener(
                                'webglcontextrestored',
                                kt,
                                !1
                              ),
                              U.dispose(),
                              jt.dispose();
                          }),
                          (this.renderBufferImmediate = function(t, e, i) {
                            S.initAttributes();
                            var n = I.get(t);
                            t.hasPositions &&
                              !n.position &&
                              (n.position = N.createBuffer()),
                              t.hasNormals &&
                                !n.normal &&
                                (n.normal = N.createBuffer()),
                              t.hasUvs && !n.uv && (n.uv = N.createBuffer()),
                              t.hasColors &&
                                !n.color &&
                                (n.color = N.createBuffer());
                            var r = e.getAttributes();
                            if (
                              (t.hasPositions &&
                                (N.bindBuffer(N.ARRAY_BUFFER, n.position),
                                N.bufferData(
                                  N.ARRAY_BUFFER,
                                  t.positionArray,
                                  N.DYNAMIC_DRAW
                                ),
                                S.enableAttribute(r.position),
                                N.vertexAttribPointer(
                                  r.position,
                                  3,
                                  N.FLOAT,
                                  !1,
                                  0,
                                  0
                                )),
                              t.hasNormals)
                            ) {
                              if (
                                (N.bindBuffer(N.ARRAY_BUFFER, n.normal),
                                !i.isMeshPhongMaterial &&
                                  !i.isMeshStandardMaterial &&
                                  !i.isMeshNormalMaterial &&
                                  !0 === i.flatShading)
                              )
                                for (
                                  var a = 0, o = 3 * t.count;
                                  a < o;
                                  a += 9
                                ) {
                                  var s = t.normalArray,
                                    c = (s[a + 0] + s[a + 3] + s[a + 6]) / 3,
                                    u = (s[a + 1] + s[a + 4] + s[a + 7]) / 3,
                                    l = (s[a + 2] + s[a + 5] + s[a + 8]) / 3;
                                  (s[a + 0] = c),
                                    (s[a + 1] = u),
                                    (s[a + 2] = l),
                                    (s[a + 3] = c),
                                    (s[a + 4] = u),
                                    (s[a + 5] = l),
                                    (s[a + 6] = c),
                                    (s[a + 7] = u),
                                    (s[a + 8] = l);
                                }
                              N.bufferData(
                                N.ARRAY_BUFFER,
                                t.normalArray,
                                N.DYNAMIC_DRAW
                              ),
                                S.enableAttribute(r.normal),
                                N.vertexAttribPointer(
                                  r.normal,
                                  3,
                                  N.FLOAT,
                                  !1,
                                  0,
                                  0
                                );
                            }
                            t.hasUvs &&
                              i.map &&
                              (N.bindBuffer(N.ARRAY_BUFFER, n.uv),
                              N.bufferData(
                                N.ARRAY_BUFFER,
                                t.uvArray,
                                N.DYNAMIC_DRAW
                              ),
                              S.enableAttribute(r.uv),
                              N.vertexAttribPointer(
                                r.uv,
                                2,
                                N.FLOAT,
                                !1,
                                0,
                                0
                              )),
                              t.hasColors &&
                                i.vertexColors !== y &&
                                (N.bindBuffer(N.ARRAY_BUFFER, n.color),
                                N.bufferData(
                                  N.ARRAY_BUFFER,
                                  t.colorArray,
                                  N.DYNAMIC_DRAW
                                ),
                                S.enableAttribute(r.color),
                                N.vertexAttribPointer(
                                  r.color,
                                  3,
                                  N.FLOAT,
                                  !1,
                                  0,
                                  0
                                )),
                              S.disableUnusedAttributes(),
                              N.drawArrays(N.TRIANGLES, 0, t.count),
                              (t.count = 0);
                          }),
                          (this.renderBufferDirect = function(
                            t,
                            e,
                            i,
                            n,
                            r,
                            a
                          ) {
                            S.setMaterial(n);
                            var o = qt(t, e, n, r),
                              s =
                                i.id + '_' + o.id + '_' + (!0 === n.wireframe),
                              c = !1;
                            s !== ot && ((ot = s), (c = !0)),
                              r.morphTargetInfluences &&
                                (B.update(r, i, n, o), (c = !0));
                            var u,
                              l = i.index,
                              h = i.attributes.position,
                              d = 1;
                            !0 === n.wireframe &&
                              ((l = O.getWireframeAttribute(i)), (d = 2));
                            var p = F;
                            null !== l && ((u = j.get(l)), (p = G).setIndex(u)),
                              c &&
                                (!(function(t, e, i, n) {
                                  if (
                                    i &&
                                    i.isInstancedBufferGeometry &&
                                    null === D.get('ANGLE_instanced_arrays')
                                  )
                                    return;
                                  void 0 === n && (n = 0);
                                  S.initAttributes();
                                  var r = i.attributes,
                                    a = e.getAttributes(),
                                    o = t.defaultAttributeValues;
                                  for (var s in a) {
                                    var c = a[s];
                                    if (c >= 0) {
                                      var u = r[s];
                                      if (void 0 !== u) {
                                        var l = u.normalized,
                                          h = u.itemSize,
                                          d = j.get(u);
                                        if (void 0 === d) continue;
                                        var p = d.buffer,
                                          f = d.type,
                                          m = d.bytesPerElement;
                                        if (u.isInterleavedBufferAttribute) {
                                          var g = u.data,
                                            v = g.stride,
                                            y = u.offset;
                                          g && g.isInstancedInterleavedBuffer
                                            ? (S.enableAttributeAndDivisor(
                                                c,
                                                g.meshPerAttribute
                                              ),
                                              void 0 === i.maxInstancedCount &&
                                                (i.maxInstancedCount =
                                                  g.meshPerAttribute * g.count))
                                            : S.enableAttribute(c),
                                            N.bindBuffer(N.ARRAY_BUFFER, p),
                                            N.vertexAttribPointer(
                                              c,
                                              h,
                                              f,
                                              l,
                                              v * m,
                                              (n * v + y) * m
                                            );
                                        } else
                                          u.isInstancedBufferAttribute
                                            ? (S.enableAttributeAndDivisor(
                                                c,
                                                u.meshPerAttribute
                                              ),
                                              void 0 === i.maxInstancedCount &&
                                                (i.maxInstancedCount =
                                                  u.meshPerAttribute * u.count))
                                            : S.enableAttribute(c),
                                            N.bindBuffer(N.ARRAY_BUFFER, p),
                                            N.vertexAttribPointer(
                                              c,
                                              h,
                                              f,
                                              l,
                                              0,
                                              n * h * m
                                            );
                                      } else if (void 0 !== o) {
                                        var M = o[s];
                                        if (void 0 !== M)
                                          switch (M.length) {
                                            case 2:
                                              N.vertexAttrib2fv(c, M);
                                              break;
                                            case 3:
                                              N.vertexAttrib3fv(c, M);
                                              break;
                                            case 4:
                                              N.vertexAttrib4fv(c, M);
                                              break;
                                            default:
                                              N.vertexAttrib1fv(c, M);
                                          }
                                      }
                                    }
                                  }
                                  S.disableUnusedAttributes();
                                })(n, o, i),
                                null !== l &&
                                  N.bindBuffer(
                                    N.ELEMENT_ARRAY_BUFFER,
                                    u.buffer
                                  ));
                            var f = 0;
                            null !== l
                              ? (f = l.count)
                              : void 0 !== h && (f = h.count);
                            var m = i.drawRange.start * d,
                              g = i.drawRange.count * d,
                              v = null !== a ? a.start * d : 0,
                              y = null !== a ? a.count * d : 1 / 0,
                              M = Math.max(m, v),
                              w = Math.min(f, m + g, v + y) - 1,
                              x = Math.max(0, w - M + 1);
                            if (0 !== x) {
                              if (r.isMesh)
                                if (!0 === n.wireframe)
                                  S.setLineWidth(n.wireframeLinewidth * St()),
                                    p.setMode(N.LINES);
                                else
                                  switch (r.drawMode) {
                                    case Jt:
                                      p.setMode(N.TRIANGLES);
                                      break;
                                    case $t:
                                      p.setMode(N.TRIANGLE_STRIP);
                                      break;
                                    case te:
                                      p.setMode(N.TRIANGLE_FAN);
                                  }
                              else if (r.isLine) {
                                var A = n.linewidth;
                                void 0 === A && (A = 1),
                                  S.setLineWidth(A * St()),
                                  r.isLineSegments
                                    ? p.setMode(N.LINES)
                                    : r.isLineLoop
                                      ? p.setMode(N.LINE_LOOP)
                                      : p.setMode(N.LINE_STRIP);
                              } else r.isPoints && p.setMode(N.POINTS);
                              i && i.isInstancedBufferGeometry
                                ? i.maxInstancedCount > 0 &&
                                  p.renderInstances(i, M, x)
                                : p.render(M, x);
                            }
                          }),
                          (this.compile = function(t, e) {
                            (p.length = 0),
                              (f.length = 0),
                              t.traverse(function(t) {
                                t.isLight &&
                                  (p.push(t), t.castShadow && f.push(t));
                              }),
                              R.setup(p, f, e),
                              t.traverse(function(i) {
                                if (i.material)
                                  if (Array.isArray(i.material))
                                    for (var n = 0; n < i.material.length; n++)
                                      Xt(i.material[n], t.fog, i);
                                  else
                                    Xt(i.material, t.fog, i),
                                      qt(e, t.fog, i.material, i);
                              });
                          });
                        var Bt,
                          Ft,
                          Gt,
                          Vt = !1,
                          Yt = null;
                        function Qt(t) {
                          null !== Yt && Yt(t),
                            (jt.getDevice() || window).requestAnimationFrame(
                              Qt
                            );
                        }
                        function Ht(t, e, i, n) {
                          for (var r = 0, a = t.length; r < a; r++) {
                            var o = t[r],
                              s = o.object,
                              c = o.geometry,
                              u = void 0 === n ? o.material : n,
                              l = o.group;
                            if (i.isArrayCamera) {
                              ct = i;
                              for (
                                var h = i.cameras, d = 0, p = h.length;
                                d < p;
                                d++
                              ) {
                                var f = h[d];
                                if (s.layers.test(f.layers)) {
                                  var m = f.bounds,
                                    g = m.x * pt,
                                    v = m.y * ft,
                                    y = m.z * pt,
                                    M = m.w * ft;
                                  S.viewport(
                                    ut.set(g, v, y, M).multiplyScalar(mt)
                                  ),
                                    Wt(s, e, f, c, u, l);
                                }
                              }
                            } else (ct = null), Wt(s, e, i, c, u, l);
                          }
                        }
                        function Wt(t, e, i, n, r, a) {
                          if (
                            (t.onBeforeRender(tt, e, i, n, r, a),
                            t.modelViewMatrix.multiplyMatrices(
                              i.matrixWorldInverse,
                              t.matrixWorld
                            ),
                            t.normalMatrix.getNormalMatrix(t.modelViewMatrix),
                            t.isImmediateRenderObject)
                          ) {
                            S.setMaterial(r);
                            var o = qt(i, e.fog, r, t);
                            (ot = ''),
                              (s = o),
                              (c = r),
                              t.render(function(t) {
                                tt.renderBufferImmediate(t, s, c);
                              });
                          } else tt.renderBufferDirect(i, e.fog, n, r, t, a);
                          var s, c;
                          t.onAfterRender(tt, e, i, n, r, a);
                        }
                        function Xt(t, e, i) {
                          var n = I.get(t),
                            r = k.getParameters(
                              t,
                              R.state,
                              f,
                              e,
                              wt.numPlanes,
                              wt.numIntersection,
                              i
                            ),
                            a = k.getProgramCode(t, r),
                            o = n.program,
                            s = !0;
                          if (void 0 === o) t.addEventListener('dispose', Ut);
                          else if (o.code !== a) Pt(t);
                          else {
                            if (void 0 !== r.shaderID) return;
                            s = !1;
                          }
                          if (s) {
                            if (r.shaderID) {
                              var c = ji[r.shaderID];
                              n.shader = {
                                name: t.type,
                                uniforms: Ii.clone(c.uniforms),
                                vertexShader: c.vertexShader,
                                fragmentShader: c.fragmentShader
                              };
                            } else
                              n.shader = {
                                name: t.type,
                                uniforms: t.uniforms,
                                vertexShader: t.vertexShader,
                                fragmentShader: t.fragmentShader
                              };
                            t.onBeforeCompile(n.shader),
                              (o = k.acquireProgram(t, n.shader, r, a)),
                              (n.program = o),
                              (t.program = o);
                          }
                          var u = o.getAttributes();
                          if (t.morphTargets) {
                            t.numSupportedMorphTargets = 0;
                            for (var l = 0; l < tt.maxMorphTargets; l++)
                              u['morphTarget' + l] >= 0 &&
                                t.numSupportedMorphTargets++;
                          }
                          if (t.morphNormals) {
                            t.numSupportedMorphNormals = 0;
                            for (l = 0; l < tt.maxMorphNormals; l++)
                              u['morphNormal' + l] >= 0 &&
                                t.numSupportedMorphNormals++;
                          }
                          var h = n.shader.uniforms;
                          ((t.isShaderMaterial || t.isRawShaderMaterial) &&
                            !0 !== t.clipping) ||
                            ((n.numClippingPlanes = wt.numPlanes),
                            (n.numIntersection = wt.numIntersection),
                            (h.clippingPlanes = wt.uniform)),
                            (n.fog = e),
                            (n.lightsHash = R.state.hash),
                            t.lights &&
                              ((h.ambientLightColor.value = R.state.ambient),
                              (h.directionalLights.value = R.state.directional),
                              (h.spotLights.value = R.state.spot),
                              (h.rectAreaLights.value = R.state.rectArea),
                              (h.pointLights.value = R.state.point),
                              (h.hemisphereLights.value = R.state.hemi),
                              (h.directionalShadowMap.value =
                                R.state.directionalShadowMap),
                              (h.directionalShadowMatrix.value =
                                R.state.directionalShadowMatrix),
                              (h.spotShadowMap.value = R.state.spotShadowMap),
                              (h.spotShadowMatrix.value =
                                R.state.spotShadowMatrix),
                              (h.pointShadowMap.value = R.state.pointShadowMap),
                              (h.pointShadowMatrix.value =
                                R.state.pointShadowMatrix));
                          var d = n.program.getUniforms(),
                            p = Ti.seqWithValue(d.seq, h);
                          n.uniformsList = p;
                        }
                        function qt(t, e, i, n) {
                          dt = 0;
                          var r = I.get(i);
                          if (At && (Et || t !== st)) {
                            var a = t === st && i.id === at;
                            wt.setState(
                              i.clippingPlanes,
                              i.clipIntersection,
                              i.clipShadows,
                              t,
                              r,
                              a
                            );
                          }
                          !1 === i.needsUpdate &&
                            (void 0 === r.program
                              ? (i.needsUpdate = !0)
                              : i.fog && r.fog !== e
                                ? (i.needsUpdate = !0)
                                : i.lights && r.lightsHash !== R.state.hash
                                  ? (i.needsUpdate = !0)
                                  : void 0 === r.numClippingPlanes ||
                                    (r.numClippingPlanes === wt.numPlanes &&
                                      r.numIntersection ===
                                        wt.numIntersection) ||
                                    (i.needsUpdate = !0)),
                            i.needsUpdate &&
                              (Xt(i, e, n), (i.needsUpdate = !1));
                          var o,
                            s,
                            c,
                            u,
                            l,
                            h,
                            d,
                            p,
                            f,
                            m,
                            g,
                            v,
                            y,
                            M,
                            w,
                            x,
                            A = !1,
                            E = !1,
                            b = !1,
                            T = r.program,
                            L = T.getUniforms(),
                            D = r.shader.uniforms;
                          if (
                            (S.useProgram(T.program) &&
                              ((A = !0), (E = !0), (b = !0)),
                            i.id !== at && ((at = i.id), (E = !0)),
                            A || t !== st)
                          ) {
                            if (
                              (L.setValue(
                                N,
                                'projectionMatrix',
                                t.projectionMatrix
                              ),
                              C.logarithmicDepthBuffer &&
                                L.setValue(
                                  N,
                                  'logDepthBufFC',
                                  2 / (Math.log(t.far + 1) / Math.LN2)
                                ),
                              st !== (ct || t) &&
                                ((st = ct || t), (E = !0), (b = !0)),
                              i.isShaderMaterial ||
                                i.isMeshPhongMaterial ||
                                i.isMeshStandardMaterial ||
                                i.envMap)
                            ) {
                              var _ = L.map.cameraPosition;
                              void 0 !== _ &&
                                _.setValue(
                                  N,
                                  Tt.setFromMatrixPosition(t.matrixWorld)
                                );
                            }
                            (i.isMeshPhongMaterial ||
                              i.isMeshLambertMaterial ||
                              i.isMeshBasicMaterial ||
                              i.isMeshStandardMaterial ||
                              i.isShaderMaterial ||
                              i.skinning) &&
                              L.setValue(N, 'viewMatrix', t.matrixWorldInverse);
                          }
                          if (i.skinning) {
                            L.setOptional(N, n, 'bindMatrix'),
                              L.setOptional(N, n, 'bindMatrixInverse');
                            var j = n.skeleton;
                            if (j) {
                              var O = j.bones;
                              if (C.floatVertexTextures) {
                                if (void 0 === j.boneTexture) {
                                  var z = Math.sqrt(4 * O.length);
                                  (z = le.nextPowerOfTwo(Math.ceil(z))),
                                    (z = Math.max(z, 4));
                                  var k = new Float32Array(z * z * 4);
                                  k.set(j.boneMatrices);
                                  var U = new Pe(k, z, z, zt, Nt);
                                  (j.boneMatrices = k),
                                    (j.boneTexture = U),
                                    (j.boneTextureSize = z);
                                }
                                L.setValue(N, 'boneTexture', j.boneTexture),
                                  L.setValue(
                                    N,
                                    'boneTextureSize',
                                    j.boneTextureSize
                                  );
                              } else L.setOptional(N, j, 'boneMatrices');
                            }
                          }
                          return (
                            E &&
                              (L.setValue(
                                N,
                                'toneMappingExposure',
                                tt.toneMappingExposure
                              ),
                              L.setValue(
                                N,
                                'toneMappingWhitePoint',
                                tt.toneMappingWhitePoint
                              ),
                              i.lights &&
                                ((x = b),
                                ((w = D).ambientLightColor.needsUpdate = x),
                                (w.directionalLights.needsUpdate = x),
                                (w.pointLights.needsUpdate = x),
                                (w.spotLights.needsUpdate = x),
                                (w.rectAreaLights.needsUpdate = x),
                                (w.hemisphereLights.needsUpdate = x)),
                              e &&
                                i.fog &&
                                ((M = e),
                                ((y = D).fogColor.value = M.color),
                                M.isFog
                                  ? ((y.fogNear.value = M.near),
                                    (y.fogFar.value = M.far))
                                  : M.isFogExp2 &&
                                    (y.fogDensity.value = M.density)),
                              i.isMeshBasicMaterial
                                ? Zt(D, i)
                                : i.isMeshLambertMaterial
                                  ? (Zt(D, i),
                                    (g = D),
                                    (v = i).emissiveMap &&
                                      (g.emissiveMap.value = v.emissiveMap))
                                  : i.isMeshPhongMaterial
                                    ? (Zt(D, i),
                                      i.isMeshToonMaterial
                                        ? (Kt((f = D), (m = i)),
                                          m.gradientMap &&
                                            (f.gradientMap.value =
                                              m.gradientMap))
                                        : Kt(D, i))
                                    : i.isMeshStandardMaterial
                                      ? (Zt(D, i),
                                        i.isMeshPhysicalMaterial
                                          ? ((p = i),
                                            ((d = D).clearCoat.value =
                                              p.clearCoat),
                                            (d.clearCoatRoughness.value =
                                              p.clearCoatRoughness),
                                            ee(d, p))
                                          : ee(D, i))
                                      : i.isMeshDepthMaterial
                                        ? (Zt(D, i),
                                          (l = D),
                                          (h = i).displacementMap &&
                                            ((l.displacementMap.value =
                                              h.displacementMap),
                                            (l.displacementScale.value =
                                              h.displacementScale),
                                            (l.displacementBias.value =
                                              h.displacementBias)))
                                        : i.isMeshDistanceMaterial
                                          ? (Zt(D, i),
                                            (function(t, e) {
                                              e.displacementMap &&
                                                ((t.displacementMap.value =
                                                  e.displacementMap),
                                                (t.displacementScale.value =
                                                  e.displacementScale),
                                                (t.displacementBias.value =
                                                  e.displacementBias));
                                              t.referencePosition.value.copy(
                                                e.referencePosition
                                              ),
                                                (t.nearDistance.value =
                                                  e.nearDistance),
                                                (t.farDistance.value =
                                                  e.farDistance);
                                            })(D, i))
                                          : i.isMeshNormalMaterial
                                            ? (Zt(D, i),
                                              (function(t, e) {
                                                e.bumpMap &&
                                                  ((t.bumpMap.value =
                                                    e.bumpMap),
                                                  (t.bumpScale.value =
                                                    e.bumpScale));
                                                e.normalMap &&
                                                  ((t.normalMap.value =
                                                    e.normalMap),
                                                  t.normalScale.value.copy(
                                                    e.normalScale
                                                  ));
                                                e.displacementMap &&
                                                  ((t.displacementMap.value =
                                                    e.displacementMap),
                                                  (t.displacementScale.value =
                                                    e.displacementScale),
                                                  (t.displacementBias.value =
                                                    e.displacementBias));
                                              })(D, i))
                                            : i.isLineBasicMaterial
                                              ? ((u = i),
                                                ((c = D).diffuse.value =
                                                  u.color),
                                                (c.opacity.value = u.opacity),
                                                i.isLineDashedMaterial &&
                                                  ((s = i),
                                                  ((o = D).dashSize.value =
                                                    s.dashSize),
                                                  (o.totalSize.value =
                                                    s.dashSize + s.gapSize),
                                                  (o.scale.value = s.scale)))
                                              : i.isPointsMaterial
                                                ? (function(t, e) {
                                                    if (
                                                      ((t.diffuse.value =
                                                        e.color),
                                                      (t.opacity.value =
                                                        e.opacity),
                                                      (t.size.value =
                                                        e.size * mt),
                                                      (t.scale.value =
                                                        0.5 * ft),
                                                      (t.map.value = e.map),
                                                      null !== e.map)
                                                    ) {
                                                      var i = e.map.offset,
                                                        n = e.map.repeat;
                                                      t.offsetRepeat.value.set(
                                                        i.x,
                                                        i.y,
                                                        n.x,
                                                        n.y
                                                      );
                                                    }
                                                  })(D, i)
                                                : i.isShadowMaterial &&
                                                  ((D.color.value = i.color),
                                                  (D.opacity.value =
                                                    i.opacity)),
                              void 0 !== D.ltcMat &&
                                (D.ltcMat.value = Si.LTC_MAT_TEXTURE),
                              void 0 !== D.ltcMag &&
                                (D.ltcMag.value = Si.LTC_MAG_TEXTURE),
                              Ti.upload(N, r.uniformsList, D, tt)),
                            L.setValue(N, 'modelViewMatrix', n.modelViewMatrix),
                            L.setValue(N, 'normalMatrix', n.normalMatrix),
                            L.setValue(N, 'modelMatrix', n.matrixWorld),
                            T
                          );
                        }
                        function Zt(t, e) {
                          var i;
                          if (
                            ((t.opacity.value = e.opacity),
                            e.color && (t.diffuse.value = e.color),
                            e.emissive &&
                              t.emissive.value
                                .copy(e.emissive)
                                .multiplyScalar(e.emissiveIntensity),
                            e.map && (t.map.value = e.map),
                            e.alphaMap && (t.alphaMap.value = e.alphaMap),
                            e.specularMap &&
                              (t.specularMap.value = e.specularMap),
                            e.envMap &&
                              ((t.envMap.value = e.envMap),
                              (t.flipEnvMap.value =
                                e.envMap && e.envMap.isCubeTexture ? -1 : 1),
                              (t.reflectivity.value = e.reflectivity),
                              (t.refractionRatio.value = e.refractionRatio)),
                            e.lightMap &&
                              ((t.lightMap.value = e.lightMap),
                              (t.lightMapIntensity.value =
                                e.lightMapIntensity)),
                            e.aoMap &&
                              ((t.aoMap.value = e.aoMap),
                              (t.aoMapIntensity.value = e.aoMapIntensity)),
                            e.map
                              ? (i = e.map)
                              : e.specularMap
                                ? (i = e.specularMap)
                                : e.displacementMap
                                  ? (i = e.displacementMap)
                                  : e.normalMap
                                    ? (i = e.normalMap)
                                    : e.bumpMap
                                      ? (i = e.bumpMap)
                                      : e.roughnessMap
                                        ? (i = e.roughnessMap)
                                        : e.metalnessMap
                                          ? (i = e.metalnessMap)
                                          : e.alphaMap
                                            ? (i = e.alphaMap)
                                            : e.emissiveMap &&
                                              (i = e.emissiveMap),
                            void 0 !== i)
                          ) {
                            i.isWebGLRenderTarget && (i = i.texture);
                            var n = i.offset,
                              r = i.repeat;
                            t.offsetRepeat.value.set(n.x, n.y, r.x, r.y);
                          }
                        }
                        function Kt(t, e) {
                          (t.specular.value = e.specular),
                            (t.shininess.value = Math.max(e.shininess, 1e-4)),
                            e.emissiveMap &&
                              (t.emissiveMap.value = e.emissiveMap),
                            e.bumpMap &&
                              ((t.bumpMap.value = e.bumpMap),
                              (t.bumpScale.value = e.bumpScale)),
                            e.normalMap &&
                              ((t.normalMap.value = e.normalMap),
                              t.normalScale.value.copy(e.normalScale)),
                            e.displacementMap &&
                              ((t.displacementMap.value = e.displacementMap),
                              (t.displacementScale.value = e.displacementScale),
                              (t.displacementBias.value = e.displacementBias));
                        }
                        function ee(t, e) {
                          (t.roughness.value = e.roughness),
                            (t.metalness.value = e.metalness),
                            e.roughnessMap &&
                              (t.roughnessMap.value = e.roughnessMap),
                            e.metalnessMap &&
                              (t.metalnessMap.value = e.metalnessMap),
                            e.emissiveMap &&
                              (t.emissiveMap.value = e.emissiveMap),
                            e.bumpMap &&
                              ((t.bumpMap.value = e.bumpMap),
                              (t.bumpScale.value = e.bumpScale)),
                            e.normalMap &&
                              ((t.normalMap.value = e.normalMap),
                              t.normalScale.value.copy(e.normalScale)),
                            e.displacementMap &&
                              ((t.displacementMap.value = e.displacementMap),
                              (t.displacementScale.value = e.displacementScale),
                              (t.displacementBias.value = e.displacementBias)),
                            e.envMap &&
                              (t.envMapIntensity.value = e.envMapIntensity);
                        }
                        (this.animate = function(t) {
                          (Yt = t),
                            Vt ||
                              ((jt.getDevice() || window).requestAnimationFrame(
                                Qt
                              ),
                              (Vt = !0));
                        }),
                          (this.render = function(t, e, i, n) {
                            if (e && e.isCamera && !it) {
                              (ot = ''),
                                (at = -1),
                                (st = null),
                                !0 === t.autoUpdate && t.updateMatrixWorld(),
                                null === e.parent && e.updateMatrixWorld(),
                                jt.enabled && (e = jt.getCamera(e)),
                                bt.multiplyMatrices(
                                  e.projectionMatrix,
                                  e.matrixWorldInverse
                                ),
                                Mt.setFromMatrix(bt),
                                (p.length = 0),
                                (f.length = 0),
                                (M.length = 0),
                                (w.length = 0),
                                (Et = this.localClippingEnabled),
                                (At = wt.init(this.clippingPlanes, Et, e)),
                                (m = U.get(t, e)).init(),
                                (function t(e, i, n) {
                                  if (!e.visible) return;
                                  var r = e.layers.test(i.layers);
                                  if (r)
                                    if (e.isLight)
                                      p.push(e), e.castShadow && f.push(e);
                                    else if (e.isSprite)
                                      (e.frustumCulled &&
                                        !Mt.intersectsSprite(e)) ||
                                        M.push(e);
                                    else if (e.isLensFlare) w.push(e);
                                    else if (e.isImmediateRenderObject)
                                      n &&
                                        Tt.setFromMatrixPosition(
                                          e.matrixWorld
                                        ).applyMatrix4(bt),
                                        m.push(e, null, e.material, Tt.z, null);
                                    else if (
                                      (e.isMesh || e.isLine || e.isPoints) &&
                                      (e.isSkinnedMesh && e.skeleton.update(),
                                      !e.frustumCulled ||
                                        Mt.intersectsObject(e))
                                    ) {
                                      n &&
                                        Tt.setFromMatrixPosition(
                                          e.matrixWorld
                                        ).applyMatrix4(bt);
                                      var a = z.update(e),
                                        o = e.material;
                                      if (Array.isArray(o))
                                        for (
                                          var s = a.groups, c = 0, u = s.length;
                                          c < u;
                                          c++
                                        ) {
                                          var l = s[c],
                                            h = o[l.materialIndex];
                                          h &&
                                            h.visible &&
                                            m.push(e, a, h, Tt.z, l);
                                        }
                                      else
                                        o.visible &&
                                          m.push(e, a, o, Tt.z, null);
                                    }
                                  var d = e.children;
                                  for (var c = 0, u = d.length; c < u; c++)
                                    t(d[c], i, n);
                                })(t, e, tt.sortObjects),
                                !0 === tt.sortObjects && m.sort(),
                                At && wt.beginShadows(),
                                Ot.render(f, t, e),
                                R.setup(p, f, e),
                                At && wt.endShadows(),
                                Ct.frame++,
                                (Ct.calls = 0),
                                (Ct.vertices = 0),
                                (Ct.faces = 0),
                                (Ct.points = 0),
                                void 0 === i && (i = null),
                                this.setRenderTarget(i),
                                P.render(m, t, e, n);
                              var r = m.opaque,
                                a = m.transparent;
                              if (t.overrideMaterial) {
                                var o = t.overrideMaterial;
                                r.length && Ht(r, t, e, o),
                                  a.length && Ht(a, t, e, o);
                              } else
                                r.length && Ht(r, t, e),
                                  a.length && Ht(a, t, e);
                              J.render(M, t, e),
                                K.render(w, t, e, ut),
                                i && _.updateRenderTargetMipmap(i),
                                S.buffers.depth.setTest(!0),
                                S.buffers.depth.setMask(!0),
                                S.buffers.color.setMask(!0),
                                S.setPolygonOffset(!1),
                                jt.enabled && jt.submitFrame();
                            }
                          }),
                          (this.setFaceCulling = function(t, e) {
                            S.setCullFace(t), S.setFlipSided(e === d);
                          }),
                          (this.allocTextureUnit = function() {
                            var t = dt;
                            return C.maxTextures, (dt += 1), t;
                          }),
                          (this.setTexture2D = ((Bt = !1),
                          function(t, e) {
                            t &&
                              t.isWebGLRenderTarget &&
                              (Bt || (Bt = !0), (t = t.texture)),
                              _.setTexture2D(t, e);
                          })),
                          (this.setTexture = ((Ft = !1),
                          function(t, e) {
                            Ft || (Ft = !0), _.setTexture2D(t, e);
                          })),
                          (this.setTextureCube = ((Gt = !1),
                          function(t, e) {
                            t &&
                              t.isWebGLRenderTargetCube &&
                              (Gt || (Gt = !0), (t = t.texture)),
                              (t && t.isCubeTexture) ||
                              (Array.isArray(t.image) && 6 === t.image.length)
                                ? _.setTextureCube(t, e)
                                : _.setTextureCubeDynamic(t, e);
                          })),
                          (this.getRenderTarget = function() {
                            return nt;
                          }),
                          (this.setRenderTarget = function(t) {
                            (nt = t),
                              t &&
                                void 0 === I.get(t).__webglFramebuffer &&
                                _.setupRenderTarget(t);
                            var e = null,
                              i = !1;
                            if (t) {
                              var n = I.get(t).__webglFramebuffer;
                              t.isWebGLRenderTargetCube
                                ? ((e = n[t.activeCubeFace]), (i = !0))
                                : (e = n),
                                ut.copy(t.viewport),
                                lt.copy(t.scissor),
                                (ht = t.scissorTest);
                            } else
                              ut.copy(gt).multiplyScalar(mt),
                                lt.copy(vt).multiplyScalar(mt),
                                (ht = yt);
                            if (
                              (rt !== e &&
                                (N.bindFramebuffer(N.FRAMEBUFFER, e), (rt = e)),
                              S.viewport(ut),
                              S.scissor(lt),
                              S.setScissorTest(ht),
                              i)
                            ) {
                              var r = I.get(t.texture);
                              N.framebufferTexture2D(
                                N.FRAMEBUFFER,
                                N.COLOR_ATTACHMENT0,
                                N.TEXTURE_CUBE_MAP_POSITIVE_X +
                                  t.activeCubeFace,
                                r.__webglTexture,
                                t.activeMipMapLevel
                              );
                            }
                          }),
                          (this.readRenderTargetPixels = function(
                            t,
                            e,
                            i,
                            n,
                            r,
                            a
                          ) {
                            if (t && t.isWebGLRenderTarget) {
                              var o = I.get(t).__webglFramebuffer;
                              if (o) {
                                var s = !1;
                                o !== rt &&
                                  (N.bindFramebuffer(N.FRAMEBUFFER, o),
                                  (s = !0));
                                try {
                                  var c = t.texture,
                                    u = c.format,
                                    l = c.type;
                                  if (
                                    u !== zt &&
                                    $.convert(u) !==
                                      N.getParameter(
                                        N.IMPLEMENTATION_COLOR_READ_FORMAT
                                      )
                                  )
                                    return;
                                  if (
                                    !(
                                      l === xt ||
                                      $.convert(l) ===
                                        N.getParameter(
                                          N.IMPLEMENTATION_COLOR_READ_TYPE
                                        ) ||
                                      (l === Nt &&
                                        (D.get('OES_texture_float') ||
                                          D.get('WEBGL_color_buffer_float'))) ||
                                      (l === Dt &&
                                        D.get('EXT_color_buffer_half_float'))
                                    )
                                  )
                                    return;
                                  N.checkFramebufferStatus(N.FRAMEBUFFER) ===
                                    N.FRAMEBUFFER_COMPLETE &&
                                    e >= 0 &&
                                    e <= t.width - n &&
                                    i >= 0 &&
                                    i <= t.height - r &&
                                    N.readPixels(
                                      e,
                                      i,
                                      n,
                                      r,
                                      $.convert(u),
                                      $.convert(l),
                                      a
                                    );
                                } finally {
                                  s && N.bindFramebuffer(N.FRAMEBUFFER, rt);
                                }
                              }
                            }
                          });
                      }
                      function Sa(t, e) {
                        (this.name = ''),
                          (this.color = new Ni(t)),
                          (this.density = void 0 !== e ? e : 25e-5);
                      }
                      function Ia(t, e, i) {
                        (this.name = ''),
                          (this.color = new Ni(t)),
                          (this.near = void 0 !== e ? e : 1),
                          (this.far = void 0 !== i ? i : 1e3);
                      }
                      function _a() {
                        Rn.call(this),
                          (this.type = 'Scene'),
                          (this.background = null),
                          (this.fog = null),
                          (this.overrideMaterial = null),
                          (this.autoUpdate = !0);
                      }
                      function ja(t, e, i, n, r) {
                        Rn.call(this),
                          (this.lensFlares = []),
                          (this.positionScreen = new ke()),
                          (this.customUpdateCallback = void 0),
                          void 0 !== t && this.add(t, e, i, n, r);
                      }
                      function Oa(t) {
                        an.call(this),
                          (this.type = 'SpriteMaterial'),
                          (this.color = new Ni(16777215)),
                          (this.map = null),
                          (this.rotation = 0),
                          (this.fog = !1),
                          (this.lights = !1),
                          this.setValues(t);
                      }
                      function za(t) {
                        Rn.call(this),
                          (this.type = 'Sprite'),
                          (this.material = void 0 !== t ? t : new Oa());
                      }
                      function Ra() {
                        Rn.call(this),
                          (this.type = 'LOD'),
                          Object.defineProperties(this, {
                            levels: { enumerable: !0, value: [] }
                          });
                      }
                      function ka(t, e) {
                        if (
                          ((t = t || []),
                          (this.bones = t.slice(0)),
                          (this.boneMatrices = new Float32Array(
                            16 * this.bones.length
                          )),
                          void 0 === e)
                        )
                          this.calculateInverses();
                        else if (this.bones.length === e.length)
                          this.boneInverses = e.slice(0);
                        else {
                          this.boneInverses = [];
                          for (var i = 0, n = this.bones.length; i < n; i++)
                            this.boneInverses.push(new Ue());
                        }
                      }
                      function Ua() {
                        Rn.call(this), (this.type = 'Bone');
                      }
                      function Pa(t, e) {
                        Zr.call(this, t, e),
                          (this.type = 'SkinnedMesh'),
                          (this.bindMode = 'attached'),
                          (this.bindMatrix = new Ue()),
                          (this.bindMatrixInverse = new Ue());
                        var i = new ka(this.initBones());
                        this.bind(i, this.matrixWorld),
                          this.normalizeSkinWeights();
                      }
                      function Ba(t) {
                        an.call(this),
                          (this.type = 'LineBasicMaterial'),
                          (this.color = new Ni(16777215)),
                          (this.linewidth = 1),
                          (this.linecap = 'round'),
                          (this.linejoin = 'round'),
                          (this.lights = !1),
                          this.setValues(t);
                      }
                      function Fa(t, e, i) {
                        if (1 === i) return new Ga(t, e);
                        Rn.call(this),
                          (this.type = 'Line'),
                          (this.geometry = void 0 !== t ? t : new Fr()),
                          (this.material =
                            void 0 !== e
                              ? e
                              : new Ba({ color: 16777215 * Math.random() }));
                      }
                      function Ga(t, e) {
                        Fa.call(this, t, e), (this.type = 'LineSegments');
                      }
                      function Va(t, e) {
                        Fa.call(this, t, e), (this.type = 'LineLoop');
                      }
                      function Ya(t) {
                        an.call(this),
                          (this.type = 'PointsMaterial'),
                          (this.color = new Ni(16777215)),
                          (this.map = null),
                          (this.size = 1),
                          (this.sizeAttenuation = !0),
                          (this.lights = !1),
                          this.setValues(t);
                      }
                      function Qa(t, e) {
                        Rn.call(this),
                          (this.type = 'Points'),
                          (this.geometry = void 0 !== t ? t : new Fr()),
                          (this.material =
                            void 0 !== e
                              ? e
                              : new Ya({ color: 16777215 * Math.random() }));
                      }
                      function Ha() {
                        Rn.call(this), (this.type = 'Group');
                      }
                      function Wa(t, e, i, n, r, a, o, s, c) {
                        _e.call(this, t, e, i, n, r, a, o, s, c),
                          (this.generateMipmaps = !1);
                        var u = this;
                        !(function e() {
                          requestAnimationFrame(e),
                            t.readyState >= t.HAVE_CURRENT_DATA &&
                              (u.needsUpdate = !0);
                        })();
                      }
                      function Xa(t, e, i, n, r, a, o, s, c, u, l, h) {
                        _e.call(this, null, a, o, s, c, u, n, r, l, h),
                          (this.image = { width: e, height: i }),
                          (this.mipmaps = t),
                          (this.flipY = !1),
                          (this.generateMipmaps = !1);
                      }
                      function qa(t, e, i, n, r, a, o, s, c, u) {
                        if ((u = void 0 !== u ? u : Pt) !== Pt && u !== Bt)
                          throw new Error(
                            'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat'
                          );
                        void 0 === i && u === Pt && (i = bt),
                          void 0 === i && u === Bt && (i = _t),
                          _e.call(this, null, n, r, a, o, s, u, i, c),
                          (this.image = { width: t, height: e }),
                          (this.magFilter = void 0 !== o ? o : mt),
                          (this.minFilter = void 0 !== s ? s : mt),
                          (this.flipY = !1),
                          (this.generateMipmaps = !1);
                      }
                      function Za(t) {
                        Fr.call(this), (this.type = 'WireframeGeometry');
                        var e,
                          i,
                          n,
                          r,
                          a,
                          o,
                          s,
                          c,
                          u,
                          l,
                          h = [],
                          d = [0, 0],
                          p = {},
                          f = ['a', 'b', 'c'];
                        if (t && t.isGeometry) {
                          var m = t.faces;
                          for (e = 0, n = m.length; e < n; e++) {
                            var g = m[e];
                            for (i = 0; i < 3; i++)
                              (s = g[f[i]]),
                                (c = g[f[(i + 1) % 3]]),
                                (d[0] = Math.min(s, c)),
                                (d[1] = Math.max(s, c)),
                                void 0 === p[(u = d[0] + ',' + d[1])] &&
                                  (p[u] = { index1: d[0], index2: d[1] });
                          }
                          for (u in p)
                            (o = p[u]),
                              (l = t.vertices[o.index1]),
                              h.push(l.x, l.y, l.z),
                              (l = t.vertices[o.index2]),
                              h.push(l.x, l.y, l.z);
                        } else if (t && t.isBufferGeometry) {
                          var v, y, M, w, x, A, E;
                          if (((l = new ke()), null !== t.index)) {
                            for (
                              v = t.attributes.position,
                                y = t.index,
                                0 === (M = t.groups).length &&
                                  (M = [
                                    {
                                      start: 0,
                                      count: y.count,
                                      materialIndex: 0
                                    }
                                  ]),
                                r = 0,
                                a = M.length;
                              r < a;
                              ++r
                            )
                              for (
                                e = x = (w = M[r]).start, n = x + w.count;
                                e < n;
                                e += 3
                              )
                                for (i = 0; i < 3; i++)
                                  (s = y.getX(e + i)),
                                    (c = y.getX(e + (i + 1) % 3)),
                                    (d[0] = Math.min(s, c)),
                                    (d[1] = Math.max(s, c)),
                                    void 0 === p[(u = d[0] + ',' + d[1])] &&
                                      (p[u] = { index1: d[0], index2: d[1] });
                            for (u in p)
                              (o = p[u]),
                                l.fromBufferAttribute(v, o.index1),
                                h.push(l.x, l.y, l.z),
                                l.fromBufferAttribute(v, o.index2),
                                h.push(l.x, l.y, l.z);
                          } else
                            for (
                              e = 0, n = (v = t.attributes.position).count / 3;
                              e < n;
                              e++
                            )
                              for (i = 0; i < 3; i++)
                                (A = 3 * e + i),
                                  l.fromBufferAttribute(v, A),
                                  h.push(l.x, l.y, l.z),
                                  (E = 3 * e + (i + 1) % 3),
                                  l.fromBufferAttribute(v, E),
                                  h.push(l.x, l.y, l.z);
                        }
                        this.addAttribute('position', new kr(h, 3));
                      }
                      function Ka(t, e, i) {
                        Dr.call(this),
                          (this.type = 'ParametricGeometry'),
                          (this.parameters = { func: t, slices: e, stacks: i }),
                          this.fromBufferGeometry(new Ja(t, e, i)),
                          this.mergeVertices();
                      }
                      function Ja(t, e, i) {
                        Fr.call(this),
                          (this.type = 'ParametricBufferGeometry'),
                          (this.parameters = { func: t, slices: e, stacks: i });
                        var n,
                          r,
                          a = [],
                          o = [],
                          s = [],
                          c = [],
                          u = new ke(),
                          l = new ke(),
                          h = new ke(),
                          d = new ke(),
                          p = new ke(),
                          f = e + 1;
                        for (n = 0; n <= i; n++) {
                          var m = n / i;
                          for (r = 0; r <= e; r++) {
                            var g = r / e;
                            (l = t(g, m, l)),
                              o.push(l.x, l.y, l.z),
                              g - 1e-5 >= 0
                                ? ((h = t(g - 1e-5, m, h)), d.subVectors(l, h))
                                : ((h = t(g + 1e-5, m, h)), d.subVectors(h, l)),
                              m - 1e-5 >= 0
                                ? ((h = t(g, m - 1e-5, h)), p.subVectors(l, h))
                                : ((h = t(g, m + 1e-5, h)), p.subVectors(h, l)),
                              u.crossVectors(d, p).normalize(),
                              s.push(u.x, u.y, u.z),
                              c.push(g, m);
                          }
                        }
                        for (n = 0; n < i; n++)
                          for (r = 0; r < e; r++) {
                            var v = n * f + r,
                              y = n * f + r + 1,
                              M = (n + 1) * f + r + 1,
                              w = (n + 1) * f + r;
                            a.push(v, y, w), a.push(y, M, w);
                          }
                        this.setIndex(a),
                          this.addAttribute('position', new kr(o, 3)),
                          this.addAttribute('normal', new kr(s, 3)),
                          this.addAttribute('uv', new kr(c, 2));
                      }
                      function $a(t, e, i, n) {
                        Dr.call(this),
                          (this.type = 'PolyhedronGeometry'),
                          (this.parameters = {
                            vertices: t,
                            indices: e,
                            radius: i,
                            detail: n
                          }),
                          this.fromBufferGeometry(new to(t, e, i, n)),
                          this.mergeVertices();
                      }
                      function to(t, e, i, n) {
                        Fr.call(this),
                          (this.type = 'PolyhedronBufferGeometry'),
                          (this.parameters = {
                            vertices: t,
                            indices: e,
                            radius: i,
                            detail: n
                          }),
                          (i = i || 1);
                        var r = [],
                          a = [];
                        function o(t, e, i, n) {
                          var r,
                            a,
                            o = Math.pow(2, n),
                            c = [];
                          for (r = 0; r <= o; r++) {
                            c[r] = [];
                            var u = t.clone().lerp(i, r / o),
                              l = e.clone().lerp(i, r / o),
                              h = o - r;
                            for (a = 0; a <= h; a++)
                              c[r][a] =
                                0 === a && r === o
                                  ? u
                                  : u.clone().lerp(l, a / h);
                          }
                          for (r = 0; r < o; r++)
                            for (a = 0; a < 2 * (o - r) - 1; a++) {
                              var d = Math.floor(a / 2);
                              a % 2 == 0
                                ? (s(c[r][d + 1]), s(c[r + 1][d]), s(c[r][d]))
                                : (s(c[r][d + 1]),
                                  s(c[r + 1][d + 1]),
                                  s(c[r + 1][d]));
                            }
                        }
                        function s(t) {
                          r.push(t.x, t.y, t.z);
                        }
                        function c(e, i) {
                          var n = 3 * e;
                          (i.x = t[n + 0]), (i.y = t[n + 1]), (i.z = t[n + 2]);
                        }
                        function u(t, e, i, n) {
                          n < 0 && 1 === t.x && (a[e] = t.x - 1),
                            0 === i.x &&
                              0 === i.z &&
                              (a[e] = n / 2 / Math.PI + 0.5);
                        }
                        function l(t) {
                          return Math.atan2(t.z, -t.x);
                        }
                        !(function(t) {
                          for (
                            var i = new ke(), n = new ke(), r = new ke(), a = 0;
                            a < e.length;
                            a += 3
                          )
                            c(e[a + 0], i),
                              c(e[a + 1], n),
                              c(e[a + 2], r),
                              o(i, n, r, t);
                        })((n = n || 0)),
                          (function(t) {
                            for (var e = new ke(), i = 0; i < r.length; i += 3)
                              (e.x = r[i + 0]),
                                (e.y = r[i + 1]),
                                (e.z = r[i + 2]),
                                e.normalize().multiplyScalar(t),
                                (r[i + 0] = e.x),
                                (r[i + 1] = e.y),
                                (r[i + 2] = e.z);
                          })(i),
                          (function() {
                            for (
                              var t = new ke(), e = 0;
                              e < r.length;
                              e += 3
                            ) {
                              (t.x = r[e + 0]),
                                (t.y = r[e + 1]),
                                (t.z = r[e + 2]);
                              var i = l(t) / 2 / Math.PI + 0.5,
                                n = ((o = t),
                                Math.atan2(
                                  -o.y,
                                  Math.sqrt(o.x * o.x + o.z * o.z)
                                ) /
                                  Math.PI +
                                  0.5);
                              a.push(i, 1 - n);
                            }
                            var o;
                            (function() {
                              for (
                                var t = new ke(),
                                  e = new ke(),
                                  i = new ke(),
                                  n = new ke(),
                                  o = new he(),
                                  s = new he(),
                                  c = new he(),
                                  h = 0,
                                  d = 0;
                                h < r.length;
                                h += 9, d += 6
                              ) {
                                t.set(r[h + 0], r[h + 1], r[h + 2]),
                                  e.set(r[h + 3], r[h + 4], r[h + 5]),
                                  i.set(r[h + 6], r[h + 7], r[h + 8]),
                                  o.set(a[d + 0], a[d + 1]),
                                  s.set(a[d + 2], a[d + 3]),
                                  c.set(a[d + 4], a[d + 5]),
                                  n
                                    .copy(t)
                                    .add(e)
                                    .add(i)
                                    .divideScalar(3);
                                var p = l(n);
                                u(o, d + 0, t, p),
                                  u(s, d + 2, e, p),
                                  u(c, d + 4, i, p);
                              }
                            })(),
                              (function() {
                                for (var t = 0; t < a.length; t += 6) {
                                  var e = a[t + 0],
                                    i = a[t + 2],
                                    n = a[t + 4],
                                    r = Math.max(e, i, n),
                                    o = Math.min(e, i, n);
                                  r > 0.9 &&
                                    o < 0.1 &&
                                    (e < 0.2 && (a[t + 0] += 1),
                                    i < 0.2 && (a[t + 2] += 1),
                                    n < 0.2 && (a[t + 4] += 1));
                                }
                              })();
                          })(),
                          this.addAttribute('position', new kr(r, 3)),
                          this.addAttribute('normal', new kr(r.slice(), 3)),
                          this.addAttribute('uv', new kr(a, 2)),
                          0 === n
                            ? this.computeVertexNormals()
                            : this.normalizeNormals();
                      }
                      function eo(t, e) {
                        Dr.call(this),
                          (this.type = 'TetrahedronGeometry'),
                          (this.parameters = { radius: t, detail: e }),
                          this.fromBufferGeometry(new io(t, e)),
                          this.mergeVertices();
                      }
                      function io(t, e) {
                        to.call(
                          this,
                          [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1],
                          [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1],
                          t,
                          e
                        ),
                          (this.type = 'TetrahedronBufferGeometry'),
                          (this.parameters = { radius: t, detail: e });
                      }
                      function no(t, e) {
                        Dr.call(this),
                          (this.type = 'OctahedronGeometry'),
                          (this.parameters = { radius: t, detail: e }),
                          this.fromBufferGeometry(new ro(t, e)),
                          this.mergeVertices();
                      }
                      function ro(t, e) {
                        to.call(
                          this,
                          [
                            1,
                            0,
                            0,
                            -1,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            -1,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            -1
                          ],
                          [
                            0,
                            2,
                            4,
                            0,
                            4,
                            3,
                            0,
                            3,
                            5,
                            0,
                            5,
                            2,
                            1,
                            2,
                            5,
                            1,
                            5,
                            3,
                            1,
                            3,
                            4,
                            1,
                            4,
                            2
                          ],
                          t,
                          e
                        ),
                          (this.type = 'OctahedronBufferGeometry'),
                          (this.parameters = { radius: t, detail: e });
                      }
                      function ao(t, e) {
                        Dr.call(this),
                          (this.type = 'IcosahedronGeometry'),
                          (this.parameters = { radius: t, detail: e }),
                          this.fromBufferGeometry(new oo(t, e)),
                          this.mergeVertices();
                      }
                      function oo(t, e) {
                        var i = (1 + Math.sqrt(5)) / 2,
                          n = [
                            -1,
                            i,
                            0,
                            1,
                            i,
                            0,
                            -1,
                            -i,
                            0,
                            1,
                            -i,
                            0,
                            0,
                            -1,
                            i,
                            0,
                            1,
                            i,
                            0,
                            -1,
                            -i,
                            0,
                            1,
                            -i,
                            i,
                            0,
                            -1,
                            i,
                            0,
                            1,
                            -i,
                            0,
                            -1,
                            -i,
                            0,
                            1
                          ];
                        to.call(
                          this,
                          n,
                          [
                            0,
                            11,
                            5,
                            0,
                            5,
                            1,
                            0,
                            1,
                            7,
                            0,
                            7,
                            10,
                            0,
                            10,
                            11,
                            1,
                            5,
                            9,
                            5,
                            11,
                            4,
                            11,
                            10,
                            2,
                            10,
                            7,
                            6,
                            7,
                            1,
                            8,
                            3,
                            9,
                            4,
                            3,
                            4,
                            2,
                            3,
                            2,
                            6,
                            3,
                            6,
                            8,
                            3,
                            8,
                            9,
                            4,
                            9,
                            5,
                            2,
                            4,
                            11,
                            6,
                            2,
                            10,
                            8,
                            6,
                            7,
                            9,
                            8,
                            1
                          ],
                          t,
                          e
                        ),
                          (this.type = 'IcosahedronBufferGeometry'),
                          (this.parameters = { radius: t, detail: e });
                      }
                      function so(t, e) {
                        Dr.call(this),
                          (this.type = 'DodecahedronGeometry'),
                          (this.parameters = { radius: t, detail: e }),
                          this.fromBufferGeometry(new co(t, e)),
                          this.mergeVertices();
                      }
                      function co(t, e) {
                        var i = (1 + Math.sqrt(5)) / 2,
                          n = 1 / i,
                          r = [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            1,
                            -1,
                            1,
                            -1,
                            -1,
                            1,
                            1,
                            1,
                            -1,
                            -1,
                            1,
                            -1,
                            1,
                            1,
                            1,
                            -1,
                            1,
                            1,
                            1,
                            0,
                            -n,
                            -i,
                            0,
                            -n,
                            i,
                            0,
                            n,
                            -i,
                            0,
                            n,
                            i,
                            -n,
                            -i,
                            0,
                            -n,
                            i,
                            0,
                            n,
                            -i,
                            0,
                            n,
                            i,
                            0,
                            -i,
                            0,
                            -n,
                            i,
                            0,
                            -n,
                            -i,
                            0,
                            n,
                            i,
                            0,
                            n
                          ];
                        to.call(
                          this,
                          r,
                          [
                            3,
                            11,
                            7,
                            3,
                            7,
                            15,
                            3,
                            15,
                            13,
                            7,
                            19,
                            17,
                            7,
                            17,
                            6,
                            7,
                            6,
                            15,
                            17,
                            4,
                            8,
                            17,
                            8,
                            10,
                            17,
                            10,
                            6,
                            8,
                            0,
                            16,
                            8,
                            16,
                            2,
                            8,
                            2,
                            10,
                            0,
                            12,
                            1,
                            0,
                            1,
                            18,
                            0,
                            18,
                            16,
                            6,
                            10,
                            2,
                            6,
                            2,
                            13,
                            6,
                            13,
                            15,
                            2,
                            16,
                            18,
                            2,
                            18,
                            3,
                            2,
                            3,
                            13,
                            18,
                            1,
                            9,
                            18,
                            9,
                            11,
                            18,
                            11,
                            3,
                            4,
                            14,
                            12,
                            4,
                            12,
                            0,
                            4,
                            0,
                            8,
                            11,
                            9,
                            5,
                            11,
                            5,
                            19,
                            11,
                            19,
                            7,
                            19,
                            5,
                            14,
                            19,
                            14,
                            4,
                            19,
                            4,
                            17,
                            1,
                            12,
                            14,
                            1,
                            14,
                            5,
                            1,
                            5,
                            9
                          ],
                          t,
                          e
                        ),
                          (this.type = 'DodecahedronBufferGeometry'),
                          (this.parameters = { radius: t, detail: e });
                      }
                      function uo(t, e, i, n, r, a) {
                        Dr.call(this),
                          (this.type = 'TubeGeometry'),
                          (this.parameters = {
                            path: t,
                            tubularSegments: e,
                            radius: i,
                            radialSegments: n,
                            closed: r
                          });
                        var o = new lo(t, e, i, n, r);
                        (this.tangents = o.tangents),
                          (this.normals = o.normals),
                          (this.binormals = o.binormals),
                          this.fromBufferGeometry(o),
                          this.mergeVertices();
                      }
                      function lo(t, e, i, n, r) {
                        Fr.call(this),
                          (this.type = 'TubeBufferGeometry'),
                          (this.parameters = {
                            path: t,
                            tubularSegments: e,
                            radius: i,
                            radialSegments: n,
                            closed: r
                          }),
                          (e = e || 64),
                          (i = i || 1),
                          (n = n || 8),
                          (r = r || !1);
                        var a = t.computeFrenetFrames(e, r);
                        (this.tangents = a.tangents),
                          (this.normals = a.normals),
                          (this.binormals = a.binormals);
                        var o,
                          s,
                          c = new ke(),
                          u = new ke(),
                          l = new he(),
                          h = [],
                          d = [],
                          p = [],
                          f = [];
                        function m(r) {
                          var o = t.getPointAt(r / e),
                            l = a.normals[r],
                            p = a.binormals[r];
                          for (s = 0; s <= n; s++) {
                            var f = s / n * Math.PI * 2,
                              m = Math.sin(f),
                              g = -Math.cos(f);
                            (u.x = g * l.x + m * p.x),
                              (u.y = g * l.y + m * p.y),
                              (u.z = g * l.z + m * p.z),
                              u.normalize(),
                              d.push(u.x, u.y, u.z),
                              (c.x = o.x + i * u.x),
                              (c.y = o.y + i * u.y),
                              (c.z = o.z + i * u.z),
                              h.push(c.x, c.y, c.z);
                          }
                        }
                        !(function() {
                          for (o = 0; o < e; o++) m(o);
                          m(!1 === r ? e : 0),
                            (function() {
                              for (o = 0; o <= e; o++)
                                for (s = 0; s <= n; s++)
                                  (l.x = o / e),
                                    (l.y = s / n),
                                    p.push(l.x, l.y);
                            })(),
                            (function() {
                              for (s = 1; s <= e; s++)
                                for (o = 1; o <= n; o++) {
                                  var t = (n + 1) * (s - 1) + (o - 1),
                                    i = (n + 1) * s + (o - 1),
                                    r = (n + 1) * s + o,
                                    a = (n + 1) * (s - 1) + o;
                                  f.push(t, i, a), f.push(i, r, a);
                                }
                            })();
                        })(),
                          this.setIndex(f),
                          this.addAttribute('position', new kr(h, 3)),
                          this.addAttribute('normal', new kr(d, 3)),
                          this.addAttribute('uv', new kr(p, 2));
                      }
                      function ho(t, e, i, n, r, a, o) {
                        Dr.call(this),
                          (this.type = 'TorusKnotGeometry'),
                          (this.parameters = {
                            radius: t,
                            tube: e,
                            tubularSegments: i,
                            radialSegments: n,
                            p: r,
                            q: a
                          }),
                          this.fromBufferGeometry(new po(t, e, i, n, r, a)),
                          this.mergeVertices();
                      }
                      function po(t, e, i, n, r, a) {
                        Fr.call(this),
                          (this.type = 'TorusKnotBufferGeometry'),
                          (this.parameters = {
                            radius: t,
                            tube: e,
                            tubularSegments: i,
                            radialSegments: n,
                            p: r,
                            q: a
                          }),
                          (t = t || 100),
                          (e = e || 40),
                          (i = Math.floor(i) || 64),
                          (n = Math.floor(n) || 8),
                          (r = r || 2),
                          (a = a || 3);
                        var o,
                          s,
                          c = [],
                          u = [],
                          l = [],
                          h = [],
                          d = new ke(),
                          p = new ke(),
                          f = new ke(),
                          m = new ke(),
                          g = new ke(),
                          v = new ke(),
                          y = new ke();
                        for (o = 0; o <= i; ++o) {
                          var M = o / i * r * Math.PI * 2;
                          for (
                            N(M, r, a, t, f),
                              N(M + 0.01, r, a, t, m),
                              v.subVectors(m, f),
                              y.addVectors(m, f),
                              g.crossVectors(v, y),
                              y.crossVectors(g, v),
                              g.normalize(),
                              y.normalize(),
                              s = 0;
                            s <= n;
                            ++s
                          ) {
                            var w = s / n * Math.PI * 2,
                              x = -e * Math.cos(w),
                              A = e * Math.sin(w);
                            (d.x = f.x + (x * y.x + A * g.x)),
                              (d.y = f.y + (x * y.y + A * g.y)),
                              (d.z = f.z + (x * y.z + A * g.z)),
                              u.push(d.x, d.y, d.z),
                              p.subVectors(d, f).normalize(),
                              l.push(p.x, p.y, p.z),
                              h.push(o / i),
                              h.push(s / n);
                          }
                        }
                        for (s = 1; s <= i; s++)
                          for (o = 1; o <= n; o++) {
                            var E = (n + 1) * (s - 1) + (o - 1),
                              b = (n + 1) * s + (o - 1),
                              T = (n + 1) * s + o,
                              L = (n + 1) * (s - 1) + o;
                            c.push(E, b, L), c.push(b, T, L);
                          }
                        function N(t, e, i, n, r) {
                          var a = Math.cos(t),
                            o = Math.sin(t),
                            s = i / e * t,
                            c = Math.cos(s);
                          (r.x = n * (2 + c) * 0.5 * a),
                            (r.y = n * (2 + c) * o * 0.5),
                            (r.z = n * Math.sin(s) * 0.5);
                        }
                        this.setIndex(c),
                          this.addAttribute('position', new kr(u, 3)),
                          this.addAttribute('normal', new kr(l, 3)),
                          this.addAttribute('uv', new kr(h, 2));
                      }
                      function fo(t, e, i, n, r) {
                        Dr.call(this),
                          (this.type = 'TorusGeometry'),
                          (this.parameters = {
                            radius: t,
                            tube: e,
                            radialSegments: i,
                            tubularSegments: n,
                            arc: r
                          }),
                          this.fromBufferGeometry(new mo(t, e, i, n, r)),
                          this.mergeVertices();
                      }
                      function mo(t, e, i, n, r) {
                        Fr.call(this),
                          (this.type = 'TorusBufferGeometry'),
                          (this.parameters = {
                            radius: t,
                            tube: e,
                            radialSegments: i,
                            tubularSegments: n,
                            arc: r
                          }),
                          (t = t || 100),
                          (e = e || 40),
                          (i = Math.floor(i) || 8),
                          (n = Math.floor(n) || 6),
                          (r = r || 2 * Math.PI);
                        var a,
                          o,
                          s = [],
                          c = [],
                          u = [],
                          l = [],
                          h = new ke(),
                          d = new ke(),
                          p = new ke();
                        for (a = 0; a <= i; a++)
                          for (o = 0; o <= n; o++) {
                            var f = o / n * r,
                              m = a / i * Math.PI * 2;
                            (d.x = (t + e * Math.cos(m)) * Math.cos(f)),
                              (d.y = (t + e * Math.cos(m)) * Math.sin(f)),
                              (d.z = e * Math.sin(m)),
                              c.push(d.x, d.y, d.z),
                              (h.x = t * Math.cos(f)),
                              (h.y = t * Math.sin(f)),
                              p.subVectors(d, h).normalize(),
                              u.push(p.x, p.y, p.z),
                              l.push(o / n),
                              l.push(a / i);
                          }
                        for (a = 1; a <= i; a++)
                          for (o = 1; o <= n; o++) {
                            var g = (n + 1) * a + o - 1,
                              v = (n + 1) * (a - 1) + o - 1,
                              y = (n + 1) * (a - 1) + o,
                              M = (n + 1) * a + o;
                            s.push(g, v, M), s.push(v, y, M);
                          }
                        this.setIndex(s),
                          this.addAttribute('position', new kr(c, 3)),
                          this.addAttribute('normal', new kr(u, 3)),
                          this.addAttribute('uv', new kr(l, 2));
                      }
                      (Na.prototype = Object.assign(
                        Object.create(Pn.prototype),
                        { constructor: Na, isArrayCamera: !0 }
                      )),
                        (Sa.prototype.isFogExp2 = !0),
                        (Sa.prototype.clone = function() {
                          return new Sa(this.color.getHex(), this.density);
                        }),
                        (Sa.prototype.toJSON = function(t) {
                          return {
                            type: 'FogExp2',
                            color: this.color.getHex(),
                            density: this.density
                          };
                        }),
                        (Ia.prototype.isFog = !0),
                        (Ia.prototype.clone = function() {
                          return new Ia(
                            this.color.getHex(),
                            this.near,
                            this.far
                          );
                        }),
                        (Ia.prototype.toJSON = function(t) {
                          return {
                            type: 'Fog',
                            color: this.color.getHex(),
                            near: this.near,
                            far: this.far
                          };
                        }),
                        (_a.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: _a,
                            copy: function(t, e) {
                              return (
                                Rn.prototype.copy.call(this, t, e),
                                null !== t.background &&
                                  (this.background = t.background.clone()),
                                null !== t.fog && (this.fog = t.fog.clone()),
                                null !== t.overrideMaterial &&
                                  (this.overrideMaterial = t.overrideMaterial.clone()),
                                (this.autoUpdate = t.autoUpdate),
                                (this.matrixAutoUpdate = t.matrixAutoUpdate),
                                this
                              );
                            },
                            toJSON: function(t) {
                              var e = Rn.prototype.toJSON.call(this, t);
                              return (
                                null !== this.background &&
                                  (e.object.background = this.background.toJSON(
                                    t
                                  )),
                                null !== this.fog &&
                                  (e.object.fog = this.fog.toJSON()),
                                e
                              );
                            }
                          }
                        )),
                        (ja.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: ja,
                            isLensFlare: !0,
                            copy: function(t) {
                              Rn.prototype.copy.call(this, t),
                                this.positionScreen.copy(t.positionScreen),
                                (this.customUpdateCallback =
                                  t.customUpdateCallback);
                              for (
                                var e = 0, i = t.lensFlares.length;
                                e < i;
                                e++
                              )
                                this.lensFlares.push(t.lensFlares[e]);
                              return this;
                            },
                            add: function(t, e, i, n, r, a) {
                              void 0 === e && (e = -1),
                                void 0 === i && (i = 0),
                                void 0 === a && (a = 1),
                                void 0 === r && (r = new Ni(16777215)),
                                void 0 === n && (n = A),
                                (i = Math.min(i, Math.max(0, i))),
                                this.lensFlares.push({
                                  texture: t,
                                  size: e,
                                  distance: i,
                                  x: 0,
                                  y: 0,
                                  z: 0,
                                  scale: 1,
                                  rotation: 0,
                                  opacity: a,
                                  color: r,
                                  blending: n
                                });
                            },
                            updateLensFlares: function() {
                              var t,
                                e,
                                i = this.lensFlares.length,
                                n = 2 * -this.positionScreen.x,
                                r = 2 * -this.positionScreen.y;
                              for (t = 0; t < i; t++)
                                ((e = this.lensFlares[t]).x =
                                  this.positionScreen.x + n * e.distance),
                                  (e.y =
                                    this.positionScreen.y + r * e.distance),
                                  (e.wantedRotation = e.x * Math.PI * 0.25),
                                  (e.rotation +=
                                    0.25 * (e.wantedRotation - e.rotation));
                            }
                          }
                        )),
                        (Oa.prototype = Object.create(an.prototype)),
                        (Oa.prototype.constructor = Oa),
                        (Oa.prototype.isSpriteMaterial = !0),
                        (Oa.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            this.color.copy(t.color),
                            (this.map = t.map),
                            (this.rotation = t.rotation),
                            this
                          );
                        }),
                        (za.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: za,
                            isSprite: !0,
                            raycast: ((na = new ke()),
                            (ra = new ke()),
                            (aa = new ke()),
                            function(t, e) {
                              ra.setFromMatrixPosition(this.matrixWorld),
                                t.ray.closestPointToPoint(ra, na),
                                aa.setFromMatrixScale(this.matrixWorld);
                              var i = aa.x * aa.y / 4;
                              if (!(ra.distanceToSquared(na) > i)) {
                                var n = t.ray.origin.distanceTo(na);
                                n < t.near ||
                                  n > t.far ||
                                  e.push({
                                    distance: n,
                                    point: na.clone(),
                                    face: null,
                                    object: this
                                  });
                              }
                            }),
                            clone: function() {
                              return new this.constructor(this.material).copy(
                                this
                              );
                            }
                          }
                        )),
                        (Ra.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: Ra,
                            copy: function(t) {
                              Rn.prototype.copy.call(this, t, !1);
                              for (
                                var e = t.levels, i = 0, n = e.length;
                                i < n;
                                i++
                              ) {
                                var r = e[i];
                                this.addLevel(r.object.clone(), r.distance);
                              }
                              return this;
                            },
                            addLevel: function(t, e) {
                              void 0 === e && (e = 0), (e = Math.abs(e));
                              for (
                                var i = this.levels, n = 0;
                                n < i.length && !(e < i[n].distance);
                                n++
                              );
                              i.splice(n, 0, { distance: e, object: t }),
                                this.add(t);
                            },
                            getObjectForDistance: function(t) {
                              for (
                                var e = this.levels, i = 1, n = e.length;
                                i < n && !(t < e[i].distance);
                                i++
                              );
                              return e[i - 1].object;
                            },
                            raycast: ((ca = new ke()),
                            function(t, e) {
                              ca.setFromMatrixPosition(this.matrixWorld);
                              var i = t.ray.origin.distanceTo(ca);
                              this.getObjectForDistance(i).raycast(t, e);
                            }),
                            update: ((oa = new ke()),
                            (sa = new ke()),
                            function(t) {
                              var e = this.levels;
                              if (e.length > 1) {
                                oa.setFromMatrixPosition(t.matrixWorld),
                                  sa.setFromMatrixPosition(this.matrixWorld);
                                var i = oa.distanceTo(sa);
                                e[0].object.visible = !0;
                                for (
                                  var n = 1, r = e.length;
                                  n < r && i >= e[n].distance;
                                  n++
                                )
                                  (e[n - 1].object.visible = !1),
                                    (e[n].object.visible = !0);
                                for (; n < r; n++) e[n].object.visible = !1;
                              }
                            }),
                            toJSON: function(t) {
                              var e = Rn.prototype.toJSON.call(this, t);
                              e.object.levels = [];
                              for (
                                var i = this.levels, n = 0, r = i.length;
                                n < r;
                                n++
                              ) {
                                var a = i[n];
                                e.object.levels.push({
                                  object: a.object.uuid,
                                  distance: a.distance
                                });
                              }
                              return e;
                            }
                          }
                        )),
                        Object.assign(ka.prototype, {
                          calculateInverses: function() {
                            this.boneInverses = [];
                            for (var t = 0, e = this.bones.length; t < e; t++) {
                              var i = new Ue();
                              this.bones[t] &&
                                i.getInverse(this.bones[t].matrixWorld),
                                this.boneInverses.push(i);
                            }
                          },
                          pose: function() {
                            var t, e, i;
                            for (e = 0, i = this.bones.length; e < i; e++)
                              (t = this.bones[e]) &&
                                t.matrixWorld.getInverse(this.boneInverses[e]);
                            for (e = 0, i = this.bones.length; e < i; e++)
                              (t = this.bones[e]) &&
                                (t.parent && t.parent.isBone
                                  ? (t.matrix.getInverse(t.parent.matrixWorld),
                                    t.matrix.multiply(t.matrixWorld))
                                  : t.matrix.copy(t.matrixWorld),
                                t.matrix.decompose(
                                  t.position,
                                  t.quaternion,
                                  t.scale
                                ));
                          },
                          update: ((ua = new Ue()),
                          (la = new Ue()),
                          function() {
                            for (
                              var t = this.bones,
                                e = this.boneInverses,
                                i = this.boneMatrices,
                                n = this.boneTexture,
                                r = 0,
                                a = t.length;
                              r < a;
                              r++
                            ) {
                              var o = t[r] ? t[r].matrixWorld : la;
                              ua.multiplyMatrices(o, e[r]),
                                ua.toArray(i, 16 * r);
                            }
                            void 0 !== n && (n.needsUpdate = !0);
                          }),
                          clone: function() {
                            return new ka(this.bones, this.boneInverses);
                          }
                        }),
                        (Ua.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          { constructor: Ua, isBone: !0 }
                        )),
                        (Pa.prototype = Object.assign(
                          Object.create(Zr.prototype),
                          {
                            constructor: Pa,
                            isSkinnedMesh: !0,
                            initBones: function() {
                              var t,
                                e,
                                i,
                                n,
                                r = [];
                              if (
                                this.geometry &&
                                void 0 !== this.geometry.bones
                              ) {
                                for (
                                  i = 0, n = this.geometry.bones.length;
                                  i < n;
                                  i++
                                )
                                  (e = this.geometry.bones[i]),
                                    (t = new Ua()),
                                    r.push(t),
                                    (t.name = e.name),
                                    t.position.fromArray(e.pos),
                                    t.quaternion.fromArray(e.rotq),
                                    void 0 !== e.scl &&
                                      t.scale.fromArray(e.scl);
                                for (
                                  i = 0, n = this.geometry.bones.length;
                                  i < n;
                                  i++
                                )
                                  -1 !== (e = this.geometry.bones[i]).parent &&
                                  null !== e.parent &&
                                  void 0 !== r[e.parent]
                                    ? r[e.parent].add(r[i])
                                    : this.add(r[i]);
                              }
                              return this.updateMatrixWorld(!0), r;
                            },
                            bind: function(t, e) {
                              (this.skeleton = t),
                                void 0 === e &&
                                  (this.updateMatrixWorld(!0),
                                  this.skeleton.calculateInverses(),
                                  (e = this.matrixWorld)),
                                this.bindMatrix.copy(e),
                                this.bindMatrixInverse.getInverse(e);
                            },
                            pose: function() {
                              this.skeleton.pose();
                            },
                            normalizeSkinWeights: function() {
                              var t, e;
                              if (this.geometry && this.geometry.isGeometry)
                                for (
                                  e = 0;
                                  e < this.geometry.skinWeights.length;
                                  e++
                                ) {
                                  var i = this.geometry.skinWeights[e];
                                  (t = 1 / i.lengthManhattan()) !== 1 / 0
                                    ? i.multiplyScalar(t)
                                    : i.set(1, 0, 0, 0);
                                }
                              else if (
                                this.geometry &&
                                this.geometry.isBufferGeometry
                              ) {
                                var n = new je(),
                                  r = this.geometry.attributes.skinWeight;
                                for (e = 0; e < r.count; e++)
                                  (n.x = r.getX(e)),
                                    (n.y = r.getY(e)),
                                    (n.z = r.getZ(e)),
                                    (n.w = r.getW(e)),
                                    (t = 1 / n.lengthManhattan()) !== 1 / 0
                                      ? n.multiplyScalar(t)
                                      : n.set(1, 0, 0, 0),
                                    r.setXYZW(e, n.x, n.y, n.z, n.w);
                              }
                            },
                            updateMatrixWorld: function(t) {
                              Zr.prototype.updateMatrixWorld.call(this, t),
                                'attached' === this.bindMode
                                  ? this.bindMatrixInverse.getInverse(
                                      this.matrixWorld
                                    )
                                  : 'detached' === this.bindMode &&
                                    this.bindMatrixInverse.getInverse(
                                      this.bindMatrix
                                    );
                            },
                            clone: function() {
                              return new this.constructor(
                                this.geometry,
                                this.material
                              ).copy(this);
                            }
                          }
                        )),
                        (Ba.prototype = Object.create(an.prototype)),
                        (Ba.prototype.constructor = Ba),
                        (Ba.prototype.isLineBasicMaterial = !0),
                        (Ba.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            this.color.copy(t.color),
                            (this.linewidth = t.linewidth),
                            (this.linecap = t.linecap),
                            (this.linejoin = t.linejoin),
                            this
                          );
                        }),
                        (Fa.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: Fa,
                            isLine: !0,
                            raycast: ((ha = new Ue()),
                            (da = new Wr()),
                            (pa = new ln()),
                            function(t, e) {
                              var i = t.linePrecision,
                                n = i * i,
                                r = this.geometry,
                                a = this.matrixWorld;
                              if (
                                (null === r.boundingSphere &&
                                  r.computeBoundingSphere(),
                                pa.copy(r.boundingSphere),
                                pa.applyMatrix4(a),
                                !1 !== t.ray.intersectsSphere(pa))
                              ) {
                                ha.getInverse(a),
                                  da.copy(t.ray).applyMatrix4(ha);
                                var o = new ke(),
                                  s = new ke(),
                                  c = new ke(),
                                  u = new ke(),
                                  l = this && this.isLineSegments ? 2 : 1;
                                if (r.isBufferGeometry) {
                                  var h = r.index,
                                    d = r.attributes.position.array;
                                  if (null !== h)
                                    for (
                                      var p = h.array, f = 0, m = p.length - 1;
                                      f < m;
                                      f += l
                                    ) {
                                      var g = p[f],
                                        v = p[f + 1];
                                      o.fromArray(d, 3 * g),
                                        s.fromArray(d, 3 * v),
                                        da.distanceSqToSegment(o, s, u, c) >
                                          n ||
                                          (u.applyMatrix4(this.matrixWorld),
                                          (w = t.ray.origin.distanceTo(u)) <
                                            t.near ||
                                            w > t.far ||
                                            e.push({
                                              distance: w,
                                              point: c
                                                .clone()
                                                .applyMatrix4(this.matrixWorld),
                                              index: f,
                                              face: null,
                                              faceIndex: null,
                                              object: this
                                            }));
                                    }
                                  else
                                    for (
                                      f = 0, m = d.length / 3 - 1;
                                      f < m;
                                      f += l
                                    )
                                      o.fromArray(d, 3 * f),
                                        s.fromArray(d, 3 * f + 3),
                                        da.distanceSqToSegment(o, s, u, c) >
                                          n ||
                                          (u.applyMatrix4(this.matrixWorld),
                                          (w = t.ray.origin.distanceTo(u)) <
                                            t.near ||
                                            w > t.far ||
                                            e.push({
                                              distance: w,
                                              point: c
                                                .clone()
                                                .applyMatrix4(this.matrixWorld),
                                              index: f,
                                              face: null,
                                              faceIndex: null,
                                              object: this
                                            }));
                                } else if (r.isGeometry) {
                                  var y = r.vertices,
                                    M = y.length;
                                  for (f = 0; f < M - 1; f += l) {
                                    var w;
                                    da.distanceSqToSegment(
                                      y[f],
                                      y[f + 1],
                                      u,
                                      c
                                    ) > n ||
                                      (u.applyMatrix4(this.matrixWorld),
                                      (w = t.ray.origin.distanceTo(u)) <
                                        t.near ||
                                        w > t.far ||
                                        e.push({
                                          distance: w,
                                          point: c
                                            .clone()
                                            .applyMatrix4(this.matrixWorld),
                                          index: f,
                                          face: null,
                                          faceIndex: null,
                                          object: this
                                        }));
                                  }
                                }
                              }
                            }),
                            clone: function() {
                              return new this.constructor(
                                this.geometry,
                                this.material
                              ).copy(this);
                            }
                          }
                        )),
                        (Ga.prototype = Object.assign(
                          Object.create(Fa.prototype),
                          { constructor: Ga, isLineSegments: !0 }
                        )),
                        (Va.prototype = Object.assign(
                          Object.create(Fa.prototype),
                          { constructor: Va, isLineLoop: !0 }
                        )),
                        (Ya.prototype = Object.create(an.prototype)),
                        (Ya.prototype.constructor = Ya),
                        (Ya.prototype.isPointsMaterial = !0),
                        (Ya.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            this.color.copy(t.color),
                            (this.map = t.map),
                            (this.size = t.size),
                            (this.sizeAttenuation = t.sizeAttenuation),
                            this
                          );
                        }),
                        (Qa.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: Qa,
                            isPoints: !0,
                            raycast: ((fa = new Ue()),
                            (ma = new Wr()),
                            (ga = new ln()),
                            function(t, e) {
                              var i = this,
                                n = this.geometry,
                                r = this.matrixWorld,
                                a = t.params.Points.threshold;
                              if (
                                (null === n.boundingSphere &&
                                  n.computeBoundingSphere(),
                                ga.copy(n.boundingSphere),
                                ga.applyMatrix4(r),
                                (ga.radius += a),
                                !1 !== t.ray.intersectsSphere(ga))
                              ) {
                                fa.getInverse(r),
                                  ma.copy(t.ray).applyMatrix4(fa);
                                var o =
                                    a /
                                    ((this.scale.x +
                                      this.scale.y +
                                      this.scale.z) /
                                      3),
                                  s = o * o,
                                  c = new ke();
                                if (n.isBufferGeometry) {
                                  var u = n.index,
                                    l = n.attributes.position.array;
                                  if (null !== u)
                                    for (
                                      var h = u.array, d = 0, p = h.length;
                                      d < p;
                                      d++
                                    ) {
                                      var f = h[d];
                                      c.fromArray(l, 3 * f), v(c, f);
                                    }
                                  else {
                                    d = 0;
                                    for (var m = l.length / 3; d < m; d++)
                                      c.fromArray(l, 3 * d), v(c, d);
                                  }
                                } else {
                                  var g = n.vertices;
                                  for (d = 0, m = g.length; d < m; d++)
                                    v(g[d], d);
                                }
                              }
                              function v(n, a) {
                                var o = ma.distanceSqToPoint(n);
                                if (o < s) {
                                  var c = ma.closestPointToPoint(n);
                                  c.applyMatrix4(r);
                                  var u = t.ray.origin.distanceTo(c);
                                  if (u < t.near || u > t.far) return;
                                  e.push({
                                    distance: u,
                                    distanceToRay: Math.sqrt(o),
                                    point: c.clone(),
                                    index: a,
                                    face: null,
                                    object: i
                                  });
                                }
                              }
                            }),
                            clone: function() {
                              return new this.constructor(
                                this.geometry,
                                this.material
                              ).copy(this);
                            }
                          }
                        )),
                        (Ha.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          { constructor: Ha }
                        )),
                        (Wa.prototype = Object.create(_e.prototype)),
                        (Wa.prototype.constructor = Wa),
                        (Xa.prototype = Object.create(_e.prototype)),
                        (Xa.prototype.constructor = Xa),
                        (Xa.prototype.isCompressedTexture = !0),
                        (qa.prototype = Object.create(_e.prototype)),
                        (qa.prototype.constructor = qa),
                        (qa.prototype.isDepthTexture = !0),
                        (Za.prototype = Object.create(Fr.prototype)),
                        (Za.prototype.constructor = Za),
                        (Ka.prototype = Object.create(Dr.prototype)),
                        (Ka.prototype.constructor = Ka),
                        (Ja.prototype = Object.create(Fr.prototype)),
                        (Ja.prototype.constructor = Ja),
                        ($a.prototype = Object.create(Dr.prototype)),
                        ($a.prototype.constructor = $a),
                        (to.prototype = Object.create(Fr.prototype)),
                        (to.prototype.constructor = to),
                        (eo.prototype = Object.create(Dr.prototype)),
                        (eo.prototype.constructor = eo),
                        (io.prototype = Object.create(to.prototype)),
                        (io.prototype.constructor = io),
                        (no.prototype = Object.create(Dr.prototype)),
                        (no.prototype.constructor = no),
                        (ro.prototype = Object.create(to.prototype)),
                        (ro.prototype.constructor = ro),
                        (ao.prototype = Object.create(Dr.prototype)),
                        (ao.prototype.constructor = ao),
                        (oo.prototype = Object.create(to.prototype)),
                        (oo.prototype.constructor = oo),
                        (so.prototype = Object.create(Dr.prototype)),
                        (so.prototype.constructor = so),
                        (co.prototype = Object.create(to.prototype)),
                        (co.prototype.constructor = co),
                        (uo.prototype = Object.create(Dr.prototype)),
                        (uo.prototype.constructor = uo),
                        (lo.prototype = Object.create(Fr.prototype)),
                        (lo.prototype.constructor = lo),
                        (ho.prototype = Object.create(Dr.prototype)),
                        (ho.prototype.constructor = ho),
                        (po.prototype = Object.create(Fr.prototype)),
                        (po.prototype.constructor = po),
                        (fo.prototype = Object.create(Dr.prototype)),
                        (fo.prototype.constructor = fo),
                        (mo.prototype = Object.create(Fr.prototype)),
                        (mo.prototype.constructor = mo);
                      var go = {
                        area: function(t) {
                          for (
                            var e = t.length, i = 0, n = e - 1, r = 0;
                            r < e;
                            n = r++
                          )
                            i += t[n].x * t[r].y - t[r].x * t[n].y;
                          return 0.5 * i;
                        },
                        triangulate: (function() {
                          function t(t, e, i, n, r, a) {
                            var o,
                              s,
                              c,
                              u,
                              l,
                              h,
                              d,
                              p,
                              f,
                              m,
                              g,
                              v,
                              y,
                              M,
                              w,
                              x,
                              A;
                            if (
                              ((s = t[a[e]].x),
                              (c = t[a[e]].y),
                              (u = t[a[i]].x),
                              (l = t[a[i]].y),
                              (h = t[a[n]].x),
                              (u - s) * ((d = t[a[n]].y) - c) -
                                (l - c) * (h - s) <=
                                0)
                            )
                              return !1;
                            for (
                              m = h - u,
                                g = d - l,
                                v = s - h,
                                y = c - d,
                                M = u - s,
                                w = l - c,
                                o = 0;
                              o < r;
                              o++
                            )
                              if (
                                ((p = t[a[o]].x),
                                (f = t[a[o]].y),
                                !(
                                  (p === s && f === c) ||
                                  (p === u && f === l) ||
                                  (p === h && f === d)
                                ) &&
                                  ((x = M * (f - c) - w * (p - s)),
                                  (A = v * (f - d) - y * (p - h)),
                                  m * (f - l) - g * (p - u) >=
                                    -Number.EPSILON &&
                                    A >= -Number.EPSILON &&
                                    x >= -Number.EPSILON))
                              )
                                return !1;
                            return !0;
                          }
                          return function(e, i) {
                            var n = e.length;
                            if (n < 3) return null;
                            var r,
                              a,
                              o,
                              s = [],
                              c = [],
                              u = [];
                            if (go.area(e) > 0)
                              for (a = 0; a < n; a++) c[a] = a;
                            else for (a = 0; a < n; a++) c[a] = n - 1 - a;
                            var l = n,
                              h = 2 * l;
                            for (a = l - 1; l > 2; ) {
                              if (h-- <= 0) return i ? u : s;
                              if (
                                (l <= (r = a) && (r = 0),
                                l <= (a = r + 1) && (a = 0),
                                l <= (o = a + 1) && (o = 0),
                                t(e, r, a, o, l, c))
                              ) {
                                var d, p, f, m, g;
                                for (
                                  d = c[r],
                                    p = c[a],
                                    f = c[o],
                                    s.push([e[d], e[p], e[f]]),
                                    u.push([c[r], c[a], c[o]]),
                                    m = a,
                                    g = a + 1;
                                  g < l;
                                  m++, g++
                                )
                                  c[m] = c[g];
                                h = 2 * --l;
                              }
                            }
                            return i ? u : s;
                          };
                        })(),
                        triangulateShape: function(t, e) {
                          function i(t) {
                            var e = t.length;
                            e > 2 && t[e - 1].equals(t[0]) && t.pop();
                          }
                          function n(t, e, i) {
                            return t.x !== e.x
                              ? t.x < e.x
                                ? t.x <= i.x && i.x <= e.x
                                : e.x <= i.x && i.x <= t.x
                              : t.y < e.y
                                ? t.y <= i.y && i.y <= e.y
                                : e.y <= i.y && i.y <= t.y;
                          }
                          function r(t, e, i, r, a) {
                            var o = e.x - t.x,
                              s = e.y - t.y,
                              c = r.x - i.x,
                              u = r.y - i.y,
                              l = t.x - i.x,
                              h = t.y - i.y,
                              d = s * c - o * u,
                              p = s * l - o * h;
                            if (Math.abs(d) > Number.EPSILON) {
                              var f;
                              if (d > 0) {
                                if (p < 0 || p > d) return [];
                                if ((f = u * l - c * h) < 0 || f > d) return [];
                              } else {
                                if (p > 0 || p < d) return [];
                                if ((f = u * l - c * h) > 0 || f < d) return [];
                              }
                              if (0 === f)
                                return !a || (0 !== p && p !== d) ? [t] : [];
                              if (f === d)
                                return !a || (0 !== p && p !== d) ? [e] : [];
                              if (0 === p) return [i];
                              if (p === d) return [r];
                              var m = f / d;
                              return [{ x: t.x + m * o, y: t.y + m * s }];
                            }
                            if (0 !== p || u * l != c * h) return [];
                            var g,
                              v,
                              y,
                              M,
                              w,
                              x,
                              A,
                              E,
                              b = 0 === o && 0 === s,
                              T = 0 === c && 0 === u;
                            return b && T
                              ? t.x !== i.x || t.y !== i.y ? [] : [t]
                              : b
                                ? n(i, r, t) ? [t] : []
                                : T
                                  ? n(t, e, i) ? [i] : []
                                  : (0 !== o
                                      ? (t.x < e.x
                                          ? ((g = t),
                                            (y = t.x),
                                            (v = e),
                                            (M = e.x))
                                          : ((g = e),
                                            (y = e.x),
                                            (v = t),
                                            (M = t.x)),
                                        i.x < r.x
                                          ? ((w = i),
                                            (A = i.x),
                                            (x = r),
                                            (E = r.x))
                                          : ((w = r),
                                            (A = r.x),
                                            (x = i),
                                            (E = i.x)))
                                      : (t.y < e.y
                                          ? ((g = t),
                                            (y = t.y),
                                            (v = e),
                                            (M = e.y))
                                          : ((g = e),
                                            (y = e.y),
                                            (v = t),
                                            (M = t.y)),
                                        i.y < r.y
                                          ? ((w = i),
                                            (A = i.y),
                                            (x = r),
                                            (E = r.y))
                                          : ((w = r),
                                            (A = r.y),
                                            (x = i),
                                            (E = i.y))),
                                    y <= A
                                      ? M < A
                                        ? []
                                        : M === A
                                          ? a ? [] : [w]
                                          : M <= E ? [w, v] : [w, x]
                                      : y > E
                                        ? []
                                        : y === E
                                          ? a ? [] : [g]
                                          : M <= E ? [g, v] : [g, x]);
                          }
                          function a(t, e, i, n) {
                            var r = e.x - t.x,
                              a = e.y - t.y,
                              o = i.x - t.x,
                              s = i.y - t.y,
                              c = n.x - t.x,
                              u = n.y - t.y,
                              l = r * s - a * o,
                              h = r * u - a * c;
                            if (Math.abs(l) > Number.EPSILON) {
                              var d = c * s - u * o;
                              return l > 0
                                ? h >= 0 && d >= 0
                                : h >= 0 || d >= 0;
                            }
                            return h > 0;
                          }
                          i(t), e.forEach(i);
                          for (
                            var o,
                              s,
                              c,
                              u,
                              l,
                              h,
                              d = {},
                              p = t.concat(),
                              f = 0,
                              m = e.length;
                            f < m;
                            f++
                          )
                            Array.prototype.push.apply(p, e[f]);
                          for (o = 0, s = p.length; o < s; o++)
                            d[(l = p[o].x + ':' + p[o].y)], (d[l] = o);
                          var g = (function(t, e) {
                              var i,
                                n = t.concat();
                              function o(t, e) {
                                var r = n.length - 1,
                                  o = t - 1;
                                o < 0 && (o = r);
                                var s = t + 1;
                                s > r && (s = 0);
                                var c = a(n[t], n[o], n[s], i[e]);
                                if (!c) return !1;
                                var u = i.length - 1,
                                  l = e - 1;
                                l < 0 && (l = u);
                                var h = e + 1;
                                return (
                                  h > u && (h = 0),
                                  !!(c = a(i[e], i[l], i[h], n[t]))
                                );
                              }
                              function s(t, e) {
                                var i, a;
                                for (i = 0; i < n.length; i++)
                                  if (
                                    ((a = i + 1),
                                    (a %= n.length),
                                    r(t, e, n[i], n[a], !0).length > 0)
                                  )
                                    return !0;
                                return !1;
                              }
                              var c = [];
                              function u(t, i) {
                                var n, a, o, s;
                                for (n = 0; n < c.length; n++)
                                  for (a = e[c[n]], o = 0; o < a.length; o++)
                                    if (
                                      ((s = o + 1),
                                      (s %= a.length),
                                      r(t, i, a[o], a[s], !0).length > 0)
                                    )
                                      return !0;
                                return !1;
                              }
                              for (
                                var l,
                                  h,
                                  d,
                                  p,
                                  f,
                                  m,
                                  g,
                                  v,
                                  y,
                                  M,
                                  w = [],
                                  x = 0,
                                  A = e.length;
                                x < A;
                                x++
                              )
                                c.push(x);
                              for (
                                var E = 0, b = 2 * c.length;
                                c.length > 0 && !(--b < 0);

                              )
                                for (h = E; h < n.length; h++) {
                                  for (
                                    d = n[h], l = -1, x = 0;
                                    x < c.length;
                                    x++
                                  )
                                    if (
                                      ((f = c[x]),
                                      void 0 ===
                                        w[(m = d.x + ':' + d.y + ':' + f)])
                                    ) {
                                      i = e[f];
                                      for (var T = 0; T < i.length; T++)
                                        if (
                                          ((p = i[T]),
                                          o(h, T) && !s(d, p) && !u(d, p))
                                        ) {
                                          (l = T),
                                            c.splice(x, 1),
                                            (g = n.slice(0, h + 1)),
                                            (v = n.slice(h)),
                                            (y = i.slice(l)),
                                            (M = i.slice(0, l + 1)),
                                            (n = g
                                              .concat(y)
                                              .concat(M)
                                              .concat(v)),
                                            (E = h);
                                          break;
                                        }
                                      if (l >= 0) break;
                                      w[m] = !0;
                                    }
                                  if (l >= 0) break;
                                }
                              return n;
                            })(t, e),
                            v = go.triangulate(g, !1);
                          for (o = 0, s = v.length; o < s; o++)
                            for (u = v[o], c = 0; c < 3; c++)
                              void 0 !== (h = d[(l = u[c].x + ':' + u[c].y)]) &&
                                (u[c] = h);
                          return v.concat();
                        },
                        isClockWise: function(t) {
                          return go.area(t) < 0;
                        }
                      };
                      function vo(t, e) {
                        Dr.call(this),
                          (this.type = 'ExtrudeGeometry'),
                          (this.parameters = { shapes: t, options: e }),
                          this.fromBufferGeometry(new yo(t, e)),
                          this.mergeVertices();
                      }
                      function yo(t, e) {
                        void 0 !== t &&
                          (Fr.call(this),
                          (this.type = 'ExtrudeBufferGeometry'),
                          (t = Array.isArray(t) ? t : [t]),
                          this.addShapeList(t, e),
                          this.computeVertexNormals());
                      }
                      function Mo(t, e) {
                        Dr.call(this),
                          (this.type = 'TextGeometry'),
                          (this.parameters = { text: t, parameters: e }),
                          this.fromBufferGeometry(new wo(t, e)),
                          this.mergeVertices();
                      }
                      function wo(t, e) {
                        var i = (e = e || {}).font;
                        if (!i || !i.isFont) return new Dr();
                        var n = i.generateShapes(t, e.size, e.curveSegments);
                        (e.amount = void 0 !== e.height ? e.height : 50),
                          void 0 === e.bevelThickness &&
                            (e.bevelThickness = 10),
                          void 0 === e.bevelSize && (e.bevelSize = 8),
                          void 0 === e.bevelEnabled && (e.bevelEnabled = !1),
                          yo.call(this, n, e),
                          (this.type = 'TextBufferGeometry');
                      }
                      function xo(t, e, i, n, r, a, o) {
                        Dr.call(this),
                          (this.type = 'SphereGeometry'),
                          (this.parameters = {
                            radius: t,
                            widthSegments: e,
                            heightSegments: i,
                            phiStart: n,
                            phiLength: r,
                            thetaStart: a,
                            thetaLength: o
                          }),
                          this.fromBufferGeometry(new Ao(t, e, i, n, r, a, o)),
                          this.mergeVertices();
                      }
                      function Ao(t, e, i, n, r, a, o) {
                        Fr.call(this),
                          (this.type = 'SphereBufferGeometry'),
                          (this.parameters = {
                            radius: t,
                            widthSegments: e,
                            heightSegments: i,
                            phiStart: n,
                            phiLength: r,
                            thetaStart: a,
                            thetaLength: o
                          }),
                          (t = t || 50),
                          (e = Math.max(3, Math.floor(e) || 8)),
                          (i = Math.max(2, Math.floor(i) || 6)),
                          (n = void 0 !== n ? n : 0),
                          (r = void 0 !== r ? r : 2 * Math.PI);
                        var s,
                          c,
                          u =
                            (a = void 0 !== a ? a : 0) +
                            (o = void 0 !== o ? o : Math.PI),
                          l = 0,
                          h = [],
                          d = new ke(),
                          p = new ke(),
                          f = [],
                          m = [],
                          g = [],
                          v = [];
                        for (c = 0; c <= i; c++) {
                          var y = [],
                            M = c / i;
                          for (s = 0; s <= e; s++) {
                            var w = s / e;
                            (d.x =
                              -t * Math.cos(n + w * r) * Math.sin(a + M * o)),
                              (d.y = t * Math.cos(a + M * o)),
                              (d.z =
                                t * Math.sin(n + w * r) * Math.sin(a + M * o)),
                              m.push(d.x, d.y, d.z),
                              p.set(d.x, d.y, d.z).normalize(),
                              g.push(p.x, p.y, p.z),
                              v.push(w, 1 - M),
                              y.push(l++);
                          }
                          h.push(y);
                        }
                        for (c = 0; c < i; c++)
                          for (s = 0; s < e; s++) {
                            var x = h[c][s + 1],
                              A = h[c][s],
                              E = h[c + 1][s],
                              b = h[c + 1][s + 1];
                            (0 !== c || a > 0) && f.push(x, A, b),
                              (c !== i - 1 || u < Math.PI) && f.push(A, E, b);
                          }
                        this.setIndex(f),
                          this.addAttribute('position', new kr(m, 3)),
                          this.addAttribute('normal', new kr(g, 3)),
                          this.addAttribute('uv', new kr(v, 2));
                      }
                      function Eo(t, e, i, n, r, a) {
                        Dr.call(this),
                          (this.type = 'RingGeometry'),
                          (this.parameters = {
                            innerRadius: t,
                            outerRadius: e,
                            thetaSegments: i,
                            phiSegments: n,
                            thetaStart: r,
                            thetaLength: a
                          }),
                          this.fromBufferGeometry(new bo(t, e, i, n, r, a)),
                          this.mergeVertices();
                      }
                      function bo(t, e, i, n, r, a) {
                        Fr.call(this),
                          (this.type = 'RingBufferGeometry'),
                          (this.parameters = {
                            innerRadius: t,
                            outerRadius: e,
                            thetaSegments: i,
                            phiSegments: n,
                            thetaStart: r,
                            thetaLength: a
                          }),
                          (t = t || 20),
                          (e = e || 50),
                          (r = void 0 !== r ? r : 0),
                          (a = void 0 !== a ? a : 2 * Math.PI),
                          (i = void 0 !== i ? Math.max(3, i) : 8);
                        var o,
                          s,
                          c,
                          u = [],
                          l = [],
                          h = [],
                          d = [],
                          p = t,
                          f = (e - t) / (n = void 0 !== n ? Math.max(1, n) : 1),
                          m = new ke(),
                          g = new he();
                        for (s = 0; s <= n; s++) {
                          for (c = 0; c <= i; c++)
                            (o = r + c / i * a),
                              (m.x = p * Math.cos(o)),
                              (m.y = p * Math.sin(o)),
                              l.push(m.x, m.y, m.z),
                              h.push(0, 0, 1),
                              (g.x = (m.x / e + 1) / 2),
                              (g.y = (m.y / e + 1) / 2),
                              d.push(g.x, g.y);
                          p += f;
                        }
                        for (s = 0; s < n; s++) {
                          var v = s * (i + 1);
                          for (c = 0; c < i; c++) {
                            var y = (o = c + v),
                              M = o + i + 1,
                              w = o + i + 2,
                              x = o + 1;
                            u.push(y, M, x), u.push(M, w, x);
                          }
                        }
                        this.setIndex(u),
                          this.addAttribute('position', new kr(l, 3)),
                          this.addAttribute('normal', new kr(h, 3)),
                          this.addAttribute('uv', new kr(d, 2));
                      }
                      function To(t, e, i, n) {
                        Dr.call(this),
                          (this.type = 'LatheGeometry'),
                          (this.parameters = {
                            points: t,
                            segments: e,
                            phiStart: i,
                            phiLength: n
                          }),
                          this.fromBufferGeometry(new Lo(t, e, i, n)),
                          this.mergeVertices();
                      }
                      function Lo(t, e, i, n) {
                        Fr.call(this),
                          (this.type = 'LatheBufferGeometry'),
                          (this.parameters = {
                            points: t,
                            segments: e,
                            phiStart: i,
                            phiLength: n
                          }),
                          (e = Math.floor(e) || 12),
                          (i = i || 0),
                          (n = n || 2 * Math.PI),
                          (n = le.clamp(n, 0, 2 * Math.PI));
                        var r,
                          a,
                          o,
                          s = [],
                          c = [],
                          u = [],
                          l = 1 / e,
                          h = new ke(),
                          d = new he();
                        for (a = 0; a <= e; a++) {
                          var p = i + a * l * n,
                            f = Math.sin(p),
                            m = Math.cos(p);
                          for (o = 0; o <= t.length - 1; o++)
                            (h.x = t[o].x * f),
                              (h.y = t[o].y),
                              (h.z = t[o].x * m),
                              c.push(h.x, h.y, h.z),
                              (d.x = a / e),
                              (d.y = o / (t.length - 1)),
                              u.push(d.x, d.y);
                        }
                        for (a = 0; a < e; a++)
                          for (o = 0; o < t.length - 1; o++) {
                            var g = (r = o + a * t.length),
                              v = r + t.length,
                              y = r + t.length + 1,
                              M = r + 1;
                            s.push(g, v, M), s.push(v, y, M);
                          }
                        if (
                          (this.setIndex(s),
                          this.addAttribute('position', new kr(c, 3)),
                          this.addAttribute('uv', new kr(u, 2)),
                          this.computeVertexNormals(),
                          n === 2 * Math.PI)
                        ) {
                          var w = this.attributes.normal.array,
                            x = new ke(),
                            A = new ke(),
                            E = new ke();
                          for (
                            r = e * t.length * 3, a = 0, o = 0;
                            a < t.length;
                            a++, o += 3
                          )
                            (x.x = w[o + 0]),
                              (x.y = w[o + 1]),
                              (x.z = w[o + 2]),
                              (A.x = w[r + o + 0]),
                              (A.y = w[r + o + 1]),
                              (A.z = w[r + o + 2]),
                              E.addVectors(x, A).normalize(),
                              (w[o + 0] = w[r + o + 0] = E.x),
                              (w[o + 1] = w[r + o + 1] = E.y),
                              (w[o + 2] = w[r + o + 2] = E.z);
                        }
                      }
                      function No(t, e) {
                        Dr.call(this),
                          (this.type = 'ShapeGeometry'),
                          'object' == typeof e && (e = e.curveSegments),
                          (this.parameters = { shapes: t, curveSegments: e }),
                          this.fromBufferGeometry(new Do(t, e)),
                          this.mergeVertices();
                      }
                      function Do(t, e) {
                        Fr.call(this),
                          (this.type = 'ShapeBufferGeometry'),
                          (this.parameters = { shapes: t, curveSegments: e }),
                          (e = e || 12);
                        var i = [],
                          n = [],
                          r = [],
                          a = [],
                          o = 0,
                          s = 0;
                        if (!1 === Array.isArray(t)) u(t);
                        else
                          for (var c = 0; c < t.length; c++)
                            u(t[c]), this.addGroup(o, s, c), (o += s), (s = 0);
                        function u(t) {
                          var o,
                            c,
                            u,
                            l = n.length / 3,
                            h = t.extractPoints(e),
                            d = h.shape,
                            p = h.holes;
                          if (!1 === go.isClockWise(d))
                            for (
                              d = d.reverse(), o = 0, c = p.length;
                              o < c;
                              o++
                            )
                              (u = p[o]),
                                !0 === go.isClockWise(u) &&
                                  (p[o] = u.reverse());
                          var f = go.triangulateShape(d, p);
                          for (o = 0, c = p.length; o < c; o++)
                            (u = p[o]), (d = d.concat(u));
                          for (o = 0, c = d.length; o < c; o++) {
                            var m = d[o];
                            n.push(m.x, m.y, 0),
                              r.push(0, 0, 1),
                              a.push(m.x, m.y);
                          }
                          for (o = 0, c = f.length; o < c; o++) {
                            var g = f[o],
                              v = g[0] + l,
                              y = g[1] + l,
                              M = g[2] + l;
                            i.push(v, y, M), (s += 3);
                          }
                        }
                        this.setIndex(i),
                          this.addAttribute('position', new kr(n, 3)),
                          this.addAttribute('normal', new kr(r, 3)),
                          this.addAttribute('uv', new kr(a, 2));
                      }
                      function Co(t, e) {
                        Fr.call(this),
                          (this.type = 'EdgesGeometry'),
                          (this.parameters = { thresholdAngle: e }),
                          (e = void 0 !== e ? e : 1);
                        var i,
                          n,
                          r,
                          a,
                          o = [],
                          s = Math.cos(le.DEG2RAD * e),
                          c = [0, 0],
                          u = {},
                          l = ['a', 'b', 'c'];
                        t.isBufferGeometry
                          ? (a = new Dr()).fromBufferGeometry(t)
                          : (a = t.clone()),
                          a.mergeVertices(),
                          a.computeFaceNormals();
                        for (
                          var h = a.vertices, d = a.faces, p = 0, f = d.length;
                          p < f;
                          p++
                        )
                          for (var m = d[p], g = 0; g < 3; g++)
                            (i = m[l[g]]),
                              (n = m[l[(g + 1) % 3]]),
                              (c[0] = Math.min(i, n)),
                              (c[1] = Math.max(i, n)),
                              void 0 === u[(r = c[0] + ',' + c[1])]
                                ? (u[r] = {
                                    index1: c[0],
                                    index2: c[1],
                                    face1: p,
                                    face2: void 0
                                  })
                                : (u[r].face2 = p);
                        for (r in u) {
                          var v = u[r];
                          if (
                            void 0 === v.face2 ||
                            d[v.face1].normal.dot(d[v.face2].normal) <= s
                          ) {
                            var y = h[v.index1];
                            o.push(y.x, y.y, y.z),
                              (y = h[v.index2]),
                              o.push(y.x, y.y, y.z);
                          }
                        }
                        this.addAttribute('position', new kr(o, 3));
                      }
                      function So(t, e, i, n, r, a, o, s) {
                        Dr.call(this),
                          (this.type = 'CylinderGeometry'),
                          (this.parameters = {
                            radiusTop: t,
                            radiusBottom: e,
                            height: i,
                            radialSegments: n,
                            heightSegments: r,
                            openEnded: a,
                            thetaStart: o,
                            thetaLength: s
                          }),
                          this.fromBufferGeometry(
                            new Io(t, e, i, n, r, a, o, s)
                          ),
                          this.mergeVertices();
                      }
                      function Io(t, e, i, n, r, a, o, s) {
                        Fr.call(this),
                          (this.type = 'CylinderBufferGeometry'),
                          (this.parameters = {
                            radiusTop: t,
                            radiusBottom: e,
                            height: i,
                            radialSegments: n,
                            heightSegments: r,
                            openEnded: a,
                            thetaStart: o,
                            thetaLength: s
                          });
                        var c = this;
                        (t = void 0 !== t ? t : 20),
                          (e = void 0 !== e ? e : 20),
                          (i = void 0 !== i ? i : 100),
                          (n = Math.floor(n) || 8),
                          (r = Math.floor(r) || 1),
                          (a = void 0 !== a && a),
                          (o = void 0 !== o ? o : 0),
                          (s = void 0 !== s ? s : 2 * Math.PI);
                        var u = [],
                          l = [],
                          h = [],
                          d = [],
                          p = 0,
                          f = [],
                          m = i / 2,
                          g = 0;
                        function v(i) {
                          var r,
                            a,
                            f,
                            v = new he(),
                            y = new ke(),
                            M = 0,
                            w = !0 === i ? t : e,
                            x = !0 === i ? 1 : -1;
                          for (a = p, r = 1; r <= n; r++)
                            l.push(0, m * x, 0),
                              h.push(0, x, 0),
                              d.push(0.5, 0.5),
                              p++;
                          for (f = p, r = 0; r <= n; r++) {
                            var A = r / n * s + o,
                              E = Math.cos(A),
                              b = Math.sin(A);
                            (y.x = w * b),
                              (y.y = m * x),
                              (y.z = w * E),
                              l.push(y.x, y.y, y.z),
                              h.push(0, x, 0),
                              (v.x = 0.5 * E + 0.5),
                              (v.y = 0.5 * b * x + 0.5),
                              d.push(v.x, v.y),
                              p++;
                          }
                          for (r = 0; r < n; r++) {
                            var T = a + r,
                              L = f + r;
                            !0 === i
                              ? u.push(L, L + 1, T)
                              : u.push(L + 1, L, T),
                              (M += 3);
                          }
                          c.addGroup(g, M, !0 === i ? 1 : 2), (g += M);
                        }
                        !(function() {
                          var a,
                            v,
                            y = new ke(),
                            M = new ke(),
                            w = 0,
                            x = (e - t) / i;
                          for (v = 0; v <= r; v++) {
                            var A = [],
                              E = v / r,
                              b = E * (e - t) + t;
                            for (a = 0; a <= n; a++) {
                              var T = a / n,
                                L = T * s + o,
                                N = Math.sin(L),
                                D = Math.cos(L);
                              (M.x = b * N),
                                (M.y = -E * i + m),
                                (M.z = b * D),
                                l.push(M.x, M.y, M.z),
                                y.set(N, x, D).normalize(),
                                h.push(y.x, y.y, y.z),
                                d.push(T, 1 - E),
                                A.push(p++);
                            }
                            f.push(A);
                          }
                          for (a = 0; a < n; a++)
                            for (v = 0; v < r; v++) {
                              var C = f[v][a],
                                S = f[v + 1][a],
                                I = f[v + 1][a + 1],
                                _ = f[v][a + 1];
                              u.push(C, S, _), u.push(S, I, _), (w += 6);
                            }
                          c.addGroup(g, w, 0), (g += w);
                        })(),
                          !1 === a && (t > 0 && v(!0), e > 0 && v(!1)),
                          this.setIndex(u),
                          this.addAttribute('position', new kr(l, 3)),
                          this.addAttribute('normal', new kr(h, 3)),
                          this.addAttribute('uv', new kr(d, 2));
                      }
                      function _o(t, e, i, n, r, a, o) {
                        So.call(this, 0, t, e, i, n, r, a, o),
                          (this.type = 'ConeGeometry'),
                          (this.parameters = {
                            radius: t,
                            height: e,
                            radialSegments: i,
                            heightSegments: n,
                            openEnded: r,
                            thetaStart: a,
                            thetaLength: o
                          });
                      }
                      function jo(t, e, i, n, r, a, o) {
                        Io.call(this, 0, t, e, i, n, r, a, o),
                          (this.type = 'ConeBufferGeometry'),
                          (this.parameters = {
                            radius: t,
                            height: e,
                            radialSegments: i,
                            heightSegments: n,
                            openEnded: r,
                            thetaStart: a,
                            thetaLength: o
                          });
                      }
                      function Oo(t, e, i, n) {
                        Dr.call(this),
                          (this.type = 'CircleGeometry'),
                          (this.parameters = {
                            radius: t,
                            segments: e,
                            thetaStart: i,
                            thetaLength: n
                          }),
                          this.fromBufferGeometry(new zo(t, e, i, n)),
                          this.mergeVertices();
                      }
                      function zo(t, e, i, n) {
                        Fr.call(this),
                          (this.type = 'CircleBufferGeometry'),
                          (this.parameters = {
                            radius: t,
                            segments: e,
                            thetaStart: i,
                            thetaLength: n
                          }),
                          (t = t || 50),
                          (e = void 0 !== e ? Math.max(3, e) : 8),
                          (i = void 0 !== i ? i : 0),
                          (n = void 0 !== n ? n : 2 * Math.PI);
                        var r,
                          a,
                          o = [],
                          s = [],
                          c = [],
                          u = [],
                          l = new ke(),
                          h = new he();
                        for (
                          s.push(0, 0, 0),
                            c.push(0, 0, 1),
                            u.push(0.5, 0.5),
                            a = 0,
                            r = 3;
                          a <= e;
                          a++, r += 3
                        ) {
                          var d = i + a / e * n;
                          (l.x = t * Math.cos(d)),
                            (l.y = t * Math.sin(d)),
                            s.push(l.x, l.y, l.z),
                            c.push(0, 0, 1),
                            (h.x = (s[r] / t + 1) / 2),
                            (h.y = (s[r + 1] / t + 1) / 2),
                            u.push(h.x, h.y);
                        }
                        for (r = 1; r <= e; r++) o.push(r, r + 1, 0);
                        this.setIndex(o),
                          this.addAttribute('position', new kr(s, 3)),
                          this.addAttribute('normal', new kr(c, 3)),
                          this.addAttribute('uv', new kr(u, 2));
                      }
                      (vo.prototype = Object.create(Dr.prototype)),
                        (vo.prototype.constructor = vo),
                        (yo.prototype = Object.create(Fr.prototype)),
                        (yo.prototype.constructor = yo),
                        (yo.prototype.getArrays = function() {
                          var t = this.getAttribute('position'),
                            e = t ? Array.prototype.slice.call(t.array) : [],
                            i = this.getAttribute('uv'),
                            n = i ? Array.prototype.slice.call(i.array) : [],
                            r = this.index;
                          return {
                            position: e,
                            uv: n,
                            index: r ? Array.prototype.slice.call(r.array) : []
                          };
                        }),
                        (yo.prototype.addShapeList = function(t, e) {
                          var i = t.length;
                          e.arrays = this.getArrays();
                          for (var n = 0; n < i; n++) {
                            var r = t[n];
                            this.addShape(r, e);
                          }
                          this.setIndex(e.arrays.index),
                            this.addAttribute(
                              'position',
                              new kr(e.arrays.position, 3)
                            ),
                            this.addAttribute('uv', new kr(e.arrays.uv, 2));
                        }),
                        (yo.prototype.addShape = function(t, e) {
                          var i,
                            n,
                            r,
                            a,
                            o,
                            s,
                            c,
                            u,
                            l = e.arrays ? e.arrays : this.getArrays(),
                            h = l.position,
                            d = l.index,
                            p = l.uv,
                            f = [],
                            m = void 0 !== e.amount ? e.amount : 100,
                            g =
                              void 0 !== e.bevelThickness
                                ? e.bevelThickness
                                : 6,
                            v = void 0 !== e.bevelSize ? e.bevelSize : g - 2,
                            y =
                              void 0 !== e.bevelSegments ? e.bevelSegments : 3,
                            M = void 0 === e.bevelEnabled || e.bevelEnabled,
                            w =
                              void 0 !== e.curveSegments ? e.curveSegments : 12,
                            x = void 0 !== e.steps ? e.steps : 1,
                            A = e.extrudePath,
                            E = !1,
                            b =
                              void 0 !== e.UVGenerator
                                ? e.UVGenerator
                                : vo.WorldUVGenerator;
                          A &&
                            ((i = A.getSpacedPoints(x)),
                            (E = !0),
                            (M = !1),
                            (n =
                              void 0 !== e.frames
                                ? e.frames
                                : A.computeFrenetFrames(x, !1)),
                            (r = new ke()),
                            (a = new ke()),
                            (o = new ke())),
                            M || ((y = 0), (g = 0), (v = 0));
                          var T = this,
                            L = t.extractPoints(w),
                            N = L.shape,
                            D = L.holes;
                          if (!go.isClockWise(N))
                            for (
                              N = N.reverse(), c = 0, u = D.length;
                              c < u;
                              c++
                            )
                              (s = D[c]),
                                go.isClockWise(s) && (D[c] = s.reverse());
                          var C = go.triangulateShape(N, D),
                            S = N;
                          for (c = 0, u = D.length; c < u; c++)
                            (s = D[c]), (N = N.concat(s));
                          function I(t, e, i) {
                            return e
                              .clone()
                              .multiplyScalar(i)
                              .add(t);
                          }
                          var _,
                            j,
                            O,
                            z,
                            R,
                            k,
                            U = N.length,
                            P = C.length;
                          function B(t, e, i) {
                            var n,
                              r,
                              a,
                              o = t.x - e.x,
                              s = t.y - e.y,
                              c = i.x - t.x,
                              u = i.y - t.y,
                              l = o * o + s * s,
                              h = o * u - s * c;
                            if (Math.abs(h) > Number.EPSILON) {
                              var d = Math.sqrt(l),
                                p = Math.sqrt(c * c + u * u),
                                f = e.x - s / d,
                                m = e.y + o / d,
                                g =
                                  ((i.x - u / p - f) * u -
                                    (i.y + c / p - m) * c) /
                                  (o * u - s * c),
                                v =
                                  (n = f + o * g - t.x) * n +
                                  (r = m + s * g - t.y) * r;
                              if (v <= 2) return new he(n, r);
                              a = Math.sqrt(v / 2);
                            } else {
                              var y = !1;
                              o > Number.EPSILON
                                ? c > Number.EPSILON && (y = !0)
                                : o < -Number.EPSILON
                                  ? c < -Number.EPSILON && (y = !0)
                                  : Math.sign(s) === Math.sign(u) && (y = !0),
                                y
                                  ? ((n = -s), (r = o), (a = Math.sqrt(l)))
                                  : ((n = o), (r = s), (a = Math.sqrt(l / 2)));
                            }
                            return new he(n / a, r / a);
                          }
                          for (
                            var F = [],
                              G = 0,
                              V = S.length,
                              Y = V - 1,
                              Q = G + 1;
                            G < V;
                            G++, Y++, Q++
                          )
                            Y === V && (Y = 0),
                              Q === V && (Q = 0),
                              (F[G] = B(S[G], S[Y], S[Q]));
                          var H,
                            W,
                            X = [],
                            q = F.concat();
                          for (c = 0, u = D.length; c < u; c++) {
                            for (
                              s = D[c],
                                H = [],
                                G = 0,
                                Y = (V = s.length) - 1,
                                Q = G + 1;
                              G < V;
                              G++, Y++, Q++
                            )
                              Y === V && (Y = 0),
                                Q === V && (Q = 0),
                                (H[G] = B(s[G], s[Y], s[Q]));
                            X.push(H), (q = q.concat(H));
                          }
                          for (_ = 0; _ < y; _++) {
                            for (
                              O = _ / y,
                                z = g * Math.cos(O * Math.PI / 2),
                                j = v * Math.sin(O * Math.PI / 2),
                                G = 0,
                                V = S.length;
                              G < V;
                              G++
                            )
                              K((R = I(S[G], F[G], j)).x, R.y, -z);
                            for (c = 0, u = D.length; c < u; c++)
                              for (
                                s = D[c], H = X[c], G = 0, V = s.length;
                                G < V;
                                G++
                              )
                                K((R = I(s[G], H[G], j)).x, R.y, -z);
                          }
                          for (j = v, G = 0; G < U; G++)
                            (R = M ? I(N[G], q[G], j) : N[G]),
                              E
                                ? (a.copy(n.normals[0]).multiplyScalar(R.x),
                                  r.copy(n.binormals[0]).multiplyScalar(R.y),
                                  o
                                    .copy(i[0])
                                    .add(a)
                                    .add(r),
                                  K(o.x, o.y, o.z))
                                : K(R.x, R.y, 0);
                          for (W = 1; W <= x; W++)
                            for (G = 0; G < U; G++)
                              (R = M ? I(N[G], q[G], j) : N[G]),
                                E
                                  ? (a.copy(n.normals[W]).multiplyScalar(R.x),
                                    r.copy(n.binormals[W]).multiplyScalar(R.y),
                                    o
                                      .copy(i[W])
                                      .add(a)
                                      .add(r),
                                    K(o.x, o.y, o.z))
                                  : K(R.x, R.y, m / x * W);
                          for (_ = y - 1; _ >= 0; _--) {
                            for (
                              O = _ / y,
                                z = g * Math.cos(O * Math.PI / 2),
                                j = v * Math.sin(O * Math.PI / 2),
                                G = 0,
                                V = S.length;
                              G < V;
                              G++
                            )
                              K((R = I(S[G], F[G], j)).x, R.y, m + z);
                            for (c = 0, u = D.length; c < u; c++)
                              for (
                                s = D[c], H = X[c], G = 0, V = s.length;
                                G < V;
                                G++
                              )
                                (R = I(s[G], H[G], j)),
                                  E
                                    ? K(R.x, R.y + i[x - 1].y, i[x - 1].x + z)
                                    : K(R.x, R.y, m + z);
                          }
                          function Z(t, e) {
                            var i, n;
                            for (G = t.length; --G >= 0; ) {
                              (i = G), (n = G - 1) < 0 && (n = t.length - 1);
                              var r = 0,
                                a = x + 2 * y;
                              for (r = 0; r < a; r++) {
                                var o = U * r,
                                  s = U * (r + 1);
                                $(
                                  e + i + o,
                                  e + n + o,
                                  e + n + s,
                                  e + i + s,
                                  t,
                                  r,
                                  a,
                                  i,
                                  n
                                );
                              }
                            }
                          }
                          function K(t, e, i) {
                            f.push(t), f.push(e), f.push(i);
                          }
                          function J(t, e, i) {
                            tt(t), tt(e), tt(i);
                            var n = h.length / 3,
                              r = b.generateTopUV(T, h, n - 3, n - 2, n - 1);
                            et(r[0]), et(r[1]), et(r[2]);
                          }
                          function $(t, e, i, n, r, a, o, s, c) {
                            tt(t), tt(e), tt(n), tt(e), tt(i), tt(n);
                            var u = h.length / 3,
                              l = b.generateSideWallUV(
                                T,
                                h,
                                u - 6,
                                u - 3,
                                u - 2,
                                u - 1
                              );
                            et(l[0]),
                              et(l[1]),
                              et(l[3]),
                              et(l[1]),
                              et(l[2]),
                              et(l[3]);
                          }
                          function tt(t) {
                            d.push(h.length / 3),
                              h.push(f[3 * t + 0]),
                              h.push(f[3 * t + 1]),
                              h.push(f[3 * t + 2]);
                          }
                          function et(t) {
                            p.push(t.x), p.push(t.y);
                          }
                          !(function() {
                            var t = h.length / 3;
                            if (M) {
                              var i = 0,
                                n = U * i;
                              for (G = 0; G < P; G++)
                                J((k = C[G])[2] + n, k[1] + n, k[0] + n);
                              for (n = U * (i = x + 2 * y), G = 0; G < P; G++)
                                J((k = C[G])[0] + n, k[1] + n, k[2] + n);
                            } else {
                              for (G = 0; G < P; G++)
                                J((k = C[G])[2], k[1], k[0]);
                              for (G = 0; G < P; G++)
                                J(
                                  (k = C[G])[0] + U * x,
                                  k[1] + U * x,
                                  k[2] + U * x
                                );
                            }
                            T.addGroup(
                              t,
                              h.length / 3 - t,
                              void 0 !== e.material ? e.material : 0
                            );
                          })(),
                            (function() {
                              var t = h.length / 3,
                                i = 0;
                              for (
                                Z(S, i), i += S.length, c = 0, u = D.length;
                                c < u;
                                c++
                              )
                                Z((s = D[c]), i), (i += s.length);
                              T.addGroup(
                                t,
                                h.length / 3 - t,
                                void 0 !== e.extrudeMaterial
                                  ? e.extrudeMaterial
                                  : 1
                              );
                            })(),
                            e.arrays ||
                              (this.setIndex(d),
                              this.addAttribute('position', new kr(h, 3)),
                              this.addAttribute('uv', new kr(e.arrays.uv, 2)));
                        }),
                        (vo.WorldUVGenerator = {
                          generateTopUV: function(t, e, i, n, r) {
                            var a = e[3 * i],
                              o = e[3 * i + 1],
                              s = e[3 * n],
                              c = e[3 * n + 1],
                              u = e[3 * r],
                              l = e[3 * r + 1];
                            return [new he(a, o), new he(s, c), new he(u, l)];
                          },
                          generateSideWallUV: function(t, e, i, n, r, a) {
                            var o = e[3 * i],
                              s = e[3 * i + 1],
                              c = e[3 * i + 2],
                              u = e[3 * n],
                              l = e[3 * n + 1],
                              h = e[3 * n + 2],
                              d = e[3 * r],
                              p = e[3 * r + 1],
                              f = e[3 * r + 2],
                              m = e[3 * a],
                              g = e[3 * a + 1],
                              v = e[3 * a + 2];
                            return Math.abs(s - l) < 0.01
                              ? [
                                  new he(o, 1 - c),
                                  new he(u, 1 - h),
                                  new he(d, 1 - f),
                                  new he(m, 1 - v)
                                ]
                              : [
                                  new he(s, 1 - c),
                                  new he(l, 1 - h),
                                  new he(p, 1 - f),
                                  new he(g, 1 - v)
                                ];
                          }
                        }),
                        (Mo.prototype = Object.create(Dr.prototype)),
                        (Mo.prototype.constructor = Mo),
                        (wo.prototype = Object.create(yo.prototype)),
                        (wo.prototype.constructor = wo),
                        (xo.prototype = Object.create(Dr.prototype)),
                        (xo.prototype.constructor = xo),
                        (Ao.prototype = Object.create(Fr.prototype)),
                        (Ao.prototype.constructor = Ao),
                        (Eo.prototype = Object.create(Dr.prototype)),
                        (Eo.prototype.constructor = Eo),
                        (bo.prototype = Object.create(Fr.prototype)),
                        (bo.prototype.constructor = bo),
                        (To.prototype = Object.create(Dr.prototype)),
                        (To.prototype.constructor = To),
                        (Lo.prototype = Object.create(Fr.prototype)),
                        (Lo.prototype.constructor = Lo),
                        (No.prototype = Object.create(Dr.prototype)),
                        (No.prototype.constructor = No),
                        (Do.prototype = Object.create(Fr.prototype)),
                        (Do.prototype.constructor = Do),
                        (Co.prototype = Object.create(Fr.prototype)),
                        (Co.prototype.constructor = Co),
                        (So.prototype = Object.create(Dr.prototype)),
                        (So.prototype.constructor = So),
                        (Io.prototype = Object.create(Fr.prototype)),
                        (Io.prototype.constructor = Io),
                        (_o.prototype = Object.create(So.prototype)),
                        (_o.prototype.constructor = _o),
                        (jo.prototype = Object.create(Io.prototype)),
                        (jo.prototype.constructor = jo),
                        (Oo.prototype = Object.create(Dr.prototype)),
                        (Oo.prototype.constructor = Oo),
                        (zo.prototype = Object.create(Fr.prototype)),
                        (zo.prototype.constructor = zo);
                      var Ro = Object.freeze({
                        WireframeGeometry: Za,
                        ParametricGeometry: Ka,
                        ParametricBufferGeometry: Ja,
                        TetrahedronGeometry: eo,
                        TetrahedronBufferGeometry: io,
                        OctahedronGeometry: no,
                        OctahedronBufferGeometry: ro,
                        IcosahedronGeometry: ao,
                        IcosahedronBufferGeometry: oo,
                        DodecahedronGeometry: so,
                        DodecahedronBufferGeometry: co,
                        PolyhedronGeometry: $a,
                        PolyhedronBufferGeometry: to,
                        TubeGeometry: uo,
                        TubeBufferGeometry: lo,
                        TorusKnotGeometry: ho,
                        TorusKnotBufferGeometry: po,
                        TorusGeometry: fo,
                        TorusBufferGeometry: mo,
                        TextGeometry: Mo,
                        TextBufferGeometry: wo,
                        SphereGeometry: xo,
                        SphereBufferGeometry: Ao,
                        RingGeometry: Eo,
                        RingBufferGeometry: bo,
                        PlaneGeometry: Yr,
                        PlaneBufferGeometry: Qr,
                        LatheGeometry: To,
                        LatheBufferGeometry: Lo,
                        ShapeGeometry: No,
                        ShapeBufferGeometry: Do,
                        ExtrudeGeometry: vo,
                        ExtrudeBufferGeometry: yo,
                        EdgesGeometry: Co,
                        ConeGeometry: _o,
                        ConeBufferGeometry: jo,
                        CylinderGeometry: So,
                        CylinderBufferGeometry: Io,
                        CircleGeometry: Oo,
                        CircleBufferGeometry: zo,
                        BoxGeometry: Gr,
                        BoxBufferGeometry: Vr
                      });
                      function ko(t) {
                        an.call(this),
                          (this.type = 'ShadowMaterial'),
                          (this.color = new Ni(0)),
                          (this.opacity = 1),
                          (this.lights = !0),
                          (this.transparent = !0),
                          this.setValues(t);
                      }
                      function Uo(t) {
                        on.call(this, t), (this.type = 'RawShaderMaterial');
                      }
                      function Po(t) {
                        an.call(this),
                          (this.defines = { STANDARD: '' }),
                          (this.type = 'MeshStandardMaterial'),
                          (this.color = new Ni(16777215)),
                          (this.roughness = 0.5),
                          (this.metalness = 0.5),
                          (this.map = null),
                          (this.lightMap = null),
                          (this.lightMapIntensity = 1),
                          (this.aoMap = null),
                          (this.aoMapIntensity = 1),
                          (this.emissive = new Ni(0)),
                          (this.emissiveIntensity = 1),
                          (this.emissiveMap = null),
                          (this.bumpMap = null),
                          (this.bumpScale = 1),
                          (this.normalMap = null),
                          (this.normalScale = new he(1, 1)),
                          (this.displacementMap = null),
                          (this.displacementScale = 1),
                          (this.displacementBias = 0),
                          (this.roughnessMap = null),
                          (this.metalnessMap = null),
                          (this.alphaMap = null),
                          (this.envMap = null),
                          (this.envMapIntensity = 1),
                          (this.refractionRatio = 0.98),
                          (this.wireframe = !1),
                          (this.wireframeLinewidth = 1),
                          (this.wireframeLinecap = 'round'),
                          (this.wireframeLinejoin = 'round'),
                          (this.skinning = !1),
                          (this.morphTargets = !1),
                          (this.morphNormals = !1),
                          this.setValues(t);
                      }
                      function Bo(t) {
                        Po.call(this),
                          (this.defines = { PHYSICAL: '' }),
                          (this.type = 'MeshPhysicalMaterial'),
                          (this.reflectivity = 0.5),
                          (this.clearCoat = 0),
                          (this.clearCoatRoughness = 0),
                          this.setValues(t);
                      }
                      function Fo(t) {
                        an.call(this),
                          (this.type = 'MeshPhongMaterial'),
                          (this.color = new Ni(16777215)),
                          (this.specular = new Ni(1118481)),
                          (this.shininess = 30),
                          (this.map = null),
                          (this.lightMap = null),
                          (this.lightMapIntensity = 1),
                          (this.aoMap = null),
                          (this.aoMapIntensity = 1),
                          (this.emissive = new Ni(0)),
                          (this.emissiveIntensity = 1),
                          (this.emissiveMap = null),
                          (this.bumpMap = null),
                          (this.bumpScale = 1),
                          (this.normalMap = null),
                          (this.normalScale = new he(1, 1)),
                          (this.displacementMap = null),
                          (this.displacementScale = 1),
                          (this.displacementBias = 0),
                          (this.specularMap = null),
                          (this.alphaMap = null),
                          (this.envMap = null),
                          (this.combine = K),
                          (this.reflectivity = 1),
                          (this.refractionRatio = 0.98),
                          (this.wireframe = !1),
                          (this.wireframeLinewidth = 1),
                          (this.wireframeLinecap = 'round'),
                          (this.wireframeLinejoin = 'round'),
                          (this.skinning = !1),
                          (this.morphTargets = !1),
                          (this.morphNormals = !1),
                          this.setValues(t);
                      }
                      function Go(t) {
                        Fo.call(this),
                          (this.defines = { TOON: '' }),
                          (this.type = 'MeshToonMaterial'),
                          (this.gradientMap = null),
                          this.setValues(t);
                      }
                      function Vo(t) {
                        an.call(this),
                          (this.type = 'MeshNormalMaterial'),
                          (this.bumpMap = null),
                          (this.bumpScale = 1),
                          (this.normalMap = null),
                          (this.normalScale = new he(1, 1)),
                          (this.displacementMap = null),
                          (this.displacementScale = 1),
                          (this.displacementBias = 0),
                          (this.wireframe = !1),
                          (this.wireframeLinewidth = 1),
                          (this.fog = !1),
                          (this.lights = !1),
                          (this.skinning = !1),
                          (this.morphTargets = !1),
                          (this.morphNormals = !1),
                          this.setValues(t);
                      }
                      function Yo(t) {
                        an.call(this),
                          (this.type = 'MeshLambertMaterial'),
                          (this.color = new Ni(16777215)),
                          (this.map = null),
                          (this.lightMap = null),
                          (this.lightMapIntensity = 1),
                          (this.aoMap = null),
                          (this.aoMapIntensity = 1),
                          (this.emissive = new Ni(0)),
                          (this.emissiveIntensity = 1),
                          (this.emissiveMap = null),
                          (this.specularMap = null),
                          (this.alphaMap = null),
                          (this.envMap = null),
                          (this.combine = K),
                          (this.reflectivity = 1),
                          (this.refractionRatio = 0.98),
                          (this.wireframe = !1),
                          (this.wireframeLinewidth = 1),
                          (this.wireframeLinecap = 'round'),
                          (this.wireframeLinejoin = 'round'),
                          (this.skinning = !1),
                          (this.morphTargets = !1),
                          (this.morphNormals = !1),
                          this.setValues(t);
                      }
                      function Qo(t) {
                        Ba.call(this),
                          (this.type = 'LineDashedMaterial'),
                          (this.scale = 1),
                          (this.dashSize = 3),
                          (this.gapSize = 1),
                          this.setValues(t);
                      }
                      (ko.prototype = Object.create(an.prototype)),
                        (ko.prototype.constructor = ko),
                        (ko.prototype.isShadowMaterial = !0),
                        (Uo.prototype = Object.create(on.prototype)),
                        (Uo.prototype.constructor = Uo),
                        (Uo.prototype.isRawShaderMaterial = !0),
                        (Po.prototype = Object.create(an.prototype)),
                        (Po.prototype.constructor = Po),
                        (Po.prototype.isMeshStandardMaterial = !0),
                        (Po.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            (this.defines = { STANDARD: '' }),
                            this.color.copy(t.color),
                            (this.roughness = t.roughness),
                            (this.metalness = t.metalness),
                            (this.map = t.map),
                            (this.lightMap = t.lightMap),
                            (this.lightMapIntensity = t.lightMapIntensity),
                            (this.aoMap = t.aoMap),
                            (this.aoMapIntensity = t.aoMapIntensity),
                            this.emissive.copy(t.emissive),
                            (this.emissiveMap = t.emissiveMap),
                            (this.emissiveIntensity = t.emissiveIntensity),
                            (this.bumpMap = t.bumpMap),
                            (this.bumpScale = t.bumpScale),
                            (this.normalMap = t.normalMap),
                            this.normalScale.copy(t.normalScale),
                            (this.displacementMap = t.displacementMap),
                            (this.displacementScale = t.displacementScale),
                            (this.displacementBias = t.displacementBias),
                            (this.roughnessMap = t.roughnessMap),
                            (this.metalnessMap = t.metalnessMap),
                            (this.alphaMap = t.alphaMap),
                            (this.envMap = t.envMap),
                            (this.envMapIntensity = t.envMapIntensity),
                            (this.refractionRatio = t.refractionRatio),
                            (this.wireframe = t.wireframe),
                            (this.wireframeLinewidth = t.wireframeLinewidth),
                            (this.wireframeLinecap = t.wireframeLinecap),
                            (this.wireframeLinejoin = t.wireframeLinejoin),
                            (this.skinning = t.skinning),
                            (this.morphTargets = t.morphTargets),
                            (this.morphNormals = t.morphNormals),
                            this
                          );
                        }),
                        (Bo.prototype = Object.create(Po.prototype)),
                        (Bo.prototype.constructor = Bo),
                        (Bo.prototype.isMeshPhysicalMaterial = !0),
                        (Bo.prototype.copy = function(t) {
                          return (
                            Po.prototype.copy.call(this, t),
                            (this.defines = { PHYSICAL: '' }),
                            (this.reflectivity = t.reflectivity),
                            (this.clearCoat = t.clearCoat),
                            (this.clearCoatRoughness = t.clearCoatRoughness),
                            this
                          );
                        }),
                        (Fo.prototype = Object.create(an.prototype)),
                        (Fo.prototype.constructor = Fo),
                        (Fo.prototype.isMeshPhongMaterial = !0),
                        (Fo.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            this.color.copy(t.color),
                            this.specular.copy(t.specular),
                            (this.shininess = t.shininess),
                            (this.map = t.map),
                            (this.lightMap = t.lightMap),
                            (this.lightMapIntensity = t.lightMapIntensity),
                            (this.aoMap = t.aoMap),
                            (this.aoMapIntensity = t.aoMapIntensity),
                            this.emissive.copy(t.emissive),
                            (this.emissiveMap = t.emissiveMap),
                            (this.emissiveIntensity = t.emissiveIntensity),
                            (this.bumpMap = t.bumpMap),
                            (this.bumpScale = t.bumpScale),
                            (this.normalMap = t.normalMap),
                            this.normalScale.copy(t.normalScale),
                            (this.displacementMap = t.displacementMap),
                            (this.displacementScale = t.displacementScale),
                            (this.displacementBias = t.displacementBias),
                            (this.specularMap = t.specularMap),
                            (this.alphaMap = t.alphaMap),
                            (this.envMap = t.envMap),
                            (this.combine = t.combine),
                            (this.reflectivity = t.reflectivity),
                            (this.refractionRatio = t.refractionRatio),
                            (this.wireframe = t.wireframe),
                            (this.wireframeLinewidth = t.wireframeLinewidth),
                            (this.wireframeLinecap = t.wireframeLinecap),
                            (this.wireframeLinejoin = t.wireframeLinejoin),
                            (this.skinning = t.skinning),
                            (this.morphTargets = t.morphTargets),
                            (this.morphNormals = t.morphNormals),
                            this
                          );
                        }),
                        (Go.prototype = Object.create(Fo.prototype)),
                        (Go.prototype.constructor = Go),
                        (Go.prototype.isMeshToonMaterial = !0),
                        (Go.prototype.copy = function(t) {
                          return (
                            Fo.prototype.copy.call(this, t),
                            (this.gradientMap = t.gradientMap),
                            this
                          );
                        }),
                        (Vo.prototype = Object.create(an.prototype)),
                        (Vo.prototype.constructor = Vo),
                        (Vo.prototype.isMeshNormalMaterial = !0),
                        (Vo.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            (this.bumpMap = t.bumpMap),
                            (this.bumpScale = t.bumpScale),
                            (this.normalMap = t.normalMap),
                            this.normalScale.copy(t.normalScale),
                            (this.displacementMap = t.displacementMap),
                            (this.displacementScale = t.displacementScale),
                            (this.displacementBias = t.displacementBias),
                            (this.wireframe = t.wireframe),
                            (this.wireframeLinewidth = t.wireframeLinewidth),
                            (this.skinning = t.skinning),
                            (this.morphTargets = t.morphTargets),
                            (this.morphNormals = t.morphNormals),
                            this
                          );
                        }),
                        (Yo.prototype = Object.create(an.prototype)),
                        (Yo.prototype.constructor = Yo),
                        (Yo.prototype.isMeshLambertMaterial = !0),
                        (Yo.prototype.copy = function(t) {
                          return (
                            an.prototype.copy.call(this, t),
                            this.color.copy(t.color),
                            (this.map = t.map),
                            (this.lightMap = t.lightMap),
                            (this.lightMapIntensity = t.lightMapIntensity),
                            (this.aoMap = t.aoMap),
                            (this.aoMapIntensity = t.aoMapIntensity),
                            this.emissive.copy(t.emissive),
                            (this.emissiveMap = t.emissiveMap),
                            (this.emissiveIntensity = t.emissiveIntensity),
                            (this.specularMap = t.specularMap),
                            (this.alphaMap = t.alphaMap),
                            (this.envMap = t.envMap),
                            (this.combine = t.combine),
                            (this.reflectivity = t.reflectivity),
                            (this.refractionRatio = t.refractionRatio),
                            (this.wireframe = t.wireframe),
                            (this.wireframeLinewidth = t.wireframeLinewidth),
                            (this.wireframeLinecap = t.wireframeLinecap),
                            (this.wireframeLinejoin = t.wireframeLinejoin),
                            (this.skinning = t.skinning),
                            (this.morphTargets = t.morphTargets),
                            (this.morphNormals = t.morphNormals),
                            this
                          );
                        }),
                        (Qo.prototype = Object.create(Ba.prototype)),
                        (Qo.prototype.constructor = Qo),
                        (Qo.prototype.isLineDashedMaterial = !0),
                        (Qo.prototype.copy = function(t) {
                          return (
                            Ba.prototype.copy.call(this, t),
                            (this.scale = t.scale),
                            (this.dashSize = t.dashSize),
                            (this.gapSize = t.gapSize),
                            this
                          );
                        });
                      var Ho = Object.freeze({
                          ShadowMaterial: ko,
                          SpriteMaterial: Oa,
                          RawShaderMaterial: Uo,
                          ShaderMaterial: on,
                          PointsMaterial: Ya,
                          MeshPhysicalMaterial: Bo,
                          MeshStandardMaterial: Po,
                          MeshPhongMaterial: Fo,
                          MeshToonMaterial: Go,
                          MeshNormalMaterial: Vo,
                          MeshLambertMaterial: Yo,
                          MeshDepthMaterial: sn,
                          MeshDistanceMaterial: cn,
                          MeshBasicMaterial: Hr,
                          LineDashedMaterial: Qo,
                          LineBasicMaterial: Ba,
                          Material: an
                        }),
                        Wo = {
                          enabled: !1,
                          files: {},
                          add: function(t, e) {
                            !1 !== this.enabled && (this.files[t] = e);
                          },
                          get: function(t) {
                            if (!1 !== this.enabled) return this.files[t];
                          },
                          remove: function(t) {
                            delete this.files[t];
                          },
                          clear: function() {
                            this.files = {};
                          }
                        };
                      function Xo(t, e, i) {
                        var n = this,
                          r = !1,
                          a = 0,
                          o = 0;
                        (this.onStart = void 0),
                          (this.onLoad = t),
                          (this.onProgress = e),
                          (this.onError = i),
                          (this.itemStart = function(t) {
                            o++,
                              !1 === r &&
                                void 0 !== n.onStart &&
                                n.onStart(t, a, o),
                              (r = !0);
                          }),
                          (this.itemEnd = function(t) {
                            a++,
                              void 0 !== n.onProgress && n.onProgress(t, a, o),
                              a === o &&
                                ((r = !1), void 0 !== n.onLoad && n.onLoad());
                          }),
                          (this.itemError = function(t) {
                            void 0 !== n.onError && n.onError(t);
                          });
                      }
                      var qo = new Xo();
                      function Zo(t) {
                        this.manager = void 0 !== t ? t : qo;
                      }
                      function Ko(t) {
                        (this.manager = void 0 !== t ? t : qo),
                          (this._parser = null);
                      }
                      function Jo(t) {
                        (this.manager = void 0 !== t ? t : qo),
                          (this._parser = null);
                      }
                      function $o(t) {
                        this.manager = void 0 !== t ? t : qo;
                      }
                      function ts(t) {
                        this.manager = void 0 !== t ? t : qo;
                      }
                      function es(t) {
                        this.manager = void 0 !== t ? t : qo;
                      }
                      function is(t, e) {
                        Rn.call(this),
                          (this.type = 'Light'),
                          (this.color = new Ni(t)),
                          (this.intensity = void 0 !== e ? e : 1),
                          (this.receiveShadow = void 0);
                      }
                      function ns(t, e, i) {
                        is.call(this, t, i),
                          (this.type = 'HemisphereLight'),
                          (this.castShadow = void 0),
                          this.position.copy(Rn.DefaultUp),
                          this.updateMatrix(),
                          (this.groundColor = new Ni(e));
                      }
                      function rs(t) {
                        (this.camera = t),
                          (this.bias = 0),
                          (this.radius = 1),
                          (this.mapSize = new he(512, 512)),
                          (this.map = null),
                          (this.matrix = new Ue());
                      }
                      function as() {
                        rs.call(this, new Pn(50, 1, 0.5, 500));
                      }
                      function os(t, e, i, n, r, a) {
                        is.call(this, t, e),
                          (this.type = 'SpotLight'),
                          this.position.copy(Rn.DefaultUp),
                          this.updateMatrix(),
                          (this.target = new Rn()),
                          Object.defineProperty(this, 'power', {
                            get: function() {
                              return this.intensity * Math.PI;
                            },
                            set: function(t) {
                              this.intensity = t / Math.PI;
                            }
                          }),
                          (this.distance = void 0 !== i ? i : 0),
                          (this.angle = void 0 !== n ? n : Math.PI / 3),
                          (this.penumbra = void 0 !== r ? r : 0),
                          (this.decay = void 0 !== a ? a : 1),
                          (this.shadow = new as());
                      }
                      function ss(t, e, i, n) {
                        is.call(this, t, e),
                          (this.type = 'PointLight'),
                          Object.defineProperty(this, 'power', {
                            get: function() {
                              return 4 * this.intensity * Math.PI;
                            },
                            set: function(t) {
                              this.intensity = t / (4 * Math.PI);
                            }
                          }),
                          (this.distance = void 0 !== i ? i : 0),
                          (this.decay = void 0 !== n ? n : 1),
                          (this.shadow = new rs(new Pn(90, 1, 0.5, 500)));
                      }
                      function cs() {
                        rs.call(this, new Un(-5, 5, 5, -5, 0.5, 500));
                      }
                      function us(t, e) {
                        is.call(this, t, e),
                          (this.type = 'DirectionalLight'),
                          this.position.copy(Rn.DefaultUp),
                          this.updateMatrix(),
                          (this.target = new Rn()),
                          (this.shadow = new cs());
                      }
                      function ls(t, e) {
                        is.call(this, t, e),
                          (this.type = 'AmbientLight'),
                          (this.castShadow = void 0);
                      }
                      function hs(t, e, i, n) {
                        is.call(this, t, e),
                          (this.type = 'RectAreaLight'),
                          this.position.set(0, 1, 0),
                          this.updateMatrix(),
                          (this.width = void 0 !== i ? i : 10),
                          (this.height = void 0 !== n ? n : 10);
                      }
                      Object.assign(Zo.prototype, {
                        load: function(t, e, i, n) {
                          void 0 === t && (t = ''),
                            void 0 !== this.path && (t = this.path + t);
                          var r = this,
                            a = Wo.get(t);
                          if (void 0 !== a)
                            return (
                              r.manager.itemStart(t),
                              setTimeout(function() {
                                e && e(a), r.manager.itemEnd(t);
                              }, 0),
                              a
                            );
                          var o = t.match(/^data:(.*?)(;base64)?,(.*)$/);
                          if (o) {
                            var s = o[1],
                              c = !!o[2],
                              u = o[3];
                            (u = window.decodeURIComponent(u)),
                              c && (u = window.atob(u));
                            try {
                              var l,
                                h = (this.responseType || '').toLowerCase();
                              switch (h) {
                                case 'arraybuffer':
                                case 'blob':
                                  l = new ArrayBuffer(u.length);
                                  for (
                                    var d = new Uint8Array(l), p = 0;
                                    p < u.length;
                                    p++
                                  )
                                    d[p] = u.charCodeAt(p);
                                  'blob' === h &&
                                    (l = new Blob([l], { type: s }));
                                  break;
                                case 'document':
                                  var f = new DOMParser();
                                  l = f.parseFromString(u, s);
                                  break;
                                case 'json':
                                  l = JSON.parse(u);
                                  break;
                                default:
                                  l = u;
                              }
                              window.setTimeout(function() {
                                e && e(l), r.manager.itemEnd(t);
                              }, 0);
                            } catch (e) {
                              window.setTimeout(function() {
                                n && n(e),
                                  r.manager.itemEnd(t),
                                  r.manager.itemError(t);
                              }, 0);
                            }
                          } else {
                            var m = new XMLHttpRequest();
                            m.open('GET', t, !0),
                              m.addEventListener(
                                'load',
                                function(i) {
                                  var a = i.target.response;
                                  Wo.add(t, a),
                                    200 === this.status
                                      ? (e && e(a), r.manager.itemEnd(t))
                                      : 0 === this.status
                                        ? (e && e(a), r.manager.itemEnd(t))
                                        : (n && n(i),
                                          r.manager.itemEnd(t),
                                          r.manager.itemError(t));
                                },
                                !1
                              ),
                              void 0 !== i &&
                                m.addEventListener(
                                  'progress',
                                  function(t) {
                                    i(t);
                                  },
                                  !1
                                ),
                              m.addEventListener(
                                'error',
                                function(e) {
                                  n && n(e),
                                    r.manager.itemEnd(t),
                                    r.manager.itemError(t);
                                },
                                !1
                              ),
                              void 0 !== this.responseType &&
                                (m.responseType = this.responseType),
                              void 0 !== this.withCredentials &&
                                (m.withCredentials = this.withCredentials),
                              m.overrideMimeType &&
                                m.overrideMimeType(
                                  void 0 !== this.mimeType
                                    ? this.mimeType
                                    : 'text/plain'
                                );
                            for (var g in this.requestHeader)
                              m.setRequestHeader(g, this.requestHeader[g]);
                            m.send(null);
                          }
                          return r.manager.itemStart(t), m;
                        },
                        setPath: function(t) {
                          return (this.path = t), this;
                        },
                        setResponseType: function(t) {
                          return (this.responseType = t), this;
                        },
                        setWithCredentials: function(t) {
                          return (this.withCredentials = t), this;
                        },
                        setMimeType: function(t) {
                          return (this.mimeType = t), this;
                        },
                        setRequestHeader: function(t) {
                          return (this.requestHeader = t), this;
                        }
                      }),
                        Object.assign(Ko.prototype, {
                          load: function(t, e, i, n) {
                            var r = this,
                              a = [],
                              o = new Xa();
                            o.image = a;
                            var s = new Zo(this.manager);
                            function c(c) {
                              s.load(
                                t[c],
                                function(t) {
                                  var i = r._parser(t, !0);
                                  (a[c] = {
                                    width: i.width,
                                    height: i.height,
                                    format: i.format,
                                    mipmaps: i.mipmaps
                                  }),
                                    6 === (u += 1) &&
                                      (1 === i.mipmapCount &&
                                        (o.minFilter = yt),
                                      (o.format = i.format),
                                      (o.needsUpdate = !0),
                                      e && e(o));
                                },
                                i,
                                n
                              );
                            }
                            if (
                              (s.setPath(this.path),
                              s.setResponseType('arraybuffer'),
                              Array.isArray(t))
                            )
                              for (var u = 0, l = 0, h = t.length; l < h; ++l)
                                c(l);
                            else
                              s.load(
                                t,
                                function(t) {
                                  var i = r._parser(t, !0);
                                  if (i.isCubemap)
                                    for (
                                      var n = i.mipmaps.length / i.mipmapCount,
                                        s = 0;
                                      s < n;
                                      s++
                                    ) {
                                      a[s] = { mipmaps: [] };
                                      for (var c = 0; c < i.mipmapCount; c++)
                                        a[s].mipmaps.push(
                                          i.mipmaps[s * i.mipmapCount + c]
                                        ),
                                          (a[s].format = i.format),
                                          (a[s].width = i.width),
                                          (a[s].height = i.height);
                                    }
                                  else
                                    (o.image.width = i.width),
                                      (o.image.height = i.height),
                                      (o.mipmaps = i.mipmaps);
                                  1 === i.mipmapCount && (o.minFilter = yt),
                                    (o.format = i.format),
                                    (o.needsUpdate = !0),
                                    e && e(o);
                                },
                                i,
                                n
                              );
                            return o;
                          },
                          setPath: function(t) {
                            return (this.path = t), this;
                          }
                        }),
                        Object.assign(Jo.prototype, {
                          load: function(t, e, i, n) {
                            var r = this,
                              a = new Pe(),
                              o = new Zo(this.manager);
                            return (
                              o.setResponseType('arraybuffer'),
                              o.load(
                                t,
                                function(t) {
                                  var i = r._parser(t);
                                  i &&
                                    (void 0 !== i.image
                                      ? (a.image = i.image)
                                      : void 0 !== i.data &&
                                        ((a.image.width = i.width),
                                        (a.image.height = i.height),
                                        (a.image.data = i.data)),
                                    (a.wrapS =
                                      void 0 !== i.wrapS ? i.wrapS : pt),
                                    (a.wrapT =
                                      void 0 !== i.wrapT ? i.wrapT : pt),
                                    (a.magFilter =
                                      void 0 !== i.magFilter
                                        ? i.magFilter
                                        : yt),
                                    (a.minFilter =
                                      void 0 !== i.minFilter
                                        ? i.minFilter
                                        : wt),
                                    (a.anisotropy =
                                      void 0 !== i.anisotropy
                                        ? i.anisotropy
                                        : 1),
                                    void 0 !== i.format &&
                                      (a.format = i.format),
                                    void 0 !== i.type && (a.type = i.type),
                                    void 0 !== i.mipmaps &&
                                      (a.mipmaps = i.mipmaps),
                                    1 === i.mipmapCount && (a.minFilter = yt),
                                    (a.needsUpdate = !0),
                                    e && e(a, i));
                                },
                                i,
                                n
                              ),
                              a
                            );
                          }
                        }),
                        Object.assign($o.prototype, {
                          crossOrigin: 'Anonymous',
                          load: function(t, e, i, n) {
                            void 0 === t && (t = ''),
                              void 0 !== this.path && (t = this.path + t);
                            var r = this,
                              a = Wo.get(t);
                            if (void 0 !== a)
                              return (
                                r.manager.itemStart(t),
                                setTimeout(function() {
                                  e && e(a), r.manager.itemEnd(t);
                                }, 0),
                                a
                              );
                            var o = document.createElementNS(
                              'http://www.w3.org/1999/xhtml',
                              'img'
                            );
                            return (
                              o.addEventListener(
                                'load',
                                function() {
                                  Wo.add(t, this),
                                    e && e(this),
                                    r.manager.itemEnd(t);
                                },
                                !1
                              ),
                              o.addEventListener(
                                'error',
                                function(e) {
                                  n && n(e),
                                    r.manager.itemEnd(t),
                                    r.manager.itemError(t);
                                },
                                !1
                              ),
                              'data:' !== t.substr(0, 5) &&
                                void 0 !== this.crossOrigin &&
                                (o.crossOrigin = this.crossOrigin),
                              r.manager.itemStart(t),
                              (o.src = t),
                              o
                            );
                          },
                          setCrossOrigin: function(t) {
                            return (this.crossOrigin = t), this;
                          },
                          setPath: function(t) {
                            return (this.path = t), this;
                          }
                        }),
                        Object.assign(ts.prototype, {
                          crossOrigin: 'Anonymous',
                          load: function(t, e, i, n) {
                            var r = new Be(),
                              a = new $o(this.manager);
                            a.setCrossOrigin(this.crossOrigin),
                              a.setPath(this.path);
                            var o = 0;
                            function s(i) {
                              a.load(
                                t[i],
                                function(t) {
                                  (r.images[i] = t),
                                    6 === ++o &&
                                      ((r.needsUpdate = !0), e && e(r));
                                },
                                void 0,
                                n
                              );
                            }
                            for (var c = 0; c < t.length; ++c) s(c);
                            return r;
                          },
                          setCrossOrigin: function(t) {
                            return (this.crossOrigin = t), this;
                          },
                          setPath: function(t) {
                            return (this.path = t), this;
                          }
                        }),
                        Object.assign(es.prototype, {
                          crossOrigin: 'Anonymous',
                          load: function(t, e, i, n) {
                            var r = new $o(this.manager);
                            r.setCrossOrigin(this.crossOrigin),
                              r.setPath(this.path);
                            var a = new _e();
                            return (
                              (a.image = r.load(
                                t,
                                function() {
                                  var i =
                                    t.search(/\.(jpg|jpeg)$/) > 0 ||
                                    0 === t.search(/^data\:image\/jpeg/);
                                  (a.format = i ? Ot : zt),
                                    (a.needsUpdate = !0),
                                    void 0 !== e && e(a);
                                },
                                i,
                                n
                              )),
                              a
                            );
                          },
                          setCrossOrigin: function(t) {
                            return (this.crossOrigin = t), this;
                          },
                          setPath: function(t) {
                            return (this.path = t), this;
                          }
                        }),
                        (is.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: is,
                            isLight: !0,
                            copy: function(t) {
                              return (
                                Rn.prototype.copy.call(this, t),
                                this.color.copy(t.color),
                                (this.intensity = t.intensity),
                                this
                              );
                            },
                            toJSON: function(t) {
                              var e = Rn.prototype.toJSON.call(this, t);
                              return (
                                (e.object.color = this.color.getHex()),
                                (e.object.intensity = this.intensity),
                                void 0 !== this.groundColor &&
                                  (e.object.groundColor = this.groundColor.getHex()),
                                void 0 !== this.distance &&
                                  (e.object.distance = this.distance),
                                void 0 !== this.angle &&
                                  (e.object.angle = this.angle),
                                void 0 !== this.decay &&
                                  (e.object.decay = this.decay),
                                void 0 !== this.penumbra &&
                                  (e.object.penumbra = this.penumbra),
                                void 0 !== this.shadow &&
                                  (e.object.shadow = this.shadow.toJSON()),
                                e
                              );
                            }
                          }
                        )),
                        (ns.prototype = Object.assign(
                          Object.create(is.prototype),
                          {
                            constructor: ns,
                            isHemisphereLight: !0,
                            copy: function(t) {
                              return (
                                is.prototype.copy.call(this, t),
                                this.groundColor.copy(t.groundColor),
                                this
                              );
                            }
                          }
                        )),
                        Object.assign(rs.prototype, {
                          copy: function(t) {
                            return (
                              (this.camera = t.camera.clone()),
                              (this.bias = t.bias),
                              (this.radius = t.radius),
                              this.mapSize.copy(t.mapSize),
                              this
                            );
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          toJSON: function() {
                            var t = {};
                            return (
                              0 !== this.bias && (t.bias = this.bias),
                              1 !== this.radius && (t.radius = this.radius),
                              (512 === this.mapSize.x &&
                                512 === this.mapSize.y) ||
                                (t.mapSize = this.mapSize.toArray()),
                              (t.camera = this.camera.toJSON(!1).object),
                              delete t.camera.matrix,
                              t
                            );
                          }
                        }),
                        (as.prototype = Object.assign(
                          Object.create(rs.prototype),
                          {
                            constructor: as,
                            isSpotLightShadow: !0,
                            update: function(t) {
                              var e = this.camera,
                                i = 2 * le.RAD2DEG * t.angle,
                                n = this.mapSize.width / this.mapSize.height,
                                r = t.distance || e.far;
                              (i === e.fov && n === e.aspect && r === e.far) ||
                                ((e.fov = i),
                                (e.aspect = n),
                                (e.far = r),
                                e.updateProjectionMatrix());
                            }
                          }
                        )),
                        (os.prototype = Object.assign(
                          Object.create(is.prototype),
                          {
                            constructor: os,
                            isSpotLight: !0,
                            copy: function(t) {
                              return (
                                is.prototype.copy.call(this, t),
                                (this.distance = t.distance),
                                (this.angle = t.angle),
                                (this.penumbra = t.penumbra),
                                (this.decay = t.decay),
                                (this.target = t.target.clone()),
                                (this.shadow = t.shadow.clone()),
                                this
                              );
                            }
                          }
                        )),
                        (ss.prototype = Object.assign(
                          Object.create(is.prototype),
                          {
                            constructor: ss,
                            isPointLight: !0,
                            copy: function(t) {
                              return (
                                is.prototype.copy.call(this, t),
                                (this.distance = t.distance),
                                (this.decay = t.decay),
                                (this.shadow = t.shadow.clone()),
                                this
                              );
                            }
                          }
                        )),
                        (cs.prototype = Object.assign(
                          Object.create(rs.prototype),
                          { constructor: cs }
                        )),
                        (us.prototype = Object.assign(
                          Object.create(is.prototype),
                          {
                            constructor: us,
                            isDirectionalLight: !0,
                            copy: function(t) {
                              return (
                                is.prototype.copy.call(this, t),
                                (this.target = t.target.clone()),
                                (this.shadow = t.shadow.clone()),
                                this
                              );
                            }
                          }
                        )),
                        (ls.prototype = Object.assign(
                          Object.create(is.prototype),
                          { constructor: ls, isAmbientLight: !0 }
                        )),
                        (hs.prototype = Object.assign(
                          Object.create(is.prototype),
                          {
                            constructor: hs,
                            isRectAreaLight: !0,
                            copy: function(t) {
                              return (
                                is.prototype.copy.call(this, t),
                                (this.width = t.width),
                                (this.height = t.height),
                                this
                              );
                            },
                            toJSON: function(t) {
                              var e = is.prototype.toJSON.call(this, t);
                              return (
                                (e.object.width = this.width),
                                (e.object.height = this.height),
                                e
                              );
                            }
                          }
                        ));
                      var ds,
                        ps = {
                          arraySlice: function(t, e, i) {
                            return ps.isTypedArray(t)
                              ? new t.constructor(
                                  t.subarray(e, void 0 !== i ? i : t.length)
                                )
                              : t.slice(e, i);
                          },
                          convertArray: function(t, e, i) {
                            return !t || (!i && t.constructor === e)
                              ? t
                              : 'number' == typeof e.BYTES_PER_ELEMENT
                                ? new e(t)
                                : Array.prototype.slice.call(t);
                          },
                          isTypedArray: function(t) {
                            return (
                              ArrayBuffer.isView(t) && !(t instanceof DataView)
                            );
                          },
                          getKeyframeOrder: function(t) {
                            for (
                              var e = t.length, i = new Array(e), n = 0;
                              n !== e;
                              ++n
                            )
                              i[n] = n;
                            return (
                              i.sort(function(e, i) {
                                return t[e] - t[i];
                              }),
                              i
                            );
                          },
                          sortedArray: function(t, e, i) {
                            for (
                              var n = t.length,
                                r = new t.constructor(n),
                                a = 0,
                                o = 0;
                              o !== n;
                              ++a
                            )
                              for (var s = i[a] * e, c = 0; c !== e; ++c)
                                r[o++] = t[s + c];
                            return r;
                          },
                          flattenJSON: function(t, e, i, n) {
                            for (
                              var r = 1, a = t[0];
                              void 0 !== a && void 0 === a[n];

                            )
                              a = t[r++];
                            if (void 0 !== a) {
                              var o = a[n];
                              if (void 0 !== o)
                                if (Array.isArray(o))
                                  do {
                                    void 0 !== (o = a[n]) &&
                                      (e.push(a.time), i.push.apply(i, o)),
                                      (a = t[r++]);
                                  } while (void 0 !== a);
                                else if (void 0 !== o.toArray)
                                  do {
                                    void 0 !== (o = a[n]) &&
                                      (e.push(a.time), o.toArray(i, i.length)),
                                      (a = t[r++]);
                                  } while (void 0 !== a);
                                else
                                  do {
                                    void 0 !== (o = a[n]) &&
                                      (e.push(a.time), i.push(o)),
                                      (a = t[r++]);
                                  } while (void 0 !== a);
                            }
                          }
                        };
                      function fs(t, e, i, n) {
                        (this.parameterPositions = t),
                          (this._cachedIndex = 0),
                          (this.resultBuffer =
                            void 0 !== n ? n : new e.constructor(i)),
                          (this.sampleValues = e),
                          (this.valueSize = i);
                      }
                      function ms(t, e, i, n) {
                        fs.call(this, t, e, i, n),
                          (this._weightPrev = -0),
                          (this._offsetPrev = -0),
                          (this._weightNext = -0),
                          (this._offsetNext = -0);
                      }
                      function gs(t, e, i, n) {
                        fs.call(this, t, e, i, n);
                      }
                      function vs(t, e, i, n) {
                        fs.call(this, t, e, i, n);
                      }
                      function ys(t, e, i, n) {
                        if (void 0 === t)
                          throw new Error('track name is undefined');
                        if (void 0 === e || 0 === e.length)
                          throw new Error('no keyframes in track named ' + t);
                        (this.name = t),
                          (this.times = ps.convertArray(
                            e,
                            this.TimeBufferType
                          )),
                          (this.values = ps.convertArray(
                            i,
                            this.ValueBufferType
                          )),
                          this.setInterpolation(n || this.DefaultInterpolation),
                          this.validate(),
                          this.optimize();
                      }
                      function Ms(t, e, i, n) {
                        ys.call(this, t, e, i, n);
                      }
                      function ws(t, e, i, n) {
                        fs.call(this, t, e, i, n);
                      }
                      function xs(t, e, i, n) {
                        ys.call(this, t, e, i, n);
                      }
                      function As(t, e, i, n) {
                        ys.call(this, t, e, i, n);
                      }
                      function Es(t, e, i, n) {
                        ys.call(this, t, e, i, n);
                      }
                      function bs(t, e, i) {
                        ys.call(this, t, e, i);
                      }
                      function Ts(t, e, i, n) {
                        ys.call(this, t, e, i, n);
                      }
                      function Ls(t, e, i, n) {
                        ys.apply(this, arguments);
                      }
                      function Ns(t, e, i) {
                        (this.name = t),
                          (this.tracks = i),
                          (this.duration = void 0 !== e ? e : -1),
                          (this.uuid = le.generateUUID()),
                          this.duration < 0 && this.resetDuration(),
                          this.optimize();
                      }
                      function Ds(t) {
                        (this.manager = void 0 !== t ? t : qo),
                          (this.textures = {});
                      }
                      function Cs(t) {
                        this.manager = void 0 !== t ? t : qo;
                      }
                      Object.assign(fs.prototype, {
                        evaluate: function(t) {
                          var e = this.parameterPositions,
                            i = this._cachedIndex,
                            n = e[i],
                            r = e[i - 1];
                          t: {
                            e: {
                              var a;
                              i: {
                                n: if (!(t < n)) {
                                  for (var o = i + 2; ; ) {
                                    if (void 0 === n) {
                                      if (t < r) break n;
                                      return (
                                        (i = e.length),
                                        (this._cachedIndex = i),
                                        this.afterEnd_(i - 1, t, r)
                                      );
                                    }
                                    if (i === o) break;
                                    if (((r = n), t < (n = e[++i]))) break e;
                                  }
                                  a = e.length;
                                  break i;
                                }
                                if (t >= r) break t;
                                var s = e[1];
                                t < s && ((i = 2), (r = s));
                                for (o = i - 2; ; ) {
                                  if (void 0 === r)
                                    return (
                                      (this._cachedIndex = 0),
                                      this.beforeStart_(0, t, n)
                                    );
                                  if (i === o) break;
                                  if (((n = r), t >= (r = e[--i - 1]))) break e;
                                }
                                (a = i), (i = 0);
                              }
                              for (; i < a; ) {
                                var c = (i + a) >>> 1;
                                t < e[c] ? (a = c) : (i = c + 1);
                              }
                              if (((n = e[i]), void 0 === (r = e[i - 1])))
                                return (
                                  (this._cachedIndex = 0),
                                  this.beforeStart_(0, t, n)
                                );
                              if (void 0 === n)
                                return (
                                  (i = e.length),
                                  (this._cachedIndex = i),
                                  this.afterEnd_(i - 1, r, t)
                                );
                            }
                            (this._cachedIndex = i),
                              this.intervalChanged_(i, r, n);
                          }
                          return this.interpolate_(i, r, t, n);
                        },
                        settings: null,
                        DefaultSettings_: {},
                        getSettings_: function() {
                          return this.settings || this.DefaultSettings_;
                        },
                        copySampleValue_: function(t) {
                          for (
                            var e = this.resultBuffer,
                              i = this.sampleValues,
                              n = this.valueSize,
                              r = t * n,
                              a = 0;
                            a !== n;
                            ++a
                          )
                            e[a] = i[r + a];
                          return e;
                        },
                        interpolate_: function(t, e, i, n) {
                          throw new Error('call to abstract method');
                        },
                        intervalChanged_: function(t, e, i) {}
                      }),
                        Object.assign(fs.prototype, {
                          beforeStart_: fs.prototype.copySampleValue_,
                          afterEnd_: fs.prototype.copySampleValue_
                        }),
                        (ms.prototype = Object.assign(
                          Object.create(fs.prototype),
                          {
                            constructor: ms,
                            DefaultSettings_: {
                              endingStart: Kt,
                              endingEnd: Kt
                            },
                            intervalChanged_: function(t, e, i) {
                              var n = this.parameterPositions,
                                r = t - 2,
                                a = t + 1,
                                o = n[r],
                                s = n[a];
                              if (void 0 === o)
                                switch (this.getSettings_().endingStart) {
                                  case 2401:
                                    (r = t), (o = 2 * e - i);
                                    break;
                                  case 2402:
                                    o = e + n[(r = n.length - 2)] - n[r + 1];
                                    break;
                                  default:
                                    (r = t), (o = i);
                                }
                              if (void 0 === s)
                                switch (this.getSettings_().endingEnd) {
                                  case 2401:
                                    (a = t), (s = 2 * i - e);
                                    break;
                                  case 2402:
                                    (a = 1), (s = i + n[1] - n[0]);
                                    break;
                                  default:
                                    (a = t - 1), (s = e);
                                }
                              var c = 0.5 * (i - e),
                                u = this.valueSize;
                              (this._weightPrev = c / (e - o)),
                                (this._weightNext = c / (s - i)),
                                (this._offsetPrev = r * u),
                                (this._offsetNext = a * u);
                            },
                            interpolate_: function(t, e, i, n) {
                              for (
                                var r = this.resultBuffer,
                                  a = this.sampleValues,
                                  o = this.valueSize,
                                  s = t * o,
                                  c = s - o,
                                  u = this._offsetPrev,
                                  l = this._offsetNext,
                                  h = this._weightPrev,
                                  d = this._weightNext,
                                  p = (i - e) / (n - e),
                                  f = p * p,
                                  m = f * p,
                                  g = -h * m + 2 * h * f - h * p,
                                  v =
                                    (1 + h) * m +
                                    (-1.5 - 2 * h) * f +
                                    (-0.5 + h) * p +
                                    1,
                                  y = (-1 - d) * m + (1.5 + d) * f + 0.5 * p,
                                  M = d * m - d * f,
                                  w = 0;
                                w !== o;
                                ++w
                              )
                                r[w] =
                                  g * a[u + w] +
                                  v * a[c + w] +
                                  y * a[s + w] +
                                  M * a[l + w];
                              return r;
                            }
                          }
                        )),
                        (gs.prototype = Object.assign(
                          Object.create(fs.prototype),
                          {
                            constructor: gs,
                            interpolate_: function(t, e, i, n) {
                              for (
                                var r = this.resultBuffer,
                                  a = this.sampleValues,
                                  o = this.valueSize,
                                  s = t * o,
                                  c = s - o,
                                  u = (i - e) / (n - e),
                                  l = 1 - u,
                                  h = 0;
                                h !== o;
                                ++h
                              )
                                r[h] = a[c + h] * l + a[s + h] * u;
                              return r;
                            }
                          }
                        )),
                        (vs.prototype = Object.assign(
                          Object.create(fs.prototype),
                          {
                            constructor: vs,
                            interpolate_: function(t, e, i, n) {
                              return this.copySampleValue_(t - 1);
                            }
                          }
                        )),
                        (ds = {
                          TimeBufferType: Float32Array,
                          ValueBufferType: Float32Array,
                          DefaultInterpolation: 2301,
                          InterpolantFactoryMethodDiscrete: function(t) {
                            return new vs(
                              this.times,
                              this.values,
                              this.getValueSize(),
                              t
                            );
                          },
                          InterpolantFactoryMethodLinear: function(t) {
                            return new gs(
                              this.times,
                              this.values,
                              this.getValueSize(),
                              t
                            );
                          },
                          InterpolantFactoryMethodSmooth: function(t) {
                            return new ms(
                              this.times,
                              this.values,
                              this.getValueSize(),
                              t
                            );
                          },
                          setInterpolation: function(t) {
                            var e;
                            switch (t) {
                              case 2300:
                                e = this.InterpolantFactoryMethodDiscrete;
                                break;
                              case 2301:
                                e = this.InterpolantFactoryMethodLinear;
                                break;
                              case 2302:
                                e = this.InterpolantFactoryMethodSmooth;
                            }
                            if (void 0 !== e) this.createInterpolant = e;
                            else {
                              var i =
                                'unsupported interpolation for ' +
                                this.ValueTypeName +
                                ' keyframe track named ' +
                                this.name;
                              if (void 0 === this.createInterpolant) {
                                if (t === this.DefaultInterpolation)
                                  throw new Error(i);
                                this.setInterpolation(
                                  this.DefaultInterpolation
                                );
                              }
                            }
                          },
                          getInterpolation: function() {
                            switch (this.createInterpolant) {
                              case this.InterpolantFactoryMethodDiscrete:
                                return 2300;
                              case this.InterpolantFactoryMethodLinear:
                                return 2301;
                              case this.InterpolantFactoryMethodSmooth:
                                return 2302;
                            }
                          },
                          getValueSize: function() {
                            return this.values.length / this.times.length;
                          },
                          shift: function(t) {
                            if (0 !== t)
                              for (
                                var e = this.times, i = 0, n = e.length;
                                i !== n;
                                ++i
                              )
                                e[i] += t;
                            return this;
                          },
                          scale: function(t) {
                            if (1 !== t)
                              for (
                                var e = this.times, i = 0, n = e.length;
                                i !== n;
                                ++i
                              )
                                e[i] *= t;
                            return this;
                          },
                          trim: function(t, e) {
                            for (
                              var i = this.times,
                                n = i.length,
                                r = 0,
                                a = n - 1;
                              r !== n && i[r] < t;

                            )
                              ++r;
                            for (; -1 !== a && i[a] > e; ) --a;
                            if ((++a, 0 !== r || a !== n)) {
                              r >= a && (r = (a = Math.max(a, 1)) - 1);
                              var o = this.getValueSize();
                              (this.times = ps.arraySlice(i, r, a)),
                                (this.values = ps.arraySlice(
                                  this.values,
                                  r * o,
                                  a * o
                                ));
                            }
                            return this;
                          },
                          validate: function() {
                            var t = !0,
                              e = this.getValueSize();
                            e - Math.floor(e) != 0 && (t = !1);
                            var i = this.times,
                              n = this.values,
                              r = i.length;
                            0 === r && (t = !1);
                            for (var a = null, o = 0; o !== r; o++) {
                              var s = i[o];
                              if ('number' == typeof s && isNaN(s)) {
                                t = !1;
                                break;
                              }
                              if (null !== a && a > s) {
                                t = !1;
                                break;
                              }
                              a = s;
                            }
                            if (void 0 !== n && ps.isTypedArray(n)) {
                              o = 0;
                              for (var c = n.length; o !== c; ++o) {
                                var u = n[o];
                                if (isNaN(u)) {
                                  t = !1;
                                  break;
                                }
                              }
                            }
                            return t;
                          },
                          optimize: function() {
                            for (
                              var t = this.times,
                                e = this.values,
                                i = this.getValueSize(),
                                n = 2302 === this.getInterpolation(),
                                r = 1,
                                a = t.length - 1,
                                o = 1;
                              o < a;
                              ++o
                            ) {
                              var s = !1,
                                c = t[o];
                              if (c !== t[o + 1] && (1 !== o || c !== c[0]))
                                if (n) s = !0;
                                else
                                  for (
                                    var u = o * i, l = u - i, h = u + i, d = 0;
                                    d !== i;
                                    ++d
                                  ) {
                                    var p = e[u + d];
                                    if (p !== e[l + d] || p !== e[h + d]) {
                                      s = !0;
                                      break;
                                    }
                                  }
                              if (s) {
                                if (o !== r) {
                                  t[r] = t[o];
                                  var f = o * i,
                                    m = r * i;
                                  for (d = 0; d !== i; ++d) e[m + d] = e[f + d];
                                }
                                ++r;
                              }
                            }
                            if (a > 0) {
                              t[r] = t[a];
                              for (f = a * i, m = r * i, d = 0; d !== i; ++d)
                                e[m + d] = e[f + d];
                              ++r;
                            }
                            return (
                              r !== t.length &&
                                ((this.times = ps.arraySlice(t, 0, r)),
                                (this.values = ps.arraySlice(e, 0, r * i))),
                              this
                            );
                          }
                        }),
                        (Ms.prototype = Object.assign(Object.create(ds), {
                          constructor: Ms,
                          ValueTypeName: 'vector'
                        })),
                        (ws.prototype = Object.assign(
                          Object.create(fs.prototype),
                          {
                            constructor: ws,
                            interpolate_: function(t, e, i, n) {
                              for (
                                var r = this.resultBuffer,
                                  a = this.sampleValues,
                                  o = this.valueSize,
                                  s = t * o,
                                  c = (i - e) / (n - e),
                                  u = s + o;
                                s !== u;
                                s += 4
                              )
                                Re.slerpFlat(r, 0, a, s - o, a, s, c);
                              return r;
                            }
                          }
                        )),
                        (xs.prototype = Object.assign(Object.create(ds), {
                          constructor: xs,
                          ValueTypeName: 'quaternion',
                          DefaultInterpolation: 2301,
                          InterpolantFactoryMethodLinear: function(t) {
                            return new ws(
                              this.times,
                              this.values,
                              this.getValueSize(),
                              t
                            );
                          },
                          InterpolantFactoryMethodSmooth: void 0
                        })),
                        (As.prototype = Object.assign(Object.create(ds), {
                          constructor: As,
                          ValueTypeName: 'number'
                        })),
                        (Es.prototype = Object.assign(Object.create(ds), {
                          constructor: Es,
                          ValueTypeName: 'string',
                          ValueBufferType: Array,
                          DefaultInterpolation: 2300,
                          InterpolantFactoryMethodLinear: void 0,
                          InterpolantFactoryMethodSmooth: void 0
                        })),
                        (bs.prototype = Object.assign(Object.create(ds), {
                          constructor: bs,
                          ValueTypeName: 'bool',
                          ValueBufferType: Array,
                          DefaultInterpolation: 2300,
                          InterpolantFactoryMethodLinear: void 0,
                          InterpolantFactoryMethodSmooth: void 0
                        })),
                        (Ts.prototype = Object.assign(Object.create(ds), {
                          constructor: Ts,
                          ValueTypeName: 'color'
                        })),
                        (Ls.prototype = ds),
                        (ds.constructor = Ls),
                        Object.assign(Ls, {
                          parse: function(t) {
                            if (void 0 === t.type)
                              throw new Error(
                                'track type undefined, can not parse'
                              );
                            var e = Ls._getTrackTypeForValueTypeName(t.type);
                            if (void 0 === t.times) {
                              var i = [],
                                n = [];
                              ps.flattenJSON(t.keys, i, n, 'value'),
                                (t.times = i),
                                (t.values = n);
                            }
                            return void 0 !== e.parse
                              ? e.parse(t)
                              : new e(
                                  t.name,
                                  t.times,
                                  t.values,
                                  t.interpolation
                                );
                          },
                          toJSON: function(t) {
                            var e,
                              i = t.constructor;
                            if (void 0 !== i.toJSON) e = i.toJSON(t);
                            else {
                              e = {
                                name: t.name,
                                times: ps.convertArray(t.times, Array),
                                values: ps.convertArray(t.values, Array)
                              };
                              var n = t.getInterpolation();
                              n !== t.DefaultInterpolation &&
                                (e.interpolation = n);
                            }
                            return (e.type = t.ValueTypeName), e;
                          },
                          _getTrackTypeForValueTypeName: function(t) {
                            switch (t.toLowerCase()) {
                              case 'scalar':
                              case 'double':
                              case 'float':
                              case 'number':
                              case 'integer':
                                return As;
                              case 'vector':
                              case 'vector2':
                              case 'vector3':
                              case 'vector4':
                                return Ms;
                              case 'color':
                                return Ts;
                              case 'quaternion':
                                return xs;
                              case 'bool':
                              case 'boolean':
                                return bs;
                              case 'string':
                                return Es;
                            }
                            throw new Error('Unsupported typeName: ' + t);
                          }
                        }),
                        Object.assign(Ns, {
                          parse: function(t) {
                            for (
                              var e = [],
                                i = t.tracks,
                                n = 1 / (t.fps || 1),
                                r = 0,
                                a = i.length;
                              r !== a;
                              ++r
                            )
                              e.push(Ls.parse(i[r]).scale(n));
                            return new Ns(t.name, t.duration, e);
                          },
                          toJSON: function(t) {
                            for (
                              var e = [],
                                i = t.tracks,
                                n = {
                                  name: t.name,
                                  duration: t.duration,
                                  tracks: e
                                },
                                r = 0,
                                a = i.length;
                              r !== a;
                              ++r
                            )
                              e.push(Ls.toJSON(i[r]));
                            return n;
                          },
                          CreateFromMorphTargetSequence: function(t, e, i, n) {
                            for (var r = e.length, a = [], o = 0; o < r; o++) {
                              var s = [],
                                c = [];
                              s.push((o + r - 1) % r, o, (o + 1) % r),
                                c.push(0, 1, 0);
                              var u = ps.getKeyframeOrder(s);
                              (s = ps.sortedArray(s, 1, u)),
                                (c = ps.sortedArray(c, 1, u)),
                                n || 0 !== s[0] || (s.push(r), c.push(c[0])),
                                a.push(
                                  new As(
                                    '.morphTargetInfluences[' + e[o].name + ']',
                                    s,
                                    c
                                  ).scale(1 / i)
                                );
                            }
                            return new Ns(t, -1, a);
                          },
                          findByName: function(t, e) {
                            var i = t;
                            if (!Array.isArray(t)) {
                              var n = t;
                              i =
                                (n.geometry && n.geometry.animations) ||
                                n.animations;
                            }
                            for (var r = 0; r < i.length; r++)
                              if (i[r].name === e) return i[r];
                            return null;
                          },
                          CreateClipsFromMorphTargetSequences: function(
                            t,
                            e,
                            i
                          ) {
                            for (
                              var n = {},
                                r = /^([\w-]*?)([\d]+)$/,
                                a = 0,
                                o = t.length;
                              a < o;
                              a++
                            ) {
                              var s = t[a],
                                c = s.name.match(r);
                              if (c && c.length > 1) {
                                var u = n[(h = c[1])];
                                u || (n[h] = u = []), u.push(s);
                              }
                            }
                            var l = [];
                            for (var h in n)
                              l.push(
                                Ns.CreateFromMorphTargetSequence(h, n[h], e, i)
                              );
                            return l;
                          },
                          parseAnimation: function(t, e) {
                            if (!t) return null;
                            for (
                              var i = function(t, e, i, n, r) {
                                  if (0 !== i.length) {
                                    var a = [],
                                      o = [];
                                    ps.flattenJSON(i, a, o, n),
                                      0 !== a.length && r.push(new t(e, a, o));
                                  }
                                },
                                n = [],
                                r = t.name || 'default',
                                a = t.length || -1,
                                o = t.fps || 30,
                                s = t.hierarchy || [],
                                c = 0;
                              c < s.length;
                              c++
                            ) {
                              var u = s[c].keys;
                              if (u && 0 !== u.length)
                                if (u[0].morphTargets) {
                                  for (var l = {}, h = 0; h < u.length; h++)
                                    if (u[h].morphTargets)
                                      for (
                                        var d = 0;
                                        d < u[h].morphTargets.length;
                                        d++
                                      )
                                        l[u[h].morphTargets[d]] = -1;
                                  for (var p in l) {
                                    var f = [],
                                      m = [];
                                    for (
                                      d = 0;
                                      d !== u[h].morphTargets.length;
                                      ++d
                                    ) {
                                      var g = u[h];
                                      f.push(g.time),
                                        m.push(g.morphTarget === p ? 1 : 0);
                                    }
                                    n.push(
                                      new As(
                                        '.morphTargetInfluence[' + p + ']',
                                        f,
                                        m
                                      )
                                    );
                                  }
                                  a = l.length * (o || 1);
                                } else {
                                  var v = '.bones[' + e[c].name + ']';
                                  i(Ms, v + '.position', u, 'pos', n),
                                    i(xs, v + '.quaternion', u, 'rot', n),
                                    i(Ms, v + '.scale', u, 'scl', n);
                                }
                            }
                            return 0 === n.length ? null : new Ns(r, a, n);
                          }
                        }),
                        Object.assign(Ns.prototype, {
                          resetDuration: function() {
                            for (
                              var t = 0, e = 0, i = this.tracks.length;
                              e !== i;
                              ++e
                            ) {
                              var n = this.tracks[e];
                              t = Math.max(t, n.times[n.times.length - 1]);
                            }
                            this.duration = t;
                          },
                          trim: function() {
                            for (var t = 0; t < this.tracks.length; t++)
                              this.tracks[t].trim(0, this.duration);
                            return this;
                          },
                          optimize: function() {
                            for (var t = 0; t < this.tracks.length; t++)
                              this.tracks[t].optimize();
                            return this;
                          }
                        }),
                        Object.assign(Ds.prototype, {
                          load: function(t, e, i, n) {
                            var r = this;
                            new Zo(r.manager).load(
                              t,
                              function(t) {
                                e(r.parse(JSON.parse(t)));
                              },
                              i,
                              n
                            );
                          },
                          setTextures: function(t) {
                            this.textures = t;
                          },
                          parse: function(t) {
                            var e = this.textures;
                            function i(t) {
                              return e[t], e[t];
                            }
                            var n = new Ho[t.type]();
                            if (
                              (void 0 !== t.uuid && (n.uuid = t.uuid),
                              void 0 !== t.name && (n.name = t.name),
                              void 0 !== t.color && n.color.setHex(t.color),
                              void 0 !== t.roughness &&
                                (n.roughness = t.roughness),
                              void 0 !== t.metalness &&
                                (n.metalness = t.metalness),
                              void 0 !== t.emissive &&
                                n.emissive.setHex(t.emissive),
                              void 0 !== t.specular &&
                                n.specular.setHex(t.specular),
                              void 0 !== t.shininess &&
                                (n.shininess = t.shininess),
                              void 0 !== t.clearCoat &&
                                (n.clearCoat = t.clearCoat),
                              void 0 !== t.clearCoatRoughness &&
                                (n.clearCoatRoughness = t.clearCoatRoughness),
                              void 0 !== t.uniforms &&
                                (n.uniforms = t.uniforms),
                              void 0 !== t.vertexShader &&
                                (n.vertexShader = t.vertexShader),
                              void 0 !== t.fragmentShader &&
                                (n.fragmentShader = t.fragmentShader),
                              void 0 !== t.vertexColors &&
                                (n.vertexColors = t.vertexColors),
                              void 0 !== t.fog && (n.fog = t.fog),
                              void 0 !== t.flatShading &&
                                (n.flatShading = t.flatShading),
                              void 0 !== t.blending &&
                                (n.blending = t.blending),
                              void 0 !== t.side && (n.side = t.side),
                              void 0 !== t.opacity && (n.opacity = t.opacity),
                              void 0 !== t.transparent &&
                                (n.transparent = t.transparent),
                              void 0 !== t.alphaTest &&
                                (n.alphaTest = t.alphaTest),
                              void 0 !== t.depthTest &&
                                (n.depthTest = t.depthTest),
                              void 0 !== t.depthWrite &&
                                (n.depthWrite = t.depthWrite),
                              void 0 !== t.colorWrite &&
                                (n.colorWrite = t.colorWrite),
                              void 0 !== t.wireframe &&
                                (n.wireframe = t.wireframe),
                              void 0 !== t.wireframeLinewidth &&
                                (n.wireframeLinewidth = t.wireframeLinewidth),
                              void 0 !== t.wireframeLinecap &&
                                (n.wireframeLinecap = t.wireframeLinecap),
                              void 0 !== t.wireframeLinejoin &&
                                (n.wireframeLinejoin = t.wireframeLinejoin),
                              void 0 !== t.skinning &&
                                (n.skinning = t.skinning),
                              void 0 !== t.morphTargets &&
                                (n.morphTargets = t.morphTargets),
                              void 0 !== t.dithering &&
                                (n.dithering = t.dithering),
                              void 0 !== t.visible && (n.visible = t.visible),
                              void 0 !== t.userData &&
                                (n.userData = t.userData),
                              void 0 !== t.shading &&
                                (n.flatShading = 1 === t.shading),
                              void 0 !== t.size && (n.size = t.size),
                              void 0 !== t.sizeAttenuation &&
                                (n.sizeAttenuation = t.sizeAttenuation),
                              void 0 !== t.map && (n.map = i(t.map)),
                              void 0 !== t.alphaMap &&
                                ((n.alphaMap = i(t.alphaMap)),
                                (n.transparent = !0)),
                              void 0 !== t.bumpMap &&
                                (n.bumpMap = i(t.bumpMap)),
                              void 0 !== t.bumpScale &&
                                (n.bumpScale = t.bumpScale),
                              void 0 !== t.normalMap &&
                                (n.normalMap = i(t.normalMap)),
                              void 0 !== t.normalScale)
                            ) {
                              var r = t.normalScale;
                              !1 === Array.isArray(r) && (r = [r, r]),
                                (n.normalScale = new he().fromArray(r));
                            }
                            return (
                              void 0 !== t.displacementMap &&
                                (n.displacementMap = i(t.displacementMap)),
                              void 0 !== t.displacementScale &&
                                (n.displacementScale = t.displacementScale),
                              void 0 !== t.displacementBias &&
                                (n.displacementBias = t.displacementBias),
                              void 0 !== t.roughnessMap &&
                                (n.roughnessMap = i(t.roughnessMap)),
                              void 0 !== t.metalnessMap &&
                                (n.metalnessMap = i(t.metalnessMap)),
                              void 0 !== t.emissiveMap &&
                                (n.emissiveMap = i(t.emissiveMap)),
                              void 0 !== t.emissiveIntensity &&
                                (n.emissiveIntensity = t.emissiveIntensity),
                              void 0 !== t.specularMap &&
                                (n.specularMap = i(t.specularMap)),
                              void 0 !== t.envMap && (n.envMap = i(t.envMap)),
                              void 0 !== t.reflectivity &&
                                (n.reflectivity = t.reflectivity),
                              void 0 !== t.lightMap &&
                                (n.lightMap = i(t.lightMap)),
                              void 0 !== t.lightMapIntensity &&
                                (n.lightMapIntensity = t.lightMapIntensity),
                              void 0 !== t.aoMap && (n.aoMap = i(t.aoMap)),
                              void 0 !== t.aoMapIntensity &&
                                (n.aoMapIntensity = t.aoMapIntensity),
                              void 0 !== t.gradientMap &&
                                (n.gradientMap = i(t.gradientMap)),
                              n
                            );
                          }
                        }),
                        Object.assign(Cs.prototype, {
                          load: function(t, e, i, n) {
                            var r = this;
                            new Zo(r.manager).load(
                              t,
                              function(t) {
                                e(r.parse(JSON.parse(t)));
                              },
                              i,
                              n
                            );
                          },
                          parse: function(t) {
                            var e = new Fr(),
                              i = t.data.index;
                            if (void 0 !== i) {
                              var n = new zs[i.type](i.array);
                              e.setIndex(new Cr(n, 1));
                            }
                            var r = t.data.attributes;
                            for (var a in r) {
                              var o = r[a];
                              n = new zs[o.type](o.array);
                              e.addAttribute(
                                a,
                                new Cr(n, o.itemSize, o.normalized)
                              );
                            }
                            var s =
                              t.data.groups ||
                              t.data.drawcalls ||
                              t.data.offsets;
                            if (void 0 !== s)
                              for (var c = 0, u = s.length; c !== u; ++c) {
                                var l = s[c];
                                e.addGroup(l.start, l.count, l.materialIndex);
                              }
                            var h = t.data.boundingSphere;
                            if (void 0 !== h) {
                              var d = new ke();
                              void 0 !== h.center && d.fromArray(h.center),
                                (e.boundingSphere = new ln(d, h.radius));
                            }
                            return e;
                          }
                        });
                      var Ss,
                        Is,
                        _s,
                        js,
                        Os,
                        zs = {
                          Int8Array: Int8Array,
                          Uint8Array: Uint8Array,
                          Uint8ClampedArray:
                            'undefined' != typeof Uint8ClampedArray
                              ? Uint8ClampedArray
                              : Uint8Array,
                          Int16Array: Int16Array,
                          Uint16Array: Uint16Array,
                          Int32Array: Int32Array,
                          Uint32Array: Uint32Array,
                          Float32Array: Float32Array,
                          Float64Array: Float64Array
                        };
                      function Rs() {
                        (this.onLoadStart = function() {}),
                          (this.onLoadProgress = function() {}),
                          (this.onLoadComplete = function() {});
                      }
                      function ks(t) {
                        'boolean' == typeof t && (t = void 0),
                          (this.manager = void 0 !== t ? t : qo),
                          (this.withCredentials = !1);
                      }
                      function Us(t) {
                        (this.manager = void 0 !== t ? t : qo),
                          (this.texturePath = '');
                      }
                      (Rs.Handlers = {
                        handlers: [],
                        add: function(t, e) {
                          this.handlers.push(t, e);
                        },
                        get: function(t) {
                          for (
                            var e = this.handlers, i = 0, n = e.length;
                            i < n;
                            i += 2
                          ) {
                            var r = e[i],
                              a = e[i + 1];
                            if (r.test(t)) return a;
                          }
                          return null;
                        }
                      }),
                        Object.assign(Rs.prototype, {
                          crossOrigin: void 0,
                          extractUrlBase: function(t) {
                            var e = t.split('/');
                            return 1 === e.length
                              ? './'
                              : (e.pop(), e.join('/') + '/');
                          },
                          initMaterials: function(t, e, i) {
                            for (var n = [], r = 0; r < t.length; ++r)
                              n[r] = this.createMaterial(t[r], e, i);
                            return n;
                          },
                          createMaterial: ((Ss = {
                            NoBlending: x,
                            NormalBlending: A,
                            AdditiveBlending: E,
                            SubtractiveBlending: b,
                            MultiplyBlending: T,
                            CustomBlending: L
                          }),
                          (Is = new Ni()),
                          (_s = new es()),
                          (js = new Ds()),
                          function(t, e, i) {
                            var n = {};
                            function r(t, r, a, o, s) {
                              var c,
                                u = e + t,
                                l = Rs.Handlers.get(u);
                              null !== l
                                ? (c = l.load(u))
                                : (_s.setCrossOrigin(i), (c = _s.load(u))),
                                void 0 !== r &&
                                  (c.repeat.fromArray(r),
                                  1 !== r[0] && (c.wrapS = dt),
                                  1 !== r[1] && (c.wrapT = dt)),
                                void 0 !== a && c.offset.fromArray(a),
                                void 0 !== o &&
                                  ('repeat' === o[0] && (c.wrapS = dt),
                                  'mirror' === o[0] && (c.wrapS = ft),
                                  'repeat' === o[1] && (c.wrapT = dt),
                                  'mirror' === o[1] && (c.wrapT = ft)),
                                void 0 !== s && (c.anisotropy = s);
                              var h = le.generateUUID();
                              return (n[h] = c), h;
                            }
                            var a = {
                              uuid: le.generateUUID(),
                              type: 'MeshLambertMaterial'
                            };
                            for (var o in t) {
                              var s = t[o];
                              switch (o) {
                                case 'DbgColor':
                                case 'DbgIndex':
                                case 'opticalDensity':
                                case 'illumination':
                                  break;
                                case 'DbgName':
                                  a.name = s;
                                  break;
                                case 'blending':
                                  a.blending = Ss[s];
                                  break;
                                case 'colorAmbient':
                                case 'mapAmbient':
                                  break;
                                case 'colorDiffuse':
                                  a.color = Is.fromArray(s).getHex();
                                  break;
                                case 'colorSpecular':
                                  a.specular = Is.fromArray(s).getHex();
                                  break;
                                case 'colorEmissive':
                                  a.emissive = Is.fromArray(s).getHex();
                                  break;
                                case 'specularCoef':
                                  a.shininess = s;
                                  break;
                                case 'shading':
                                  'basic' === s.toLowerCase() &&
                                    (a.type = 'MeshBasicMaterial'),
                                    'phong' === s.toLowerCase() &&
                                      (a.type = 'MeshPhongMaterial'),
                                    'standard' === s.toLowerCase() &&
                                      (a.type = 'MeshStandardMaterial');
                                  break;
                                case 'mapDiffuse':
                                  a.map = r(
                                    s,
                                    t.mapDiffuseRepeat,
                                    t.mapDiffuseOffset,
                                    t.mapDiffuseWrap,
                                    t.mapDiffuseAnisotropy
                                  );
                                  break;
                                case 'mapDiffuseRepeat':
                                case 'mapDiffuseOffset':
                                case 'mapDiffuseWrap':
                                case 'mapDiffuseAnisotropy':
                                  break;
                                case 'mapEmissive':
                                  a.emissiveMap = r(
                                    s,
                                    t.mapEmissiveRepeat,
                                    t.mapEmissiveOffset,
                                    t.mapEmissiveWrap,
                                    t.mapEmissiveAnisotropy
                                  );
                                  break;
                                case 'mapEmissiveRepeat':
                                case 'mapEmissiveOffset':
                                case 'mapEmissiveWrap':
                                case 'mapEmissiveAnisotropy':
                                  break;
                                case 'mapLight':
                                  a.lightMap = r(
                                    s,
                                    t.mapLightRepeat,
                                    t.mapLightOffset,
                                    t.mapLightWrap,
                                    t.mapLightAnisotropy
                                  );
                                  break;
                                case 'mapLightRepeat':
                                case 'mapLightOffset':
                                case 'mapLightWrap':
                                case 'mapLightAnisotropy':
                                  break;
                                case 'mapAO':
                                  a.aoMap = r(
                                    s,
                                    t.mapAORepeat,
                                    t.mapAOOffset,
                                    t.mapAOWrap,
                                    t.mapAOAnisotropy
                                  );
                                  break;
                                case 'mapAORepeat':
                                case 'mapAOOffset':
                                case 'mapAOWrap':
                                case 'mapAOAnisotropy':
                                  break;
                                case 'mapBump':
                                  a.bumpMap = r(
                                    s,
                                    t.mapBumpRepeat,
                                    t.mapBumpOffset,
                                    t.mapBumpWrap,
                                    t.mapBumpAnisotropy
                                  );
                                  break;
                                case 'mapBumpScale':
                                  a.bumpScale = s;
                                  break;
                                case 'mapBumpRepeat':
                                case 'mapBumpOffset':
                                case 'mapBumpWrap':
                                case 'mapBumpAnisotropy':
                                  break;
                                case 'mapNormal':
                                  a.normalMap = r(
                                    s,
                                    t.mapNormalRepeat,
                                    t.mapNormalOffset,
                                    t.mapNormalWrap,
                                    t.mapNormalAnisotropy
                                  );
                                  break;
                                case 'mapNormalFactor':
                                  a.normalScale = [s, s];
                                  break;
                                case 'mapNormalRepeat':
                                case 'mapNormalOffset':
                                case 'mapNormalWrap':
                                case 'mapNormalAnisotropy':
                                  break;
                                case 'mapSpecular':
                                  a.specularMap = r(
                                    s,
                                    t.mapSpecularRepeat,
                                    t.mapSpecularOffset,
                                    t.mapSpecularWrap,
                                    t.mapSpecularAnisotropy
                                  );
                                  break;
                                case 'mapSpecularRepeat':
                                case 'mapSpecularOffset':
                                case 'mapSpecularWrap':
                                case 'mapSpecularAnisotropy':
                                  break;
                                case 'mapMetalness':
                                  a.metalnessMap = r(
                                    s,
                                    t.mapMetalnessRepeat,
                                    t.mapMetalnessOffset,
                                    t.mapMetalnessWrap,
                                    t.mapMetalnessAnisotropy
                                  );
                                  break;
                                case 'mapMetalnessRepeat':
                                case 'mapMetalnessOffset':
                                case 'mapMetalnessWrap':
                                case 'mapMetalnessAnisotropy':
                                  break;
                                case 'mapRoughness':
                                  a.roughnessMap = r(
                                    s,
                                    t.mapRoughnessRepeat,
                                    t.mapRoughnessOffset,
                                    t.mapRoughnessWrap,
                                    t.mapRoughnessAnisotropy
                                  );
                                  break;
                                case 'mapRoughnessRepeat':
                                case 'mapRoughnessOffset':
                                case 'mapRoughnessWrap':
                                case 'mapRoughnessAnisotropy':
                                  break;
                                case 'mapAlpha':
                                  a.alphaMap = r(
                                    s,
                                    t.mapAlphaRepeat,
                                    t.mapAlphaOffset,
                                    t.mapAlphaWrap,
                                    t.mapAlphaAnisotropy
                                  );
                                  break;
                                case 'mapAlphaRepeat':
                                case 'mapAlphaOffset':
                                case 'mapAlphaWrap':
                                case 'mapAlphaAnisotropy':
                                  break;
                                case 'flipSided':
                                  a.side = g;
                                  break;
                                case 'doubleSided':
                                  a.side = v;
                                  break;
                                case 'transparency':
                                  a.opacity = s;
                                  break;
                                case 'depthTest':
                                case 'depthWrite':
                                case 'colorWrite':
                                case 'opacity':
                                case 'reflectivity':
                                case 'transparent':
                                case 'visible':
                                case 'wireframe':
                                  a[o] = s;
                                  break;
                                case 'vertexColors':
                                  !0 === s && (a.vertexColors = w),
                                    'face' === s && (a.vertexColors = M);
                              }
                            }
                            return (
                              'MeshBasicMaterial' === a.type &&
                                delete a.emissive,
                              'MeshPhongMaterial' !== a.type &&
                                delete a.specular,
                              a.opacity < 1 && (a.transparent = !0),
                              js.setTextures(n),
                              js.parse(a)
                            );
                          })
                        }),
                        Object.assign(ks.prototype, {
                          load: function(t, e, i, n) {
                            var r = this,
                              a =
                                this.texturePath &&
                                'string' == typeof this.texturePath
                                  ? this.texturePath
                                  : Rs.prototype.extractUrlBase(t),
                              o = new Zo(this.manager);
                            o.setWithCredentials(this.withCredentials),
                              o.load(
                                t,
                                function(t) {
                                  var i = JSON.parse(t),
                                    n = i.metadata;
                                  if (void 0 !== n) {
                                    var o = n.type;
                                    if (void 0 !== o) {
                                      if ('object' === o.toLowerCase()) return;
                                      if ('scene' === o.toLowerCase()) return;
                                    }
                                  }
                                  var s = r.parse(i, a);
                                  e(s.geometry, s.materials);
                                },
                                i,
                                n
                              );
                          },
                          setTexturePath: function(t) {
                            this.texturePath = t;
                          },
                          parse: (function() {
                            return function(t, e) {
                              void 0 !== t.data && (t = t.data),
                                void 0 !== t.scale
                                  ? (t.scale = 1 / t.scale)
                                  : (t.scale = 1);
                              var i = new Dr();
                              return (
                                (function(t, e) {
                                  function i(t, e) {
                                    return t & (1 << e);
                                  }
                                  var n,
                                    r,
                                    a,
                                    o,
                                    s,
                                    c,
                                    u,
                                    l,
                                    h,
                                    d,
                                    p,
                                    f,
                                    m,
                                    g,
                                    v,
                                    y,
                                    M,
                                    w,
                                    x,
                                    A,
                                    E,
                                    b,
                                    T,
                                    L,
                                    N,
                                    D = t.faces,
                                    C = t.vertices,
                                    S = t.normals,
                                    I = t.colors,
                                    _ = t.scale,
                                    j = 0;
                                  if (void 0 !== t.uvs) {
                                    for (n = 0; n < t.uvs.length; n++)
                                      t.uvs[n].length && j++;
                                    for (n = 0; n < j; n++)
                                      e.faceVertexUvs[n] = [];
                                  }
                                  for (o = 0, s = C.length; o < s; )
                                    ((w = new ke()).x = C[o++] * _),
                                      (w.y = C[o++] * _),
                                      (w.z = C[o++] * _),
                                      e.vertices.push(w);
                                  for (o = 0, s = D.length; o < s; )
                                    if (
                                      ((p = i((d = D[o++]), 0)),
                                      (f = i(d, 1)),
                                      (m = i(d, 3)),
                                      (g = i(d, 4)),
                                      (v = i(d, 5)),
                                      (y = i(d, 6)),
                                      (M = i(d, 7)),
                                      p)
                                    ) {
                                      if (
                                        (((A = new Bn()).a = D[o]),
                                        (A.b = D[o + 1]),
                                        (A.c = D[o + 3]),
                                        ((E = new Bn()).a = D[o + 1]),
                                        (E.b = D[o + 2]),
                                        (E.c = D[o + 3]),
                                        (o += 4),
                                        f &&
                                          ((h = D[o++]),
                                          (A.materialIndex = h),
                                          (E.materialIndex = h)),
                                        (a = e.faces.length),
                                        m)
                                      )
                                        for (n = 0; n < j; n++)
                                          for (
                                            L = t.uvs[n],
                                              e.faceVertexUvs[n][a] = [],
                                              e.faceVertexUvs[n][a + 1] = [],
                                              r = 0;
                                            r < 4;
                                            r++
                                          )
                                            (N = new he(
                                              L[2 * (l = D[o++])],
                                              L[2 * l + 1]
                                            )),
                                              2 !== r &&
                                                e.faceVertexUvs[n][a].push(N),
                                              0 !== r &&
                                                e.faceVertexUvs[n][a + 1].push(
                                                  N
                                                );
                                      if (
                                        (g &&
                                          ((u = 3 * D[o++]),
                                          A.normal.set(S[u++], S[u++], S[u]),
                                          E.normal.copy(A.normal)),
                                        v)
                                      )
                                        for (n = 0; n < 4; n++)
                                          (u = 3 * D[o++]),
                                            (T = new ke(S[u++], S[u++], S[u])),
                                            2 !== n && A.vertexNormals.push(T),
                                            0 !== n && E.vertexNormals.push(T);
                                      if (
                                        (y &&
                                          ((b = I[(c = D[o++])]),
                                          A.color.setHex(b),
                                          E.color.setHex(b)),
                                        M)
                                      )
                                        for (n = 0; n < 4; n++)
                                          (b = I[(c = D[o++])]),
                                            2 !== n &&
                                              A.vertexColors.push(new Ni(b)),
                                            0 !== n &&
                                              E.vertexColors.push(new Ni(b));
                                      e.faces.push(A), e.faces.push(E);
                                    } else {
                                      if (
                                        (((x = new Bn()).a = D[o++]),
                                        (x.b = D[o++]),
                                        (x.c = D[o++]),
                                        f &&
                                          ((h = D[o++]), (x.materialIndex = h)),
                                        (a = e.faces.length),
                                        m)
                                      )
                                        for (n = 0; n < j; n++)
                                          for (
                                            L = t.uvs[n],
                                              e.faceVertexUvs[n][a] = [],
                                              r = 0;
                                            r < 3;
                                            r++
                                          )
                                            (N = new he(
                                              L[2 * (l = D[o++])],
                                              L[2 * l + 1]
                                            )),
                                              e.faceVertexUvs[n][a].push(N);
                                      if (
                                        (g &&
                                          ((u = 3 * D[o++]),
                                          x.normal.set(S[u++], S[u++], S[u])),
                                        v)
                                      )
                                        for (n = 0; n < 3; n++)
                                          (u = 3 * D[o++]),
                                            (T = new ke(S[u++], S[u++], S[u])),
                                            x.vertexNormals.push(T);
                                      if (
                                        (y &&
                                          ((c = D[o++]), x.color.setHex(I[c])),
                                        M)
                                      )
                                        for (n = 0; n < 3; n++)
                                          (c = D[o++]),
                                            x.vertexColors.push(new Ni(I[c]));
                                      e.faces.push(x);
                                    }
                                })(t, i),
                                (function(t, e) {
                                  var i =
                                    void 0 !== t.influencesPerVertex
                                      ? t.influencesPerVertex
                                      : 2;
                                  if (t.skinWeights)
                                    for (
                                      var n = 0, r = t.skinWeights.length;
                                      n < r;
                                      n += i
                                    ) {
                                      var a = t.skinWeights[n],
                                        o = i > 1 ? t.skinWeights[n + 1] : 0,
                                        s = i > 2 ? t.skinWeights[n + 2] : 0,
                                        c = i > 3 ? t.skinWeights[n + 3] : 0;
                                      e.skinWeights.push(new je(a, o, s, c));
                                    }
                                  if (t.skinIndices)
                                    for (
                                      n = 0, r = t.skinIndices.length;
                                      n < r;
                                      n += i
                                    ) {
                                      var u = t.skinIndices[n],
                                        l = i > 1 ? t.skinIndices[n + 1] : 0,
                                        h = i > 2 ? t.skinIndices[n + 2] : 0,
                                        d = i > 3 ? t.skinIndices[n + 3] : 0;
                                      e.skinIndices.push(new je(u, l, h, d));
                                    }
                                  (e.bones = t.bones),
                                    e.bones &&
                                      e.bones.length > 0 &&
                                      (e.skinWeights.length !==
                                        e.skinIndices.length ||
                                        (e.skinIndices.length,
                                        e.vertices.length));
                                })(t, i),
                                (function(t, e) {
                                  var i = t.scale;
                                  if (void 0 !== t.morphTargets)
                                    for (
                                      var n = 0, r = t.morphTargets.length;
                                      n < r;
                                      n++
                                    ) {
                                      (e.morphTargets[n] = {}),
                                        (e.morphTargets[n].name =
                                          t.morphTargets[n].name),
                                        (e.morphTargets[n].vertices = []);
                                      for (
                                        var a = e.morphTargets[n].vertices,
                                          o = t.morphTargets[n].vertices,
                                          s = 0,
                                          c = o.length;
                                        s < c;
                                        s += 3
                                      ) {
                                        var u = new ke();
                                        (u.x = o[s] * i),
                                          (u.y = o[s + 1] * i),
                                          (u.z = o[s + 2] * i),
                                          a.push(u);
                                      }
                                    }
                                  if (
                                    void 0 !== t.morphColors &&
                                    t.morphColors.length > 0
                                  ) {
                                    var l = e.faces,
                                      h = t.morphColors[0].colors;
                                    for (n = 0, r = l.length; n < r; n++)
                                      l[n].color.fromArray(h, 3 * n);
                                  }
                                })(t, i),
                                (function(t, e) {
                                  var i = [],
                                    n = [];
                                  void 0 !== t.animation && n.push(t.animation),
                                    void 0 !== t.animations &&
                                      (t.animations.length
                                        ? (n = n.concat(t.animations))
                                        : n.push(t.animations));
                                  for (var r = 0; r < n.length; r++) {
                                    var a = Ns.parseAnimation(n[r], e.bones);
                                    a && i.push(a);
                                  }
                                  if (e.morphTargets) {
                                    var o = Ns.CreateClipsFromMorphTargetSequences(
                                      e.morphTargets,
                                      10
                                    );
                                    i = i.concat(o);
                                  }
                                  i.length > 0 && (e.animations = i);
                                })(t, i),
                                i.computeFaceNormals(),
                                i.computeBoundingSphere(),
                                void 0 === t.materials ||
                                0 === t.materials.length
                                  ? { geometry: i }
                                  : {
                                      geometry: i,
                                      materials: Rs.prototype.initMaterials(
                                        t.materials,
                                        e,
                                        this.crossOrigin
                                      )
                                    }
                              );
                            };
                          })()
                        }),
                        Object.assign(Us.prototype, {
                          load: function(t, e, i, n) {
                            '' === this.texturePath &&
                              (this.texturePath = t.substring(
                                0,
                                t.lastIndexOf('/') + 1
                              ));
                            var r = this;
                            new Zo(r.manager).load(
                              t,
                              function(t) {
                                var i = null;
                                try {
                                  i = JSON.parse(t);
                                } catch (t) {
                                  return void (void 0 !== n && n(t));
                                }
                                var a = i.metadata;
                                void 0 !== a &&
                                  void 0 !== a.type &&
                                  'geometry' !== a.type.toLowerCase() &&
                                  r.parse(i, e);
                              },
                              i,
                              n
                            );
                          },
                          setTexturePath: function(t) {
                            this.texturePath = t;
                          },
                          setCrossOrigin: function(t) {
                            this.crossOrigin = t;
                          },
                          parse: function(t, e) {
                            var i = this.parseGeometries(t.geometries),
                              n = this.parseImages(t.images, function() {
                                void 0 !== e && e(o);
                              }),
                              r = this.parseTextures(t.textures, n),
                              a = this.parseMaterials(t.materials, r),
                              o = this.parseObject(t.object, i, a);
                            return (
                              t.animations &&
                                (o.animations = this.parseAnimations(
                                  t.animations
                                )),
                              (void 0 !== t.images && 0 !== t.images.length) ||
                                (void 0 !== e && e(o)),
                              o
                            );
                          },
                          parseGeometries: function(t) {
                            var e = {};
                            if (void 0 !== t)
                              for (
                                var i = new ks(),
                                  n = new Cs(),
                                  r = 0,
                                  a = t.length;
                                r < a;
                                r++
                              ) {
                                var o,
                                  s = t[r];
                                switch (s.type) {
                                  case 'PlaneGeometry':
                                  case 'PlaneBufferGeometry':
                                    o = new Ro[s.type](
                                      s.width,
                                      s.height,
                                      s.widthSegments,
                                      s.heightSegments
                                    );
                                    break;
                                  case 'BoxGeometry':
                                  case 'BoxBufferGeometry':
                                  case 'CubeGeometry':
                                    o = new Ro[s.type](
                                      s.width,
                                      s.height,
                                      s.depth,
                                      s.widthSegments,
                                      s.heightSegments,
                                      s.depthSegments
                                    );
                                    break;
                                  case 'CircleGeometry':
                                  case 'CircleBufferGeometry':
                                    o = new Ro[s.type](
                                      s.radius,
                                      s.segments,
                                      s.thetaStart,
                                      s.thetaLength
                                    );
                                    break;
                                  case 'CylinderGeometry':
                                  case 'CylinderBufferGeometry':
                                    o = new Ro[s.type](
                                      s.radiusTop,
                                      s.radiusBottom,
                                      s.height,
                                      s.radialSegments,
                                      s.heightSegments,
                                      s.openEnded,
                                      s.thetaStart,
                                      s.thetaLength
                                    );
                                    break;
                                  case 'ConeGeometry':
                                  case 'ConeBufferGeometry':
                                    o = new Ro[s.type](
                                      s.radius,
                                      s.height,
                                      s.radialSegments,
                                      s.heightSegments,
                                      s.openEnded,
                                      s.thetaStart,
                                      s.thetaLength
                                    );
                                    break;
                                  case 'SphereGeometry':
                                  case 'SphereBufferGeometry':
                                    o = new Ro[s.type](
                                      s.radius,
                                      s.widthSegments,
                                      s.heightSegments,
                                      s.phiStart,
                                      s.phiLength,
                                      s.thetaStart,
                                      s.thetaLength
                                    );
                                    break;
                                  case 'DodecahedronGeometry':
                                  case 'IcosahedronGeometry':
                                  case 'OctahedronGeometry':
                                  case 'TetrahedronGeometry':
                                    o = new Ro[s.type](s.radius, s.detail);
                                    break;
                                  case 'RingGeometry':
                                  case 'RingBufferGeometry':
                                    o = new Ro[s.type](
                                      s.innerRadius,
                                      s.outerRadius,
                                      s.thetaSegments,
                                      s.phiSegments,
                                      s.thetaStart,
                                      s.thetaLength
                                    );
                                    break;
                                  case 'TorusGeometry':
                                  case 'TorusBufferGeometry':
                                    o = new Ro[s.type](
                                      s.radius,
                                      s.tube,
                                      s.radialSegments,
                                      s.tubularSegments,
                                      s.arc
                                    );
                                    break;
                                  case 'TorusKnotGeometry':
                                  case 'TorusKnotBufferGeometry':
                                    o = new Ro[s.type](
                                      s.radius,
                                      s.tube,
                                      s.tubularSegments,
                                      s.radialSegments,
                                      s.p,
                                      s.q
                                    );
                                    break;
                                  case 'LatheGeometry':
                                  case 'LatheBufferGeometry':
                                    o = new Ro[s.type](
                                      s.points,
                                      s.segments,
                                      s.phiStart,
                                      s.phiLength
                                    );
                                    break;
                                  case 'BufferGeometry':
                                    o = n.parse(s);
                                    break;
                                  case 'Geometry':
                                    o = i.parse(s, this.texturePath).geometry;
                                    break;
                                  default:
                                    continue;
                                }
                                (o.uuid = s.uuid),
                                  void 0 !== s.name && (o.name = s.name),
                                  (e[s.uuid] = o);
                              }
                            return e;
                          },
                          parseMaterials: function(t, e) {
                            var i = {};
                            if (void 0 !== t) {
                              var n = new Ds();
                              n.setTextures(e);
                              for (var r = 0, a = t.length; r < a; r++) {
                                var o = t[r];
                                if ('MultiMaterial' === o.type) {
                                  for (
                                    var s = [], c = 0;
                                    c < o.materials.length;
                                    c++
                                  )
                                    s.push(n.parse(o.materials[c]));
                                  i[o.uuid] = s;
                                } else i[o.uuid] = n.parse(o);
                              }
                            }
                            return i;
                          },
                          parseAnimations: function(t) {
                            for (var e = [], i = 0; i < t.length; i++) {
                              var n = Ns.parse(t[i]);
                              e.push(n);
                            }
                            return e;
                          },
                          parseImages: function(t, e) {
                            var i = this,
                              n = {};
                            function r(t) {
                              return (
                                i.manager.itemStart(t),
                                a.load(
                                  t,
                                  function() {
                                    i.manager.itemEnd(t);
                                  },
                                  void 0,
                                  function() {
                                    i.manager.itemEnd(t),
                                      i.manager.itemError(t);
                                  }
                                )
                              );
                            }
                            if (void 0 !== t && t.length > 0) {
                              var a = new $o(new Xo(e));
                              a.setCrossOrigin(this.crossOrigin);
                              for (var o = 0, s = t.length; o < s; o++) {
                                var c = t[o],
                                  u = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)
                                    ? c.url
                                    : i.texturePath + c.url;
                                n[c.uuid] = r(u);
                              }
                            }
                            return n;
                          },
                          parseTextures: function(t, e) {
                            function i(t, e) {
                              return 'number' == typeof t ? t : e[t];
                            }
                            var n = {};
                            if (void 0 !== t)
                              for (var r = 0, a = t.length; r < a; r++) {
                                var o = t[r];
                                o.image, e[o.image];
                                var s = new _e(e[o.image]);
                                (s.needsUpdate = !0),
                                  (s.uuid = o.uuid),
                                  void 0 !== o.name && (s.name = o.name),
                                  void 0 !== o.mapping &&
                                    (s.mapping = i(o.mapping, Ps)),
                                  void 0 !== o.offset &&
                                    s.offset.fromArray(o.offset),
                                  void 0 !== o.repeat &&
                                    s.repeat.fromArray(o.repeat),
                                  void 0 !== o.wrap &&
                                    ((s.wrapS = i(o.wrap[0], Bs)),
                                    (s.wrapT = i(o.wrap[1], Bs))),
                                  void 0 !== o.minFilter &&
                                    (s.minFilter = i(o.minFilter, Fs)),
                                  void 0 !== o.magFilter &&
                                    (s.magFilter = i(o.magFilter, Fs)),
                                  void 0 !== o.anisotropy &&
                                    (s.anisotropy = o.anisotropy),
                                  void 0 !== o.flipY && (s.flipY = o.flipY),
                                  (n[o.uuid] = s);
                              }
                            return n;
                          },
                          parseObject: ((Os = new Ue()),
                          function(t, e, i) {
                            var n;
                            function r(t) {
                              return e[t], e[t];
                            }
                            function a(t) {
                              if (void 0 !== t) {
                                if (Array.isArray(t)) {
                                  for (
                                    var e = [], n = 0, r = t.length;
                                    n < r;
                                    n++
                                  ) {
                                    var a = t[n];
                                    i[a], e.push(i[a]);
                                  }
                                  return e;
                                }
                                return i[t], i[t];
                              }
                            }
                            switch (t.type) {
                              case 'Scene':
                                (n = new _a()),
                                  void 0 !== t.background &&
                                    Number.isInteger(t.background) &&
                                    (n.background = new Ni(t.background)),
                                  void 0 !== t.fog &&
                                    ('Fog' === t.fog.type
                                      ? (n.fog = new Ia(
                                          t.fog.color,
                                          t.fog.near,
                                          t.fog.far
                                        ))
                                      : 'FogExp2' === t.fog.type &&
                                        (n.fog = new Sa(
                                          t.fog.color,
                                          t.fog.density
                                        )));
                                break;
                              case 'PerspectiveCamera':
                                (n = new Pn(t.fov, t.aspect, t.near, t.far)),
                                  void 0 !== t.focus && (n.focus = t.focus),
                                  void 0 !== t.zoom && (n.zoom = t.zoom),
                                  void 0 !== t.filmGauge &&
                                    (n.filmGauge = t.filmGauge),
                                  void 0 !== t.filmOffset &&
                                    (n.filmOffset = t.filmOffset),
                                  void 0 !== t.view &&
                                    (n.view = Object.assign({}, t.view));
                                break;
                              case 'OrthographicCamera':
                                n = new Un(
                                  t.left,
                                  t.right,
                                  t.top,
                                  t.bottom,
                                  t.near,
                                  t.far
                                );
                                break;
                              case 'AmbientLight':
                                n = new ls(t.color, t.intensity);
                                break;
                              case 'DirectionalLight':
                                n = new us(t.color, t.intensity);
                                break;
                              case 'PointLight':
                                n = new ss(
                                  t.color,
                                  t.intensity,
                                  t.distance,
                                  t.decay
                                );
                                break;
                              case 'RectAreaLight':
                                n = new hs(
                                  t.color,
                                  t.intensity,
                                  t.width,
                                  t.height
                                );
                                break;
                              case 'SpotLight':
                                n = new os(
                                  t.color,
                                  t.intensity,
                                  t.distance,
                                  t.angle,
                                  t.penumbra,
                                  t.decay
                                );
                                break;
                              case 'HemisphereLight':
                                n = new ns(t.color, t.groundColor, t.intensity);
                                break;
                              case 'SkinnedMesh':
                              case 'Mesh':
                                var o = r(t.geometry),
                                  s = a(t.material);
                                n =
                                  o.bones && o.bones.length > 0
                                    ? new Pa(o, s)
                                    : new Zr(o, s);
                                break;
                              case 'LOD':
                                n = new Ra();
                                break;
                              case 'Line':
                                n = new Fa(
                                  r(t.geometry),
                                  a(t.material),
                                  t.mode
                                );
                                break;
                              case 'LineLoop':
                                n = new Va(r(t.geometry), a(t.material));
                                break;
                              case 'LineSegments':
                                n = new Ga(r(t.geometry), a(t.material));
                                break;
                              case 'PointCloud':
                              case 'Points':
                                n = new Qa(r(t.geometry), a(t.material));
                                break;
                              case 'Sprite':
                                n = new za(a(t.material));
                                break;
                              case 'Group':
                                n = new Ha();
                                break;
                              default:
                                n = new Rn();
                            }
                            if (
                              ((n.uuid = t.uuid),
                              void 0 !== t.name && (n.name = t.name),
                              void 0 !== t.matrix
                                ? (Os.fromArray(t.matrix),
                                  Os.decompose(
                                    n.position,
                                    n.quaternion,
                                    n.scale
                                  ))
                                : (void 0 !== t.position &&
                                    n.position.fromArray(t.position),
                                  void 0 !== t.rotation &&
                                    n.rotation.fromArray(t.rotation),
                                  void 0 !== t.quaternion &&
                                    n.quaternion.fromArray(t.quaternion),
                                  void 0 !== t.scale &&
                                    n.scale.fromArray(t.scale)),
                              void 0 !== t.castShadow &&
                                (n.castShadow = t.castShadow),
                              void 0 !== t.receiveShadow &&
                                (n.receiveShadow = t.receiveShadow),
                              t.shadow &&
                                (void 0 !== t.shadow.bias &&
                                  (n.shadow.bias = t.shadow.bias),
                                void 0 !== t.shadow.radius &&
                                  (n.shadow.radius = t.shadow.radius),
                                void 0 !== t.shadow.mapSize &&
                                  n.shadow.mapSize.fromArray(t.shadow.mapSize),
                                void 0 !== t.shadow.camera &&
                                  (n.shadow.camera = this.parseObject(
                                    t.shadow.camera
                                  ))),
                              void 0 !== t.visible && (n.visible = t.visible),
                              void 0 !== t.userData &&
                                (n.userData = t.userData),
                              void 0 !== t.children)
                            )
                              for (var c = t.children, u = 0; u < c.length; u++)
                                n.add(this.parseObject(c[u], e, i));
                            if ('LOD' === t.type)
                              for (var l = t.levels, h = 0; h < l.length; h++) {
                                var d = l[h],
                                  p = n.getObjectByProperty('uuid', d.object);
                                void 0 !== p && n.addLevel(p, d.distance);
                              }
                            return n;
                          })
                        });
                      var Ps = {
                          UVMapping: 300,
                          CubeReflectionMapping: at,
                          CubeRefractionMapping: ot,
                          EquirectangularReflectionMapping: st,
                          EquirectangularRefractionMapping: ct,
                          SphericalReflectionMapping: ut,
                          CubeUVReflectionMapping: lt,
                          CubeUVRefractionMapping: ht
                        },
                        Bs = {
                          RepeatWrapping: dt,
                          ClampToEdgeWrapping: pt,
                          MirroredRepeatWrapping: ft
                        },
                        Fs = {
                          NearestFilter: mt,
                          NearestMipMapNearestFilter: gt,
                          NearestMipMapLinearFilter: vt,
                          LinearFilter: yt,
                          LinearMipMapNearestFilter: Mt,
                          LinearMipMapLinearFilter: wt
                        };
                      function Gs(t, e, i, n, r) {
                        var a = 0.5 * (n - e),
                          o = 0.5 * (r - i),
                          s = t * t;
                        return (
                          (2 * i - 2 * n + a + o) * (t * s) +
                          (-3 * i + 3 * n - 2 * a - o) * s +
                          a * t +
                          i
                        );
                      }
                      function Vs(t, e, i, n) {
                        return (
                          (o = 1 - t) * o * e +
                          2 * (1 - (a = t)) * a * i +
                          (r = t) * r * n
                        );
                        var r, a, o;
                      }
                      function Ys(t, e, i, n, r) {
                        return (
                          (u = 1 - t) * u * u * e +
                          3 * (c = 1 - (s = t)) * c * s * i +
                          3 * (1 - (o = t)) * o * o * n +
                          (a = t) * a * a * r
                        );
                        var a, o, s, c, u;
                      }
                      function Qs() {
                        this.arcLengthDivisions = 200;
                      }
                      function Hs(t, e) {
                        Qs.call(this), (this.v1 = t), (this.v2 = e);
                      }
                      function Ws() {
                        Qs.call(this),
                          (this.curves = []),
                          (this.autoClose = !1);
                      }
                      function Xs(t, e, i, n, r, a, o, s) {
                        Qs.call(this),
                          (this.aX = t),
                          (this.aY = e),
                          (this.xRadius = i),
                          (this.yRadius = n),
                          (this.aStartAngle = r),
                          (this.aEndAngle = a),
                          (this.aClockwise = o),
                          (this.aRotation = s || 0);
                      }
                      function qs(t) {
                        Qs.call(this), (this.points = void 0 === t ? [] : t);
                      }
                      function Zs(t, e, i, n) {
                        Qs.call(this),
                          (this.v0 = t),
                          (this.v1 = e),
                          (this.v2 = i),
                          (this.v3 = n);
                      }
                      function Ks(t, e, i) {
                        Qs.call(this),
                          (this.v0 = t),
                          (this.v1 = e),
                          (this.v2 = i);
                      }
                      Object.assign(Qs.prototype, {
                        getPoint: function() {
                          return null;
                        },
                        getPointAt: function(t) {
                          var e = this.getUtoTmapping(t);
                          return this.getPoint(e);
                        },
                        getPoints: function(t) {
                          void 0 === t && (t = 5);
                          for (var e = [], i = 0; i <= t; i++)
                            e.push(this.getPoint(i / t));
                          return e;
                        },
                        getSpacedPoints: function(t) {
                          void 0 === t && (t = 5);
                          for (var e = [], i = 0; i <= t; i++)
                            e.push(this.getPointAt(i / t));
                          return e;
                        },
                        getLength: function() {
                          var t = this.getLengths();
                          return t[t.length - 1];
                        },
                        getLengths: function(t) {
                          if (
                            (void 0 === t && (t = this.arcLengthDivisions),
                            this.cacheArcLengths &&
                              this.cacheArcLengths.length === t + 1 &&
                              !this.needsUpdate)
                          )
                            return this.cacheArcLengths;
                          this.needsUpdate = !1;
                          var e,
                            i,
                            n = [],
                            r = this.getPoint(0),
                            a = 0;
                          for (n.push(0), i = 1; i <= t; i++)
                            (a += (e = this.getPoint(i / t)).distanceTo(r)),
                              n.push(a),
                              (r = e);
                          return (this.cacheArcLengths = n), n;
                        },
                        updateArcLengths: function() {
                          (this.needsUpdate = !0), this.getLengths();
                        },
                        getUtoTmapping: function(t, e) {
                          var i,
                            n = this.getLengths(),
                            r = 0,
                            a = n.length;
                          i = e || t * n[a - 1];
                          for (var o, s = 0, c = a - 1; s <= c; )
                            if (
                              (o = n[(r = Math.floor(s + (c - s) / 2))] - i) < 0
                            )
                              s = r + 1;
                            else {
                              if (!(o > 0)) {
                                c = r;
                                break;
                              }
                              c = r - 1;
                            }
                          if (n[(r = c)] === i) return r / (a - 1);
                          var u = n[r];
                          return (r + (i - u) / (n[r + 1] - u)) / (a - 1);
                        },
                        getTangent: function(t) {
                          var e = t - 1e-4,
                            i = t + 1e-4;
                          e < 0 && (e = 0), i > 1 && (i = 1);
                          var n = this.getPoint(e);
                          return this.getPoint(i)
                            .clone()
                            .sub(n)
                            .normalize();
                        },
                        getTangentAt: function(t) {
                          var e = this.getUtoTmapping(t);
                          return this.getTangent(e);
                        },
                        computeFrenetFrames: function(t, e) {
                          var i,
                            n,
                            r,
                            a = new ke(),
                            o = [],
                            s = [],
                            c = [],
                            u = new ke(),
                            l = new Ue();
                          for (i = 0; i <= t; i++)
                            (n = i / t),
                              (o[i] = this.getTangentAt(n)),
                              o[i].normalize();
                          (s[0] = new ke()), (c[0] = new ke());
                          var h = Number.MAX_VALUE,
                            d = Math.abs(o[0].x),
                            p = Math.abs(o[0].y),
                            f = Math.abs(o[0].z);
                          for (
                            d <= h && ((h = d), a.set(1, 0, 0)),
                              p <= h && ((h = p), a.set(0, 1, 0)),
                              f <= h && a.set(0, 0, 1),
                              u.crossVectors(o[0], a).normalize(),
                              s[0].crossVectors(o[0], u),
                              c[0].crossVectors(o[0], s[0]),
                              i = 1;
                            i <= t;
                            i++
                          )
                            (s[i] = s[i - 1].clone()),
                              (c[i] = c[i - 1].clone()),
                              u.crossVectors(o[i - 1], o[i]),
                              u.length() > Number.EPSILON &&
                                (u.normalize(),
                                (r = Math.acos(
                                  le.clamp(o[i - 1].dot(o[i]), -1, 1)
                                )),
                                s[i].applyMatrix4(l.makeRotationAxis(u, r))),
                              c[i].crossVectors(o[i], s[i]);
                          if (!0 === e)
                            for (
                              r = Math.acos(le.clamp(s[0].dot(s[t]), -1, 1)),
                                r /= t,
                                o[0].dot(u.crossVectors(s[0], s[t])) > 0 &&
                                  (r = -r),
                                i = 1;
                              i <= t;
                              i++
                            )
                              s[i].applyMatrix4(
                                l.makeRotationAxis(o[i], r * i)
                              ),
                                c[i].crossVectors(o[i], s[i]);
                          return { tangents: o, normals: s, binormals: c };
                        }
                      }),
                        (Hs.prototype = Object.create(Qs.prototype)),
                        (Hs.prototype.constructor = Hs),
                        (Hs.prototype.isLineCurve = !0),
                        (Hs.prototype.getPoint = function(t) {
                          if (1 === t) return this.v2.clone();
                          var e = this.v2.clone().sub(this.v1);
                          return e.multiplyScalar(t).add(this.v1), e;
                        }),
                        (Hs.prototype.getPointAt = function(t) {
                          return this.getPoint(t);
                        }),
                        (Hs.prototype.getTangent = function(t) {
                          return this.v2
                            .clone()
                            .sub(this.v1)
                            .normalize();
                        }),
                        (Ws.prototype = Object.assign(
                          Object.create(Qs.prototype),
                          {
                            constructor: Ws,
                            add: function(t) {
                              this.curves.push(t);
                            },
                            closePath: function() {
                              var t = this.curves[0].getPoint(0),
                                e = this.curves[
                                  this.curves.length - 1
                                ].getPoint(1);
                              t.equals(e) || this.curves.push(new Hs(e, t));
                            },
                            getPoint: function(t) {
                              for (
                                var e = t * this.getLength(),
                                  i = this.getCurveLengths(),
                                  n = 0;
                                n < i.length;

                              ) {
                                if (i[n] >= e) {
                                  var r = i[n] - e,
                                    a = this.curves[n],
                                    o = a.getLength(),
                                    s = 0 === o ? 0 : 1 - r / o;
                                  return a.getPointAt(s);
                                }
                                n++;
                              }
                              return null;
                            },
                            getLength: function() {
                              var t = this.getCurveLengths();
                              return t[t.length - 1];
                            },
                            updateArcLengths: function() {
                              (this.needsUpdate = !0),
                                (this.cacheLengths = null),
                                this.getCurveLengths();
                            },
                            getCurveLengths: function() {
                              if (
                                this.cacheLengths &&
                                this.cacheLengths.length === this.curves.length
                              )
                                return this.cacheLengths;
                              for (
                                var t = [],
                                  e = 0,
                                  i = 0,
                                  n = this.curves.length;
                                i < n;
                                i++
                              )
                                (e += this.curves[i].getLength()), t.push(e);
                              return (this.cacheLengths = t), t;
                            },
                            getSpacedPoints: function(t) {
                              void 0 === t && (t = 40);
                              for (var e = [], i = 0; i <= t; i++)
                                e.push(this.getPoint(i / t));
                              return this.autoClose && e.push(e[0]), e;
                            },
                            getPoints: function(t) {
                              t = t || 12;
                              for (
                                var e, i = [], n = 0, r = this.curves;
                                n < r.length;
                                n++
                              )
                                for (
                                  var a = r[n],
                                    o =
                                      a && a.isEllipseCurve
                                        ? 2 * t
                                        : a && a.isLineCurve
                                          ? 1
                                          : a && a.isSplineCurve
                                            ? t * a.points.length
                                            : t,
                                    s = a.getPoints(o),
                                    c = 0;
                                  c < s.length;
                                  c++
                                ) {
                                  var u = s[c];
                                  (e && e.equals(u)) || (i.push(u), (e = u));
                                }
                              return (
                                this.autoClose &&
                                  i.length > 1 &&
                                  !i[i.length - 1].equals(i[0]) &&
                                  i.push(i[0]),
                                i
                              );
                            },
                            createPointsGeometry: function(t) {
                              var e = this.getPoints(t);
                              return this.createGeometry(e);
                            },
                            createSpacedPointsGeometry: function(t) {
                              var e = this.getSpacedPoints(t);
                              return this.createGeometry(e);
                            },
                            createGeometry: function(t) {
                              for (
                                var e = new Dr(), i = 0, n = t.length;
                                i < n;
                                i++
                              ) {
                                var r = t[i];
                                e.vertices.push(new ke(r.x, r.y, r.z || 0));
                              }
                              return e;
                            }
                          }
                        )),
                        (Xs.prototype = Object.create(Qs.prototype)),
                        (Xs.prototype.constructor = Xs),
                        (Xs.prototype.isEllipseCurve = !0),
                        (Xs.prototype.getPoint = function(t) {
                          for (
                            var e = 2 * Math.PI,
                              i = this.aEndAngle - this.aStartAngle,
                              n = Math.abs(i) < Number.EPSILON;
                            i < 0;

                          )
                            i += e;
                          for (; i > e; ) i -= e;
                          i < Number.EPSILON && (i = n ? 0 : e),
                            !0 !== this.aClockwise ||
                              n ||
                              (i === e ? (i = -e) : (i -= e));
                          var r = this.aStartAngle + t * i,
                            a = this.aX + this.xRadius * Math.cos(r),
                            o = this.aY + this.yRadius * Math.sin(r);
                          if (0 !== this.aRotation) {
                            var s = Math.cos(this.aRotation),
                              c = Math.sin(this.aRotation),
                              u = a - this.aX,
                              l = o - this.aY;
                            (a = u * s - l * c + this.aX),
                              (o = u * c + l * s + this.aY);
                          }
                          return new he(a, o);
                        }),
                        (qs.prototype = Object.create(Qs.prototype)),
                        (qs.prototype.constructor = qs),
                        (qs.prototype.isSplineCurve = !0),
                        (qs.prototype.getPoint = function(t) {
                          var e = this.points,
                            i = (e.length - 1) * t,
                            n = Math.floor(i),
                            r = i - n,
                            a = e[0 === n ? n : n - 1],
                            o = e[n],
                            s = e[n > e.length - 2 ? e.length - 1 : n + 1],
                            c = e[n > e.length - 3 ? e.length - 1 : n + 2];
                          return new he(
                            Gs(r, a.x, o.x, s.x, c.x),
                            Gs(r, a.y, o.y, s.y, c.y)
                          );
                        }),
                        (Zs.prototype = Object.create(Qs.prototype)),
                        (Zs.prototype.constructor = Zs),
                        (Zs.prototype.getPoint = function(t) {
                          var e = this.v0,
                            i = this.v1,
                            n = this.v2,
                            r = this.v3;
                          return new he(
                            Ys(t, e.x, i.x, n.x, r.x),
                            Ys(t, e.y, i.y, n.y, r.y)
                          );
                        }),
                        (Ks.prototype = Object.create(Qs.prototype)),
                        (Ks.prototype.constructor = Ks),
                        (Ks.prototype.getPoint = function(t) {
                          var e = this.v0,
                            i = this.v1,
                            n = this.v2;
                          return new he(
                            Vs(t, e.x, i.x, n.x),
                            Vs(t, e.y, i.y, n.y)
                          );
                        });
                      var Js,
                        $s = Object.assign(Object.create(Ws.prototype), {
                          fromPoints: function(t) {
                            this.moveTo(t[0].x, t[0].y);
                            for (var e = 1, i = t.length; e < i; e++)
                              this.lineTo(t[e].x, t[e].y);
                          },
                          moveTo: function(t, e) {
                            this.currentPoint.set(t, e);
                          },
                          lineTo: function(t, e) {
                            var i = new Hs(
                              this.currentPoint.clone(),
                              new he(t, e)
                            );
                            this.curves.push(i), this.currentPoint.set(t, e);
                          },
                          quadraticCurveTo: function(t, e, i, n) {
                            var r = new Ks(
                              this.currentPoint.clone(),
                              new he(t, e),
                              new he(i, n)
                            );
                            this.curves.push(r), this.currentPoint.set(i, n);
                          },
                          bezierCurveTo: function(t, e, i, n, r, a) {
                            var o = new Zs(
                              this.currentPoint.clone(),
                              new he(t, e),
                              new he(i, n),
                              new he(r, a)
                            );
                            this.curves.push(o), this.currentPoint.set(r, a);
                          },
                          splineThru: function(t) {
                            var e = new qs(
                              [this.currentPoint.clone()].concat(t)
                            );
                            this.curves.push(e),
                              this.currentPoint.copy(t[t.length - 1]);
                          },
                          arc: function(t, e, i, n, r, a) {
                            var o = this.currentPoint.x,
                              s = this.currentPoint.y;
                            this.absarc(t + o, e + s, i, n, r, a);
                          },
                          absarc: function(t, e, i, n, r, a) {
                            this.absellipse(t, e, i, i, n, r, a);
                          },
                          ellipse: function(t, e, i, n, r, a, o, s) {
                            var c = this.currentPoint.x,
                              u = this.currentPoint.y;
                            this.absellipse(t + c, e + u, i, n, r, a, o, s);
                          },
                          absellipse: function(t, e, i, n, r, a, o, s) {
                            var c = new Xs(t, e, i, n, r, a, o, s);
                            if (this.curves.length > 0) {
                              var u = c.getPoint(0);
                              u.equals(this.currentPoint) ||
                                this.lineTo(u.x, u.y);
                            }
                            this.curves.push(c);
                            var l = c.getPoint(1);
                            this.currentPoint.copy(l);
                          }
                        });
                      function tc(t) {
                        Ws.call(this),
                          (this.currentPoint = new he()),
                          t && this.fromPoints(t);
                      }
                      function ec() {
                        tc.apply(this, arguments), (this.holes = []);
                      }
                      function ic() {
                        (this.subPaths = []), (this.currentPath = null);
                      }
                      function nc(t) {
                        this.data = t;
                      }
                      function rc(t) {
                        this.manager = void 0 !== t ? t : qo;
                      }
                      (tc.prototype = $s),
                        ($s.constructor = tc),
                        (ec.prototype = Object.assign(Object.create($s), {
                          constructor: ec,
                          getPointsHoles: function(t) {
                            for (
                              var e = [], i = 0, n = this.holes.length;
                              i < n;
                              i++
                            )
                              e[i] = this.holes[i].getPoints(t);
                            return e;
                          },
                          extractAllPoints: function(t) {
                            return {
                              shape: this.getPoints(t),
                              holes: this.getPointsHoles(t)
                            };
                          },
                          extractPoints: function(t) {
                            return this.extractAllPoints(t);
                          }
                        })),
                        Object.assign(ic.prototype, {
                          moveTo: function(t, e) {
                            (this.currentPath = new tc()),
                              this.subPaths.push(this.currentPath),
                              this.currentPath.moveTo(t, e);
                          },
                          lineTo: function(t, e) {
                            this.currentPath.lineTo(t, e);
                          },
                          quadraticCurveTo: function(t, e, i, n) {
                            this.currentPath.quadraticCurveTo(t, e, i, n);
                          },
                          bezierCurveTo: function(t, e, i, n, r, a) {
                            this.currentPath.bezierCurveTo(t, e, i, n, r, a);
                          },
                          splineThru: function(t) {
                            this.currentPath.splineThru(t);
                          },
                          toShapes: function(t, e) {
                            function i(t) {
                              for (
                                var e = [], i = 0, n = t.length;
                                i < n;
                                i++
                              ) {
                                var r = t[i],
                                  a = new ec();
                                (a.curves = r.curves), e.push(a);
                              }
                              return e;
                            }
                            function n(t, e) {
                              for (
                                var i = e.length, n = !1, r = i - 1, a = 0;
                                a < i;
                                r = a++
                              ) {
                                var o = e[r],
                                  s = e[a],
                                  c = s.x - o.x,
                                  u = s.y - o.y;
                                if (Math.abs(u) > Number.EPSILON) {
                                  if (
                                    (u < 0 &&
                                      ((o = e[a]),
                                      (c = -c),
                                      (s = e[r]),
                                      (u = -u)),
                                    t.y < o.y || t.y > s.y)
                                  )
                                    continue;
                                  if (t.y === o.y) {
                                    if (t.x === o.x) return !0;
                                  } else {
                                    var l = u * (t.x - o.x) - c * (t.y - o.y);
                                    if (0 === l) return !0;
                                    if (l < 0) continue;
                                    n = !n;
                                  }
                                } else {
                                  if (t.y !== o.y) continue;
                                  if (
                                    (s.x <= t.x && t.x <= o.x) ||
                                    (o.x <= t.x && t.x <= s.x)
                                  )
                                    return !0;
                                }
                              }
                              return n;
                            }
                            var r = go.isClockWise,
                              a = this.subPaths;
                            if (0 === a.length) return [];
                            if (!0 === e) return i(a);
                            var o,
                              s,
                              c,
                              u = [];
                            if (1 === a.length)
                              return (
                                (s = a[0]),
                                ((c = new ec()).curves = s.curves),
                                u.push(c),
                                u
                              );
                            var l = !r(a[0].getPoints());
                            l = t ? !l : l;
                            var h,
                              d,
                              p = [],
                              f = [],
                              m = [],
                              g = 0;
                            (f[g] = void 0), (m[g] = []);
                            for (var v = 0, y = a.length; v < y; v++)
                              (o = r((h = (s = a[v]).getPoints()))),
                                (o = t ? !o : o)
                                  ? (!l && f[g] && g++,
                                    (f[g] = { s: new ec(), p: h }),
                                    (f[g].s.curves = s.curves),
                                    l && g++,
                                    (m[g] = []))
                                  : m[g].push({ h: s, p: h[0] });
                            if (!f[0]) return i(a);
                            if (f.length > 1) {
                              for (
                                var M = !1, w = [], x = 0, A = f.length;
                                x < A;
                                x++
                              )
                                p[x] = [];
                              for (x = 0, A = f.length; x < A; x++)
                                for (var E = m[x], b = 0; b < E.length; b++) {
                                  for (
                                    var T = E[b], L = !0, N = 0;
                                    N < f.length;
                                    N++
                                  )
                                    n(T.p, f[N].p) &&
                                      (x !== N &&
                                        w.push({ froms: x, tos: N, hole: b }),
                                      L ? ((L = !1), p[N].push(T)) : (M = !0));
                                  L && p[x].push(T);
                                }
                              w.length > 0 && (M || (m = p));
                            }
                            v = 0;
                            for (var D = f.length; v < D; v++) {
                              (c = f[v].s), u.push(c);
                              for (var C = 0, S = (d = m[v]).length; C < S; C++)
                                c.holes.push(d[C].h);
                            }
                            return u;
                          }
                        }),
                        Object.assign(nc.prototype, {
                          isFont: !0,
                          generateShapes: function(t, e, i) {
                            function n(t, e, n, a) {
                              var o = r.glyphs[t] || r.glyphs['?'];
                              if (o) {
                                var s,
                                  c,
                                  u,
                                  l,
                                  h,
                                  d,
                                  p,
                                  f,
                                  m,
                                  g,
                                  v,
                                  y = new ic(),
                                  M = [];
                                if (o.o)
                                  for (
                                    var w =
                                        o._cachedOutline ||
                                        (o._cachedOutline = o.o.split(' ')),
                                      x = 0,
                                      A = w.length;
                                    x < A;

                                  ) {
                                    switch (w[x++]) {
                                      case 'm':
                                        (s = w[x++] * e + n),
                                          (c = w[x++] * e + a),
                                          y.moveTo(s, c);
                                        break;
                                      case 'l':
                                        (s = w[x++] * e + n),
                                          (c = w[x++] * e + a),
                                          y.lineTo(s, c);
                                        break;
                                      case 'q':
                                        if (
                                          ((u = w[x++] * e + n),
                                          (l = w[x++] * e + a),
                                          (p = w[x++] * e + n),
                                          (f = w[x++] * e + a),
                                          y.quadraticCurveTo(p, f, u, l),
                                          (v = M[M.length - 1]))
                                        ) {
                                          (h = v.x), (d = v.y);
                                          for (var E = 1; E <= i; E++) {
                                            Vs((b = E / i), h, p, u),
                                              Vs(b, d, f, l);
                                          }
                                        }
                                        break;
                                      case 'b':
                                        if (
                                          ((u = w[x++] * e + n),
                                          (l = w[x++] * e + a),
                                          (p = w[x++] * e + n),
                                          (f = w[x++] * e + a),
                                          (m = w[x++] * e + n),
                                          (g = w[x++] * e + a),
                                          y.bezierCurveTo(p, f, m, g, u, l),
                                          (v = M[M.length - 1]))
                                        ) {
                                          (h = v.x), (d = v.y);
                                          for (E = 1; E <= i; E++) {
                                            var b;
                                            Ys((b = E / i), h, p, m, u),
                                              Ys(b, d, f, g, l);
                                          }
                                        }
                                    }
                                  }
                                return { offsetX: o.ha * e, path: y };
                              }
                            }
                            void 0 === e && (e = 100), void 0 === i && (i = 4);
                            for (
                              var r = this.data,
                                a = (function(t) {
                                  for (
                                    var i = String(t).split(''),
                                      a = e / r.resolution,
                                      o =
                                        (r.boundingBox.yMax -
                                          r.boundingBox.yMin +
                                          r.underlineThickness) *
                                        a,
                                      s = 0,
                                      c = 0,
                                      u = [],
                                      l = 0;
                                    l < i.length;
                                    l++
                                  ) {
                                    var h = i[l];
                                    if ('\n' === h) (s = 0), (c -= o);
                                    else {
                                      var d = n(h, a, s, c);
                                      (s += d.offsetX), u.push(d.path);
                                    }
                                  }
                                  return u;
                                })(t),
                                o = [],
                                s = 0,
                                c = a.length;
                              s < c;
                              s++
                            )
                              Array.prototype.push.apply(o, a[s].toShapes());
                            return o;
                          }
                        }),
                        Object.assign(rc.prototype, {
                          load: function(t, e, i, n) {
                            var r = this;
                            new Zo(this.manager).load(
                              t,
                              function(t) {
                                var i;
                                try {
                                  i = JSON.parse(t);
                                } catch (e) {
                                  i = JSON.parse(t.substring(65, t.length - 2));
                                }
                                var n = r.parse(i);
                                e && e(n);
                              },
                              i,
                              n
                            );
                          },
                          parse: function(t) {
                            return new nc(t);
                          }
                        });
                      var ac,
                        oc,
                        sc,
                        cc,
                        uc,
                        lc,
                        hc,
                        dc,
                        pc,
                        fc,
                        mc,
                        gc,
                        vc,
                        yc,
                        Mc,
                        wc,
                        xc,
                        Ac,
                        Ec,
                        bc,
                        Tc,
                        Lc,
                        Nc,
                        Dc,
                        Cc,
                        Sc,
                        Ic,
                        _c,
                        jc,
                        Oc,
                        zc,
                        Rc,
                        kc,
                        Uc,
                        Pc,
                        Bc,
                        Fc,
                        Gc,
                        Vc,
                        Yc = {
                          getContext: function() {
                            return (
                              void 0 === Js &&
                                (Js = new (window.AudioContext ||
                                  window.webkitAudioContext)()),
                              Js
                            );
                          },
                          setContext: function(t) {
                            Js = t;
                          }
                        };
                      function Qc(t) {
                        this.manager = void 0 !== t ? t : qo;
                      }
                      function Hc() {
                        (this.type = 'StereoCamera'),
                          (this.aspect = 1),
                          (this.eyeSep = 0.064),
                          (this.cameraL = new Pn()),
                          this.cameraL.layers.enable(1),
                          (this.cameraL.matrixAutoUpdate = !1),
                          (this.cameraR = new Pn()),
                          this.cameraR.layers.enable(2),
                          (this.cameraR.matrixAutoUpdate = !1);
                      }
                      function Wc(t, e, i) {
                        Rn.call(this), (this.type = 'CubeCamera');
                        var n = new Pn(90, 1, t, e);
                        n.up.set(0, -1, 0),
                          n.lookAt(new ke(1, 0, 0)),
                          this.add(n);
                        var r = new Pn(90, 1, t, e);
                        r.up.set(0, -1, 0),
                          r.lookAt(new ke(-1, 0, 0)),
                          this.add(r);
                        var a = new Pn(90, 1, t, e);
                        a.up.set(0, 0, 1),
                          a.lookAt(new ke(0, 1, 0)),
                          this.add(a);
                        var o = new Pn(90, 1, t, e);
                        o.up.set(0, 0, -1),
                          o.lookAt(new ke(0, -1, 0)),
                          this.add(o);
                        var s = new Pn(90, 1, t, e);
                        s.up.set(0, -1, 0),
                          s.lookAt(new ke(0, 0, 1)),
                          this.add(s);
                        var c = new Pn(90, 1, t, e);
                        c.up.set(0, -1, 0),
                          c.lookAt(new ke(0, 0, -1)),
                          this.add(c);
                        var u = { format: Ot, magFilter: yt, minFilter: yt };
                        (this.renderTarget = new ze(i, i, u)),
                          (this.renderTarget.texture.name = 'CubeCamera'),
                          (this.update = function(t, e) {
                            null === this.parent && this.updateMatrixWorld();
                            var i = this.renderTarget,
                              u = i.texture.generateMipmaps;
                            (i.texture.generateMipmaps = !1),
                              (i.activeCubeFace = 0),
                              t.render(e, n, i),
                              (i.activeCubeFace = 1),
                              t.render(e, r, i),
                              (i.activeCubeFace = 2),
                              t.render(e, a, i),
                              (i.activeCubeFace = 3),
                              t.render(e, o, i),
                              (i.activeCubeFace = 4),
                              t.render(e, s, i),
                              (i.texture.generateMipmaps = u),
                              (i.activeCubeFace = 5),
                              t.render(e, c, i),
                              t.setRenderTarget(null);
                          }),
                          (this.clear = function(t, e, i, n) {
                            for (var r = this.renderTarget, a = 0; a < 6; a++)
                              (r.activeCubeFace = a),
                                t.setRenderTarget(r),
                                t.clear(e, i, n);
                            t.setRenderTarget(null);
                          });
                      }
                      function Xc() {
                        Rn.call(this),
                          (this.type = 'AudioListener'),
                          (this.context = Yc.getContext()),
                          (this.gain = this.context.createGain()),
                          this.gain.connect(this.context.destination),
                          (this.filter = null);
                      }
                      function qc(t) {
                        Rn.call(this),
                          (this.type = 'Audio'),
                          (this.context = t.context),
                          (this.gain = this.context.createGain()),
                          this.gain.connect(t.getInput()),
                          (this.autoplay = !1),
                          (this.buffer = null),
                          (this.loop = !1),
                          (this.startTime = 0),
                          (this.playbackRate = 1),
                          (this.isPlaying = !1),
                          (this.hasPlaybackControl = !0),
                          (this.sourceType = 'empty'),
                          (this.filters = []);
                      }
                      function Zc(t) {
                        qc.call(this, t),
                          (this.panner = this.context.createPanner()),
                          this.panner.connect(this.gain);
                      }
                      function Kc(t, e) {
                        (this.analyser = t.context.createAnalyser()),
                          (this.analyser.fftSize = void 0 !== e ? e : 2048),
                          (this.data = new Uint8Array(
                            this.analyser.frequencyBinCount
                          )),
                          t.getOutput().connect(this.analyser);
                      }
                      function Jc(t, e, i) {
                        (this.binding = t), (this.valueSize = i);
                        var n,
                          r = Float64Array;
                        switch (e) {
                          case 'quaternion':
                            n = this._slerp;
                            break;
                          case 'string':
                          case 'bool':
                            (r = Array), (n = this._select);
                            break;
                          default:
                            n = this._lerp;
                        }
                        (this.buffer = new r(4 * i)),
                          (this._mixBufferRegion = n),
                          (this.cumulativeWeight = 0),
                          (this.useCount = 0),
                          (this.referenceCount = 0);
                      }
                      function $c(t, e, i) {
                        var n = i || tu.parseTrackName(e);
                        (this._targetGroup = t),
                          (this._bindings = t.subscribe_(e, n));
                      }
                      function tu(t, e, i) {
                        (this.path = e),
                          (this.parsedPath = i || tu.parseTrackName(e)),
                          (this.node =
                            tu.findNode(t, this.parsedPath.nodeName) || t),
                          (this.rootNode = t);
                      }
                      function eu(t) {
                        (this.uuid = le.generateUUID()),
                          (this._objects = Array.prototype.slice.call(
                            arguments
                          )),
                          (this.nCachedObjects_ = 0);
                        var e = {};
                        this._indicesByUUID = e;
                        for (var i = 0, n = arguments.length; i !== n; ++i)
                          e[arguments[i].uuid] = i;
                        (this._paths = []),
                          (this._parsedPaths = []),
                          (this._bindings = []),
                          (this._bindingsIndicesByPath = {});
                        var r = this;
                        this.stats = {
                          objects: {
                            get total() {
                              return r._objects.length;
                            },
                            get inUse() {
                              return this.total - r.nCachedObjects_;
                            }
                          },
                          get bindingsPerObject() {
                            return r._bindings.length;
                          }
                        };
                      }
                      function iu(t, e, i) {
                        (this._mixer = t),
                          (this._clip = e),
                          (this._localRoot = i || null);
                        for (
                          var n = e.tracks,
                            r = n.length,
                            a = new Array(r),
                            o = { endingStart: Kt, endingEnd: Kt },
                            s = 0;
                          s !== r;
                          ++s
                        ) {
                          var c = n[s].createInterpolant(null);
                          (a[s] = c), (c.settings = o);
                        }
                        (this._interpolantSettings = o),
                          (this._interpolants = a),
                          (this._propertyBindings = new Array(r)),
                          (this._cacheIndex = null),
                          (this._byClipCacheIndex = null),
                          (this._timeScaleInterpolant = null),
                          (this._weightInterpolant = null),
                          (this.loop = Zt),
                          (this._loopCount = -1),
                          (this._startTime = null),
                          (this.time = 0),
                          (this.timeScale = 1),
                          (this._effectiveTimeScale = 1),
                          (this.weight = 1),
                          (this._effectiveWeight = 1),
                          (this.repetitions = 1 / 0),
                          (this.paused = !1),
                          (this.enabled = !0),
                          (this.clampWhenFinished = !1),
                          (this.zeroSlopeAtStart = !0),
                          (this.zeroSlopeAtEnd = !0);
                      }
                      function nu(t) {
                        (this._root = t),
                          this._initMemoryManager(),
                          (this._accuIndex = 0),
                          (this.time = 0),
                          (this.timeScale = 1);
                      }
                      function ru(t) {
                        'string' == typeof t && (t = arguments[1]),
                          (this.value = t);
                      }
                      function au() {
                        Fr.call(this),
                          (this.type = 'InstancedBufferGeometry'),
                          (this.maxInstancedCount = void 0);
                      }
                      function ou(t, e, i, n) {
                        (this.uuid = le.generateUUID()),
                          (this.data = t),
                          (this.itemSize = e),
                          (this.offset = i),
                          (this.normalized = !0 === n);
                      }
                      function su(t, e) {
                        (this.uuid = le.generateUUID()),
                          (this.array = t),
                          (this.stride = e),
                          (this.count = void 0 !== t ? t.length / e : 0),
                          (this.dynamic = !1),
                          (this.updateRange = { offset: 0, count: -1 }),
                          (this.onUploadCallback = function() {}),
                          (this.version = 0);
                      }
                      function cu(t, e, i) {
                        su.call(this, t, e), (this.meshPerAttribute = i || 1);
                      }
                      function uu(t, e, i) {
                        Cr.call(this, t, e), (this.meshPerAttribute = i || 1);
                      }
                      function lu(t, e, i, n) {
                        (this.ray = new Wr(t, e)),
                          (this.near = i || 0),
                          (this.far = n || 1 / 0),
                          (this.params = {
                            Mesh: {},
                            Line: {},
                            LOD: {},
                            Points: { threshold: 1 },
                            Sprite: {}
                          }),
                          Object.defineProperties(this.params, {
                            PointCloud: {
                              get: function() {
                                return this.Points;
                              }
                            }
                          });
                      }
                      function hu(t, e) {
                        return t.distance - e.distance;
                      }
                      function du(t, e, i, n) {
                        if (!1 !== t.visible && (t.raycast(e, i), !0 === n))
                          for (
                            var r = t.children, a = 0, o = r.length;
                            a < o;
                            a++
                          )
                            du(r[a], e, i, !0);
                      }
                      function pu(t) {
                        (this.autoStart = void 0 === t || t),
                          (this.startTime = 0),
                          (this.oldTime = 0),
                          (this.elapsedTime = 0),
                          (this.running = !1);
                      }
                      function fu(t, e, i) {
                        return (
                          (this.radius = void 0 !== t ? t : 1),
                          (this.phi = void 0 !== e ? e : 0),
                          (this.theta = void 0 !== i ? i : 0),
                          this
                        );
                      }
                      function mu(t, e, i) {
                        return (
                          (this.radius = void 0 !== t ? t : 1),
                          (this.theta = void 0 !== e ? e : 0),
                          (this.y = void 0 !== i ? i : 0),
                          this
                        );
                      }
                      function gu(t) {
                        Rn.call(this),
                          (this.material = t),
                          (this.render = function(t) {});
                      }
                      function vu(t, e, i, n) {
                        (this.object = t), (this.size = void 0 !== e ? e : 1);
                        var r = void 0 !== i ? i : 16711680,
                          a = void 0 !== n ? n : 1,
                          o = 0,
                          s = this.object.geometry;
                        s && s.isGeometry
                          ? (o = 3 * s.faces.length)
                          : s &&
                            s.isBufferGeometry &&
                            (o = s.attributes.normal.count);
                        var c = new Fr(),
                          u = new kr(2 * o * 3, 3);
                        c.addAttribute('position', u),
                          Ga.call(this, c, new Ba({ color: r, linewidth: a })),
                          (this.matrixAutoUpdate = !1),
                          this.update();
                      }
                      function yu(t, e) {
                        Rn.call(this),
                          (this.light = t),
                          this.light.updateMatrixWorld(),
                          (this.matrix = t.matrixWorld),
                          (this.matrixAutoUpdate = !1),
                          (this.color = e);
                        for (
                          var i = new Fr(),
                            n = [
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              1,
                              0,
                              1,
                              0,
                              0,
                              0,
                              -1,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              1,
                              1,
                              0,
                              0,
                              0,
                              0,
                              -1,
                              1
                            ],
                            r = 0,
                            a = 1;
                          r < 32;
                          r++, a++
                        ) {
                          var o = r / 32 * Math.PI * 2,
                            s = a / 32 * Math.PI * 2;
                          n.push(
                            Math.cos(o),
                            Math.sin(o),
                            1,
                            Math.cos(s),
                            Math.sin(s),
                            1
                          );
                        }
                        i.addAttribute('position', new kr(n, 3));
                        var c = new Ba({ fog: !1 });
                        (this.cone = new Ga(i, c)),
                          this.add(this.cone),
                          this.update();
                      }
                      function Mu(t) {
                        for (
                          var e = (function t(e) {
                              var i = [];
                              e && e.isBone && i.push(e);
                              for (var n = 0; n < e.children.length; n++)
                                i.push.apply(i, t(e.children[n]));
                              return i;
                            })(t),
                            i = new Fr(),
                            n = [],
                            r = [],
                            a = new Ni(0, 0, 1),
                            o = new Ni(0, 1, 0),
                            s = 0;
                          s < e.length;
                          s++
                        ) {
                          var c = e[s];
                          c.parent &&
                            c.parent.isBone &&
                            (n.push(0, 0, 0),
                            n.push(0, 0, 0),
                            r.push(a.r, a.g, a.b),
                            r.push(o.r, o.g, o.b));
                        }
                        i.addAttribute('position', new kr(n, 3)),
                          i.addAttribute('color', new kr(r, 3));
                        var u = new Ba({
                          vertexColors: w,
                          depthTest: !1,
                          depthWrite: !1,
                          transparent: !0
                        });
                        Ga.call(this, i, u),
                          (this.root = t),
                          (this.bones = e),
                          (this.matrix = t.matrixWorld),
                          (this.matrixAutoUpdate = !1),
                          this.onBeforeRender();
                      }
                      function wu(t, e, i) {
                        (this.light = t),
                          this.light.updateMatrixWorld(),
                          (this.color = i);
                        var n = new Ao(e, 4, 2),
                          r = new Hr({ wireframe: !0, fog: !1 });
                        Zr.call(this, n, r),
                          (this.matrix = this.light.matrixWorld),
                          (this.matrixAutoUpdate = !1),
                          this.update();
                      }
                      function xu(t, e) {
                        Rn.call(this),
                          (this.light = t),
                          this.light.updateMatrixWorld(),
                          (this.matrix = t.matrixWorld),
                          (this.matrixAutoUpdate = !1),
                          (this.color = e);
                        var i = new Ba({ fog: !1 }),
                          n = new Fr();
                        n.addAttribute(
                          'position',
                          new Cr(new Float32Array(15), 3)
                        ),
                          (this.line = new Fa(n, i)),
                          this.add(this.line),
                          this.update();
                      }
                      function Au(t, e, i) {
                        Rn.call(this),
                          (this.light = t),
                          this.light.updateMatrixWorld(),
                          (this.matrix = t.matrixWorld),
                          (this.matrixAutoUpdate = !1),
                          (this.color = i);
                        var n = new ro(e);
                        n.rotateY(0.5 * Math.PI),
                          (this.material = new Hr({ wireframe: !0, fog: !1 })),
                          void 0 === this.color &&
                            (this.material.vertexColors = w);
                        var r = n.getAttribute('position'),
                          a = new Float32Array(3 * r.count);
                        n.addAttribute('color', new Cr(a, 3)),
                          this.add(new Zr(n, this.material)),
                          this.update();
                      }
                      function Eu(t, e, i, n) {
                        (t = t || 10),
                          (e = e || 10),
                          (i = new Ni(void 0 !== i ? i : 4473924)),
                          (n = new Ni(void 0 !== n ? n : 8947848));
                        for (
                          var r = e / 2,
                            a = t / e,
                            o = t / 2,
                            s = [],
                            c = [],
                            u = 0,
                            l = 0,
                            h = -o;
                          u <= e;
                          u++, h += a
                        ) {
                          s.push(-o, 0, h, o, 0, h), s.push(h, 0, -o, h, 0, o);
                          var d = u === r ? i : n;
                          d.toArray(c, l),
                            (l += 3),
                            d.toArray(c, l),
                            (l += 3),
                            d.toArray(c, l),
                            (l += 3),
                            d.toArray(c, l),
                            (l += 3);
                        }
                        var p = new Fr();
                        p.addAttribute('position', new kr(s, 3)),
                          p.addAttribute('color', new kr(c, 3));
                        var f = new Ba({ vertexColors: w });
                        Ga.call(this, p, f);
                      }
                      function bu(t, e, i, n, r, a) {
                        (t = t || 10),
                          (e = e || 16),
                          (i = i || 8),
                          (n = n || 64),
                          (r = new Ni(void 0 !== r ? r : 4473924)),
                          (a = new Ni(void 0 !== a ? a : 8947848));
                        var o,
                          s,
                          c,
                          u,
                          l,
                          h,
                          d,
                          p = [],
                          f = [];
                        for (u = 0; u <= e; u++)
                          (c = u / e * (2 * Math.PI)),
                            (o = Math.sin(c) * t),
                            (s = Math.cos(c) * t),
                            p.push(0, 0, 0),
                            p.push(o, 0, s),
                            (d = 1 & u ? r : a),
                            f.push(d.r, d.g, d.b),
                            f.push(d.r, d.g, d.b);
                        for (u = 0; u <= i; u++)
                          for (
                            d = 1 & u ? r : a, h = t - t / i * u, l = 0;
                            l < n;
                            l++
                          )
                            (c = l / n * (2 * Math.PI)),
                              (o = Math.sin(c) * h),
                              (s = Math.cos(c) * h),
                              p.push(o, 0, s),
                              f.push(d.r, d.g, d.b),
                              (c = (l + 1) / n * (2 * Math.PI)),
                              (o = Math.sin(c) * h),
                              (s = Math.cos(c) * h),
                              p.push(o, 0, s),
                              f.push(d.r, d.g, d.b);
                        var m = new Fr();
                        m.addAttribute('position', new kr(p, 3)),
                          m.addAttribute('color', new kr(f, 3));
                        var g = new Ba({ vertexColors: w });
                        Ga.call(this, m, g);
                      }
                      function Tu(t, e, i, n) {
                        (this.object = t), (this.size = void 0 !== e ? e : 1);
                        var r = void 0 !== i ? i : 16776960,
                          a = void 0 !== n ? n : 1,
                          o = 0,
                          s = this.object.geometry;
                        s && s.isGeometry && (o = s.faces.length);
                        var c = new Fr(),
                          u = new kr(2 * o * 3, 3);
                        c.addAttribute('position', u),
                          Ga.call(this, c, new Ba({ color: r, linewidth: a })),
                          (this.matrixAutoUpdate = !1),
                          this.update();
                      }
                      function Lu(t, e, i) {
                        Rn.call(this),
                          (this.light = t),
                          this.light.updateMatrixWorld(),
                          (this.matrix = t.matrixWorld),
                          (this.matrixAutoUpdate = !1),
                          (this.color = i),
                          void 0 === e && (e = 1);
                        var n = new Fr();
                        n.addAttribute(
                          'position',
                          new kr(
                            [-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0],
                            3
                          )
                        );
                        var r = new Ba({ fog: !1 });
                        (this.lightPlane = new Fa(n, r)),
                          this.add(this.lightPlane),
                          (n = new Fr()).addAttribute(
                            'position',
                            new kr([0, 0, 0, 0, 0, 1], 3)
                          ),
                          (this.targetLine = new Fa(n, r)),
                          this.add(this.targetLine),
                          this.update();
                      }
                      function Nu(t) {
                        var e = new Fr(),
                          i = new Ba({ color: 16777215, vertexColors: M }),
                          n = [],
                          r = [],
                          a = {},
                          o = new Ni(16755200),
                          s = new Ni(16711680),
                          c = new Ni(43775),
                          u = new Ni(16777215),
                          l = new Ni(3355443);
                        function h(t, e, i) {
                          d(t, i), d(e, i);
                        }
                        function d(t, e) {
                          n.push(0, 0, 0),
                            r.push(e.r, e.g, e.b),
                            void 0 === a[t] && (a[t] = []),
                            a[t].push(n.length / 3 - 1);
                        }
                        h('n1', 'n2', o),
                          h('n2', 'n4', o),
                          h('n4', 'n3', o),
                          h('n3', 'n1', o),
                          h('f1', 'f2', o),
                          h('f2', 'f4', o),
                          h('f4', 'f3', o),
                          h('f3', 'f1', o),
                          h('n1', 'f1', o),
                          h('n2', 'f2', o),
                          h('n3', 'f3', o),
                          h('n4', 'f4', o),
                          h('p', 'n1', s),
                          h('p', 'n2', s),
                          h('p', 'n3', s),
                          h('p', 'n4', s),
                          h('u1', 'u2', c),
                          h('u2', 'u3', c),
                          h('u3', 'u1', c),
                          h('c', 't', u),
                          h('p', 'c', l),
                          h('cn1', 'cn2', l),
                          h('cn3', 'cn4', l),
                          h('cf1', 'cf2', l),
                          h('cf3', 'cf4', l),
                          e.addAttribute('position', new kr(n, 3)),
                          e.addAttribute('color', new kr(r, 3)),
                          Ga.call(this, e, i),
                          (this.camera = t),
                          this.camera.updateProjectionMatrix &&
                            this.camera.updateProjectionMatrix(),
                          (this.matrix = t.matrixWorld),
                          (this.matrixAutoUpdate = !1),
                          (this.pointMap = a),
                          this.update();
                      }
                      function Du(t, e) {
                        (this.object = t), void 0 === e && (e = 16776960);
                        var i = new Uint16Array([
                            0,
                            1,
                            1,
                            2,
                            2,
                            3,
                            3,
                            0,
                            4,
                            5,
                            5,
                            6,
                            6,
                            7,
                            7,
                            4,
                            0,
                            4,
                            1,
                            5,
                            2,
                            6,
                            3,
                            7
                          ]),
                          n = new Float32Array(24),
                          r = new Fr();
                        r.setIndex(new Cr(i, 1)),
                          r.addAttribute('position', new Cr(n, 3)),
                          Ga.call(this, r, new Ba({ color: e })),
                          (this.matrixAutoUpdate = !1),
                          this.update();
                      }
                      function Cu(t, e) {
                        (this.type = 'Box3Helper'), (this.box = t);
                        var i = void 0 !== e ? e : 16776960,
                          n = new Uint16Array([
                            0,
                            1,
                            1,
                            2,
                            2,
                            3,
                            3,
                            0,
                            4,
                            5,
                            5,
                            6,
                            6,
                            7,
                            7,
                            4,
                            0,
                            4,
                            1,
                            5,
                            2,
                            6,
                            3,
                            7
                          ]),
                          r = new Fr();
                        r.setIndex(new Cr(n, 1)),
                          r.addAttribute(
                            'position',
                            new kr(
                              [
                                1,
                                1,
                                1,
                                -1,
                                1,
                                1,
                                -1,
                                -1,
                                1,
                                1,
                                -1,
                                1,
                                1,
                                1,
                                -1,
                                -1,
                                1,
                                -1,
                                -1,
                                -1,
                                -1,
                                1,
                                -1,
                                -1
                              ],
                              3
                            )
                          ),
                          Ga.call(this, r, new Ba({ color: i })),
                          this.geometry.computeBoundingSphere(),
                          this.onBeforeRender();
                      }
                      function Su(t, e, i) {
                        (this.type = 'PlaneHelper'),
                          (this.plane = t),
                          (this.size = void 0 === e ? 1 : e);
                        var n = void 0 !== i ? i : 16776960,
                          r = new Fr();
                        r.addAttribute(
                          'position',
                          new kr(
                            [
                              1,
                              -1,
                              1,
                              -1,
                              1,
                              1,
                              -1,
                              -1,
                              1,
                              1,
                              1,
                              1,
                              -1,
                              1,
                              1,
                              -1,
                              -1,
                              1,
                              1,
                              -1,
                              1,
                              1,
                              1,
                              1,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0
                            ],
                            3
                          )
                        ),
                          r.computeBoundingSphere(),
                          Fa.call(this, r, new Ba({ color: n }));
                        var a = new Fr();
                        a.addAttribute(
                          'position',
                          new kr(
                            [
                              1,
                              1,
                              1,
                              -1,
                              1,
                              1,
                              -1,
                              -1,
                              1,
                              1,
                              1,
                              1,
                              -1,
                              -1,
                              1,
                              1,
                              -1,
                              1
                            ],
                            3
                          )
                        ),
                          a.computeBoundingSphere(),
                          this.add(
                            new Zr(
                              a,
                              new Hr({
                                color: n,
                                opacity: 0.2,
                                transparent: !0,
                                depthWrite: !1
                              })
                            )
                          ),
                          this.onBeforeRender();
                      }
                      function Iu(t, e, i, n, r, a) {
                        Rn.call(this),
                          void 0 === n && (n = 16776960),
                          void 0 === i && (i = 1),
                          void 0 === r && (r = 0.2 * i),
                          void 0 === a && (a = 0.2 * r),
                          void 0 === Bc &&
                            ((Bc = new Fr()).addAttribute(
                              'position',
                              new kr([0, 0, 0, 0, 1, 0], 3)
                            ),
                            (Fc = new Io(0, 0.5, 1, 5, 1)).translate(
                              0,
                              -0.5,
                              0
                            )),
                          this.position.copy(e),
                          (this.line = new Fa(Bc, new Ba({ color: n }))),
                          (this.line.matrixAutoUpdate = !1),
                          this.add(this.line),
                          (this.cone = new Zr(Fc, new Hr({ color: n }))),
                          (this.cone.matrixAutoUpdate = !1),
                          this.add(this.cone),
                          this.setDirection(t),
                          this.setLength(i, r, a);
                      }
                      function _u(t) {
                        var e = [
                            0,
                            0,
                            0,
                            (t = t || 1),
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            t,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            t
                          ],
                          i = new Fr();
                        i.addAttribute('position', new kr(e, 3)),
                          i.addAttribute(
                            'color',
                            new kr(
                              [
                                1,
                                0,
                                0,
                                1,
                                0.6,
                                0,
                                0,
                                1,
                                0,
                                0.6,
                                1,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0.6,
                                1
                              ],
                              3
                            )
                          );
                        var n = new Ba({ vertexColors: w });
                        Ga.call(this, i, n);
                      }
                      function ju() {
                        var t = 0,
                          e = 0,
                          i = 0,
                          n = 0;
                        function r(r, a, o, s) {
                          (t = r),
                            (e = o),
                            (i = -3 * r + 3 * a - 2 * o - s),
                            (n = 2 * r - 2 * a + o + s);
                        }
                        return {
                          initCatmullRom: function(t, e, i, n, a) {
                            r(e, i, a * (i - t), a * (n - e));
                          },
                          initNonuniformCatmullRom: function(
                            t,
                            e,
                            i,
                            n,
                            a,
                            o,
                            s
                          ) {
                            var c =
                                (e - t) / a - (i - t) / (a + o) + (i - e) / o,
                              u = (i - e) / o - (n - e) / (o + s) + (n - i) / s;
                            r(e, i, (c *= o), (u *= o));
                          },
                          calc: function(r) {
                            var a = r * r;
                            return t + e * r + i * a + n * (a * r);
                          }
                        };
                      }
                      Object.assign(Qc.prototype, {
                        load: function(t, e, i, n) {
                          var r = new Zo(this.manager);
                          r.setResponseType('arraybuffer'),
                            r.load(
                              t,
                              function(t) {
                                Yc.getContext().decodeAudioData(t, function(t) {
                                  e(t);
                                });
                              },
                              i,
                              n
                            );
                        }
                      }),
                        Object.assign(Hc.prototype, {
                          update: ((pc = new Ue()),
                          (fc = new Ue()),
                          function(t) {
                            if (
                              ac !== this ||
                              oc !== t.focus ||
                              sc !== t.fov ||
                              cc !== t.aspect * this.aspect ||
                              uc !== t.near ||
                              lc !== t.far ||
                              hc !== t.zoom ||
                              dc !== this.eyeSep
                            ) {
                              (ac = this),
                                (oc = t.focus),
                                (sc = t.fov),
                                (cc = t.aspect * this.aspect),
                                (uc = t.near),
                                (lc = t.far),
                                (hc = t.zoom);
                              var e,
                                i,
                                n = t.projectionMatrix.clone(),
                                r = (dc = this.eyeSep / 2) * uc / oc,
                                a = uc * Math.tan(le.DEG2RAD * sc * 0.5) / hc;
                              (fc.elements[12] = -dc),
                                (pc.elements[12] = dc),
                                (e = -a * cc + r),
                                (i = a * cc + r),
                                (n.elements[0] = 2 * uc / (i - e)),
                                (n.elements[8] = (i + e) / (i - e)),
                                this.cameraL.projectionMatrix.copy(n),
                                (e = -a * cc - r),
                                (i = a * cc - r),
                                (n.elements[0] = 2 * uc / (i - e)),
                                (n.elements[8] = (i + e) / (i - e)),
                                this.cameraR.projectionMatrix.copy(n);
                            }
                            this.cameraL.matrixWorld
                              .copy(t.matrixWorld)
                              .multiply(fc),
                              this.cameraR.matrixWorld
                                .copy(t.matrixWorld)
                                .multiply(pc);
                          })
                        }),
                        (Wc.prototype = Object.create(Rn.prototype)),
                        (Wc.prototype.constructor = Wc),
                        (Xc.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: Xc,
                            getInput: function() {
                              return this.gain;
                            },
                            removeFilter: function() {
                              null !== this.filter &&
                                (this.gain.disconnect(this.filter),
                                this.filter.disconnect(
                                  this.context.destination
                                ),
                                this.gain.connect(this.context.destination),
                                (this.filter = null));
                            },
                            getFilter: function() {
                              return this.filter;
                            },
                            setFilter: function(t) {
                              null !== this.filter
                                ? (this.gain.disconnect(this.filter),
                                  this.filter.disconnect(
                                    this.context.destination
                                  ))
                                : this.gain.disconnect(
                                    this.context.destination
                                  ),
                                (this.filter = t),
                                this.gain.connect(this.filter),
                                this.filter.connect(this.context.destination);
                            },
                            getMasterVolume: function() {
                              return this.gain.gain.value;
                            },
                            setMasterVolume: function(t) {
                              this.gain.gain.value = t;
                            },
                            updateMatrixWorld: ((mc = new ke()),
                            (gc = new Re()),
                            (vc = new ke()),
                            (yc = new ke()),
                            function(t) {
                              Rn.prototype.updateMatrixWorld.call(this, t);
                              var e = this.context.listener,
                                i = this.up;
                              this.matrixWorld.decompose(mc, gc, vc),
                                yc.set(0, 0, -1).applyQuaternion(gc),
                                e.positionX
                                  ? (e.positionX.setValueAtTime(
                                      mc.x,
                                      this.context.currentTime
                                    ),
                                    e.positionY.setValueAtTime(
                                      mc.y,
                                      this.context.currentTime
                                    ),
                                    e.positionZ.setValueAtTime(
                                      mc.z,
                                      this.context.currentTime
                                    ),
                                    e.forwardX.setValueAtTime(
                                      yc.x,
                                      this.context.currentTime
                                    ),
                                    e.forwardY.setValueAtTime(
                                      yc.y,
                                      this.context.currentTime
                                    ),
                                    e.forwardZ.setValueAtTime(
                                      yc.z,
                                      this.context.currentTime
                                    ),
                                    e.upX.setValueAtTime(
                                      i.x,
                                      this.context.currentTime
                                    ),
                                    e.upY.setValueAtTime(
                                      i.y,
                                      this.context.currentTime
                                    ),
                                    e.upZ.setValueAtTime(
                                      i.z,
                                      this.context.currentTime
                                    ))
                                  : (e.setPosition(mc.x, mc.y, mc.z),
                                    e.setOrientation(
                                      yc.x,
                                      yc.y,
                                      yc.z,
                                      i.x,
                                      i.y,
                                      i.z
                                    ));
                            })
                          }
                        )),
                        (qc.prototype = Object.assign(
                          Object.create(Rn.prototype),
                          {
                            constructor: qc,
                            getOutput: function() {
                              return this.gain;
                            },
                            setNodeSource: function(t) {
                              return (
                                (this.hasPlaybackControl = !1),
                                (this.sourceType = 'audioNode'),
                                (this.source = t),
                                this.connect(),
                                this
                              );
                            },
                            setBuffer: function(t) {
                              return (
                                (this.buffer = t),
                                (this.sourceType = 'buffer'),
                                this.autoplay && this.play(),
                                this
                              );
                            },
                            play: function() {
                              if (
                                !0 !== this.isPlaying &&
                                !1 !== this.hasPlaybackControl
                              ) {
                                var t = this.context.createBufferSource();
                                return (
                                  (t.buffer = this.buffer),
                                  (t.loop = this.loop),
                                  (t.onended = this.onEnded.bind(this)),
                                  t.playbackRate.setValueAtTime(
                                    this.playbackRate,
                                    this.startTime
                                  ),
                                  t.start(0, this.startTime),
                                  (this.isPlaying = !0),
                                  (this.source = t),
                                  this.connect()
                                );
                              }
                            },
                            pause: function() {
                              if (!1 !== this.hasPlaybackControl)
                                return (
                                  this.source.stop(),
                                  (this.startTime = this.context.currentTime),
                                  (this.isPlaying = !1),
                                  this
                                );
                            },
                            stop: function() {
                              if (!1 !== this.hasPlaybackControl)
                                return (
                                  this.source.stop(),
                                  (this.startTime = 0),
                                  (this.isPlaying = !1),
                                  this
                                );
                            },
                            connect: function() {
                              if (this.filters.length > 0) {
                                this.source.connect(this.filters[0]);
                                for (
                                  var t = 1, e = this.filters.length;
                                  t < e;
                                  t++
                                )
                                  this.filters[t - 1].connect(this.filters[t]);
                                this.filters[this.filters.length - 1].connect(
                                  this.getOutput()
                                );
                              } else this.source.connect(this.getOutput());
                              return this;
                            },
                            disconnect: function() {
                              if (this.filters.length > 0) {
                                this.source.disconnect(this.filters[0]);
                                for (
                                  var t = 1, e = this.filters.length;
                                  t < e;
                                  t++
                                )
                                  this.filters[t - 1].disconnect(
                                    this.filters[t]
                                  );
                                this.filters[
                                  this.filters.length - 1
                                ].disconnect(this.getOutput());
                              } else this.source.disconnect(this.getOutput());
                              return this;
                            },
                            getFilters: function() {
                              return this.filters;
                            },
                            setFilters: function(t) {
                              return (
                                t || (t = []),
                                !0 === this.isPlaying
                                  ? (this.disconnect(),
                                    (this.filters = t),
                                    this.connect())
                                  : (this.filters = t),
                                this
                              );
                            },
                            getFilter: function() {
                              return this.getFilters()[0];
                            },
                            setFilter: function(t) {
                              return this.setFilters(t ? [t] : []);
                            },
                            setPlaybackRate: function(t) {
                              if (!1 !== this.hasPlaybackControl)
                                return (
                                  (this.playbackRate = t),
                                  !0 === this.isPlaying &&
                                    this.source.playbackRate.setValueAtTime(
                                      this.playbackRate,
                                      this.context.currentTime
                                    ),
                                  this
                                );
                            },
                            getPlaybackRate: function() {
                              return this.playbackRate;
                            },
                            onEnded: function() {
                              this.isPlaying = !1;
                            },
                            getLoop: function() {
                              return (
                                !1 !== this.hasPlaybackControl && this.loop
                              );
                            },
                            setLoop: function(t) {
                              if (!1 !== this.hasPlaybackControl)
                                return (
                                  (this.loop = t),
                                  !0 === this.isPlaying &&
                                    (this.source.loop = this.loop),
                                  this
                                );
                            },
                            getVolume: function() {
                              return this.gain.gain.value;
                            },
                            setVolume: function(t) {
                              return (this.gain.gain.value = t), this;
                            }
                          }
                        )),
                        (Zc.prototype = Object.assign(
                          Object.create(qc.prototype),
                          {
                            constructor: Zc,
                            getOutput: function() {
                              return this.panner;
                            },
                            getRefDistance: function() {
                              return this.panner.refDistance;
                            },
                            setRefDistance: function(t) {
                              this.panner.refDistance = t;
                            },
                            getRolloffFactor: function() {
                              return this.panner.rolloffFactor;
                            },
                            setRolloffFactor: function(t) {
                              this.panner.rolloffFactor = t;
                            },
                            getDistanceModel: function() {
                              return this.panner.distanceModel;
                            },
                            setDistanceModel: function(t) {
                              this.panner.distanceModel = t;
                            },
                            getMaxDistance: function() {
                              return this.panner.maxDistance;
                            },
                            setMaxDistance: function(t) {
                              this.panner.maxDistance = t;
                            },
                            updateMatrixWorld: ((Mc = new ke()),
                            function(t) {
                              Rn.prototype.updateMatrixWorld.call(this, t),
                                Mc.setFromMatrixPosition(this.matrixWorld),
                                this.panner.setPosition(Mc.x, Mc.y, Mc.z);
                            })
                          }
                        )),
                        Object.assign(Kc.prototype, {
                          getFrequencyData: function() {
                            return (
                              this.analyser.getByteFrequencyData(this.data),
                              this.data
                            );
                          },
                          getAverageFrequency: function() {
                            for (
                              var t = 0, e = this.getFrequencyData(), i = 0;
                              i < e.length;
                              i++
                            )
                              t += e[i];
                            return t / e.length;
                          }
                        }),
                        Object.assign(Jc.prototype, {
                          accumulate: function(t, e) {
                            var i = this.buffer,
                              n = this.valueSize,
                              r = t * n + n,
                              a = this.cumulativeWeight;
                            if (0 === a) {
                              for (var o = 0; o !== n; ++o) i[r + o] = i[o];
                              a = e;
                            } else {
                              var s = e / (a += e);
                              this._mixBufferRegion(i, r, 0, s, n);
                            }
                            this.cumulativeWeight = a;
                          },
                          apply: function(t) {
                            var e = this.valueSize,
                              i = this.buffer,
                              n = t * e + e,
                              r = this.cumulativeWeight,
                              a = this.binding;
                            if (((this.cumulativeWeight = 0), r < 1)) {
                              var o = 3 * e;
                              this._mixBufferRegion(i, n, o, 1 - r, e);
                            }
                            for (var s = e, c = e + e; s !== c; ++s)
                              if (i[s] !== i[s + e]) {
                                a.setValue(i, n);
                                break;
                              }
                          },
                          saveOriginalState: function() {
                            var t = this.binding,
                              e = this.buffer,
                              i = this.valueSize,
                              n = 3 * i;
                            t.getValue(e, n);
                            for (var r = i, a = n; r !== a; ++r)
                              e[r] = e[n + r % i];
                            this.cumulativeWeight = 0;
                          },
                          restoreOriginalState: function() {
                            var t = 3 * this.valueSize;
                            this.binding.setValue(this.buffer, t);
                          },
                          _select: function(t, e, i, n, r) {
                            if (n >= 0.5)
                              for (var a = 0; a !== r; ++a) t[e + a] = t[i + a];
                          },
                          _slerp: function(t, e, i, n) {
                            Re.slerpFlat(t, e, t, e, t, i, n);
                          },
                          _lerp: function(t, e, i, n, r) {
                            for (var a = 1 - n, o = 0; o !== r; ++o) {
                              var s = e + o;
                              t[s] = t[s] * a + t[i + o] * n;
                            }
                          }
                        }),
                        Object.assign($c.prototype, {
                          getValue: function(t, e) {
                            this.bind();
                            var i = this._targetGroup.nCachedObjects_,
                              n = this._bindings[i];
                            void 0 !== n && n.getValue(t, e);
                          },
                          setValue: function(t, e) {
                            for (
                              var i = this._bindings,
                                n = this._targetGroup.nCachedObjects_,
                                r = i.length;
                              n !== r;
                              ++n
                            )
                              i[n].setValue(t, e);
                          },
                          bind: function() {
                            for (
                              var t = this._bindings,
                                e = this._targetGroup.nCachedObjects_,
                                i = t.length;
                              e !== i;
                              ++e
                            )
                              t[e].bind();
                          },
                          unbind: function() {
                            for (
                              var t = this._bindings,
                                e = this._targetGroup.nCachedObjects_,
                                i = t.length;
                              e !== i;
                              ++e
                            )
                              t[e].unbind();
                          }
                        }),
                        Object.assign(tu, {
                          Composite: $c,
                          create: function(t, e, i) {
                            return t && t.isAnimationObjectGroup
                              ? new tu.Composite(t, e, i)
                              : new tu(t, e, i);
                          },
                          sanitizeNodeName: function(t) {
                            return t.replace(/\s/g, '_').replace(/[^\w-]/g, '');
                          },
                          parseTrackName: ((wc = new RegExp(
                            '^' +
                              /((?:[\w-]+[\/:])*)/.source +
                              /([\w-\.]+)?/.source +
                              /(?:\.([\w-]+)(?:\[(.+)\])?)?/.source +
                              /\.([\w-]+)(?:\[(.+)\])?/.source +
                              '$'
                          )),
                          (xc = ['material', 'materials', 'bones']),
                          function(t) {
                            var e = wc.exec(t);
                            if (!e)
                              throw new Error(
                                'PropertyBinding: Cannot parse trackName: ' + t
                              );
                            var i = {
                                nodeName: e[2],
                                objectName: e[3],
                                objectIndex: e[4],
                                propertyName: e[5],
                                propertyIndex: e[6]
                              },
                              n = i.nodeName && i.nodeName.lastIndexOf('.');
                            if (void 0 !== n && -1 !== n) {
                              var r = i.nodeName.substring(n + 1);
                              -1 !== xc.indexOf(r) &&
                                ((i.nodeName = i.nodeName.substring(0, n)),
                                (i.objectName = r));
                            }
                            if (
                              null === i.propertyName ||
                              0 === i.propertyName.length
                            )
                              throw new Error(
                                'PropertyBinding: can not parse propertyName from trackName: ' +
                                  t
                              );
                            return i;
                          }),
                          findNode: function(t, e) {
                            if (
                              !e ||
                              '' === e ||
                              'root' === e ||
                              '.' === e ||
                              -1 === e ||
                              e === t.name ||
                              e === t.uuid
                            )
                              return t;
                            if (t.skeleton) {
                              var i = (function(t) {
                                for (var i = 0; i < t.bones.length; i++) {
                                  var n = t.bones[i];
                                  if (n.name === e) return n;
                                }
                                return null;
                              })(t.skeleton);
                              if (i) return i;
                            }
                            if (t.children) {
                              var n = function(t) {
                                  for (var i = 0; i < t.length; i++) {
                                    var r = t[i];
                                    if (r.name === e || r.uuid === e) return r;
                                    var a = n(r.children);
                                    if (a) return a;
                                  }
                                  return null;
                                },
                                r = n(t.children);
                              if (r) return r;
                            }
                            return null;
                          }
                        }),
                        Object.assign(tu.prototype, {
                          _getValue_unavailable: function() {},
                          _setValue_unavailable: function() {},
                          BindingType: {
                            Direct: 0,
                            EntireArray: 1,
                            ArrayElement: 2,
                            HasFromToArray: 3
                          },
                          Versioning: {
                            None: 0,
                            NeedsUpdate: 1,
                            MatrixWorldNeedsUpdate: 2
                          },
                          GetterByBindingType: [
                            function(t, e) {
                              t[e] = this.node[this.propertyName];
                            },
                            function(t, e) {
                              for (
                                var i = this.resolvedProperty,
                                  n = 0,
                                  r = i.length;
                                n !== r;
                                ++n
                              )
                                t[e++] = i[n];
                            },
                            function(t, e) {
                              t[e] = this.resolvedProperty[this.propertyIndex];
                            },
                            function(t, e) {
                              this.resolvedProperty.toArray(t, e);
                            }
                          ],
                          SetterByBindingTypeAndVersioning: [
                            [
                              function(t, e) {
                                this.node[this.propertyName] = t[e];
                              },
                              function(t, e) {
                                (this.node[this.propertyName] = t[e]),
                                  (this.targetObject.needsUpdate = !0);
                              },
                              function(t, e) {
                                (this.node[this.propertyName] = t[e]),
                                  (this.targetObject.matrixWorldNeedsUpdate = !0);
                              }
                            ],
                            [
                              function(t, e) {
                                for (
                                  var i = this.resolvedProperty,
                                    n = 0,
                                    r = i.length;
                                  n !== r;
                                  ++n
                                )
                                  i[n] = t[e++];
                              },
                              function(t, e) {
                                for (
                                  var i = this.resolvedProperty,
                                    n = 0,
                                    r = i.length;
                                  n !== r;
                                  ++n
                                )
                                  i[n] = t[e++];
                                this.targetObject.needsUpdate = !0;
                              },
                              function(t, e) {
                                for (
                                  var i = this.resolvedProperty,
                                    n = 0,
                                    r = i.length;
                                  n !== r;
                                  ++n
                                )
                                  i[n] = t[e++];
                                this.targetObject.matrixWorldNeedsUpdate = !0;
                              }
                            ],
                            [
                              function(t, e) {
                                this.resolvedProperty[this.propertyIndex] =
                                  t[e];
                              },
                              function(t, e) {
                                (this.resolvedProperty[this.propertyIndex] =
                                  t[e]),
                                  (this.targetObject.needsUpdate = !0);
                              },
                              function(t, e) {
                                (this.resolvedProperty[this.propertyIndex] =
                                  t[e]),
                                  (this.targetObject.matrixWorldNeedsUpdate = !0);
                              }
                            ],
                            [
                              function(t, e) {
                                this.resolvedProperty.fromArray(t, e);
                              },
                              function(t, e) {
                                this.resolvedProperty.fromArray(t, e),
                                  (this.targetObject.needsUpdate = !0);
                              },
                              function(t, e) {
                                this.resolvedProperty.fromArray(t, e),
                                  (this.targetObject.matrixWorldNeedsUpdate = !0);
                              }
                            ]
                          ],
                          getValue: function(t, e) {
                            this.bind(), this.getValue(t, e);
                          },
                          setValue: function(t, e) {
                            this.bind(), this.setValue(t, e);
                          },
                          bind: function() {
                            var t = this.node,
                              e = this.parsedPath,
                              i = e.objectName,
                              n = e.propertyName,
                              r = e.propertyIndex;
                            if (
                              (t ||
                                ((t =
                                  tu.findNode(this.rootNode, e.nodeName) ||
                                  this.rootNode),
                                (this.node = t)),
                              (this.getValue = this._getValue_unavailable),
                              (this.setValue = this._setValue_unavailable),
                              t)
                            ) {
                              if (i) {
                                var a = e.objectIndex;
                                switch (i) {
                                  case 'materials':
                                    if (!t.material) return;
                                    if (!t.material.materials) return;
                                    t = t.material.materials;
                                    break;
                                  case 'bones':
                                    if (!t.skeleton) return;
                                    t = t.skeleton.bones;
                                    for (var o = 0; o < t.length; o++)
                                      if (t[o].name === a) {
                                        a = o;
                                        break;
                                      }
                                    break;
                                  default:
                                    if (void 0 === t[i]) return;
                                    t = t[i];
                                }
                                if (void 0 !== a) {
                                  if (void 0 === t[a]) return;
                                  t = t[a];
                                }
                              }
                              var s = t[n];
                              if (void 0 !== s) {
                                var c = this.Versioning.None;
                                void 0 !== t.needsUpdate
                                  ? ((c = this.Versioning.NeedsUpdate),
                                    (this.targetObject = t))
                                  : void 0 !== t.matrixWorldNeedsUpdate &&
                                    ((c = this.Versioning
                                      .MatrixWorldNeedsUpdate),
                                    (this.targetObject = t));
                                var u = this.BindingType.Direct;
                                if (void 0 !== r) {
                                  if ('morphTargetInfluences' === n) {
                                    if (!t.geometry) return;
                                    if (t.geometry.isBufferGeometry) {
                                      if (!t.geometry.morphAttributes) return;
                                      for (
                                        o = 0;
                                        o <
                                        this.node.geometry.morphAttributes
                                          .position.length;
                                        o++
                                      )
                                        if (
                                          t.geometry.morphAttributes.position[o]
                                            .name === r
                                        ) {
                                          r = o;
                                          break;
                                        }
                                    } else {
                                      if (!t.geometry.morphTargets) return;
                                      for (
                                        o = 0;
                                        o <
                                        this.node.geometry.morphTargets.length;
                                        o++
                                      )
                                        if (
                                          t.geometry.morphTargets[o].name === r
                                        ) {
                                          r = o;
                                          break;
                                        }
                                    }
                                  }
                                  (u = this.BindingType.ArrayElement),
                                    (this.resolvedProperty = s),
                                    (this.propertyIndex = r);
                                } else
                                  void 0 !== s.fromArray && void 0 !== s.toArray
                                    ? ((u = this.BindingType.HasFromToArray),
                                      (this.resolvedProperty = s))
                                    : Array.isArray(s)
                                      ? ((u = this.BindingType.EntireArray),
                                        (this.resolvedProperty = s))
                                      : (this.propertyName = n);
                                (this.getValue = this.GetterByBindingType[u]),
                                  (this.setValue = this.SetterByBindingTypeAndVersioning[
                                    u
                                  ][c]);
                              } else e.nodeName;
                            }
                          },
                          unbind: function() {
                            (this.node = null),
                              (this.getValue = this._getValue_unbound),
                              (this.setValue = this._setValue_unbound);
                          }
                        }),
                        Object.assign(tu.prototype, {
                          _getValue_unbound: tu.prototype.getValue,
                          _setValue_unbound: tu.prototype.setValue
                        }),
                        Object.assign(eu.prototype, {
                          isAnimationObjectGroup: !0,
                          add: function(t) {
                            for (
                              var e = this._objects,
                                i = e.length,
                                n = this.nCachedObjects_,
                                r = this._indicesByUUID,
                                a = this._paths,
                                o = this._parsedPaths,
                                s = this._bindings,
                                c = s.length,
                                u = 0,
                                l = arguments.length;
                              u !== l;
                              ++u
                            ) {
                              var h = arguments[u],
                                d = h.uuid,
                                p = r[d];
                              if (void 0 === p) {
                                (p = i++), (r[d] = p), e.push(h);
                                for (var f = 0, m = c; f !== m; ++f)
                                  s[f].push(new tu(h, a[f], o[f]));
                              } else if (p < n) {
                                e[p];
                                var g = --n,
                                  v = e[g];
                                (r[v.uuid] = p),
                                  (e[p] = v),
                                  (r[d] = g),
                                  (e[g] = h);
                                for (f = 0, m = c; f !== m; ++f) {
                                  var y = s[f],
                                    M = y[g],
                                    w = y[p];
                                  (y[p] = M),
                                    void 0 === w && (w = new tu(h, a[f], o[f])),
                                    (y[g] = w);
                                }
                              } else e[p];
                            }
                            this.nCachedObjects_ = n;
                          },
                          remove: function(t) {
                            for (
                              var e = this._objects,
                                i = this.nCachedObjects_,
                                n = this._indicesByUUID,
                                r = this._bindings,
                                a = r.length,
                                o = 0,
                                s = arguments.length;
                              o !== s;
                              ++o
                            ) {
                              var c = arguments[o],
                                u = c.uuid,
                                l = n[u];
                              if (void 0 !== l && l >= i) {
                                var h = i++,
                                  d = e[h];
                                (n[d.uuid] = l),
                                  (e[l] = d),
                                  (n[u] = h),
                                  (e[h] = c);
                                for (var p = 0, f = a; p !== f; ++p) {
                                  var m = r[p],
                                    g = m[h],
                                    v = m[l];
                                  (m[l] = g), (m[h] = v);
                                }
                              }
                            }
                            this.nCachedObjects_ = i;
                          },
                          uncache: function(t) {
                            for (
                              var e = this._objects,
                                i = e.length,
                                n = this.nCachedObjects_,
                                r = this._indicesByUUID,
                                a = this._bindings,
                                o = a.length,
                                s = 0,
                                c = arguments.length;
                              s !== c;
                              ++s
                            ) {
                              var u = arguments[s].uuid,
                                l = r[u];
                              if (void 0 !== l)
                                if ((delete r[u], l < n)) {
                                  var h = --n,
                                    d = e[h],
                                    p = e[(y = --i)];
                                  (r[d.uuid] = l),
                                    (e[l] = d),
                                    (r[p.uuid] = h),
                                    (e[h] = p),
                                    e.pop();
                                  for (var f = 0, m = o; f !== m; ++f) {
                                    var g = (M = a[f])[h],
                                      v = M[y];
                                    (M[l] = g), (M[h] = v), M.pop();
                                  }
                                } else {
                                  var y;
                                  (r[(p = e[(y = --i)]).uuid] = l),
                                    (e[l] = p),
                                    e.pop();
                                  for (f = 0, m = o; f !== m; ++f) {
                                    var M;
                                    ((M = a[f])[l] = M[y]), M.pop();
                                  }
                                }
                            }
                            this.nCachedObjects_ = n;
                          },
                          subscribe_: function(t, e) {
                            var i = this._bindingsIndicesByPath,
                              n = i[t],
                              r = this._bindings;
                            if (void 0 !== n) return r[n];
                            var a = this._paths,
                              o = this._parsedPaths,
                              s = this._objects,
                              c = s.length,
                              u = this.nCachedObjects_,
                              l = new Array(c);
                            (n = r.length),
                              (i[t] = n),
                              a.push(t),
                              o.push(e),
                              r.push(l);
                            for (var h = u, d = s.length; h !== d; ++h) {
                              var p = s[h];
                              l[h] = new tu(p, t, e);
                            }
                            return l;
                          },
                          unsubscribe_: function(t) {
                            var e = this._bindingsIndicesByPath,
                              i = e[t];
                            if (void 0 !== i) {
                              var n = this._paths,
                                r = this._parsedPaths,
                                a = this._bindings,
                                o = a.length - 1,
                                s = a[o];
                              (e[t[o]] = i),
                                (a[i] = s),
                                a.pop(),
                                (r[i] = r[o]),
                                r.pop(),
                                (n[i] = n[o]),
                                n.pop();
                            }
                          }
                        }),
                        Object.assign(iu.prototype, {
                          play: function() {
                            return this._mixer._activateAction(this), this;
                          },
                          stop: function() {
                            return (
                              this._mixer._deactivateAction(this), this.reset()
                            );
                          },
                          reset: function() {
                            return (
                              (this.paused = !1),
                              (this.enabled = !0),
                              (this.time = 0),
                              (this._loopCount = -1),
                              (this._startTime = null),
                              this.stopFading().stopWarping()
                            );
                          },
                          isRunning: function() {
                            return (
                              this.enabled &&
                              !this.paused &&
                              0 !== this.timeScale &&
                              null === this._startTime &&
                              this._mixer._isActiveAction(this)
                            );
                          },
                          isScheduled: function() {
                            return this._mixer._isActiveAction(this);
                          },
                          startAt: function(t) {
                            return (this._startTime = t), this;
                          },
                          setLoop: function(t, e) {
                            return (
                              (this.loop = t), (this.repetitions = e), this
                            );
                          },
                          setEffectiveWeight: function(t) {
                            return (
                              (this.weight = t),
                              (this._effectiveWeight = this.enabled ? t : 0),
                              this.stopFading()
                            );
                          },
                          getEffectiveWeight: function() {
                            return this._effectiveWeight;
                          },
                          fadeIn: function(t) {
                            return this._scheduleFading(t, 0, 1);
                          },
                          fadeOut: function(t) {
                            return this._scheduleFading(t, 1, 0);
                          },
                          crossFadeFrom: function(t, e, i) {
                            if ((t.fadeOut(e), this.fadeIn(e), i)) {
                              var n = this._clip.duration,
                                r = t._clip.duration,
                                a = r / n,
                                o = n / r;
                              t.warp(1, a, e), this.warp(o, 1, e);
                            }
                            return this;
                          },
                          crossFadeTo: function(t, e, i) {
                            return t.crossFadeFrom(this, e, i);
                          },
                          stopFading: function() {
                            var t = this._weightInterpolant;
                            return (
                              null !== t &&
                                ((this._weightInterpolant = null),
                                this._mixer._takeBackControlInterpolant(t)),
                              this
                            );
                          },
                          setEffectiveTimeScale: function(t) {
                            return (
                              (this.timeScale = t),
                              (this._effectiveTimeScale = this.paused ? 0 : t),
                              this.stopWarping()
                            );
                          },
                          getEffectiveTimeScale: function() {
                            return this._effectiveTimeScale;
                          },
                          setDuration: function(t) {
                            return (
                              (this.timeScale = this._clip.duration / t),
                              this.stopWarping()
                            );
                          },
                          syncWith: function(t) {
                            return (
                              (this.time = t.time),
                              (this.timeScale = t.timeScale),
                              this.stopWarping()
                            );
                          },
                          halt: function(t) {
                            return this.warp(this._effectiveTimeScale, 0, t);
                          },
                          warp: function(t, e, i) {
                            var n = this._mixer,
                              r = n.time,
                              a = this._timeScaleInterpolant,
                              o = this.timeScale;
                            null === a &&
                              ((a = n._lendControlInterpolant()),
                              (this._timeScaleInterpolant = a));
                            var s = a.parameterPositions,
                              c = a.sampleValues;
                            return (
                              (s[0] = r),
                              (s[1] = r + i),
                              (c[0] = t / o),
                              (c[1] = e / o),
                              this
                            );
                          },
                          stopWarping: function() {
                            var t = this._timeScaleInterpolant;
                            return (
                              null !== t &&
                                ((this._timeScaleInterpolant = null),
                                this._mixer._takeBackControlInterpolant(t)),
                              this
                            );
                          },
                          getMixer: function() {
                            return this._mixer;
                          },
                          getClip: function() {
                            return this._clip;
                          },
                          getRoot: function() {
                            return this._localRoot || this._mixer._root;
                          },
                          _update: function(t, e, i, n) {
                            if (this.enabled) {
                              var r = this._startTime;
                              if (null !== r) {
                                var a = (t - r) * i;
                                if (a < 0 || 0 === i) return;
                                (this._startTime = null), (e = i * a);
                              }
                              e *= this._updateTimeScale(t);
                              var o = this._updateTime(e),
                                s = this._updateWeight(t);
                              if (s > 0)
                                for (
                                  var c = this._interpolants,
                                    u = this._propertyBindings,
                                    l = 0,
                                    h = c.length;
                                  l !== h;
                                  ++l
                                )
                                  c[l].evaluate(o), u[l].accumulate(n, s);
                            } else this._updateWeight(t);
                          },
                          _updateWeight: function(t) {
                            var e = 0;
                            if (this.enabled) {
                              e = this.weight;
                              var i = this._weightInterpolant;
                              if (null !== i) {
                                var n = i.evaluate(t)[0];
                                (e *= n),
                                  t > i.parameterPositions[1] &&
                                    (this.stopFading(),
                                    0 === n && (this.enabled = !1));
                              }
                            }
                            return (this._effectiveWeight = e), e;
                          },
                          _updateTimeScale: function(t) {
                            var e = 0;
                            if (!this.paused) {
                              e = this.timeScale;
                              var i = this._timeScaleInterpolant;
                              if (null !== i)
                                (e *= i.evaluate(t)[0]),
                                  t > i.parameterPositions[1] &&
                                    (this.stopWarping(),
                                    0 === e
                                      ? (this.paused = !0)
                                      : (this.timeScale = e));
                            }
                            return (this._effectiveTimeScale = e), e;
                          },
                          _updateTime: function(t) {
                            var e = this.time + t;
                            if (0 === t) return e;
                            var i = this._clip.duration,
                              n = this.loop,
                              r = this._loopCount;
                            if (2200 === n) {
                              -1 === r &&
                                ((this._loopCount = 0),
                                this._setEndings(!0, !0, !1));
                              t: {
                                if (e >= i) e = i;
                                else {
                                  if (!(e < 0)) break t;
                                  e = 0;
                                }
                                this.clampWhenFinished
                                  ? (this.paused = !0)
                                  : (this.enabled = !1),
                                  this._mixer.dispatchEvent({
                                    type: 'finished',
                                    action: this,
                                    direction: t < 0 ? -1 : 1
                                  });
                              }
                            } else {
                              var a = 2202 === n;
                              if (
                                (-1 === r &&
                                  (t >= 0
                                    ? ((r = 0),
                                      this._setEndings(
                                        !0,
                                        0 === this.repetitions,
                                        a
                                      ))
                                    : this._setEndings(
                                        0 === this.repetitions,
                                        !0,
                                        a
                                      )),
                                e >= i || e < 0)
                              ) {
                                var o = Math.floor(e / i);
                                (e -= i * o), (r += Math.abs(o));
                                var s = this.repetitions - r;
                                if (s < 0)
                                  this.clampWhenFinished
                                    ? (this.paused = !0)
                                    : (this.enabled = !1),
                                    (e = t > 0 ? i : 0),
                                    this._mixer.dispatchEvent({
                                      type: 'finished',
                                      action: this,
                                      direction: t > 0 ? 1 : -1
                                    });
                                else {
                                  if (0 === s) {
                                    var c = t < 0;
                                    this._setEndings(c, !c, a);
                                  } else this._setEndings(!1, !1, a);
                                  (this._loopCount = r),
                                    this._mixer.dispatchEvent({
                                      type: 'loop',
                                      action: this,
                                      loopDelta: o
                                    });
                                }
                              }
                              if (a && 1 == (1 & r))
                                return (this.time = e), i - e;
                            }
                            return (this.time = e), e;
                          },
                          _setEndings: function(t, e, i) {
                            var n = this._interpolantSettings;
                            i
                              ? ((n.endingStart = 2401), (n.endingEnd = 2401))
                              : ((n.endingStart = t
                                  ? this.zeroSlopeAtStart ? 2401 : Kt
                                  : 2402),
                                (n.endingEnd = e
                                  ? this.zeroSlopeAtEnd ? 2401 : Kt
                                  : 2402));
                          },
                          _scheduleFading: function(t, e, i) {
                            var n = this._mixer,
                              r = n.time,
                              a = this._weightInterpolant;
                            null === a &&
                              ((a = n._lendControlInterpolant()),
                              (this._weightInterpolant = a));
                            var o = a.parameterPositions,
                              s = a.sampleValues;
                            return (
                              (o[0] = r),
                              (s[0] = e),
                              (o[1] = r + t),
                              (s[1] = i),
                              this
                            );
                          }
                        }),
                        Object.assign(nu.prototype, e.prototype, {
                          _bindAction: function(t, e) {
                            var i = t._localRoot || this._root,
                              n = t._clip.tracks,
                              r = n.length,
                              a = t._propertyBindings,
                              o = t._interpolants,
                              s = i.uuid,
                              c = this._bindingsByRootAndName,
                              u = c[s];
                            void 0 === u && ((u = {}), (c[s] = u));
                            for (var l = 0; l !== r; ++l) {
                              var h = n[l],
                                d = h.name,
                                p = u[d];
                              if (void 0 !== p) a[l] = p;
                              else {
                                if (void 0 !== (p = a[l])) {
                                  null === p._cacheIndex &&
                                    (++p.referenceCount,
                                    this._addInactiveBinding(p, s, d));
                                  continue;
                                }
                                var f =
                                  e &&
                                  e._propertyBindings[l].binding.parsedPath;
                                ++(p = new Jc(
                                  tu.create(i, d, f),
                                  h.ValueTypeName,
                                  h.getValueSize()
                                )).referenceCount,
                                  this._addInactiveBinding(p, s, d),
                                  (a[l] = p);
                              }
                              o[l].resultBuffer = p.buffer;
                            }
                          },
                          _activateAction: function(t) {
                            if (!this._isActiveAction(t)) {
                              if (null === t._cacheIndex) {
                                var e = (t._localRoot || this._root).uuid,
                                  i = t._clip.uuid,
                                  n = this._actionsByClip[i];
                                this._bindAction(t, n && n.knownActions[0]),
                                  this._addInactiveAction(t, i, e);
                              }
                              for (
                                var r = t._propertyBindings,
                                  a = 0,
                                  o = r.length;
                                a !== o;
                                ++a
                              ) {
                                var s = r[a];
                                0 == s.useCount++ &&
                                  (this._lendBinding(s), s.saveOriginalState());
                              }
                              this._lendAction(t);
                            }
                          },
                          _deactivateAction: function(t) {
                            if (this._isActiveAction(t)) {
                              for (
                                var e = t._propertyBindings,
                                  i = 0,
                                  n = e.length;
                                i !== n;
                                ++i
                              ) {
                                var r = e[i];
                                0 == --r.useCount &&
                                  (r.restoreOriginalState(),
                                  this._takeBackBinding(r));
                              }
                              this._takeBackAction(t);
                            }
                          },
                          _initMemoryManager: function() {
                            (this._actions = []),
                              (this._nActiveActions = 0),
                              (this._actionsByClip = {}),
                              (this._bindings = []),
                              (this._nActiveBindings = 0),
                              (this._bindingsByRootAndName = {}),
                              (this._controlInterpolants = []),
                              (this._nActiveControlInterpolants = 0);
                            var t = this;
                            this.stats = {
                              actions: {
                                get total() {
                                  return t._actions.length;
                                },
                                get inUse() {
                                  return t._nActiveActions;
                                }
                              },
                              bindings: {
                                get total() {
                                  return t._bindings.length;
                                },
                                get inUse() {
                                  return t._nActiveBindings;
                                }
                              },
                              controlInterpolants: {
                                get total() {
                                  return t._controlInterpolants.length;
                                },
                                get inUse() {
                                  return t._nActiveControlInterpolants;
                                }
                              }
                            };
                          },
                          _isActiveAction: function(t) {
                            var e = t._cacheIndex;
                            return null !== e && e < this._nActiveActions;
                          },
                          _addInactiveAction: function(t, e, i) {
                            var n = this._actions,
                              r = this._actionsByClip,
                              a = r[e];
                            if (void 0 === a)
                              (a = { knownActions: [t], actionByRoot: {} }),
                                (t._byClipCacheIndex = 0),
                                (r[e] = a);
                            else {
                              var o = a.knownActions;
                              (t._byClipCacheIndex = o.length), o.push(t);
                            }
                            (t._cacheIndex = n.length),
                              n.push(t),
                              (a.actionByRoot[i] = t);
                          },
                          _removeInactiveAction: function(t) {
                            var e = this._actions,
                              i = e[e.length - 1],
                              n = t._cacheIndex;
                            (i._cacheIndex = n),
                              (e[n] = i),
                              e.pop(),
                              (t._cacheIndex = null);
                            var r = t._clip.uuid,
                              a = this._actionsByClip,
                              o = a[r],
                              s = o.knownActions,
                              c = s[s.length - 1],
                              u = t._byClipCacheIndex;
                            (c._byClipCacheIndex = u),
                              (s[u] = c),
                              s.pop(),
                              (t._byClipCacheIndex = null),
                              delete o.actionByRoot[
                                (t._localRoot || this._root).uuid
                              ],
                              0 === s.length && delete a[r],
                              this._removeInactiveBindingsForAction(t);
                          },
                          _removeInactiveBindingsForAction: function(t) {
                            for (
                              var e = t._propertyBindings, i = 0, n = e.length;
                              i !== n;
                              ++i
                            ) {
                              var r = e[i];
                              0 == --r.referenceCount &&
                                this._removeInactiveBinding(r);
                            }
                          },
                          _lendAction: function(t) {
                            var e = this._actions,
                              i = t._cacheIndex,
                              n = this._nActiveActions++,
                              r = e[n];
                            (t._cacheIndex = n),
                              (e[n] = t),
                              (r._cacheIndex = i),
                              (e[i] = r);
                          },
                          _takeBackAction: function(t) {
                            var e = this._actions,
                              i = t._cacheIndex,
                              n = --this._nActiveActions,
                              r = e[n];
                            (t._cacheIndex = n),
                              (e[n] = t),
                              (r._cacheIndex = i),
                              (e[i] = r);
                          },
                          _addInactiveBinding: function(t, e, i) {
                            var n = this._bindingsByRootAndName,
                              r = n[e],
                              a = this._bindings;
                            void 0 === r && ((r = {}), (n[e] = r)),
                              (r[i] = t),
                              (t._cacheIndex = a.length),
                              a.push(t);
                          },
                          _removeInactiveBinding: function(t) {
                            var e = this._bindings,
                              i = t.binding,
                              n = i.rootNode.uuid,
                              r = i.path,
                              a = this._bindingsByRootAndName,
                              o = a[n],
                              s = e[e.length - 1],
                              c = t._cacheIndex;
                            (s._cacheIndex = c),
                              (e[c] = s),
                              e.pop(),
                              delete o[r];
                            t: {
                              for (var u in o) break t;
                              delete a[n];
                            }
                          },
                          _lendBinding: function(t) {
                            var e = this._bindings,
                              i = t._cacheIndex,
                              n = this._nActiveBindings++,
                              r = e[n];
                            (t._cacheIndex = n),
                              (e[n] = t),
                              (r._cacheIndex = i),
                              (e[i] = r);
                          },
                          _takeBackBinding: function(t) {
                            var e = this._bindings,
                              i = t._cacheIndex,
                              n = --this._nActiveBindings,
                              r = e[n];
                            (t._cacheIndex = n),
                              (e[n] = t),
                              (r._cacheIndex = i),
                              (e[i] = r);
                          },
                          _lendControlInterpolant: function() {
                            var t = this._controlInterpolants,
                              e = this._nActiveControlInterpolants++,
                              i = t[e];
                            return (
                              void 0 === i &&
                                (((i = new gs(
                                  new Float32Array(2),
                                  new Float32Array(2),
                                  1,
                                  this._controlInterpolantsResultBuffer
                                )).__cacheIndex = e),
                                (t[e] = i)),
                              i
                            );
                          },
                          _takeBackControlInterpolant: function(t) {
                            var e = this._controlInterpolants,
                              i = t.__cacheIndex,
                              n = --this._nActiveControlInterpolants,
                              r = e[n];
                            (t.__cacheIndex = n),
                              (e[n] = t),
                              (r.__cacheIndex = i),
                              (e[i] = r);
                          },
                          _controlInterpolantsResultBuffer: new Float32Array(1),
                          clipAction: function(t, e) {
                            var i = e || this._root,
                              n = i.uuid,
                              r =
                                'string' == typeof t ? Ns.findByName(i, t) : t,
                              a = null !== r ? r.uuid : t,
                              o = this._actionsByClip[a],
                              s = null;
                            if (void 0 !== o) {
                              var c = o.actionByRoot[n];
                              if (void 0 !== c) return c;
                              (s = o.knownActions[0]),
                                null === r && (r = s._clip);
                            }
                            if (null === r) return null;
                            var u = new iu(this, r, e);
                            return (
                              this._bindAction(u, s),
                              this._addInactiveAction(u, a, n),
                              u
                            );
                          },
                          existingAction: function(t, e) {
                            var i = e || this._root,
                              n = i.uuid,
                              r =
                                'string' == typeof t ? Ns.findByName(i, t) : t,
                              a = r ? r.uuid : t,
                              o = this._actionsByClip[a];
                            return void 0 !== o
                              ? o.actionByRoot[n] || null
                              : null;
                          },
                          stopAllAction: function() {
                            var t = this._actions,
                              e = this._nActiveActions,
                              i = this._bindings,
                              n = this._nActiveBindings;
                            (this._nActiveActions = 0),
                              (this._nActiveBindings = 0);
                            for (var r = 0; r !== e; ++r) t[r].reset();
                            for (r = 0; r !== n; ++r) i[r].useCount = 0;
                            return this;
                          },
                          update: function(t) {
                            t *= this.timeScale;
                            for (
                              var e = this._actions,
                                i = this._nActiveActions,
                                n = (this.time += t),
                                r = Math.sign(t),
                                a = (this._accuIndex ^= 1),
                                o = 0;
                              o !== i;
                              ++o
                            ) {
                              e[o]._update(n, t, r, a);
                            }
                            var s = this._bindings,
                              c = this._nActiveBindings;
                            for (o = 0; o !== c; ++o) s[o].apply(a);
                            return this;
                          },
                          getRoot: function() {
                            return this._root;
                          },
                          uncacheClip: function(t) {
                            var e = this._actions,
                              i = t.uuid,
                              n = this._actionsByClip,
                              r = n[i];
                            if (void 0 !== r) {
                              for (
                                var a = r.knownActions, o = 0, s = a.length;
                                o !== s;
                                ++o
                              ) {
                                var c = a[o];
                                this._deactivateAction(c);
                                var u = c._cacheIndex,
                                  l = e[e.length - 1];
                                (c._cacheIndex = null),
                                  (c._byClipCacheIndex = null),
                                  (l._cacheIndex = u),
                                  (e[u] = l),
                                  e.pop(),
                                  this._removeInactiveBindingsForAction(c);
                              }
                              delete n[i];
                            }
                          },
                          uncacheRoot: function(t) {
                            var e = t.uuid,
                              i = this._actionsByClip;
                            for (var n in i) {
                              var r = i[n].actionByRoot[e];
                              void 0 !== r &&
                                (this._deactivateAction(r),
                                this._removeInactiveAction(r));
                            }
                            var a = this._bindingsByRootAndName[e];
                            if (void 0 !== a)
                              for (var o in a) {
                                var s = a[o];
                                s.restoreOriginalState(),
                                  this._removeInactiveBinding(s);
                              }
                          },
                          uncacheAction: function(t, e) {
                            var i = this.existingAction(t, e);
                            null !== i &&
                              (this._deactivateAction(i),
                              this._removeInactiveAction(i));
                          }
                        }),
                        (ru.prototype.clone = function() {
                          return new ru(
                            void 0 === this.value.clone
                              ? this.value
                              : this.value.clone()
                          );
                        }),
                        (au.prototype = Object.assign(
                          Object.create(Fr.prototype),
                          {
                            constructor: au,
                            isInstancedBufferGeometry: !0,
                            addGroup: function(t, e, i) {
                              this.groups.push({
                                start: t,
                                count: e,
                                materialIndex: i
                              });
                            },
                            copy: function(t) {
                              var e = t.index;
                              null !== e && this.setIndex(e.clone());
                              var i = t.attributes;
                              for (var n in i) {
                                var r = i[n];
                                this.addAttribute(n, r.clone());
                              }
                              for (
                                var a = t.groups, o = 0, s = a.length;
                                o < s;
                                o++
                              ) {
                                var c = a[o];
                                this.addGroup(
                                  c.start,
                                  c.count,
                                  c.materialIndex
                                );
                              }
                              return this;
                            }
                          }
                        )),
                        Object.defineProperties(ou.prototype, {
                          count: {
                            get: function() {
                              return this.data.count;
                            }
                          },
                          array: {
                            get: function() {
                              return this.data.array;
                            }
                          }
                        }),
                        Object.assign(ou.prototype, {
                          isInterleavedBufferAttribute: !0,
                          setX: function(t, e) {
                            return (
                              (this.data.array[
                                t * this.data.stride + this.offset
                              ] = e),
                              this
                            );
                          },
                          setY: function(t, e) {
                            return (
                              (this.data.array[
                                t * this.data.stride + this.offset + 1
                              ] = e),
                              this
                            );
                          },
                          setZ: function(t, e) {
                            return (
                              (this.data.array[
                                t * this.data.stride + this.offset + 2
                              ] = e),
                              this
                            );
                          },
                          setW: function(t, e) {
                            return (
                              (this.data.array[
                                t * this.data.stride + this.offset + 3
                              ] = e),
                              this
                            );
                          },
                          getX: function(t) {
                            return this.data.array[
                              t * this.data.stride + this.offset
                            ];
                          },
                          getY: function(t) {
                            return this.data.array[
                              t * this.data.stride + this.offset + 1
                            ];
                          },
                          getZ: function(t) {
                            return this.data.array[
                              t * this.data.stride + this.offset + 2
                            ];
                          },
                          getW: function(t) {
                            return this.data.array[
                              t * this.data.stride + this.offset + 3
                            ];
                          },
                          setXY: function(t, e, i) {
                            return (
                              (t = t * this.data.stride + this.offset),
                              (this.data.array[t + 0] = e),
                              (this.data.array[t + 1] = i),
                              this
                            );
                          },
                          setXYZ: function(t, e, i, n) {
                            return (
                              (t = t * this.data.stride + this.offset),
                              (this.data.array[t + 0] = e),
                              (this.data.array[t + 1] = i),
                              (this.data.array[t + 2] = n),
                              this
                            );
                          },
                          setXYZW: function(t, e, i, n, r) {
                            return (
                              (t = t * this.data.stride + this.offset),
                              (this.data.array[t + 0] = e),
                              (this.data.array[t + 1] = i),
                              (this.data.array[t + 2] = n),
                              (this.data.array[t + 3] = r),
                              this
                            );
                          }
                        }),
                        Object.defineProperty(su.prototype, 'needsUpdate', {
                          set: function(t) {
                            !0 === t && this.version++;
                          }
                        }),
                        Object.assign(su.prototype, {
                          isInterleavedBuffer: !0,
                          setArray: function(t) {
                            if (Array.isArray(t))
                              throw new TypeError(
                                'THREE.BufferAttribute: array should be a Typed Array.'
                              );
                            (this.count =
                              void 0 !== t ? t.length / this.stride : 0),
                              (this.array = t);
                          },
                          setDynamic: function(t) {
                            return (this.dynamic = t), this;
                          },
                          copy: function(t) {
                            return (
                              (this.array = new t.array.constructor(t.array)),
                              (this.count = t.count),
                              (this.stride = t.stride),
                              (this.dynamic = t.dynamic),
                              this
                            );
                          },
                          copyAt: function(t, e, i) {
                            (t *= this.stride), (i *= e.stride);
                            for (var n = 0, r = this.stride; n < r; n++)
                              this.array[t + n] = e.array[i + n];
                            return this;
                          },
                          set: function(t, e) {
                            return (
                              void 0 === e && (e = 0),
                              this.array.set(t, e),
                              this
                            );
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          onUpload: function(t) {
                            return (this.onUploadCallback = t), this;
                          }
                        }),
                        (cu.prototype = Object.assign(
                          Object.create(su.prototype),
                          {
                            constructor: cu,
                            isInstancedInterleavedBuffer: !0,
                            copy: function(t) {
                              return (
                                su.prototype.copy.call(this, t),
                                (this.meshPerAttribute = t.meshPerAttribute),
                                this
                              );
                            }
                          }
                        )),
                        (uu.prototype = Object.assign(
                          Object.create(Cr.prototype),
                          {
                            constructor: uu,
                            isInstancedBufferAttribute: !0,
                            copy: function(t) {
                              return (
                                Cr.prototype.copy.call(this, t),
                                (this.meshPerAttribute = t.meshPerAttribute),
                                this
                              );
                            }
                          }
                        )),
                        Object.assign(lu.prototype, {
                          linePrecision: 1,
                          set: function(t, e) {
                            this.ray.set(t, e);
                          },
                          setFromCamera: function(t, e) {
                            e && e.isPerspectiveCamera
                              ? (this.ray.origin.setFromMatrixPosition(
                                  e.matrixWorld
                                ),
                                this.ray.direction
                                  .set(t.x, t.y, 0.5)
                                  .unproject(e)
                                  .sub(this.ray.origin)
                                  .normalize())
                              : e &&
                                e.isOrthographicCamera &&
                                (this.ray.origin
                                  .set(
                                    t.x,
                                    t.y,
                                    (e.near + e.far) / (e.near - e.far)
                                  )
                                  .unproject(e),
                                this.ray.direction
                                  .set(0, 0, -1)
                                  .transformDirection(e.matrixWorld));
                          },
                          intersectObject: function(t, e) {
                            var i = [];
                            return du(t, this, i, e), i.sort(hu), i;
                          },
                          intersectObjects: function(t, e) {
                            var i = [];
                            if (!1 === Array.isArray(t)) return i;
                            for (var n = 0, r = t.length; n < r; n++)
                              du(t[n], this, i, e);
                            return i.sort(hu), i;
                          }
                        }),
                        Object.assign(pu.prototype, {
                          start: function() {
                            (this.startTime = ('undefined' == typeof performance
                              ? Date
                              : performance
                            ).now()),
                              (this.oldTime = this.startTime),
                              (this.elapsedTime = 0),
                              (this.running = !0);
                          },
                          stop: function() {
                            this.getElapsedTime(),
                              (this.running = !1),
                              (this.autoStart = !1);
                          },
                          getElapsedTime: function() {
                            return this.getDelta(), this.elapsedTime;
                          },
                          getDelta: function() {
                            var t = 0;
                            if (this.autoStart && !this.running)
                              return this.start(), 0;
                            if (this.running) {
                              var e = ('undefined' == typeof performance
                                ? Date
                                : performance
                              ).now();
                              (t = (e - this.oldTime) / 1e3),
                                (this.oldTime = e),
                                (this.elapsedTime += t);
                            }
                            return t;
                          }
                        }),
                        Object.assign(fu.prototype, {
                          set: function(t, e, i) {
                            return (
                              (this.radius = t),
                              (this.phi = e),
                              (this.theta = i),
                              this
                            );
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              (this.radius = t.radius),
                              (this.phi = t.phi),
                              (this.theta = t.theta),
                              this
                            );
                          },
                          makeSafe: function() {
                            return (
                              (this.phi = Math.max(
                                1e-6,
                                Math.min(Math.PI - 1e-6, this.phi)
                              )),
                              this
                            );
                          },
                          setFromVector3: function(t) {
                            return (
                              (this.radius = t.length()),
                              0 === this.radius
                                ? ((this.theta = 0), (this.phi = 0))
                                : ((this.theta = Math.atan2(t.x, t.z)),
                                  (this.phi = Math.acos(
                                    le.clamp(t.y / this.radius, -1, 1)
                                  ))),
                              this
                            );
                          }
                        }),
                        Object.assign(mu.prototype, {
                          set: function(t, e, i) {
                            return (
                              (this.radius = t),
                              (this.theta = e),
                              (this.y = i),
                              this
                            );
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          },
                          copy: function(t) {
                            return (
                              (this.radius = t.radius),
                              (this.theta = t.theta),
                              (this.y = t.y),
                              this
                            );
                          },
                          setFromVector3: function(t) {
                            return (
                              (this.radius = Math.sqrt(t.x * t.x + t.z * t.z)),
                              (this.theta = Math.atan2(t.x, t.z)),
                              (this.y = t.y),
                              this
                            );
                          }
                        }),
                        (gu.prototype = Object.create(Rn.prototype)),
                        (gu.prototype.constructor = gu),
                        (gu.prototype.isImmediateRenderObject = !0),
                        (vu.prototype = Object.create(Ga.prototype)),
                        (vu.prototype.constructor = vu),
                        (vu.prototype.update = ((Ac = new ke()),
                        (Ec = new ke()),
                        (bc = new hn()),
                        function() {
                          var t = ['a', 'b', 'c'];
                          this.object.updateMatrixWorld(!0),
                            bc.getNormalMatrix(this.object.matrixWorld);
                          var e = this.object.matrixWorld,
                            i = this.geometry.attributes.position,
                            n = this.object.geometry;
                          if (n && n.isGeometry)
                            for (
                              var r = n.vertices,
                                a = n.faces,
                                o = 0,
                                s = 0,
                                c = a.length;
                              s < c;
                              s++
                            )
                              for (
                                var u = a[s], l = 0, h = u.vertexNormals.length;
                                l < h;
                                l++
                              ) {
                                var d = r[u[t[l]]],
                                  p = u.vertexNormals[l];
                                Ac.copy(d).applyMatrix4(e),
                                  Ec.copy(p)
                                    .applyMatrix3(bc)
                                    .normalize()
                                    .multiplyScalar(this.size)
                                    .add(Ac),
                                  i.setXYZ(o, Ac.x, Ac.y, Ac.z),
                                  (o += 1),
                                  i.setXYZ(o, Ec.x, Ec.y, Ec.z),
                                  (o += 1);
                              }
                          else if (n && n.isBufferGeometry) {
                            var f = n.attributes.position,
                              m = n.attributes.normal;
                            for (o = 0, l = 0, h = f.count; l < h; l++)
                              Ac.set(
                                f.getX(l),
                                f.getY(l),
                                f.getZ(l)
                              ).applyMatrix4(e),
                                Ec.set(m.getX(l), m.getY(l), m.getZ(l)),
                                Ec.applyMatrix3(bc)
                                  .normalize()
                                  .multiplyScalar(this.size)
                                  .add(Ac),
                                i.setXYZ(o, Ac.x, Ac.y, Ac.z),
                                (o += 1),
                                i.setXYZ(o, Ec.x, Ec.y, Ec.z),
                                (o += 1);
                          }
                          i.needsUpdate = !0;
                        })),
                        (yu.prototype = Object.create(Rn.prototype)),
                        (yu.prototype.constructor = yu),
                        (yu.prototype.dispose = function() {
                          this.cone.geometry.dispose(),
                            this.cone.material.dispose();
                        }),
                        (yu.prototype.update = ((Tc = new ke()),
                        (Lc = new ke()),
                        function() {
                          this.light.updateMatrixWorld();
                          var t = this.light.distance
                              ? this.light.distance
                              : 1e3,
                            e = t * Math.tan(this.light.angle);
                          this.cone.scale.set(e, e, t),
                            Tc.setFromMatrixPosition(this.light.matrixWorld),
                            Lc.setFromMatrixPosition(
                              this.light.target.matrixWorld
                            ),
                            this.cone.lookAt(Lc.sub(Tc)),
                            void 0 !== this.color
                              ? this.cone.material.color.set(this.color)
                              : this.cone.material.color.copy(this.light.color);
                        })),
                        (Mu.prototype = Object.create(Ga.prototype)),
                        (Mu.prototype.constructor = Mu),
                        (Mu.prototype.onBeforeRender = ((Nc = new ke()),
                        (Dc = new Ue()),
                        (Cc = new Ue()),
                        function() {
                          var t = this.bones,
                            e = this.geometry,
                            i = e.getAttribute('position');
                          Cc.getInverse(this.root.matrixWorld);
                          for (var n = 0, r = 0; n < t.length; n++) {
                            var a = t[n];
                            a.parent &&
                              a.parent.isBone &&
                              (Dc.multiplyMatrices(Cc, a.matrixWorld),
                              Nc.setFromMatrixPosition(Dc),
                              i.setXYZ(r, Nc.x, Nc.y, Nc.z),
                              Dc.multiplyMatrices(Cc, a.parent.matrixWorld),
                              Nc.setFromMatrixPosition(Dc),
                              i.setXYZ(r + 1, Nc.x, Nc.y, Nc.z),
                              (r += 2));
                          }
                          e.getAttribute('position').needsUpdate = !0;
                        })),
                        (wu.prototype = Object.create(Zr.prototype)),
                        (wu.prototype.constructor = wu),
                        (wu.prototype.dispose = function() {
                          this.geometry.dispose(), this.material.dispose();
                        }),
                        (wu.prototype.update = function() {
                          void 0 !== this.color
                            ? this.material.color.set(this.color)
                            : this.material.color.copy(this.light.color);
                        }),
                        (xu.prototype = Object.create(Rn.prototype)),
                        (xu.prototype.constructor = xu),
                        (xu.prototype.dispose = function() {
                          this.children[0].geometry.dispose(),
                            this.children[0].material.dispose();
                        }),
                        (xu.prototype.update = function() {
                          var t = 0.5 * this.light.width,
                            e = 0.5 * this.light.height,
                            i = this.line.geometry.attributes.position,
                            n = i.array;
                          (n[0] = t),
                            (n[1] = -e),
                            (n[2] = 0),
                            (n[3] = t),
                            (n[4] = e),
                            (n[5] = 0),
                            (n[6] = -t),
                            (n[7] = e),
                            (n[8] = 0),
                            (n[9] = -t),
                            (n[10] = -e),
                            (n[11] = 0),
                            (n[12] = t),
                            (n[13] = -e),
                            (n[14] = 0),
                            (i.needsUpdate = !0),
                            void 0 !== this.color
                              ? this.line.material.color.set(this.color)
                              : this.line.material.color.copy(this.light.color);
                        }),
                        (Au.prototype = Object.create(Rn.prototype)),
                        (Au.prototype.constructor = Au),
                        (Au.prototype.dispose = function() {
                          this.children[0].geometry.dispose(),
                            this.children[0].material.dispose();
                        }),
                        (Au.prototype.update = ((Sc = new ke()),
                        (Ic = new Ni()),
                        (_c = new Ni()),
                        function() {
                          var t = this.children[0];
                          if (void 0 !== this.color)
                            this.material.color.set(this.color);
                          else {
                            var e = t.geometry.getAttribute('color');
                            Ic.copy(this.light.color),
                              _c.copy(this.light.groundColor);
                            for (var i = 0, n = e.count; i < n; i++) {
                              var r = i < n / 2 ? Ic : _c;
                              e.setXYZ(i, r.r, r.g, r.b);
                            }
                            e.needsUpdate = !0;
                          }
                          t.lookAt(
                            Sc.setFromMatrixPosition(
                              this.light.matrixWorld
                            ).negate()
                          );
                        })),
                        (Eu.prototype = Object.create(Ga.prototype)),
                        (Eu.prototype.constructor = Eu),
                        (bu.prototype = Object.create(Ga.prototype)),
                        (bu.prototype.constructor = bu),
                        (Tu.prototype = Object.create(Ga.prototype)),
                        (Tu.prototype.constructor = Tu),
                        (Tu.prototype.update = ((jc = new ke()),
                        (Oc = new ke()),
                        (zc = new hn()),
                        function() {
                          this.object.updateMatrixWorld(!0),
                            zc.getNormalMatrix(this.object.matrixWorld);
                          for (
                            var t = this.object.matrixWorld,
                              e = this.geometry.attributes.position,
                              i = this.object.geometry,
                              n = i.vertices,
                              r = i.faces,
                              a = 0,
                              o = 0,
                              s = r.length;
                            o < s;
                            o++
                          ) {
                            var c = r[o],
                              u = c.normal;
                            jc
                              .copy(n[c.a])
                              .add(n[c.b])
                              .add(n[c.c])
                              .divideScalar(3)
                              .applyMatrix4(t),
                              Oc.copy(u)
                                .applyMatrix3(zc)
                                .normalize()
                                .multiplyScalar(this.size)
                                .add(jc),
                              e.setXYZ(a, jc.x, jc.y, jc.z),
                              (a += 1),
                              e.setXYZ(a, Oc.x, Oc.y, Oc.z),
                              (a += 1);
                          }
                          e.needsUpdate = !0;
                        })),
                        (Lu.prototype = Object.create(Rn.prototype)),
                        (Lu.prototype.constructor = Lu),
                        (Lu.prototype.dispose = function() {
                          this.lightPlane.geometry.dispose(),
                            this.lightPlane.material.dispose(),
                            this.targetLine.geometry.dispose(),
                            this.targetLine.material.dispose();
                        }),
                        (Lu.prototype.update = ((Rc = new ke()),
                        (kc = new ke()),
                        (Uc = new ke()),
                        function() {
                          Rc.setFromMatrixPosition(this.light.matrixWorld),
                            kc.setFromMatrixPosition(
                              this.light.target.matrixWorld
                            ),
                            Uc.subVectors(kc, Rc),
                            this.lightPlane.lookAt(Uc),
                            void 0 !== this.color
                              ? (this.lightPlane.material.color.set(this.color),
                                this.targetLine.material.color.set(this.color))
                              : (this.lightPlane.material.color.copy(
                                  this.light.color
                                ),
                                this.targetLine.material.color.copy(
                                  this.light.color
                                )),
                            this.targetLine.lookAt(Uc),
                            (this.targetLine.scale.z = Uc.length());
                        })),
                        (Nu.prototype = Object.create(Ga.prototype)),
                        (Nu.prototype.constructor = Nu),
                        (Nu.prototype.update = (function() {
                          var t,
                            e,
                            i = new ke(),
                            n = new kn();
                          function r(r, a, o, s) {
                            i.set(a, o, s).unproject(n);
                            var c = e[r];
                            if (void 0 !== c)
                              for (
                                var u = t.getAttribute('position'),
                                  l = 0,
                                  h = c.length;
                                l < h;
                                l++
                              )
                                u.setXYZ(c[l], i.x, i.y, i.z);
                          }
                          return function() {
                            (t = this.geometry), (e = this.pointMap);
                            n.projectionMatrix.copy(
                              this.camera.projectionMatrix
                            ),
                              r('c', 0, 0, -1),
                              r('t', 0, 0, 1),
                              r('n1', -1, -1, -1),
                              r('n2', 1, -1, -1),
                              r('n3', -1, 1, -1),
                              r('n4', 1, 1, -1),
                              r('f1', -1, -1, 1),
                              r('f2', 1, -1, 1),
                              r('f3', -1, 1, 1),
                              r('f4', 1, 1, 1),
                              r('u1', 0.7, 1.1, -1),
                              r('u2', -0.7, 1.1, -1),
                              r('u3', 0, 2, -1),
                              r('cf1', -1, 0, 1),
                              r('cf2', 1, 0, 1),
                              r('cf3', 0, -1, 1),
                              r('cf4', 0, 1, 1),
                              r('cn1', -1, 0, -1),
                              r('cn2', 1, 0, -1),
                              r('cn3', 0, -1, -1),
                              r('cn4', 0, 1, -1),
                              (t.getAttribute('position').needsUpdate = !0);
                          };
                        })()),
                        (Du.prototype = Object.create(Ga.prototype)),
                        (Du.prototype.constructor = Du),
                        (Du.prototype.update = ((Pc = new un()),
                        function(t) {
                          if (
                            (void 0 !== this.object &&
                              Pc.setFromObject(this.object),
                            !Pc.isEmpty())
                          ) {
                            var e = Pc.min,
                              i = Pc.max,
                              n = this.geometry.attributes.position,
                              r = n.array;
                            (r[0] = i.x),
                              (r[1] = i.y),
                              (r[2] = i.z),
                              (r[3] = e.x),
                              (r[4] = i.y),
                              (r[5] = i.z),
                              (r[6] = e.x),
                              (r[7] = e.y),
                              (r[8] = i.z),
                              (r[9] = i.x),
                              (r[10] = e.y),
                              (r[11] = i.z),
                              (r[12] = i.x),
                              (r[13] = i.y),
                              (r[14] = e.z),
                              (r[15] = e.x),
                              (r[16] = i.y),
                              (r[17] = e.z),
                              (r[18] = e.x),
                              (r[19] = e.y),
                              (r[20] = e.z),
                              (r[21] = i.x),
                              (r[22] = e.y),
                              (r[23] = e.z),
                              (n.needsUpdate = !0),
                              this.geometry.computeBoundingSphere();
                          }
                        })),
                        (Du.prototype.setFromObject = function(t) {
                          return (this.object = t), this.update(), this;
                        }),
                        (Cu.prototype = Object.create(Ga.prototype)),
                        (Cu.prototype.constructor = Cu),
                        (Cu.prototype.onBeforeRender = function() {
                          var t = this.box;
                          t.isEmpty() ||
                            (t.getCenter(this.position),
                            t.getSize(this.scale),
                            this.scale.multiplyScalar(0.5));
                        }),
                        (Su.prototype = Object.create(Fa.prototype)),
                        (Su.prototype.constructor = Su),
                        (Su.prototype.onBeforeRender = function() {
                          var t = -this.plane.constant;
                          Math.abs(t) < 1e-8 && (t = 1e-8),
                            this.scale.set(0.5 * this.size, 0.5 * this.size, t),
                            this.lookAt(this.plane.normal),
                            this.updateMatrixWorld();
                        }),
                        (Iu.prototype = Object.create(Rn.prototype)),
                        (Iu.prototype.constructor = Iu),
                        (Iu.prototype.setDirection = ((Vc = new ke()),
                        function(t) {
                          t.y > 0.99999
                            ? this.quaternion.set(0, 0, 0, 1)
                            : t.y < -0.99999
                              ? this.quaternion.set(1, 0, 0, 0)
                              : (Vc.set(t.z, 0, -t.x).normalize(),
                                (Gc = Math.acos(t.y)),
                                this.quaternion.setFromAxisAngle(Vc, Gc));
                        })),
                        (Iu.prototype.setLength = function(t, e, i) {
                          void 0 === e && (e = 0.2 * t),
                            void 0 === i && (i = 0.2 * e),
                            this.line.scale.set(1, Math.max(0, t - e), 1),
                            this.line.updateMatrix(),
                            this.cone.scale.set(i, e, i),
                            (this.cone.position.y = t),
                            this.cone.updateMatrix();
                        }),
                        (Iu.prototype.setColor = function(t) {
                          this.line.material.color.copy(t),
                            this.cone.material.color.copy(t);
                        }),
                        (_u.prototype = Object.create(Ga.prototype)),
                        (_u.prototype.constructor = _u);
                      var Ou = new ke(),
                        zu = new ju(),
                        Ru = new ju(),
                        ku = new ju();
                      function Uu(t) {
                        Qs.call(this),
                          t.length,
                          (this.points = t || []),
                          (this.closed = !1);
                      }
                      function Pu(t, e, i, n) {
                        Qs.call(this),
                          (this.v0 = t),
                          (this.v1 = e),
                          (this.v2 = i),
                          (this.v3 = n);
                      }
                      function Bu(t, e, i) {
                        Qs.call(this),
                          (this.v0 = t),
                          (this.v1 = e),
                          (this.v2 = i);
                      }
                      function Fu(t, e) {
                        Qs.call(this), (this.v1 = t), (this.v2 = e);
                      }
                      function Gu(t, e, i, n, r, a) {
                        Xs.call(this, t, e, i, i, n, r, a);
                      }
                      (Uu.prototype = Object.create(Qs.prototype)),
                        (Uu.prototype.constructor = Uu),
                        (Uu.prototype.getPoint = function(t) {
                          var e,
                            i,
                            n,
                            r,
                            a = this.points,
                            o = a.length,
                            s = (o - (this.closed ? 0 : 1)) * t,
                            c = Math.floor(s),
                            u = s - c;
                          if (
                            (this.closed
                              ? (c +=
                                  c > 0
                                    ? 0
                                    : (Math.floor(Math.abs(c) / a.length) + 1) *
                                      a.length)
                              : 0 === u &&
                                c === o - 1 &&
                                ((c = o - 2), (u = 1)),
                            this.closed || c > 0
                              ? (e = a[(c - 1) % o])
                              : (Ou.subVectors(a[0], a[1]).add(a[0]), (e = Ou)),
                            (i = a[c % o]),
                            (n = a[(c + 1) % o]),
                            this.closed || c + 2 < o
                              ? (r = a[(c + 2) % o])
                              : (Ou.subVectors(a[o - 1], a[o - 2]).add(
                                  a[o - 1]
                                ),
                                (r = Ou)),
                            void 0 === this.type ||
                              'centripetal' === this.type ||
                              'chordal' === this.type)
                          ) {
                            var l = 'chordal' === this.type ? 0.5 : 0.25,
                              h = Math.pow(e.distanceToSquared(i), l),
                              d = Math.pow(i.distanceToSquared(n), l),
                              p = Math.pow(n.distanceToSquared(r), l);
                            d < 1e-4 && (d = 1),
                              h < 1e-4 && (h = d),
                              p < 1e-4 && (p = d),
                              zu.initNonuniformCatmullRom(
                                e.x,
                                i.x,
                                n.x,
                                r.x,
                                h,
                                d,
                                p
                              ),
                              Ru.initNonuniformCatmullRom(
                                e.y,
                                i.y,
                                n.y,
                                r.y,
                                h,
                                d,
                                p
                              ),
                              ku.initNonuniformCatmullRom(
                                e.z,
                                i.z,
                                n.z,
                                r.z,
                                h,
                                d,
                                p
                              );
                          } else if ('catmullrom' === this.type) {
                            var f =
                              void 0 !== this.tension ? this.tension : 0.5;
                            zu.initCatmullRom(e.x, i.x, n.x, r.x, f),
                              Ru.initCatmullRom(e.y, i.y, n.y, r.y, f),
                              ku.initCatmullRom(e.z, i.z, n.z, r.z, f);
                          }
                          return new ke(zu.calc(u), Ru.calc(u), ku.calc(u));
                        }),
                        (Pu.prototype = Object.create(Qs.prototype)),
                        (Pu.prototype.constructor = Pu),
                        (Pu.prototype.getPoint = function(t) {
                          var e = this.v0,
                            i = this.v1,
                            n = this.v2,
                            r = this.v3;
                          return new ke(
                            Ys(t, e.x, i.x, n.x, r.x),
                            Ys(t, e.y, i.y, n.y, r.y),
                            Ys(t, e.z, i.z, n.z, r.z)
                          );
                        }),
                        (Bu.prototype = Object.create(Qs.prototype)),
                        (Bu.prototype.constructor = Bu),
                        (Bu.prototype.getPoint = function(t) {
                          var e = this.v0,
                            i = this.v1,
                            n = this.v2;
                          return new ke(
                            Vs(t, e.x, i.x, n.x),
                            Vs(t, e.y, i.y, n.y),
                            Vs(t, e.z, i.z, n.z)
                          );
                        }),
                        (Fu.prototype = Object.create(Qs.prototype)),
                        (Fu.prototype.constructor = Fu),
                        (Fu.prototype.getPoint = function(t) {
                          if (1 === t) return this.v2.clone();
                          var e = new ke();
                          return (
                            e.subVectors(this.v2, this.v1),
                            e.multiplyScalar(t),
                            e.add(this.v1),
                            e
                          );
                        }),
                        (Gu.prototype = Object.create(Xs.prototype)),
                        (Gu.prototype.constructor = Gu);
                      var Vu = {
                        createMultiMaterialObject: function(t, e) {
                          for (
                            var i = new Ha(), n = 0, r = e.length;
                            n < r;
                            n++
                          )
                            i.add(new Zr(t, e[n]));
                          return i;
                        },
                        detach: function(t, e, i) {
                          t.applyMatrix(e.matrixWorld), e.remove(t), i.add(t);
                        },
                        attach: function(t, e, i) {
                          t.applyMatrix(new Ue().getInverse(i.matrixWorld)),
                            e.remove(t),
                            i.add(t);
                        }
                      };
                      var Yu;
                      function Qu(t) {
                        Uu.call(this, t),
                          (this.type = 'catmullrom'),
                          (this.closed = !0);
                      }
                      function Hu(t) {
                        Uu.call(this, t), (this.type = 'catmullrom');
                      }
                      function Wu(t) {
                        Uu.call(this, t), (this.type = 'catmullrom');
                      }
                      (Qs.create = function(t, e) {
                        return (
                          (t.prototype = Object.create(Qs.prototype)),
                          (t.prototype.constructor = t),
                          (t.prototype.getPoint = e),
                          t
                        );
                      }),
                        (Qu.prototype = Object.create(Uu.prototype)),
                        (Hu.prototype = Object.create(Uu.prototype)),
                        (Wu.prototype = Object.create(Uu.prototype)),
                        Object.assign(Wu.prototype, {
                          initFromArray: function(t) {},
                          getControlPointsArray: function(t) {},
                          reparametrizeByArcLength: function(t) {}
                        }),
                        (Eu.prototype.setColors = function() {}),
                        (Mu.prototype.update = function() {}),
                        Object.assign(Oi.prototype, {
                          center: function(t) {
                            return this.getCenter(t);
                          },
                          empty: function() {
                            return this.isEmpty();
                          },
                          isIntersectionBox: function(t) {
                            return this.intersectsBox(t);
                          },
                          size: function(t) {
                            return this.getSize(t);
                          }
                        }),
                        Object.assign(un.prototype, {
                          center: function(t) {
                            return this.getCenter(t);
                          },
                          empty: function() {
                            return this.isEmpty();
                          },
                          isIntersectionBox: function(t) {
                            return this.intersectsBox(t);
                          },
                          isIntersectionSphere: function(t) {
                            return this.intersectsSphere(t);
                          },
                          size: function(t) {
                            return this.getSize(t);
                          }
                        }),
                        (Xr.prototype.center = function(t) {
                          return this.getCenter(t);
                        }),
                        (le.random16 = function() {
                          return Math.random();
                        }),
                        Object.assign(hn.prototype, {
                          flattenToArrayOffset: function(t, e) {
                            return this.toArray(t, e);
                          },
                          multiplyVector3: function(t) {
                            return t.applyMatrix3(this);
                          },
                          multiplyVector3Array: function(t) {},
                          applyToBuffer: function(t, e, i) {
                            return this.applyToBufferAttribute(t);
                          },
                          applyToVector3Array: function(t, e, i) {}
                        }),
                        Object.assign(Ue.prototype, {
                          extractPosition: function(t) {
                            return this.copyPosition(t);
                          },
                          flattenToArrayOffset: function(t, e) {
                            return this.toArray(t, e);
                          },
                          getPosition: function() {
                            return (
                              void 0 === Yu && (Yu = new ke()),
                              Yu.setFromMatrixColumn(this, 3)
                            );
                          },
                          setRotationFromQuaternion: function(t) {
                            return this.makeRotationFromQuaternion(t);
                          },
                          multiplyToArray: function() {},
                          multiplyVector3: function(t) {
                            return t.applyMatrix4(this);
                          },
                          multiplyVector4: function(t) {
                            return t.applyMatrix4(this);
                          },
                          multiplyVector3Array: function(t) {},
                          rotateAxis: function(t) {
                            t.transformDirection(this);
                          },
                          crossVector: function(t) {
                            return t.applyMatrix4(this);
                          },
                          translate: function() {},
                          rotateX: function() {},
                          rotateY: function() {},
                          rotateZ: function() {},
                          rotateByAxis: function() {},
                          applyToBuffer: function(t, e, i) {
                            return this.applyToBufferAttribute(t);
                          },
                          applyToVector3Array: function(t, e, i) {},
                          makeFrustum: function(t, e, i, n, r, a) {
                            return this.makePerspective(t, e, n, i, r, a);
                          }
                        }),
                        (dn.prototype.isIntersectionLine = function(t) {
                          return this.intersectsLine(t);
                        }),
                        (Re.prototype.multiplyVector3 = function(t) {
                          return t.applyQuaternion(this);
                        }),
                        Object.assign(Wr.prototype, {
                          isIntersectionBox: function(t) {
                            return this.intersectsBox(t);
                          },
                          isIntersectionPlane: function(t) {
                            return this.intersectsPlane(t);
                          },
                          isIntersectionSphere: function(t) {
                            return this.intersectsSphere(t);
                          }
                        }),
                        Object.assign(ec.prototype, {
                          extrude: function(t) {
                            return new vo(this, t);
                          },
                          makeGeometry: function(t) {
                            return new No(this, t);
                          }
                        }),
                        Object.assign(he.prototype, {
                          fromAttribute: function(t, e, i) {
                            return this.fromBufferAttribute(t, e, i);
                          }
                        }),
                        Object.assign(ke.prototype, {
                          setEulerFromRotationMatrix: function() {},
                          setEulerFromQuaternion: function() {},
                          getPositionFromMatrix: function(t) {
                            return this.setFromMatrixPosition(t);
                          },
                          getScaleFromMatrix: function(t) {
                            return this.setFromMatrixScale(t);
                          },
                          getColumnFromMatrix: function(t, e) {
                            return this.setFromMatrixColumn(e, t);
                          },
                          applyProjection: function(t) {
                            return this.applyMatrix4(t);
                          },
                          fromAttribute: function(t, e, i) {
                            return this.fromBufferAttribute(t, e, i);
                          }
                        }),
                        Object.assign(je.prototype, {
                          fromAttribute: function(t, e, i) {
                            return this.fromBufferAttribute(t, e, i);
                          }
                        }),
                        (Dr.prototype.computeTangents = function() {}),
                        Object.assign(Rn.prototype, {
                          getChildByName: function(t) {
                            return this.getObjectByName(t);
                          },
                          renderDepth: function() {},
                          translate: function(t, e) {
                            return this.translateOnAxis(e, t);
                          }
                        }),
                        Object.defineProperties(Rn.prototype, {
                          eulerOrder: {
                            get: function() {
                              return this.rotation.order;
                            },
                            set: function(t) {
                              this.rotation.order = t;
                            }
                          },
                          useQuaternion: {
                            get: function() {},
                            set: function() {}
                          }
                        }),
                        Object.defineProperties(Ra.prototype, {
                          objects: {
                            get: function() {
                              return this.levels;
                            }
                          }
                        }),
                        Object.defineProperty(
                          ka.prototype,
                          'useVertexTexture',
                          { get: function() {}, set: function() {} }
                        ),
                        Object.defineProperty(
                          Qs.prototype,
                          '__arcLengthDivisions',
                          {
                            get: function() {
                              return this.arcLengthDivisions;
                            },
                            set: function(t) {
                              this.arcLengthDivisions = t;
                            }
                          }
                        ),
                        (Pn.prototype.setLens = function(t, e) {
                          void 0 !== e && (this.filmGauge = e),
                            this.setFocalLength(t);
                        }),
                        Object.defineProperties(is.prototype, {
                          onlyShadow: { set: function() {} },
                          shadowCameraFov: {
                            set: function(t) {
                              this.shadow.camera.fov = t;
                            }
                          },
                          shadowCameraLeft: {
                            set: function(t) {
                              this.shadow.camera.left = t;
                            }
                          },
                          shadowCameraRight: {
                            set: function(t) {
                              this.shadow.camera.right = t;
                            }
                          },
                          shadowCameraTop: {
                            set: function(t) {
                              this.shadow.camera.top = t;
                            }
                          },
                          shadowCameraBottom: {
                            set: function(t) {
                              this.shadow.camera.bottom = t;
                            }
                          },
                          shadowCameraNear: {
                            set: function(t) {
                              this.shadow.camera.near = t;
                            }
                          },
                          shadowCameraFar: {
                            set: function(t) {
                              this.shadow.camera.far = t;
                            }
                          },
                          shadowCameraVisible: { set: function() {} },
                          shadowBias: {
                            set: function(t) {
                              this.shadow.bias = t;
                            }
                          },
                          shadowDarkness: { set: function() {} },
                          shadowMapWidth: {
                            set: function(t) {
                              this.shadow.mapSize.width = t;
                            }
                          },
                          shadowMapHeight: {
                            set: function(t) {
                              this.shadow.mapSize.height = t;
                            }
                          }
                        }),
                        Object.defineProperties(Cr.prototype, {
                          length: {
                            get: function() {
                              return this.array.length;
                            }
                          }
                        }),
                        Object.assign(Fr.prototype, {
                          addIndex: function(t) {
                            this.setIndex(t);
                          },
                          addDrawCall: function(t, e, i) {
                            this.addGroup(t, e);
                          },
                          clearDrawCalls: function() {
                            this.clearGroups();
                          },
                          computeTangents: function() {},
                          computeOffsets: function() {}
                        }),
                        Object.defineProperties(Fr.prototype, {
                          drawcalls: {
                            get: function() {
                              return this.groups;
                            }
                          },
                          offsets: {
                            get: function() {
                              return this.groups;
                            }
                          }
                        }),
                        Object.defineProperties(ru.prototype, {
                          dynamic: { set: function() {} },
                          onUpdate: {
                            value: function() {
                              return this;
                            }
                          }
                        }),
                        Object.defineProperties(an.prototype, {
                          wrapAround: {
                            get: function() {},
                            set: function() {}
                          },
                          wrapRGB: {
                            get: function() {
                              return new Ni();
                            }
                          },
                          shading: {
                            get: function() {},
                            set: function(t) {
                              this.flatShading = 1 === t;
                            }
                          }
                        }),
                        Object.defineProperties(Fo.prototype, {
                          metal: {
                            get: function() {
                              return !1;
                            },
                            set: function() {}
                          }
                        }),
                        Object.defineProperties(on.prototype, {
                          derivatives: {
                            get: function() {
                              return this.extensions.derivatives;
                            },
                            set: function(t) {
                              this.extensions.derivatives = t;
                            }
                          }
                        }),
                        Object.assign(Ca.prototype, {
                          getCurrentRenderTarget: function() {
                            return this.getRenderTarget();
                          },
                          getMaxAnisotropy: function() {
                            return this.capabilities.getMaxAnisotropy();
                          },
                          getPrecision: function() {
                            return this.capabilities.precision;
                          },
                          supportsFloatTextures: function() {
                            return this.extensions.get('OES_texture_float');
                          },
                          supportsHalfFloatTextures: function() {
                            return this.extensions.get(
                              'OES_texture_half_float'
                            );
                          },
                          supportsStandardDerivatives: function() {
                            return this.extensions.get(
                              'OES_standard_derivatives'
                            );
                          },
                          supportsCompressedTextureS3TC: function() {
                            return this.extensions.get(
                              'WEBGL_compressed_texture_s3tc'
                            );
                          },
                          supportsCompressedTexturePVRTC: function() {
                            return this.extensions.get(
                              'WEBGL_compressed_texture_pvrtc'
                            );
                          },
                          supportsBlendMinMax: function() {
                            return this.extensions.get('EXT_blend_minmax');
                          },
                          supportsVertexTextures: function() {
                            return this.capabilities.vertexTextures;
                          },
                          supportsInstancedArrays: function() {
                            return this.extensions.get(
                              'ANGLE_instanced_arrays'
                            );
                          },
                          enableScissorTest: function(t) {
                            this.setScissorTest(t);
                          },
                          initMaterial: function() {},
                          addPrePlugin: function() {},
                          addPostPlugin: function() {},
                          updateShadowMap: function() {}
                        }),
                        Object.defineProperties(Ca.prototype, {
                          shadowMapEnabled: {
                            get: function() {
                              return this.shadowMap.enabled;
                            },
                            set: function(t) {
                              this.shadowMap.enabled = t;
                            }
                          },
                          shadowMapType: {
                            get: function() {
                              return this.shadowMap.type;
                            },
                            set: function(t) {
                              this.shadowMap.type = t;
                            }
                          },
                          shadowMapCullFace: {
                            get: function() {
                              return this.shadowMap.cullFace;
                            },
                            set: function(t) {
                              this.shadowMap.cullFace = t;
                            }
                          }
                        }),
                        Object.defineProperties(fn.prototype, {
                          cullFace: {
                            get: function() {
                              return this.renderReverseSided ? h : l;
                            },
                            set: function(t) {
                              var e = t !== l;
                              this.renderReverseSided = e;
                            }
                          }
                        }),
                        Object.defineProperties(Oe.prototype, {
                          wrapS: {
                            get: function() {
                              return this.texture.wrapS;
                            },
                            set: function(t) {
                              this.texture.wrapS = t;
                            }
                          },
                          wrapT: {
                            get: function() {
                              return this.texture.wrapT;
                            },
                            set: function(t) {
                              this.texture.wrapT = t;
                            }
                          },
                          magFilter: {
                            get: function() {
                              return this.texture.magFilter;
                            },
                            set: function(t) {
                              this.texture.magFilter = t;
                            }
                          },
                          minFilter: {
                            get: function() {
                              return this.texture.minFilter;
                            },
                            set: function(t) {
                              this.texture.minFilter = t;
                            }
                          },
                          anisotropy: {
                            get: function() {
                              return this.texture.anisotropy;
                            },
                            set: function(t) {
                              this.texture.anisotropy = t;
                            }
                          },
                          offset: {
                            get: function() {
                              return this.texture.offset;
                            },
                            set: function(t) {
                              this.texture.offset = t;
                            }
                          },
                          repeat: {
                            get: function() {
                              return this.texture.repeat;
                            },
                            set: function(t) {
                              this.texture.repeat = t;
                            }
                          },
                          format: {
                            get: function() {
                              return this.texture.format;
                            },
                            set: function(t) {
                              this.texture.format = t;
                            }
                          },
                          type: {
                            get: function() {
                              return this.texture.type;
                            },
                            set: function(t) {
                              this.texture.type = t;
                            }
                          },
                          generateMipmaps: {
                            get: function() {
                              return this.texture.generateMipmaps;
                            },
                            set: function(t) {
                              this.texture.generateMipmaps = t;
                            }
                          }
                        }),
                        (qc.prototype.load = function(t) {
                          var e = this;
                          return (
                            new Qc().load(t, function(t) {
                              e.setBuffer(t);
                            }),
                            this
                          );
                        }),
                        (Kc.prototype.getData = function() {
                          return this.getFrequencyData();
                        }),
                        (Wc.prototype.updateCubeMap = function(t, e) {
                          return this.update(t, e);
                        });
                      var Xu = {
                          merge: function(t, e, i) {
                            var n;
                            e.isMesh &&
                              (e.matrixAutoUpdate && e.updateMatrix(),
                              (n = e.matrix),
                              (e = e.geometry)),
                              t.merge(e, n, i);
                          },
                          center: function(t) {
                            return t.center();
                          }
                        },
                        qu = {
                          crossOrigin: void 0,
                          loadTexture: function(t, e, i, n) {
                            var r = new es();
                            r.setCrossOrigin(this.crossOrigin);
                            var a = r.load(t, i, void 0, n);
                            return e && (a.mapping = e), a;
                          },
                          loadTextureCube: function(t, e, i, n) {
                            var r = new ts();
                            r.setCrossOrigin(this.crossOrigin);
                            var a = r.load(t, i, void 0, n);
                            return e && (a.mapping = e), a;
                          },
                          loadCompressedTexture: function() {},
                          loadCompressedTextureCube: function() {}
                        };
                      (t.WebGLRenderTargetCube = ze),
                        (t.WebGLRenderTarget = Oe),
                        (t.WebGLRenderer = Ca),
                        (t.ShaderLib = ji),
                        (t.UniformsLib = Si),
                        (t.UniformsUtils = Ii),
                        (t.ShaderChunk = _i),
                        (t.FogExp2 = Sa),
                        (t.Fog = Ia),
                        (t.Scene = _a),
                        (t.LensFlare = ja),
                        (t.Sprite = za),
                        (t.LOD = Ra),
                        (t.SkinnedMesh = Pa),
                        (t.Skeleton = ka),
                        (t.Bone = Ua),
                        (t.Mesh = Zr),
                        (t.LineSegments = Ga),
                        (t.LineLoop = Va),
                        (t.Line = Fa),
                        (t.Points = Qa),
                        (t.Group = Ha),
                        (t.VideoTexture = Wa),
                        (t.DataTexture = Pe),
                        (t.CompressedTexture = Xa),
                        (t.CubeTexture = Be),
                        (t.CanvasTexture = Ri),
                        (t.DepthTexture = qa),
                        (t.Texture = _e),
                        (t.CompressedTextureLoader = Ko),
                        (t.DataTextureLoader = Jo),
                        (t.CubeTextureLoader = ts),
                        (t.TextureLoader = es),
                        (t.ObjectLoader = Us),
                        (t.MaterialLoader = Ds),
                        (t.BufferGeometryLoader = Cs),
                        (t.DefaultLoadingManager = qo),
                        (t.LoadingManager = Xo),
                        (t.JSONLoader = ks),
                        (t.ImageLoader = $o),
                        (t.FontLoader = rc),
                        (t.FileLoader = Zo),
                        (t.Loader = Rs),
                        (t.Cache = Wo),
                        (t.AudioLoader = Qc),
                        (t.SpotLightShadow = as),
                        (t.SpotLight = os),
                        (t.PointLight = ss),
                        (t.RectAreaLight = hs),
                        (t.HemisphereLight = ns),
                        (t.DirectionalLightShadow = cs),
                        (t.DirectionalLight = us),
                        (t.AmbientLight = ls),
                        (t.LightShadow = rs),
                        (t.Light = is),
                        (t.StereoCamera = Hc),
                        (t.PerspectiveCamera = Pn),
                        (t.OrthographicCamera = Un),
                        (t.CubeCamera = Wc),
                        (t.ArrayCamera = Na),
                        (t.Camera = kn),
                        (t.AudioListener = Xc),
                        (t.PositionalAudio = Zc),
                        (t.AudioContext = Yc),
                        (t.AudioAnalyser = Kc),
                        (t.Audio = qc),
                        (t.VectorKeyframeTrack = Ms),
                        (t.StringKeyframeTrack = Es),
                        (t.QuaternionKeyframeTrack = xs),
                        (t.NumberKeyframeTrack = As),
                        (t.ColorKeyframeTrack = Ts),
                        (t.BooleanKeyframeTrack = bs),
                        (t.PropertyMixer = Jc),
                        (t.PropertyBinding = tu),
                        (t.KeyframeTrack = Ls),
                        (t.AnimationUtils = ps),
                        (t.AnimationObjectGroup = eu),
                        (t.AnimationMixer = nu),
                        (t.AnimationClip = Ns),
                        (t.Uniform = ru),
                        (t.InstancedBufferGeometry = au),
                        (t.BufferGeometry = Fr),
                        (t.GeometryIdCount = Nr),
                        (t.Geometry = Dr),
                        (t.InterleavedBufferAttribute = ou),
                        (t.InstancedInterleavedBuffer = cu),
                        (t.InterleavedBuffer = su),
                        (t.InstancedBufferAttribute = uu),
                        (t.Face3 = Bn),
                        (t.Object3D = Rn),
                        (t.Raycaster = lu),
                        (t.Layers = vn),
                        (t.EventDispatcher = e),
                        (t.Clock = pu),
                        (t.QuaternionLinearInterpolant = ws),
                        (t.LinearInterpolant = gs),
                        (t.DiscreteInterpolant = vs),
                        (t.CubicInterpolant = ms),
                        (t.Interpolant = fs),
                        (t.Triangle = qr),
                        (t.Math = le),
                        (t.Spherical = fu),
                        (t.Cylindrical = mu),
                        (t.Plane = dn),
                        (t.Frustum = pn),
                        (t.Sphere = ln),
                        (t.Ray = Wr),
                        (t.Matrix4 = Ue),
                        (t.Matrix3 = hn),
                        (t.Box3 = un),
                        (t.Box2 = Oi),
                        (t.Line3 = Xr),
                        (t.Euler = gn),
                        (t.Vector4 = je),
                        (t.Vector3 = ke),
                        (t.Vector2 = he),
                        (t.Quaternion = Re),
                        (t.Color = Ni),
                        (t.ImmediateRenderObject = gu),
                        (t.VertexNormalsHelper = vu),
                        (t.SpotLightHelper = yu),
                        (t.SkeletonHelper = Mu),
                        (t.PointLightHelper = wu),
                        (t.RectAreaLightHelper = xu),
                        (t.HemisphereLightHelper = Au),
                        (t.GridHelper = Eu),
                        (t.PolarGridHelper = bu),
                        (t.FaceNormalsHelper = Tu),
                        (t.DirectionalLightHelper = Lu),
                        (t.CameraHelper = Nu),
                        (t.BoxHelper = Du),
                        (t.Box3Helper = Cu),
                        (t.PlaneHelper = Su),
                        (t.ArrowHelper = Iu),
                        (t.AxisHelper = _u),
                        (t.CatmullRomCurve3 = Uu),
                        (t.CubicBezierCurve3 = Pu),
                        (t.QuadraticBezierCurve3 = Bu),
                        (t.LineCurve3 = Fu),
                        (t.ArcCurve = Gu),
                        (t.EllipseCurve = Xs),
                        (t.SplineCurve = qs),
                        (t.CubicBezierCurve = Zs),
                        (t.QuadraticBezierCurve = Ks),
                        (t.LineCurve = Hs),
                        (t.Shape = ec),
                        (t.Path = tc),
                        (t.ShapePath = ic),
                        (t.Font = nc),
                        (t.CurvePath = Ws),
                        (t.Curve = Qs),
                        (t.ShapeUtils = go),
                        (t.SceneUtils = Vu),
                        (t.WebGLUtils = Da),
                        (t.WireframeGeometry = Za),
                        (t.ParametricGeometry = Ka),
                        (t.ParametricBufferGeometry = Ja),
                        (t.TetrahedronGeometry = eo),
                        (t.TetrahedronBufferGeometry = io),
                        (t.OctahedronGeometry = no),
                        (t.OctahedronBufferGeometry = ro),
                        (t.IcosahedronGeometry = ao),
                        (t.IcosahedronBufferGeometry = oo),
                        (t.DodecahedronGeometry = so),
                        (t.DodecahedronBufferGeometry = co),
                        (t.PolyhedronGeometry = $a),
                        (t.PolyhedronBufferGeometry = to),
                        (t.TubeGeometry = uo),
                        (t.TubeBufferGeometry = lo),
                        (t.TorusKnotGeometry = ho),
                        (t.TorusKnotBufferGeometry = po),
                        (t.TorusGeometry = fo),
                        (t.TorusBufferGeometry = mo),
                        (t.TextGeometry = Mo),
                        (t.TextBufferGeometry = wo),
                        (t.SphereGeometry = xo),
                        (t.SphereBufferGeometry = Ao),
                        (t.RingGeometry = Eo),
                        (t.RingBufferGeometry = bo),
                        (t.PlaneGeometry = Yr),
                        (t.PlaneBufferGeometry = Qr),
                        (t.LatheGeometry = To),
                        (t.LatheBufferGeometry = Lo),
                        (t.ShapeGeometry = No),
                        (t.ShapeBufferGeometry = Do),
                        (t.ExtrudeGeometry = vo),
                        (t.ExtrudeBufferGeometry = yo),
                        (t.EdgesGeometry = Co),
                        (t.ConeGeometry = _o),
                        (t.ConeBufferGeometry = jo),
                        (t.CylinderGeometry = So),
                        (t.CylinderBufferGeometry = Io),
                        (t.CircleGeometry = Oo),
                        (t.CircleBufferGeometry = zo),
                        (t.BoxGeometry = Gr),
                        (t.BoxBufferGeometry = Vr),
                        (t.ShadowMaterial = ko),
                        (t.SpriteMaterial = Oa),
                        (t.RawShaderMaterial = Uo),
                        (t.ShaderMaterial = on),
                        (t.PointsMaterial = Ya),
                        (t.MeshPhysicalMaterial = Bo),
                        (t.MeshStandardMaterial = Po),
                        (t.MeshPhongMaterial = Fo),
                        (t.MeshToonMaterial = Go),
                        (t.MeshNormalMaterial = Vo),
                        (t.MeshLambertMaterial = Yo),
                        (t.MeshDepthMaterial = sn),
                        (t.MeshDistanceMaterial = cn),
                        (t.MeshBasicMaterial = Hr),
                        (t.LineDashedMaterial = Qo),
                        (t.LineBasicMaterial = Ba),
                        (t.Material = an),
                        (t.Float64BufferAttribute = Ur),
                        (t.Float32BufferAttribute = kr),
                        (t.Uint32BufferAttribute = Rr),
                        (t.Int32BufferAttribute = zr),
                        (t.Uint16BufferAttribute = Or),
                        (t.Int16BufferAttribute = jr),
                        (t.Uint8ClampedBufferAttribute = _r),
                        (t.Uint8BufferAttribute = Ir),
                        (t.Int8BufferAttribute = Sr),
                        (t.BufferAttribute = Cr),
                        (t.REVISION = c),
                        (t.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 }),
                        (t.CullFaceNone = u),
                        (t.CullFaceBack = l),
                        (t.CullFaceFront = h),
                        (t.CullFaceFrontBack = 3),
                        (t.FrontFaceDirectionCW = d),
                        (t.FrontFaceDirectionCCW = 1),
                        (t.BasicShadowMap = 0),
                        (t.PCFShadowMap = p),
                        (t.PCFSoftShadowMap = f),
                        (t.FrontSide = m),
                        (t.BackSide = g),
                        (t.DoubleSide = v),
                        (t.FlatShading = 1),
                        (t.SmoothShading = 2),
                        (t.NoColors = y),
                        (t.FaceColors = M),
                        (t.VertexColors = w),
                        (t.NoBlending = x),
                        (t.NormalBlending = A),
                        (t.AdditiveBlending = E),
                        (t.SubtractiveBlending = b),
                        (t.MultiplyBlending = T),
                        (t.CustomBlending = L),
                        (t.AddEquation = N),
                        (t.SubtractEquation = D),
                        (t.ReverseSubtractEquation = C),
                        (t.MinEquation = S),
                        (t.MaxEquation = I),
                        (t.ZeroFactor = _),
                        (t.OneFactor = j),
                        (t.SrcColorFactor = O),
                        (t.OneMinusSrcColorFactor = z),
                        (t.SrcAlphaFactor = R),
                        (t.OneMinusSrcAlphaFactor = k),
                        (t.DstAlphaFactor = U),
                        (t.OneMinusDstAlphaFactor = P),
                        (t.DstColorFactor = B),
                        (t.OneMinusDstColorFactor = F),
                        (t.SrcAlphaSaturateFactor = G),
                        (t.NeverDepth = V),
                        (t.AlwaysDepth = Y),
                        (t.LessDepth = Q),
                        (t.LessEqualDepth = H),
                        (t.EqualDepth = W),
                        (t.GreaterEqualDepth = X),
                        (t.GreaterDepth = q),
                        (t.NotEqualDepth = Z),
                        (t.MultiplyOperation = K),
                        (t.MixOperation = J),
                        (t.AddOperation = $),
                        (t.NoToneMapping = tt),
                        (t.LinearToneMapping = et),
                        (t.ReinhardToneMapping = it),
                        (t.Uncharted2ToneMapping = nt),
                        (t.CineonToneMapping = rt),
                        (t.UVMapping = 300),
                        (t.CubeReflectionMapping = at),
                        (t.CubeRefractionMapping = ot),
                        (t.EquirectangularReflectionMapping = st),
                        (t.EquirectangularRefractionMapping = ct),
                        (t.SphericalReflectionMapping = ut),
                        (t.CubeUVReflectionMapping = lt),
                        (t.CubeUVRefractionMapping = ht),
                        (t.RepeatWrapping = dt),
                        (t.ClampToEdgeWrapping = pt),
                        (t.MirroredRepeatWrapping = ft),
                        (t.NearestFilter = mt),
                        (t.NearestMipMapNearestFilter = gt),
                        (t.NearestMipMapLinearFilter = vt),
                        (t.LinearFilter = yt),
                        (t.LinearMipMapNearestFilter = Mt),
                        (t.LinearMipMapLinearFilter = wt),
                        (t.UnsignedByteType = xt),
                        (t.ByteType = At),
                        (t.ShortType = Et),
                        (t.UnsignedShortType = bt),
                        (t.IntType = Tt),
                        (t.UnsignedIntType = Lt),
                        (t.FloatType = Nt),
                        (t.HalfFloatType = Dt),
                        (t.UnsignedShort4444Type = Ct),
                        (t.UnsignedShort5551Type = St),
                        (t.UnsignedShort565Type = It),
                        (t.UnsignedInt248Type = _t),
                        (t.AlphaFormat = jt),
                        (t.RGBFormat = Ot),
                        (t.RGBAFormat = zt),
                        (t.LuminanceFormat = Rt),
                        (t.LuminanceAlphaFormat = kt),
                        (t.RGBEFormat = Ut),
                        (t.DepthFormat = Pt),
                        (t.DepthStencilFormat = Bt),
                        (t.RGB_S3TC_DXT1_Format = Ft),
                        (t.RGBA_S3TC_DXT1_Format = Gt),
                        (t.RGBA_S3TC_DXT3_Format = Vt),
                        (t.RGBA_S3TC_DXT5_Format = Yt),
                        (t.RGB_PVRTC_4BPPV1_Format = Qt),
                        (t.RGB_PVRTC_2BPPV1_Format = Ht),
                        (t.RGBA_PVRTC_4BPPV1_Format = Wt),
                        (t.RGBA_PVRTC_2BPPV1_Format = Xt),
                        (t.RGB_ETC1_Format = qt),
                        (t.LoopOnce = 2200),
                        (t.LoopRepeat = Zt),
                        (t.LoopPingPong = 2202),
                        (t.InterpolateDiscrete = 2300),
                        (t.InterpolateLinear = 2301),
                        (t.InterpolateSmooth = 2302),
                        (t.ZeroCurvatureEnding = Kt),
                        (t.ZeroSlopeEnding = 2401),
                        (t.WrapAroundEnding = 2402),
                        (t.TrianglesDrawMode = Jt),
                        (t.TriangleStripDrawMode = $t),
                        (t.TriangleFanDrawMode = te),
                        (t.LinearEncoding = ee),
                        (t.sRGBEncoding = ie),
                        (t.GammaEncoding = ne),
                        (t.RGBEEncoding = re),
                        (t.LogLuvEncoding = 3003),
                        (t.RGBM7Encoding = ae),
                        (t.RGBM16Encoding = oe),
                        (t.RGBDEncoding = se),
                        (t.BasicDepthPacking = ce),
                        (t.RGBADepthPacking = ue),
                        (t.CubeGeometry = Gr),
                        (t.Face4 = function(t, e, i, n, r, a, o) {
                          return new Bn(t, e, i, r, a, o);
                        }),
                        (t.LineStrip = 0),
                        (t.LinePieces = 1),
                        (t.MeshFaceMaterial = function(t) {
                          return t;
                        }),
                        (t.MultiMaterial = function(t) {
                          return (
                            void 0 === t && (t = []),
                            (t.isMultiMaterial = !0),
                            (t.materials = t),
                            (t.clone = function() {
                              return t.slice();
                            }),
                            t
                          );
                        }),
                        (t.PointCloud = function(t, e) {
                          return new Qa(t, e);
                        }),
                        (t.Particle = function(t) {
                          return new za(t);
                        }),
                        (t.ParticleSystem = function(t, e) {
                          return new Qa(t, e);
                        }),
                        (t.PointCloudMaterial = function(t) {
                          return new Ya(t);
                        }),
                        (t.ParticleBasicMaterial = function(t) {
                          return new Ya(t);
                        }),
                        (t.ParticleSystemMaterial = function(t) {
                          return new Ya(t);
                        }),
                        (t.Vertex = function(t, e, i) {
                          return new ke(t, e, i);
                        }),
                        (t.DynamicBufferAttribute = function(t, e) {
                          return new Cr(t, e).setDynamic(!0);
                        }),
                        (t.Int8Attribute = function(t, e) {
                          return new Sr(t, e);
                        }),
                        (t.Uint8Attribute = function(t, e) {
                          return new Ir(t, e);
                        }),
                        (t.Uint8ClampedAttribute = function(t, e) {
                          return new _r(t, e);
                        }),
                        (t.Int16Attribute = function(t, e) {
                          return new jr(t, e);
                        }),
                        (t.Uint16Attribute = function(t, e) {
                          return new Or(t, e);
                        }),
                        (t.Int32Attribute = function(t, e) {
                          return new zr(t, e);
                        }),
                        (t.Uint32Attribute = function(t, e) {
                          return new Rr(t, e);
                        }),
                        (t.Float32Attribute = function(t, e) {
                          return new kr(t, e);
                        }),
                        (t.Float64Attribute = function(t, e) {
                          return new Ur(t, e);
                        }),
                        (t.ClosedSplineCurve3 = Qu),
                        (t.SplineCurve3 = Hu),
                        (t.Spline = Wu),
                        (t.BoundingBoxHelper = function(t, e) {
                          return new Du(t, e);
                        }),
                        (t.EdgesHelper = function(t, e) {
                          return new Ga(
                            new Co(t.geometry),
                            new Ba({ color: void 0 !== e ? e : 16777215 })
                          );
                        }),
                        (t.WireframeHelper = function(t, e) {
                          return new Ga(
                            new Za(t.geometry),
                            new Ba({ color: void 0 !== e ? e : 16777215 })
                          );
                        }),
                        (t.XHRLoader = function(t) {
                          return new Zo(t);
                        }),
                        (t.BinaryTextureLoader = function(t) {
                          return new Jo(t);
                        }),
                        (t.GeometryUtils = Xu),
                        (t.ImageUtils = qu),
                        (t.Projector = function() {
                          (this.projectVector = function(t, e) {
                            t.project(e);
                          }),
                            (this.unprojectVector = function(t, e) {
                              t.unproject(e);
                            }),
                            (this.pickingRay = function() {});
                        }),
                        (t.CanvasRenderer = function() {
                          (this.domElement = document.createElementNS(
                            'http://www.w3.org/1999/xhtml',
                            'canvas'
                          )),
                            (this.clear = function() {}),
                            (this.render = function() {}),
                            (this.setClearColor = function() {}),
                            (this.setSize = function() {});
                        }),
                        Object.defineProperty(t, '__esModule', { value: !0 });
                    })(
                      'object' == typeof i && void 0 !== e
                        ? i
                        : (n.THREE = n.THREE || {})
                    );
                },
                {}
              ],
              42: [
                function(t, e, i) {
                  THREE.ColladaLoader = function() {
                    var t,
                      e,
                      i,
                      n,
                      r,
                      a,
                      o,
                      s,
                      c,
                      u,
                      l = null,
                      h = null,
                      d = null,
                      p = {},
                      f = {},
                      m = {},
                      g = {},
                      v = {},
                      y = {},
                      M = {},
                      w = {},
                      x = {},
                      A = {
                        centerGeometry: !1,
                        convertUpAxis: !1,
                        subdivideFaces: !0,
                        upAxis: 'Y',
                        defaultEnvMap: null
                      },
                      E = 1,
                      b = 'Y',
                      T = null;
                    function L(u, p, L) {
                      if (
                        ((l = new DOMParser().parseFromString(u, 'text/xml')),
                        (p = p || d),
                        void 0 !== L)
                      ) {
                        var D = L.split('/');
                        D.pop(), (o = (D.length < 1 ? '.' : D.join('/')) + '/');
                      }
                      !(function() {
                        var t = l.querySelectorAll('asset')[0];
                        if (t && t.childNodes)
                          for (var e = 0; e < t.childNodes.length; e++) {
                            var i = t.childNodes[e];
                            switch (i.nodeName) {
                              case 'unit':
                                var n = i.getAttribute('meter');
                                n && (E = parseFloat(n));
                                break;
                              case 'up_axis':
                                b = i.textContent.charAt(0);
                            }
                          }
                      })(),
                        (function() {
                          if (!0 !== A.convertUpAxis || b === A.upAxis)
                            T = null;
                          else
                            switch (b) {
                              case 'X':
                                T = 'Y' === A.upAxis ? 'XtoY' : 'XtoZ';
                                break;
                              case 'Y':
                                T = 'X' === A.upAxis ? 'YtoX' : 'YtoZ';
                                break;
                              case 'Z':
                                T = 'X' === A.upAxis ? 'ZtoX' : 'ZtoY';
                            }
                        })(),
                        (f = N('library_images image', k, 'image')),
                        (y = N('library_materials material', nt, 'material')),
                        (M = N('library_effects effect', ct, 'effect')),
                        (v = N('library_geometries geometry', W, 'geometry')),
                        (w = N('library_cameras camera', ft, 'camera')),
                        (x = N('library_lights light', gt, 'light')),
                        (g = N(
                          'library_controllers controller',
                          U,
                          'controller'
                        )),
                        (m = N(
                          'library_animations animation',
                          lt,
                          'animation'
                        )),
                        (r = N(
                          'library_visual_scenes visual_scene',
                          F,
                          'visual_scene'
                        )),
                        (a = N(
                          'library_kinematics_models kinematics_model',
                          yt,
                          'kinematics_model'
                        )),
                        (s = []),
                        (c = []),
                        (t = (function() {
                          var t = l.querySelectorAll(
                            'scene instance_visual_scene'
                          )[0];
                          if (t) {
                            var e = t.getAttribute('url').replace(/^#/, '');
                            return r[e.length > 0 ? e : 'visual_scene0'];
                          }
                          return null;
                        })()),
                        (h = new THREE.Group());
                      for (var C = 0; C < t.nodes.length; C++)
                        h.add(_(t.nodes[C]));
                      h.scale.multiplyScalar(E),
                        (i = []),
                        (function e(n) {
                          var r = t.getChildById(n.colladaId, !0),
                            a = null;
                          if (r && r.keys) {
                            (a = {
                              fps: 60,
                              hierarchy: [
                                { node: r, keys: r.keys, sids: r.sids }
                              ],
                              node: n,
                              name: 'animation_' + n.name,
                              length: 0
                            }),
                              i.push(a);
                            for (var o = 0, s = r.keys.length; o < s; o++)
                              a.length = Math.max(a.length, r.keys[o].time);
                          } else a = { hierarchy: [{ keys: [], sids: [] }] };
                          for (var o = 0, s = n.children.length; o < s; o++)
                            for (
                              var c = e(n.children[o]),
                                u = 0,
                                l = c.hierarchy.length;
                              u < l;
                              u++
                            )
                              a.hierarchy.push({ keys: [], sids: [] });
                          return a;
                        })(h),
                        (e = (function() {
                          var t = l.querySelectorAll(
                            'instance_kinematics_model'
                          )[0];
                          if (t) {
                            var e = t.getAttribute('url').replace(/^#/, '');
                            return a[e.length > 0 ? e : 'kinematics_model0'];
                          }
                          return null;
                        })()),
                        (function() {
                          if (e && 0 === e.joints.length)
                            return void (n = void 0);
                          var i = {},
                            r = function(n, r) {
                              var a = r.getAttribute('id'),
                                o = t.getChildById(a, !0),
                                s = e.joints[n];
                              h.traverse(function(t) {
                                t.colladaId == a &&
                                  (i[n] = {
                                    node: t,
                                    transforms: o.transforms,
                                    joint: s,
                                    position: s.zeroPosition
                                  });
                              });
                            };
                          n = {
                            joints: e && e.joints,
                            getJointValue: function(t) {
                              var e = i[t];
                              if (e) return e.position;
                            },
                            setJointValue: function(t, e) {
                              var n = i[t];
                              if (n) {
                                var r = n.joint;
                                if (e > r.limits.max || e < r.limits.min);
                                else if (r.static);
                                else {
                                  var a = n.node,
                                    s = r.axis,
                                    c = n.transforms,
                                    u = new THREE.Matrix4(),
                                    l = new THREE.Matrix4();
                                  for (o = 0; o < c.length; o++) {
                                    var h = c[o];
                                    if (
                                      h.sid &&
                                      -1 !== h.sid.indexOf('joint' + t)
                                    )
                                      switch (r.type) {
                                        case 'revolute':
                                          u.multiply(
                                            l.makeRotationAxis(
                                              s,
                                              THREE.Math.degToRad(e)
                                            )
                                          );
                                          break;
                                        case 'prismatic':
                                          u.multiply(
                                            l.makeTranslation(
                                              s.x * e,
                                              s.y * e,
                                              s.z * e
                                            )
                                          );
                                      }
                                    else
                                      switch (h.type) {
                                        case 'matrix':
                                          u.multiply(h.obj);
                                          break;
                                        case 'translate':
                                          u.multiply(
                                            l.makeTranslation(
                                              h.obj.x,
                                              h.obj.y,
                                              h.obj.z
                                            )
                                          );
                                          break;
                                        case 'rotate':
                                          u.multiply(
                                            l.makeRotationAxis(h.obj, h.angle)
                                          );
                                      }
                                  }
                                  var d = u.elements,
                                    p = Array.prototype.slice.call(d),
                                    f = [
                                      p[0],
                                      p[4],
                                      p[8],
                                      p[12],
                                      p[1],
                                      p[5],
                                      p[9],
                                      p[13],
                                      p[2],
                                      p[6],
                                      p[10],
                                      p[14],
                                      p[3],
                                      p[7],
                                      p[11],
                                      p[15]
                                    ];
                                  a.matrix.set.apply(a.matrix, f),
                                    a.matrix.decompose(
                                      a.position,
                                      a.quaternion,
                                      a.scale
                                    ),
                                    (i[t].position = e);
                                }
                              }
                            }
                          };
                          var a = l.querySelector(
                            'scene instance_kinematics_scene'
                          );
                          if (a)
                            for (var o = 0; o < a.childNodes.length; o++) {
                              var s = a.childNodes[o];
                              if (1 == s.nodeType)
                                switch (s.nodeName) {
                                  case 'bind_joint_axis':
                                    var c = s
                                        .getAttribute('target')
                                        .split('/')
                                        .pop(),
                                      u = s.querySelector('axis param')
                                        .textContent,
                                      d = parseInt(
                                        u
                                          .split('joint')
                                          .pop()
                                          .split('.')[0]
                                      ),
                                      p = l.querySelector('[sid="' + c + '"]');
                                    if (p) {
                                      var f = p.parentElement;
                                      r(d, f);
                                    }
                                }
                            }
                        })();
                      var S = {
                        scene: h,
                        morphs: s,
                        skins: c,
                        animations: i,
                        kinematics: n,
                        dae: {
                          images: f,
                          materials: y,
                          cameras: w,
                          lights: x,
                          effects: M,
                          geometries: v,
                          controllers: g,
                          animations: m,
                          visualScenes: r,
                          visualScene: t,
                          scene: t,
                          kinematicsModels: a,
                          kinematicsModel: e
                        }
                      };
                      return p && p(S), S;
                    }
                    function N(t, e, i) {
                      for (
                        var n = l.querySelectorAll(t),
                          r = {},
                          a = 0,
                          o = n.length,
                          s = 0;
                        s < o;
                        s++
                      ) {
                        var c = n[s],
                          u = new e().parse(c);
                        (u.id && 0 !== u.id.length) || (u.id = i + a++),
                          (r[u.id] = u);
                      }
                      return r;
                    }
                    function D(t, e) {
                      var i = e instanceof Y ? g[e.url] : e;
                      if (i && i.morph) {
                        for (
                          var n = i.morph, r = 0;
                          r < n.targets.length;
                          r++
                        ) {
                          var a = n.targets[r],
                            o = v[a];
                          if (
                            o.mesh &&
                            o.mesh.primitives &&
                            o.mesh.primitives.length
                          ) {
                            var s = o.mesh.primitives[0].geometry;
                            s.vertices.length === t.vertices.length &&
                              t.morphTargets.push({
                                name: 'target_1',
                                vertices: s.vertices
                              });
                          }
                        }
                        t.morphTargets.push({
                          name: 'target_Z',
                          vertices: t.vertices
                        });
                      }
                    }
                    function C(t, e, i, n) {
                      if (
                        ((t.world = t.world || new THREE.Matrix4()),
                        (t.localworld = t.localworld || new THREE.Matrix4()),
                        t.world.copy(t.matrix),
                        t.localworld.copy(t.matrix),
                        t.channels && t.channels.length)
                      ) {
                        var r = t.channels[0].sampler.output[i];
                        r instanceof THREE.Matrix4 &&
                          (t.world.copy(r),
                          t.localworld.copy(r),
                          0 === i && t.matrix.copy(r));
                      }
                      n && t.world.multiplyMatrices(n, t.world), e.push(t);
                      for (var a = 0; a < t.nodes.length; a++)
                        C(t.nodes[a], e, i, t.world);
                    }
                    function S(t, e) {
                      for (var i = 0; i < t.length; i++) {
                        var n = t[i],
                          r = -1;
                        if ('JOINT' == n.type) {
                          for (var a = 0; a < e.joints.length; a++)
                            if (n.sid === e.joints[a]) {
                              r = a;
                              break;
                            }
                          if (r >= 0) {
                            var o = e.invBindMatrices[r];
                            (n.invBindMatrix = o),
                              (n.skinningMatrix = new THREE.Matrix4()),
                              n.skinningMatrix.multiplyMatrices(n.world, o),
                              (n.animatrix = new THREE.Matrix4()),
                              n.animatrix.copy(n.localworld),
                              (n.weights = []);
                            for (a = 0; a < e.weights.length; a++)
                              for (var s = 0; s < e.weights[a].length; s++) {
                                var c = e.weights[a][s];
                                c.joint === r && n.weights.push(c);
                              }
                          } else
                            (n.skinningMatrix = new THREE.Matrix4()),
                              (n.weights = []);
                        }
                      }
                    }
                    function I(e, i, n) {
                      void 0 === n && (n = 40);
                      var r = g[i.url];
                      if (r && r.skin && i.skeleton && i.skeleton.length) {
                        for (
                          var a,
                            o,
                            s = (function() {
                              var t,
                                e = 1e6,
                                i = -e,
                                n = 0;
                              for (var r in m) {
                                var a = m[r];
                                t = t || a.id;
                                for (var o = 0; o < a.sampler.length; o++) {
                                  var s = a.sampler[o];
                                  s.create(),
                                    (e = Math.min(e, s.startTime)),
                                    (i = Math.max(i, s.endTime)),
                                    (n = Math.max(n, s.input.length));
                                }
                              }
                              return { start: e, end: i, frames: n, ID: t };
                            })(),
                            c =
                              t.getChildById(i.skeleton[0], !0) ||
                              t.getChildBySid(i.skeleton[0], !0),
                            u = ((o = function(t, e, i) {
                              var n = {};
                              (n.name = e.sid),
                                (n.parent = t),
                                (n.matrix = e.matrix);
                              var r = [
                                new THREE.Vector3(),
                                new THREE.Quaternion(),
                                new THREE.Vector3()
                              ];
                              n.matrix.decompose(r[0], r[1], r[2]),
                                (n.pos = [r[0].x, r[0].y, r[0].z]),
                                (n.scl = [r[2].x, r[2].y, r[2].z]),
                                (n.rotq = [r[1].x, r[1].y, r[1].z, r[1].w]),
                                i.push(n);
                              for (var a in e.nodes) o(e.sid, e.nodes[a], i);
                            })(-1, c, (a = [])),
                            a),
                            l = r.skin.joints,
                            h = [],
                            d = 0;
                          d < l.length;
                          d++
                        )
                          for (var p = 0; p < u.length; p++)
                            u[p].name === l[d] && (h[d] = u[p]);
                        for (var d = 0; d < h.length; d++)
                          for (var p = 0; p < h.length; p++)
                            h[d].parent === h[p].name && (h[d].parent = p);
                        new THREE.Vector3();
                        for (d = 0; d < e.vertices.length; d++)
                          e.vertices[d].applyMatrix4(r.skin.bindShapeMatrix);
                        var f = [],
                          v = [],
                          y = r.skin.weights;
                        for (d = 0; d < y.length; d++) {
                          var M = new THREE.Vector4(
                              y[d][0] ? y[d][0].joint : 0,
                              y[d][1] ? y[d][1].joint : 0,
                              y[d][2] ? y[d][2].joint : 0,
                              y[d][3] ? y[d][3].joint : 0
                            ),
                            w = new THREE.Vector4(
                              y[d][0] ? y[d][0].weight : 0,
                              y[d][1] ? y[d][1].weight : 0,
                              y[d][2] ? y[d][2].weight : 0,
                              y[d][3] ? y[d][3].weight : 0
                            );
                          f.push(M), v.push(w);
                        }
                        (e.skinIndices = f), (e.skinWeights = v), (e.bones = h);
                        var x = {
                          name: s.ID,
                          fps: 30,
                          length: s.frames / 30,
                          hierarchy: []
                        };
                        for (p = 0; p < h.length; p++)
                          x.hierarchy.push({
                            parent: h[p].parent,
                            name: h[p].name,
                            keys: []
                          });
                        for (
                          (function(t, e, i) {
                            var n = [];
                            C(e, n, -1), S(n, i.skin);
                            for (
                              var r = new THREE.Vector3(), a = [], o = 0;
                              o < t.vertices.length;
                              o++
                            )
                              a.push(new THREE.Vector3());
                            for (o = 0; o < n.length; o++)
                              if ('JOINT' == n[o].type)
                                for (var s = 0; s < n[o].weights.length; s++) {
                                  var c = n[o].weights[s],
                                    u = c.index,
                                    l = c.weight,
                                    h = t.vertices[u],
                                    d = a[u];
                                  (r.x = h.x),
                                    (r.y = h.y),
                                    (r.z = h.z),
                                    r.applyMatrix4(n[o].skinningMatrix),
                                    (d.x += r.x * l),
                                    (d.y += r.y * l),
                                    (d.z += r.z * l);
                                }
                            for (o = 0; o < t.vertices.length; o++)
                              t.vertices[o] = a[o];
                          })(e, c, r),
                            n = 0;
                          n < s.frames;
                          n++
                        ) {
                          var A = [];
                          C(c, A, n), S(A, r.skin);
                          for (d = 0; d < A.length; d++)
                            for (p = 0; p < x.hierarchy.length; p++)
                              if (x.hierarchy[p].name === A[d].sid) {
                                var E = {};
                                (E.time = n / 30),
                                  (E.matrix = A[d].animatrix),
                                  0 === n && (A[d].matrix = E.matrix);
                                var b = [
                                  new THREE.Vector3(),
                                  new THREE.Quaternion(),
                                  new THREE.Vector3()
                                ];
                                E.matrix.decompose(b[0], b[1], b[2]),
                                  (E.pos = [b[0].x, b[0].y, b[0].z]),
                                  (E.scl = [b[2].x, b[2].y, b[2].z]),
                                  (E.rot = b[1]),
                                  x.hierarchy[p].keys.push(E);
                              }
                          e.animation = x;
                        }
                      }
                    }
                    function _(t, e) {
                      var i,
                        n,
                        r,
                        a,
                        o = new THREE.Object3D();
                      for (r = 0; r < t.controllers.length; r++) {
                        var u = g[t.controllers[r].url];
                        switch (u.type) {
                          case 'skin':
                            if (v[u.skin.source])
                              ((h = new H()).url = u.skin.source),
                                (h.instance_material =
                                  t.controllers[r].instance_material),
                                t.geometries.push(h),
                                !0,
                                (i = t.controllers[r]);
                            else if (g[u.skin.source]) {
                              var l = g[u.skin.source];
                              if (((n = l), l.morph && v[l.morph.source]))
                                ((h = new H()).url = l.morph.source),
                                  (h.instance_material =
                                    t.controllers[r].instance_material),
                                  t.geometries.push(h);
                            }
                            break;
                          case 'morph':
                            var h;
                            if (v[u.morph.source])
                              ((h = new H()).url = u.morph.source),
                                (h.instance_material =
                                  t.controllers[r].instance_material),
                                t.geometries.push(h),
                                (n = t.controllers[r]);
                        }
                      }
                      var d = {};
                      for (r = 0; r < t.geometries.length; r++) {
                        var p,
                          f = t.geometries[r],
                          m = f.instance_material,
                          E = v[f.url],
                          b = {},
                          T = [],
                          L = 0;
                        if (E) {
                          if (!E.mesh || !E.mesh.primitives) continue;
                          if ((0 === o.name.length && (o.name = E.id), m))
                            for (a = 0; a < m.length; a++) {
                              var N = m[a],
                                C = y[N.target],
                                S = C.instance_effect.url,
                                j = M[S].shader.material;
                              if (E.doubleSided) {
                                if (!(N.symbol in d)) {
                                  var O = j.clone();
                                  (O.side = THREE.DoubleSide),
                                    (d[N.symbol] = O);
                                }
                                j = d[N.symbol];
                              }
                              (j.opacity = j.opacity ? j.opacity : 1),
                                (b[N.symbol] = L),
                                T.push(j),
                                ((p = j).name =
                                  null === C.name || '' === C.name
                                    ? C.id
                                    : C.name),
                                L++;
                            }
                          var z,
                            R =
                              p ||
                              new THREE.MeshLambertMaterial({
                                color: 14540253,
                                side: E.doubleSided
                                  ? THREE.DoubleSide
                                  : THREE.FrontSide
                              }),
                            k = E.mesh.geometry3js;
                          if (L > 1)
                            for (
                              R = new THREE.MultiMaterial(T), a = 0;
                              a < k.faces.length;
                              a++
                            ) {
                              var U = k.faces[a];
                              U.materialIndex = b[U.daeMaterial];
                            }
                          void 0 !== i
                            ? (I(k, i),
                              k.morphTargets.length > 0
                                ? ((R.morphTargets = !0), (R.skinning = !1))
                                : ((R.morphTargets = !1), (R.skinning = !0)),
                              ((z = new THREE.SkinnedMesh(k, R, !1)).name =
                                'skin_' + c.length),
                              c.push(z))
                            : void 0 !== n
                              ? (D(k, n),
                                (R.morphTargets = !0),
                                ((z = new THREE.Mesh(k, R)).name =
                                  'morph_' + s.length),
                                s.push(z))
                              : (z =
                                  !0 === k.isLineStrip
                                    ? new THREE.Line(k)
                                    : new THREE.Mesh(k, R)),
                            o.add(z);
                        }
                      }
                      for (r = 0; r < t.cameras.length; r++) {
                        var P = t.cameras[r],
                          B = w[P.url],
                          F = new THREE.PerspectiveCamera(
                            B.yfov,
                            parseFloat(B.aspect_ratio),
                            parseFloat(B.znear),
                            parseFloat(B.zfar)
                          );
                        o.add(F);
                      }
                      for (r = 0; r < t.lights.length; r++) {
                        var G = null,
                          V = t.lights[r],
                          Y = x[V.url];
                        if (Y && Y.technique) {
                          var Q = Y.color.getHex(),
                            W = Y.intensity,
                            X = Y.distance,
                            q = Y.falloff_angle;
                          switch (Y.technique) {
                            case 'directional':
                              (G = new THREE.DirectionalLight(
                                Q,
                                W,
                                X
                              )).position.set(0, 0, 1);
                              break;
                            case 'point':
                              G = new THREE.PointLight(Q, W, X);
                              break;
                            case 'spot':
                              (G = new THREE.SpotLight(
                                Q,
                                W,
                                X,
                                q
                              )).position.set(0, 0, 1);
                              break;
                            case 'ambient':
                              G = new THREE.AmbientLight(Q);
                          }
                        }
                        G && o.add(G);
                      }
                      if (
                        ((o.name = t.name || t.id || ''),
                        (o.colladaId = t.id || ''),
                        (o.layer = t.layer || ''),
                        (o.matrix = t.matrix),
                        o.matrix.decompose(o.position, o.quaternion, o.scale),
                        A.centerGeometry && o.geometry)
                      ) {
                        var Z = o.geometry.center();
                        Z.multiply(o.scale),
                          Z.applyQuaternion(o.quaternion),
                          o.position.sub(Z);
                      }
                      for (r = 0; r < t.nodes.length; r++)
                        o.add(_(t.nodes[r], t));
                      return o;
                    }
                    function j(t) {
                      for (
                        var e = l.querySelectorAll('library_nodes node'), i = 0;
                        i < e.length;
                        i++
                      ) {
                        var n = e[i].attributes.getNamedItem('id');
                        if (n && n.value === t) return e[i];
                      }
                    }
                    function O(t, e) {
                      for (
                        var i = null, n = 0, r = t.length;
                        n < r && null === i;
                        n++
                      ) {
                        var a = t[n];
                        if (a.time === e) i = a;
                        else if (a.time > e) break;
                      }
                      return i;
                    }
                    function z(t, e) {
                      for (
                        var i = -1, n = 0, r = t.length;
                        n < r && -1 === i;
                        n++
                      ) {
                        t[n].time >= e && (i = n);
                      }
                      return i;
                    }
                    function R(t, e, i, n) {
                      var r = (function(t, e, i) {
                          for (i = i >= 0 ? i : i + t.length; i >= 0; i--) {
                            var n = t[i];
                            if (n.hasTarget(e)) return n;
                          }
                          return null;
                        })(t, n, i ? i - 1 : 0),
                        a = (function(t, e, i) {
                          for (; i < t.length; i++) {
                            var n = t[i];
                            if (n.hasTarget(e)) return n;
                          }
                          return null;
                        })(t, n, i + 1);
                      if (r && a) {
                        var o,
                          s = (e.time - r.time) / (a.time - r.time),
                          c = r.getTarget(n),
                          u = a.getTarget(n).data,
                          l = c.data;
                        if ('matrix' === c.type) o = l;
                        else if (l.length) {
                          o = [];
                          for (var h = 0; h < l.length; ++h)
                            o[h] = l[h] + (u[h] - l[h]) * s;
                        } else o = l + (u - l) * s;
                        e.addTarget(n, c.transform, c.member, o);
                      }
                    }
                    function k() {
                      (this.id = ''), (this.init_from = '');
                    }
                    function U() {
                      (this.id = ''),
                        (this.name = ''),
                        (this.type = ''),
                        (this.skin = null),
                        (this.morph = null);
                    }
                    function P() {
                      (this.method = null),
                        (this.source = null),
                        (this.targets = null),
                        (this.weights = null);
                    }
                    function B() {
                      (this.source = ''),
                        (this.bindShapeMatrix = null),
                        (this.invBindMatrices = []),
                        (this.joints = []),
                        (this.weights = []);
                    }
                    function F() {
                      (this.id = ''),
                        (this.name = ''),
                        (this.nodes = []),
                        (this.scene = new THREE.Group());
                    }
                    function G() {
                      (this.id = ''),
                        (this.name = ''),
                        (this.sid = ''),
                        (this.nodes = []),
                        (this.controllers = []),
                        (this.transforms = []),
                        (this.geometries = []),
                        (this.channels = []),
                        (this.matrix = new THREE.Matrix4());
                    }
                    function V() {
                      (this.sid = ''),
                        (this.type = ''),
                        (this.data = []),
                        (this.obj = null);
                    }
                    function Y() {
                      (this.url = ''),
                        (this.skeleton = []),
                        (this.instance_material = []);
                    }
                    function Q() {
                      (this.symbol = ''), (this.target = '');
                    }
                    function H() {
                      (this.url = ''), (this.instance_material = []);
                    }
                    function W() {
                      (this.id = ''), (this.mesh = null);
                    }
                    function X(t) {
                      (this.geometry = t.id),
                        (this.primitives = []),
                        (this.vertices = null),
                        (this.geometry3js = null);
                    }
                    function q() {
                      (this.material = ''),
                        (this.count = 0),
                        (this.inputs = []),
                        (this.vcount = null),
                        (this.p = []),
                        (this.geometry = new THREE.Geometry());
                    }
                    function Z() {
                      q.call(this), (this.vcount = []);
                    }
                    function K() {
                      q.call(this), (this.vcount = 1);
                    }
                    function J() {
                      q.call(this), (this.vcount = 3);
                    }
                    function $() {
                      (this.source = ''),
                        (this.count = 0),
                        (this.stride = 0),
                        (this.params = []);
                    }
                    function tt() {
                      this.input = {};
                    }
                    function et() {
                      (this.semantic = ''),
                        (this.offset = 0),
                        (this.source = ''),
                        (this.set = 0);
                    }
                    function it(t) {
                      (this.id = t), (this.type = null);
                    }
                    function nt() {
                      (this.id = ''),
                        (this.name = ''),
                        (this.instance_effect = null);
                    }
                    function rt() {
                      (this.color = new THREE.Color()),
                        this.color.setRGB(
                          Math.random(),
                          Math.random(),
                          Math.random()
                        ),
                        (this.color.a = 1),
                        (this.texture = null),
                        (this.texcoord = null),
                        (this.texOpts = null);
                    }
                    function at(t, e) {
                      (this.type = t),
                        (this.effect = e),
                        (this.material = null);
                    }
                    function ot(t) {
                      (this.effect = t),
                        (this.init_from = null),
                        (this.format = null);
                    }
                    function st(t) {
                      (this.effect = t),
                        (this.source = null),
                        (this.wrap_s = null),
                        (this.wrap_t = null),
                        (this.minfilter = null),
                        (this.magfilter = null),
                        (this.mipfilter = null);
                    }
                    function ct() {
                      (this.id = ''),
                        (this.name = ''),
                        (this.shader = null),
                        (this.surface = {}),
                        (this.sampler = {});
                    }
                    function ut() {
                      this.url = '';
                    }
                    function lt() {
                      (this.id = ''),
                        (this.name = ''),
                        (this.source = {}),
                        (this.sampler = []),
                        (this.channel = []);
                    }
                    function ht(t) {
                      (this.animation = t),
                        (this.source = ''),
                        (this.target = ''),
                        (this.fullSid = null),
                        (this.sid = null),
                        (this.dotSyntax = null),
                        (this.arrSyntax = null),
                        (this.arrIndices = null),
                        (this.member = null);
                    }
                    function dt(t) {
                      (this.id = ''),
                        (this.animation = t),
                        (this.inputs = []),
                        (this.input = null),
                        (this.output = null),
                        (this.strideOut = null),
                        (this.interpolation = null),
                        (this.startTime = null),
                        (this.endTime = null),
                        (this.duration = 0);
                    }
                    function pt(t) {
                      (this.targets = []), (this.time = t);
                    }
                    function ft() {
                      (this.id = ''), (this.name = ''), (this.technique = '');
                    }
                    function mt() {
                      this.url = '';
                    }
                    function gt() {
                      (this.id = ''), (this.name = ''), (this.technique = '');
                    }
                    function vt() {
                      this.url = '';
                    }
                    function yt() {
                      (this.id = ''),
                        (this.name = ''),
                        (this.joints = []),
                        (this.links = []);
                    }
                    function Mt() {
                      (this.sid = ''),
                        (this.name = ''),
                        (this.axis = new THREE.Vector3()),
                        (this.limits = { min: 0, max: 0 }),
                        (this.type = ''),
                        (this.static = !1),
                        (this.zeroPosition = 0),
                        (this.middlePosition = 0);
                    }
                    function wt() {
                      (this.sid = ''),
                        (this.name = ''),
                        (this.transforms = []),
                        (this.attachments = []);
                    }
                    function xt() {
                      (this.joint = ''),
                        (this.transforms = []),
                        (this.links = []);
                    }
                    function At(t) {
                      var e = t.getAttribute('id');
                      return void 0 != p[e]
                        ? p[e]
                        : ((p[e] = new it(e).parse(t)), p[e]);
                    }
                    function Et(t) {
                      for (
                        var e = Lt(t), i = [], n = 0, r = e.length;
                        n < r;
                        n++
                      )
                        i.push('true' === e[n] || '1' === e[n]);
                      return i;
                    }
                    function bt(t) {
                      for (
                        var e = Lt(t), i = [], n = 0, r = e.length;
                        n < r;
                        n++
                      )
                        i.push(parseFloat(e[n]));
                      return i;
                    }
                    function Tt(t) {
                      for (
                        var e = Lt(t), i = [], n = 0, r = e.length;
                        n < r;
                        n++
                      )
                        i.push(parseInt(e[n], 10));
                      return i;
                    }
                    function Lt(t) {
                      return t.length > 0
                        ? ((e = t),
                          e.replace(/^\s+/, '').replace(/\s+$/, '')).split(
                            /\s+/
                          )
                        : [];
                      var e;
                    }
                    function Nt(t, e, i) {
                      return t.hasAttribute(e)
                        ? parseInt(t.getAttribute(e), 10)
                        : i;
                    }
                    function Dt(t, e) {
                      new THREE.ImageLoader().load(e, function(e) {
                        (t.image = e), (t.needsUpdate = !0);
                      });
                    }
                    function Ct(t, e) {
                      t.doubleSided = !1;
                      var i = e.querySelectorAll('extra double_sided')[0];
                      i &&
                        i &&
                        1 === parseInt(i.textContent, 10) &&
                        (t.doubleSided = !0);
                    }
                    function St(t, e) {
                      if (!0 === A.convertUpAxis && b !== A.upAxis)
                        switch (T) {
                          case 'XtoY':
                            var i = t[0];
                            (t[0] = e * t[1]), (t[1] = i);
                            break;
                          case 'XtoZ':
                            i = t[2];
                            (t[2] = t[1]), (t[1] = t[0]), (t[0] = i);
                            break;
                          case 'YtoX':
                            i = t[0];
                            (t[0] = t[1]), (t[1] = e * i);
                            break;
                          case 'YtoZ':
                            i = t[1];
                            (t[1] = e * t[2]), (t[2] = i);
                            break;
                          case 'ZtoX':
                            i = t[0];
                            (t[0] = t[1]), (t[1] = t[2]), (t[2] = i);
                            break;
                          case 'ZtoY':
                            i = t[1];
                            (t[1] = t[2]), (t[2] = e * i);
                        }
                    }
                    function It(t, e) {
                      var i = [t[e], t[e + 1], t[e + 2]];
                      return St(i, -1), new THREE.Vector3(i[0], i[1], i[2]);
                    }
                    function _t(t) {
                      if (A.convertUpAxis) {
                        var e = [t[0], t[4], t[8]];
                        St(e, -1),
                          (t[0] = e[0]),
                          (t[4] = e[1]),
                          (t[8] = e[2]),
                          St((e = [t[1], t[5], t[9]]), -1),
                          (t[1] = e[0]),
                          (t[5] = e[1]),
                          (t[9] = e[2]),
                          St((e = [t[2], t[6], t[10]]), -1),
                          (t[2] = e[0]),
                          (t[6] = e[1]),
                          (t[10] = e[2]),
                          St((e = [t[0], t[1], t[2]]), -1),
                          (t[0] = e[0]),
                          (t[1] = e[1]),
                          (t[2] = e[2]),
                          St((e = [t[4], t[5], t[6]]), -1),
                          (t[4] = e[0]),
                          (t[5] = e[1]),
                          (t[6] = e[2]),
                          St((e = [t[8], t[9], t[10]]), -1),
                          (t[8] = e[0]),
                          (t[9] = e[1]),
                          (t[10] = e[2]),
                          St((e = [t[3], t[7], t[11]]), -1),
                          (t[3] = e[0]),
                          (t[7] = e[1]),
                          (t[11] = e[2]);
                      }
                      return new THREE.Matrix4().set(
                        t[0],
                        t[1],
                        t[2],
                        t[3],
                        t[4],
                        t[5],
                        t[6],
                        t[7],
                        t[8],
                        t[9],
                        t[10],
                        t[11],
                        t[12],
                        t[13],
                        t[14],
                        t[15]
                      );
                    }
                    function jt(t) {
                      if (t > -1 && t < 3) {
                        t = { X: 0, Y: 1, Z: 2 }[(t = Ot(['X', 'Y', 'Z'][t]))];
                      }
                      return t;
                    }
                    function Ot(t) {
                      if (A.convertUpAxis)
                        switch (t) {
                          case 'X':
                            switch (T) {
                              case 'XtoY':
                              case 'XtoZ':
                              case 'YtoX':
                                t = 'Y';
                                break;
                              case 'ZtoX':
                                t = 'Z';
                            }
                            break;
                          case 'Y':
                            switch (T) {
                              case 'XtoY':
                              case 'YtoX':
                              case 'ZtoX':
                                t = 'X';
                                break;
                              case 'XtoZ':
                              case 'YtoZ':
                              case 'ZtoY':
                                t = 'Z';
                            }
                            break;
                          case 'Z':
                            switch (T) {
                              case 'XtoZ':
                                t = 'X';
                                break;
                              case 'YtoZ':
                              case 'ZtoX':
                              case 'ZtoY':
                                t = 'Y';
                            }
                        }
                      return t;
                    }
                    return (
                      (k.prototype.parse = function(t) {
                        this.id = t.getAttribute('id');
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          'init_from' === i.nodeName &&
                            (this.init_from = i.textContent);
                        }
                        return this;
                      }),
                      (U.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.name = t.getAttribute('name')),
                          (this.type = 'none');
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          switch (i.nodeName) {
                            case 'skin':
                              (this.skin = new B().parse(i)),
                                (this.type = i.nodeName);
                              break;
                            case 'morph':
                              (this.morph = new P().parse(i)),
                                (this.type = i.nodeName);
                          }
                        }
                        return this;
                      }),
                      (P.prototype.parse = function(t) {
                        var e,
                          i = {},
                          n = [];
                        for (
                          this.method = t.getAttribute('method'),
                            this.source = t
                              .getAttribute('source')
                              .replace(/^#/, ''),
                            e = 0;
                          e < t.childNodes.length;
                          e++
                        ) {
                          var r = t.childNodes[e];
                          if (1 == r.nodeType)
                            switch (r.nodeName) {
                              case 'source':
                                i[(o = new it().parse(r)).id] = o;
                                break;
                              case 'targets':
                                n = this.parseInputs(r);
                            }
                        }
                        for (e = 0; e < n.length; e++) {
                          var a = n[e],
                            o = i[a.source];
                          switch (a.semantic) {
                            case 'MORPH_TARGET':
                              this.targets = o.read();
                              break;
                            case 'MORPH_WEIGHT':
                              this.weights = o.read();
                          }
                        }
                        return this;
                      }),
                      (P.prototype.parseInputs = function(t) {
                        for (var e = [], i = 0; i < t.childNodes.length; i++) {
                          var n = t.childNodes[i];
                          if (1 == n.nodeType)
                            switch (n.nodeName) {
                              case 'input':
                                e.push(new et().parse(n));
                            }
                        }
                        return e;
                      }),
                      (B.prototype.parse = function(t) {
                        var e,
                          i,
                          n = {};
                        (this.source = t
                          .getAttribute('source')
                          .replace(/^#/, '')),
                          (this.invBindMatrices = []),
                          (this.joints = []),
                          (this.weights = []);
                        for (var r = 0; r < t.childNodes.length; r++) {
                          var a = t.childNodes[r];
                          if (1 == a.nodeType)
                            switch (a.nodeName) {
                              case 'bind_shape_matrix':
                                var o = bt(a.textContent);
                                this.bindShapeMatrix = _t(o);
                                break;
                              case 'source':
                                var s = new it().parse(a);
                                n[s.id] = s;
                                break;
                              case 'joints':
                                e = a;
                                break;
                              case 'vertex_weights':
                                i = a;
                            }
                        }
                        return (
                          this.parseJoints(e, n), this.parseWeights(i, n), this
                        );
                      }),
                      (B.prototype.parseJoints = function(t, e) {
                        for (var i = 0; i < t.childNodes.length; i++) {
                          var n = t.childNodes[i];
                          if (1 == n.nodeType)
                            switch (n.nodeName) {
                              case 'input':
                                var r = new et().parse(n),
                                  a = e[r.source];
                                'JOINT' === r.semantic
                                  ? (this.joints = a.read())
                                  : 'INV_BIND_MATRIX' === r.semantic &&
                                    (this.invBindMatrices = a.read());
                            }
                        }
                      }),
                      (B.prototype.parseWeights = function(t, e) {
                        for (
                          var i, n, r = [], a = 0;
                          a < t.childNodes.length;
                          a++
                        ) {
                          var o = t.childNodes[a];
                          if (1 == o.nodeType)
                            switch (o.nodeName) {
                              case 'input':
                                r.push(new et().parse(o));
                                break;
                              case 'v':
                                i = Tt(o.textContent);
                                break;
                              case 'vcount':
                                n = Tt(o.textContent);
                            }
                        }
                        var s = 0;
                        for (a = 0; a < n.length; a++) {
                          for (var c = n[a], u = [], l = 0; l < c; l++) {
                            for (var h = {}, d = 0; d < r.length; d++) {
                              var p = r[d],
                                f = i[s + p.offset];
                              switch (p.semantic) {
                                case 'JOINT':
                                  h.joint = f;
                                  break;
                                case 'WEIGHT':
                                  h.weight = e[p.source].data[f];
                              }
                            }
                            u.push(h), (s += r.length);
                          }
                          for (l = 0; l < u.length; l++) u[l].index = a;
                          this.weights.push(u);
                        }
                      }),
                      (F.prototype.getChildById = function(t, e) {
                        for (var i = 0; i < this.nodes.length; i++) {
                          var n = this.nodes[i].getChildById(t, e);
                          if (n) return n;
                        }
                        return null;
                      }),
                      (F.prototype.getChildBySid = function(t, e) {
                        for (var i = 0; i < this.nodes.length; i++) {
                          var n = this.nodes[i].getChildBySid(t, e);
                          if (n) return n;
                        }
                        return null;
                      }),
                      (F.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.name = t.getAttribute('name')),
                          (this.nodes = []);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'node':
                                this.nodes.push(new G().parse(i));
                            }
                        }
                        return this;
                      }),
                      (G.prototype.getChannelForTransform = function(t) {
                        for (var e = 0; e < this.channels.length; e++) {
                          var i,
                            n = this.channels[e],
                            r = n.target.split('/'),
                            a = (r.shift(), r.shift()),
                            o = a.indexOf('.') >= 0,
                            s = a.indexOf('(') >= 0;
                          if (o) a = (r = a.split('.')).shift();
                          else if (s) {
                            a = (i = a.split('(')).shift();
                            for (var c = 0; c < i.length; c++)
                              i[c] = parseInt(i[c].replace(/\)/, ''));
                          }
                          if (a === t)
                            return (
                              (n.info = {
                                sid: a,
                                dotSyntax: o,
                                arrSyntax: s,
                                arrIndices: i
                              }),
                              n
                            );
                        }
                        return null;
                      }),
                      (G.prototype.getChildById = function(t, e) {
                        if (this.id === t) return this;
                        if (e)
                          for (var i = 0; i < this.nodes.length; i++) {
                            var n = this.nodes[i].getChildById(t, e);
                            if (n) return n;
                          }
                        return null;
                      }),
                      (G.prototype.getChildBySid = function(t, e) {
                        if (this.sid === t) return this;
                        if (e)
                          for (var i = 0; i < this.nodes.length; i++) {
                            var n = this.nodes[i].getChildBySid(t, e);
                            if (n) return n;
                          }
                        return null;
                      }),
                      (G.prototype.getTransformBySid = function(t) {
                        for (var e = 0; e < this.transforms.length; e++)
                          if (this.transforms[e].sid === t)
                            return this.transforms[e];
                        return null;
                      }),
                      (G.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.sid = t.getAttribute('sid')),
                          (this.name = t.getAttribute('name')),
                          (this.type = t.getAttribute('type')),
                          (this.layer = t.getAttribute('layer')),
                          (this.type =
                            'JOINT' === this.type ? this.type : 'NODE'),
                          (this.nodes = []),
                          (this.transforms = []),
                          (this.geometries = []),
                          (this.cameras = []),
                          (this.lights = []),
                          (this.controllers = []),
                          (this.matrix = new THREE.Matrix4());
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'node':
                                this.nodes.push(new G().parse(i));
                                break;
                              case 'instance_camera':
                                this.cameras.push(new mt().parse(i));
                                break;
                              case 'instance_controller':
                                this.controllers.push(new Y().parse(i));
                                break;
                              case 'instance_geometry':
                                this.geometries.push(new H().parse(i));
                                break;
                              case 'instance_light':
                                this.lights.push(new vt().parse(i));
                                break;
                              case 'instance_node':
                                var n = j(
                                  i.getAttribute('url').replace(/^#/, '')
                                );
                                n && this.nodes.push(new G().parse(n));
                                break;
                              case 'rotate':
                              case 'translate':
                              case 'scale':
                              case 'matrix':
                              case 'lookat':
                              case 'skew':
                                this.transforms.push(new V().parse(i));
                            }
                        }
                        return (
                          (this.channels = (function(t) {
                            var e = [],
                              i = 1e6,
                              n = -1e6;
                            for (var r in m)
                              for (
                                var a = m[r], o = 0;
                                o < a.channel.length;
                                o++
                              ) {
                                var s = a.channel[o],
                                  c = a.sampler[o];
                                (r = s.target.split('/')[0]) == t.id &&
                                  (c.create(),
                                  (s.sampler = c),
                                  (i = Math.min(i, c.startTime)),
                                  (n = Math.max(n, c.endTime)),
                                  e.push(s));
                              }
                            return (
                              e.length && ((t.startTime = i), (t.endTime = n)),
                              e
                            );
                          })(this)),
                          (function(t) {
                            if (t.channels && t.channels.length) {
                              for (
                                var e = [],
                                  i = [],
                                  n = 0,
                                  r = t.channels.length;
                                n < r;
                                n++
                              ) {
                                var a,
                                  o = t.channels[n],
                                  s = o.fullSid,
                                  c = o.sampler,
                                  u = c.input,
                                  l = t.getTransformBySid(o.sid);
                                if (o.arrIndices) {
                                  a = [];
                                  for (
                                    var h = 0, d = o.arrIndices.length;
                                    h < d;
                                    h++
                                  )
                                    a[h] = jt(o.arrIndices[h]);
                                } else a = Ot(o.member);
                                if (l)
                                  for (
                                    -1 === i.indexOf(s) && i.push(s),
                                      h = 0,
                                      d = u.length;
                                    h < d;
                                    h++
                                  ) {
                                    var p = u[h],
                                      f = c.getData(l.type, h, a);
                                    if (!(v = O(e, p))) {
                                      v = new pt(p);
                                      var m = z(e, p);
                                      e.splice(-1 === m ? e.length : m, 0, v);
                                    }
                                    v.addTarget(s, l, a, f);
                                  }
                              }
                              for (n = 0; n < i.length; n++) {
                                var g = i[n];
                                for (h = 0; h < e.length; h++) {
                                  var v;
                                  (v = e[h]).hasTarget(g) || R(e, v, h, g);
                                }
                              }
                              (t.keys = e), (t.sids = i);
                            }
                          })(this),
                          this.updateMatrix(),
                          this
                        );
                      }),
                      (G.prototype.updateMatrix = function() {
                        this.matrix.identity();
                        for (var t = 0; t < this.transforms.length; t++)
                          this.transforms[t].apply(this.matrix);
                      }),
                      (V.prototype.parse = function(t) {
                        return (
                          (this.sid = t.getAttribute('sid')),
                          (this.type = t.nodeName),
                          (this.data = bt(t.textContent)),
                          this.convert(),
                          this
                        );
                      }),
                      (V.prototype.convert = function() {
                        switch (this.type) {
                          case 'matrix':
                            this.obj = _t(this.data);
                            break;
                          case 'rotate':
                            this.angle = THREE.Math.degToRad(this.data[3]);
                          case 'translate':
                            St(this.data, -1),
                              (this.obj = new THREE.Vector3(
                                this.data[0],
                                this.data[1],
                                this.data[2]
                              ));
                            break;
                          case 'scale':
                            St(this.data, 1),
                              (this.obj = new THREE.Vector3(
                                this.data[0],
                                this.data[1],
                                this.data[2]
                              ));
                        }
                      }),
                      (V.prototype.apply = ((u = new THREE.Matrix4()),
                      function(t) {
                        switch (this.type) {
                          case 'matrix':
                            t.multiply(this.obj);
                            break;
                          case 'translate':
                            t.multiply(
                              u.makeTranslation(
                                this.obj.x,
                                this.obj.y,
                                this.obj.z
                              )
                            );
                            break;
                          case 'rotate':
                            t.multiply(
                              u.makeRotationAxis(this.obj, this.angle)
                            );
                            break;
                          case 'scale':
                            t.scale(this.obj);
                        }
                      })),
                      (V.prototype.update = function(t, e) {
                        var i = ['X', 'Y', 'Z', 'ANGLE'];
                        switch (this.type) {
                          case 'matrix':
                            if (e) {
                              if (1 === e.length)
                                switch (e[0]) {
                                  case 0:
                                    (this.obj.n11 = t[0]),
                                      (this.obj.n21 = t[1]),
                                      (this.obj.n31 = t[2]),
                                      (this.obj.n41 = t[3]);
                                    break;
                                  case 1:
                                    (this.obj.n12 = t[0]),
                                      (this.obj.n22 = t[1]),
                                      (this.obj.n32 = t[2]),
                                      (this.obj.n42 = t[3]);
                                    break;
                                  case 2:
                                    (this.obj.n13 = t[0]),
                                      (this.obj.n23 = t[1]),
                                      (this.obj.n33 = t[2]),
                                      (this.obj.n43 = t[3]);
                                    break;
                                  case 3:
                                    (this.obj.n14 = t[0]),
                                      (this.obj.n24 = t[1]),
                                      (this.obj.n34 = t[2]),
                                      (this.obj.n44 = t[3]);
                                }
                              else if (2 === e.length) {
                                var n = 'n' + (e[0] + 1) + (e[1] + 1);
                                this.obj[n] = t;
                              }
                            } else this.obj.copy(t);
                            break;
                          case 'translate':
                          case 'scale':
                            switch (('[object Array]' ===
                              Object.prototype.toString.call(e) &&
                              (e = i[e[0]]),
                            e)) {
                              case 'X':
                                this.obj.x = t;
                                break;
                              case 'Y':
                                this.obj.y = t;
                                break;
                              case 'Z':
                                this.obj.z = t;
                                break;
                              default:
                                (this.obj.x = t[0]),
                                  (this.obj.y = t[1]),
                                  (this.obj.z = t[2]);
                            }
                            break;
                          case 'rotate':
                            switch (('[object Array]' ===
                              Object.prototype.toString.call(e) &&
                              (e = i[e[0]]),
                            e)) {
                              case 'X':
                                this.obj.x = t;
                                break;
                              case 'Y':
                                this.obj.y = t;
                                break;
                              case 'Z':
                                this.obj.z = t;
                                break;
                              case 'ANGLE':
                                this.angle = THREE.Math.degToRad(t);
                                break;
                              default:
                                (this.obj.x = t[0]),
                                  (this.obj.y = t[1]),
                                  (this.obj.z = t[2]),
                                  (this.angle = THREE.Math.degToRad(t[3]));
                            }
                        }
                      }),
                      (Y.prototype.parse = function(t) {
                        (this.url = t.getAttribute('url').replace(/^#/, '')),
                          (this.skeleton = []),
                          (this.instance_material = []);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 === i.nodeType)
                            switch (i.nodeName) {
                              case 'skeleton':
                                this.skeleton.push(
                                  i.textContent.replace(/^#/, '')
                                );
                                break;
                              case 'bind_material':
                                for (
                                  var n = i.querySelectorAll(
                                      'instance_material'
                                    ),
                                    r = 0;
                                  r < n.length;
                                  r++
                                ) {
                                  var a = n[r];
                                  this.instance_material.push(new Q().parse(a));
                                }
                            }
                        }
                        return this;
                      }),
                      (Q.prototype.parse = function(t) {
                        return (
                          (this.symbol = t.getAttribute('symbol')),
                          (this.target = t
                            .getAttribute('target')
                            .replace(/^#/, '')),
                          this
                        );
                      }),
                      (H.prototype.parse = function(t) {
                        (this.url = t.getAttribute('url').replace(/^#/, '')),
                          (this.instance_material = []);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (
                            1 == i.nodeType &&
                            'bind_material' === i.nodeName
                          ) {
                            for (
                              var n = i.querySelectorAll('instance_material'),
                                r = 0;
                              r < n.length;
                              r++
                            ) {
                              var a = n[r];
                              this.instance_material.push(new Q().parse(a));
                            }
                            break;
                          }
                        }
                        return this;
                      }),
                      (W.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')), Ct(this, t);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          switch (i.nodeName) {
                            case 'mesh':
                              this.mesh = new X(this).parse(i);
                          }
                        }
                        return this;
                      }),
                      (X.prototype.parse = function(t) {
                        this.primitives = [];
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          switch (i.nodeName) {
                            case 'source':
                              At(i);
                              break;
                            case 'vertices':
                              this.vertices = new tt().parse(i);
                              break;
                            case 'linestrips':
                              this.primitives.push(new K().parse(i));
                              break;
                            case 'triangles':
                              this.primitives.push(new J().parse(i));
                              break;
                            case 'polygons':
                              this.primitives.push(new q().parse(i));
                              break;
                            case 'polylist':
                              this.primitives.push(new Z().parse(i));
                          }
                        }
                        if (
                          ((this.geometry3js = new THREE.Geometry()),
                          null === this.vertices)
                        )
                          return this;
                        var n = p[this.vertices.input.POSITION.source].data;
                        for (e = 0; e < n.length; e += 3)
                          this.geometry3js.vertices.push(It(n, e).clone());
                        for (e = 0; e < this.primitives.length; e++) {
                          var r = this.primitives[e];
                          r.setVertices(this.vertices),
                            this.handlePrimitive(r, this.geometry3js);
                        }
                        return (
                          this.geometry3js.calcNormals &&
                            (this.geometry3js.computeVertexNormals(),
                            delete this.geometry3js.calcNormals),
                          this
                        );
                      }),
                      (X.prototype.handlePrimitive = function(t, e) {
                        if (t instanceof K) e.isLineStrip = !0;
                        else {
                          var i,
                            n,
                            r,
                            a,
                            o,
                            s,
                            c,
                            u,
                            l = t.p,
                            h = t.inputs,
                            d = 0,
                            f = 0,
                            m = [];
                          for (i = 0; i < h.length; i++) {
                            var g = (r = h[i]).offset + 1;
                            switch (((f = f < g ? g : f), r.semantic)) {
                              case 'TEXCOORD':
                                m.push(r.set);
                            }
                          }
                          for (var v = 0; v < l.length; ++v)
                            for (var y = l[v], M = 0; M < y.length; ) {
                              var w = [],
                                x = [],
                                E = null,
                                b = [];
                              for (
                                u = t.vcount
                                  ? t.vcount.length ? t.vcount[d++] : t.vcount
                                  : y.length / f,
                                  i = 0;
                                i < u;
                                i++
                              )
                                for (n = 0; n < h.length; n++)
                                  switch (((r = h[n]),
                                  (s = p[r.source]),
                                  (o =
                                    (a = y[M + i * f + r.offset]) *
                                    (c = s.accessor.params.length)),
                                  r.semantic)) {
                                    case 'VERTEX':
                                      w.push(a);
                                      break;
                                    case 'NORMAL':
                                      x.push(It(s.data, o));
                                      break;
                                    case 'TEXCOORD':
                                      void 0 === (E = E || {})[r.set] &&
                                        (E[r.set] = []),
                                        E[r.set].push(
                                          new THREE.Vector2(
                                            s.data[o],
                                            s.data[o + 1]
                                          )
                                        );
                                      break;
                                    case 'COLOR':
                                      b.push(
                                        new THREE.Color().setRGB(
                                          s.data[o],
                                          s.data[o + 1],
                                          s.data[o + 2]
                                        )
                                      );
                                  }
                              if (0 === x.length)
                                if ((r = this.vertices.input.NORMAL)) {
                                  c = (s = p[r.source]).accessor.params.length;
                                  for (var T = 0, L = w.length; T < L; T++)
                                    x.push(It(s.data, w[T] * c));
                                } else e.calcNormals = !0;
                              if (
                                !E &&
                                ((E = {}), (r = this.vertices.input.TEXCOORD))
                              ) {
                                m.push(r.set),
                                  (c = (s = p[r.source]).accessor.params
                                    .length);
                                for (T = 0, L = w.length; T < L; T++)
                                  (o = w[T] * c),
                                    void 0 === E[r.set] && (E[r.set] = []),
                                    E[r.set].push(
                                      new THREE.Vector2(
                                        s.data[o],
                                        1 - s.data[o + 1]
                                      )
                                    );
                              }
                              if (
                                0 === b.length &&
                                (r = this.vertices.input.COLOR)
                              ) {
                                c = (s = p[r.source]).accessor.params.length;
                                for (T = 0, L = w.length; T < L; T++)
                                  (o = w[T] * c),
                                    b.push(
                                      new THREE.Color().setRGB(
                                        s.data[o],
                                        s.data[o + 1],
                                        s.data[o + 2]
                                      )
                                    );
                              }
                              var N,
                                D,
                                C = null,
                                S = [];
                              if (3 === u)
                                S.push(
                                  new THREE.Face3(
                                    w[0],
                                    w[1],
                                    w[2],
                                    x,
                                    b.length ? b : new THREE.Color()
                                  )
                                );
                              else if (4 === u)
                                S.push(
                                  new THREE.Face3(
                                    w[0],
                                    w[1],
                                    w[3],
                                    x.length
                                      ? [
                                          x[0].clone(),
                                          x[1].clone(),
                                          x[3].clone()
                                        ]
                                      : [],
                                    b.length
                                      ? [b[0], b[1], b[3]]
                                      : new THREE.Color()
                                  )
                                ),
                                  S.push(
                                    new THREE.Face3(
                                      w[1],
                                      w[2],
                                      w[3],
                                      x.length
                                        ? [
                                            x[1].clone(),
                                            x[2].clone(),
                                            x[3].clone()
                                          ]
                                        : [],
                                      b.length
                                        ? [b[1], b[2], b[3]]
                                        : new THREE.Color()
                                    )
                                  );
                              else if (u > 4 && A.subdivideFaces) {
                                var I = b.length ? b : new THREE.Color();
                                for (n = 1; n < u - 1; )
                                  S.push(
                                    new THREE.Face3(
                                      w[0],
                                      w[n],
                                      w[n + 1],
                                      x.length
                                        ? [
                                            x[0].clone(),
                                            x[n++].clone(),
                                            x[n].clone()
                                          ]
                                        : [],
                                      I
                                    )
                                  );
                              }
                              if (S.length)
                                for (T = 0, L = S.length; T < L; T++)
                                  for (
                                    (C = S[T]).daeMaterial = t.material,
                                      e.faces.push(C),
                                      n = 0;
                                    n < m.length;
                                    n++
                                  )
                                    (N = E[m[n]]),
                                      (D =
                                        u > 4
                                          ? [N[0], N[T + 1], N[T + 2]]
                                          : 4 === u
                                            ? 0 === T
                                              ? [N[0], N[1], N[3]]
                                              : [
                                                  N[1].clone(),
                                                  N[2],
                                                  N[3].clone()
                                                ]
                                            : [N[0], N[1], N[2]]),
                                      void 0 === e.faceVertexUvs[n] &&
                                        (e.faceVertexUvs[n] = []),
                                      e.faceVertexUvs[n].push(D);
                              M += f * u;
                            }
                        }
                      }),
                      (q.prototype.setVertices = function(t) {
                        for (var e = 0; e < this.inputs.length; e++)
                          this.inputs[e].source === t.id &&
                            (this.inputs[e].source = t.input.POSITION.source);
                      }),
                      (q.prototype.parse = function(t) {
                        (this.material = t.getAttribute('material')),
                          (this.count = Nt(t, 'count', 0));
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          switch (i.nodeName) {
                            case 'input':
                              this.inputs.push(new et().parse(t.childNodes[e]));
                              break;
                            case 'vcount':
                              this.vcount = Tt(i.textContent);
                              break;
                            case 'p':
                              this.p.push(Tt(i.textContent));
                          }
                        }
                        return this;
                      }),
                      (Z.prototype = Object.create(q.prototype)),
                      (Z.prototype.constructor = Z),
                      (K.prototype = Object.create(q.prototype)),
                      (K.prototype.constructor = K),
                      (J.prototype = Object.create(q.prototype)),
                      (J.prototype.constructor = J),
                      ($.prototype.parse = function(t) {
                        (this.params = []),
                          (this.source = t.getAttribute('source')),
                          (this.count = Nt(t, 'count', 0)),
                          (this.stride = Nt(t, 'stride', 0));
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if ('param' === i.nodeName) {
                            var n = {};
                            (n.name = i.getAttribute('name')),
                              (n.type = i.getAttribute('type')),
                              this.params.push(n);
                          }
                        }
                        return this;
                      }),
                      (tt.prototype.parse = function(t) {
                        this.id = t.getAttribute('id');
                        for (var e = 0; e < t.childNodes.length; e++)
                          if ('input' === t.childNodes[e].nodeName) {
                            var i = new et().parse(t.childNodes[e]);
                            this.input[i.semantic] = i;
                          }
                        return this;
                      }),
                      (et.prototype.parse = function(t) {
                        return (
                          (this.semantic = t.getAttribute('semantic')),
                          (this.source = t
                            .getAttribute('source')
                            .replace(/^#/, '')),
                          (this.set = Nt(t, 'set', -1)),
                          (this.offset = Nt(t, 'offset', 0)),
                          'TEXCOORD' === this.semantic &&
                            this.set < 0 &&
                            (this.set = 0),
                          this
                        );
                      }),
                      (it.prototype.parse = function(t) {
                        this.id = t.getAttribute('id');
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          switch (i.nodeName) {
                            case 'bool_array':
                              (this.data = Et(i.textContent)),
                                (this.type = i.nodeName);
                              break;
                            case 'float_array':
                              (this.data = bt(i.textContent)),
                                (this.type = i.nodeName);
                              break;
                            case 'int_array':
                              (this.data = Tt(i.textContent)),
                                (this.type = i.nodeName);
                              break;
                            case 'IDREF_array':
                            case 'Name_array':
                              (this.data = Lt(i.textContent)),
                                (this.type = i.nodeName);
                              break;
                            case 'technique_common':
                              for (var n = 0; n < i.childNodes.length; n++)
                                if ('accessor' === i.childNodes[n].nodeName) {
                                  this.accessor = new $().parse(
                                    i.childNodes[n]
                                  );
                                  break;
                                }
                          }
                        }
                        return this;
                      }),
                      (it.prototype.read = function() {
                        var t = [],
                          e = this.accessor.params[0];
                        switch (e.type) {
                          case 'IDREF':
                          case 'Name':
                          case 'name':
                          case 'float':
                            return this.data;
                          case 'float4x4':
                            for (var i = 0; i < this.data.length; i += 16) {
                              var n = _t(this.data.slice(i, i + 16));
                              t.push(n);
                            }
                        }
                        return t;
                      }),
                      (nt.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.name = t.getAttribute('name'));
                        for (var e = 0; e < t.childNodes.length; e++)
                          if ('instance_effect' === t.childNodes[e].nodeName) {
                            this.instance_effect = new ut().parse(
                              t.childNodes[e]
                            );
                            break;
                          }
                        return this;
                      }),
                      (rt.prototype.isColor = function() {
                        return null === this.texture;
                      }),
                      (rt.prototype.isTexture = function() {
                        return null != this.texture;
                      }),
                      (rt.prototype.parse = function(t) {
                        'transparent' === t.nodeName &&
                          (this.opaque = t.getAttribute('opaque'));
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'color':
                                var n = bt(i.textContent);
                                (this.color = new THREE.Color()),
                                  this.color.setRGB(n[0], n[1], n[2]),
                                  (this.color.a = n[3]);
                                break;
                              case 'texture':
                                (this.texture = i.getAttribute('texture')),
                                  (this.texcoord = i.getAttribute('texcoord')),
                                  (this.texOpts = {
                                    offsetU: 0,
                                    offsetV: 0,
                                    repeatU: 1,
                                    repeatV: 1,
                                    wrapU: 1,
                                    wrapV: 1
                                  }),
                                  this.parseTexture(i);
                            }
                        }
                        return this;
                      }),
                      (rt.prototype.parseTexture = function(t) {
                        if (!t.childNodes) return this;
                        t.childNodes[1] &&
                          'extra' === t.childNodes[1].nodeName &&
                          (t = t.childNodes[1]).childNodes[1] &&
                          'technique' === t.childNodes[1].nodeName &&
                          (t = t.childNodes[1]);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          switch (i.nodeName) {
                            case 'offsetU':
                            case 'offsetV':
                            case 'repeatU':
                            case 'repeatV':
                              this.texOpts[i.nodeName] = parseFloat(
                                i.textContent
                              );
                              break;
                            case 'wrapU':
                            case 'wrapV':
                              'TRUE' === i.textContent.toUpperCase()
                                ? (this.texOpts[i.nodeName] = 1)
                                : (this.texOpts[i.nodeName] = parseInt(
                                    i.textContent
                                  ));
                              break;
                            default:
                              this.texOpts[i.nodeName] = i.textContent;
                          }
                        }
                        return this;
                      }),
                      (at.prototype.parse = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'emission':
                              case 'diffuse':
                              case 'specular':
                              case 'transparent':
                                this[i.nodeName] = new rt().parse(i);
                                break;
                              case 'bump':
                                var n = i.getAttribute('bumptype');
                                n
                                  ? 'heightfield' === n.toLowerCase()
                                    ? (this.bump = new rt().parse(i))
                                    : 'normalmap' === n.toLowerCase()
                                      ? (this.normal = new rt().parse(i))
                                      : (this.bump = new rt().parse(i))
                                  : (this.bump = new rt().parse(i));
                                break;
                              case 'shininess':
                              case 'reflectivity':
                              case 'index_of_refraction':
                              case 'transparency':
                                var r = i.querySelectorAll('float');
                                r.length > 0 &&
                                  (this[i.nodeName] = parseFloat(
                                    r[0].textContent
                                  ));
                            }
                        }
                        return this.create(), this;
                      }),
                      (at.prototype.create = function() {
                        var t = {},
                          e = !1;
                        if (
                          void 0 !== this.transparency &&
                          void 0 !== this.transparent
                        ) {
                          this.transparent;
                          var i =
                            (this.transparent.color.r +
                              this.transparent.color.g +
                              this.transparent.color.b) /
                            3 *
                            this.transparency;
                          i > 0 &&
                            ((e = !0),
                            (t.transparent = !0),
                            (t.opacity = 1 - i));
                        }
                        var n = {
                          diffuse: 'map',
                          ambient: 'lightMap',
                          specular: 'specularMap',
                          emission: 'emissionMap',
                          bump: 'bumpMap',
                          normal: 'normalMap'
                        };
                        for (var r in this)
                          switch (r) {
                            case 'ambient':
                            case 'emission':
                            case 'diffuse':
                            case 'specular':
                            case 'bump':
                            case 'normal':
                              var a = this[r];
                              if (a instanceof rt)
                                if (a.isTexture()) {
                                  var s = a.texture,
                                    c = this.effect.sampler[s];
                                  if (void 0 !== c && void 0 !== c.source) {
                                    var u = this.effect.surface[c.source];
                                    if (void 0 !== u) {
                                      var l = f[u.init_from];
                                      if (l) {
                                        var h,
                                          d = o + l.init_from,
                                          p = THREE.Loader.Handlers.get(d);
                                        null !== p
                                          ? (h = p.load(d))
                                          : Dt((h = new THREE.Texture()), d),
                                          'MIRROR' === c.wrap_s
                                            ? (h.wrapS =
                                                THREE.MirroredRepeatWrapping)
                                            : 'WRAP' === c.wrap_s ||
                                              a.texOpts.wrapU
                                              ? (h.wrapS = THREE.RepeatWrapping)
                                              : (h.wrapS =
                                                  THREE.ClampToEdgeWrapping),
                                          'MIRROR' === c.wrap_t
                                            ? (h.wrapT =
                                                THREE.MirroredRepeatWrapping)
                                            : 'WRAP' === c.wrap_t ||
                                              a.texOpts.wrapV
                                              ? (h.wrapT = THREE.RepeatWrapping)
                                              : (h.wrapT =
                                                  THREE.ClampToEdgeWrapping),
                                          (h.offset.x = a.texOpts.offsetU),
                                          (h.offset.y = a.texOpts.offsetV),
                                          (h.repeat.x = a.texOpts.repeatU),
                                          (h.repeat.y = a.texOpts.repeatV),
                                          (t[n[r]] = h),
                                          'emission' === r &&
                                            (t.emissive = 16777215);
                                      }
                                    }
                                  }
                                } else
                                  ('diffuse' !== r && e) ||
                                    ('emission' === r
                                      ? (t.emissive = a.color.getHex())
                                      : (t[r] = a.color.getHex()));
                              break;
                            case 'shininess':
                              t[r] = this[r];
                              break;
                            case 'reflectivity':
                              (t[r] = this[r]),
                                t[r] > 0 && (t.envMap = A.defaultEnvMap),
                                (t.combine = THREE.MixOperation);
                              break;
                            case 'index_of_refraction':
                              (t.refractionRatio = this[r]),
                                1 !== this[r] && (t.envMap = A.defaultEnvMap);
                          }
                        switch (((t.side = this.effect.doubleSided
                          ? THREE.DoubleSide
                          : THREE.FrontSide),
                        void 0 !== t.diffuse &&
                          ((t.color = t.diffuse), delete t.diffuse),
                        this.type)) {
                          case 'constant':
                            void 0 != t.emissive && (t.color = t.emissive),
                              (this.material = new THREE.MeshBasicMaterial(t));
                            break;
                          case 'phong':
                          case 'blinn':
                            this.material = new THREE.MeshPhongMaterial(t);
                            break;
                          case 'lambert':
                          default:
                            this.material = new THREE.MeshLambertMaterial(t);
                        }
                        return this.material;
                      }),
                      (ot.prototype.parse = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'init_from':
                                this.init_from = i.textContent;
                                break;
                              case 'format':
                                this.format = i.textContent;
                            }
                        }
                        return this;
                      }),
                      (st.prototype.parse = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'source':
                                this.source = i.textContent;
                                break;
                              case 'minfilter':
                                this.minfilter = i.textContent;
                                break;
                              case 'magfilter':
                                this.magfilter = i.textContent;
                                break;
                              case 'mipfilter':
                                this.mipfilter = i.textContent;
                                break;
                              case 'wrap_s':
                                this.wrap_s = i.textContent;
                                break;
                              case 'wrap_t':
                                this.wrap_t = i.textContent;
                            }
                        }
                        return this;
                      }),
                      (ct.prototype.create = function() {
                        if (null === this.shader) return null;
                      }),
                      (ct.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.name = t.getAttribute('name')),
                          Ct(this, t),
                          (this.shader = null);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'profile_COMMON':
                                this.parseTechnique(this.parseProfileCOMMON(i));
                            }
                        }
                        return this;
                      }),
                      (ct.prototype.parseNewparam = function(t) {
                        for (
                          var e = t.getAttribute('sid'), i = 0;
                          i < t.childNodes.length;
                          i++
                        ) {
                          var n = t.childNodes[i];
                          if (1 == n.nodeType)
                            switch (n.nodeName) {
                              case 'surface':
                                this.surface[e] = new ot(this).parse(n);
                                break;
                              case 'sampler2D':
                                this.sampler[e] = new st(this).parse(n);
                            }
                        }
                      }),
                      (ct.prototype.parseProfileCOMMON = function(t) {
                        for (var e, i = 0; i < t.childNodes.length; i++) {
                          var n = t.childNodes[i];
                          if (1 == n.nodeType)
                            switch (n.nodeName) {
                              case 'profile_COMMON':
                                this.parseProfileCOMMON(n);
                                break;
                              case 'technique':
                                e = n;
                                break;
                              case 'newparam':
                                this.parseNewparam(n);
                                break;
                              case 'image':
                                var r = new k().parse(n);
                                f[r.id] = r;
                            }
                        }
                        return e;
                      }),
                      (ct.prototype.parseTechnique = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'constant':
                              case 'lambert':
                              case 'blinn':
                              case 'phong':
                                this.shader = new at(i.nodeName, this).parse(i);
                                break;
                              case 'extra':
                                this.parseExtra(i);
                            }
                        }
                      }),
                      (ct.prototype.parseExtra = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'technique':
                                this.parseExtraTechnique(i);
                            }
                        }
                      }),
                      (ct.prototype.parseExtraTechnique = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'bump':
                                this.shader.parse(t);
                            }
                        }
                      }),
                      (ut.prototype.parse = function(t) {
                        return (
                          (this.url = t.getAttribute('url').replace(/^#/, '')),
                          this
                        );
                      }),
                      (lt.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.name = t.getAttribute('name')),
                          (this.source = {});
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'animation':
                                var n = new lt().parse(i);
                                for (var r in n.source)
                                  this.source[r] = n.source[r];
                                for (var a = 0; a < n.channel.length; a++)
                                  this.channel.push(n.channel[a]),
                                    this.sampler.push(n.sampler[a]);
                                break;
                              case 'source':
                                r = new it().parse(i);
                                this.source[r.id] = r;
                                break;
                              case 'sampler':
                                this.sampler.push(new dt(this).parse(i));
                                break;
                              case 'channel':
                                this.channel.push(new ht(this).parse(i));
                            }
                        }
                        return this;
                      }),
                      (ht.prototype.parse = function(t) {
                        (this.source = t
                          .getAttribute('source')
                          .replace(/^#/, '')),
                          (this.target = t.getAttribute('target'));
                        var e = this.target.split('/'),
                          i = (e.shift(), e.shift()),
                          n = i.indexOf('.') >= 0,
                          r = i.indexOf('(') >= 0;
                        if (n)
                          (e = i.split('.')),
                            (this.sid = e.shift()),
                            (this.member = e.shift());
                        else if (r) {
                          var a = i.split('(');
                          this.sid = a.shift();
                          for (var o = 0; o < a.length; o++)
                            a[o] = parseInt(a[o].replace(/\)/, ''));
                          this.arrIndices = a;
                        } else this.sid = i;
                        return (
                          (this.fullSid = i),
                          (this.dotSyntax = n),
                          (this.arrSyntax = r),
                          this
                        );
                      }),
                      (dt.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')), (this.inputs = []);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'input':
                                this.inputs.push(new et().parse(i));
                            }
                        }
                        return this;
                      }),
                      (dt.prototype.create = function() {
                        for (var t = 0; t < this.inputs.length; t++) {
                          var e = this.inputs[t],
                            i = this.animation.source[e.source];
                          switch (e.semantic) {
                            case 'INPUT':
                              this.input = i.read();
                              break;
                            case 'OUTPUT':
                              (this.output = i.read()),
                                (this.strideOut = i.accessor.stride);
                              break;
                            case 'INTERPOLATION':
                              this.interpolation = i.read();
                          }
                        }
                        if (
                          ((this.startTime = 0),
                          (this.endTime = 0),
                          (this.duration = 0),
                          this.input.length)
                        ) {
                          (this.startTime = 1e8), (this.endTime = -1e8);
                          for (t = 0; t < this.input.length; t++)
                            (this.startTime = Math.min(
                              this.startTime,
                              this.input[t]
                            )),
                              (this.endTime = Math.max(
                                this.endTime,
                                this.input[t]
                              ));
                          this.duration = this.endTime - this.startTime;
                        }
                      }),
                      (dt.prototype.getData = function(t, e, i) {
                        var n;
                        if ('matrix' === t && 16 === this.strideOut)
                          n = this.output[e];
                        else if (this.strideOut > 1) {
                          (n = []), (e *= this.strideOut);
                          for (var r = 0; r < this.strideOut; ++r)
                            n[r] = this.output[e + r];
                          if (3 === this.strideOut)
                            switch (t) {
                              case 'rotate':
                              case 'translate':
                                St(n, -1);
                                break;
                              case 'scale':
                                St(n, 1);
                            }
                          else
                            4 === this.strideOut && 'matrix' === t && St(n, -1);
                        } else
                          (n = this.output[e]),
                            i &&
                              'translate' === t &&
                              (n = (function(t, e) {
                                if (!0 !== A.convertUpAxis || b === A.upAxis)
                                  return e;
                                switch (t) {
                                  case 'X':
                                    e = 'XtoY' === T ? -1 * e : e;
                                    break;
                                  case 'Y':
                                    e =
                                      'YtoZ' === T || 'YtoX' === T ? -1 * e : e;
                                    break;
                                  case 'Z':
                                    e = 'ZtoY' === T ? -1 * e : e;
                                }
                                return e;
                              })(i, n));
                        return n;
                      }),
                      (pt.prototype.addTarget = function(t, e, i, n) {
                        this.targets.push({
                          sid: t,
                          member: i,
                          transform: e,
                          data: n
                        });
                      }),
                      (pt.prototype.apply = function(t) {
                        for (var e = 0; e < this.targets.length; ++e) {
                          var i = this.targets[e];
                          (t && i.sid !== t) ||
                            i.transform.update(i.data, i.member);
                        }
                      }),
                      (pt.prototype.getTarget = function(t) {
                        for (var e = 0; e < this.targets.length; ++e)
                          if (this.targets[e].sid === t) return this.targets[e];
                        return null;
                      }),
                      (pt.prototype.hasTarget = function(t) {
                        for (var e = 0; e < this.targets.length; ++e)
                          if (this.targets[e].sid === t) return !0;
                        return !1;
                      }),
                      (pt.prototype.interpolate = function(t, e) {
                        for (var i = 0, n = this.targets.length; i < n; i++) {
                          var r,
                            a = this.targets[i],
                            o = t.getTarget(a.sid);
                          if ('matrix' !== a.transform.type && o) {
                            var s = (e - this.time) / (t.time - this.time),
                              c = o.data,
                              u = a.data;
                            if (
                              (s < 0 && (s = 0), s > 1 && (s = 1), u.length)
                            ) {
                              r = [];
                              for (var l = 0; l < u.length; ++l)
                                r[l] = u[l] + (c[l] - u[l]) * s;
                            } else r = u + (c - u) * s;
                          } else r = a.data;
                          a.transform.update(r, a.member);
                        }
                      }),
                      (ft.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.name = t.getAttribute('name'));
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'optics':
                                this.parseOptics(i);
                            }
                        }
                        return this;
                      }),
                      (ft.prototype.parseOptics = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++)
                          if ('technique_common' === t.childNodes[e].nodeName)
                            for (
                              var i = t.childNodes[e], n = 0;
                              n < i.childNodes.length;
                              n++
                            )
                              if (
                                ((this.technique = i.childNodes[n].nodeName),
                                'perspective' === this.technique)
                              )
                                for (
                                  var r = i.childNodes[n], a = 0;
                                  a < r.childNodes.length;
                                  a++
                                ) {
                                  switch ((s = r.childNodes[a]).nodeName) {
                                    case 'yfov':
                                      this.yfov = s.textContent;
                                      break;
                                    case 'xfov':
                                      this.xfov = s.textContent;
                                      break;
                                    case 'znear':
                                      this.znear = s.textContent;
                                      break;
                                    case 'zfar':
                                      this.zfar = s.textContent;
                                      break;
                                    case 'aspect_ratio':
                                      this.aspect_ratio = s.textContent;
                                  }
                                }
                              else if ('orthographic' === this.technique) {
                                var o = i.childNodes[n];
                                for (a = 0; a < o.childNodes.length; a++) {
                                  var s;
                                  switch ((s = o.childNodes[a]).nodeName) {
                                    case 'xmag':
                                      this.xmag = s.textContent;
                                      break;
                                    case 'ymag':
                                      this.ymag = s.textContent;
                                      break;
                                    case 'znear':
                                      this.znear = s.textContent;
                                      break;
                                    case 'zfar':
                                      this.zfar = s.textContent;
                                      break;
                                    case 'aspect_ratio':
                                      this.aspect_ratio = s.textContent;
                                  }
                                }
                              }
                        return this;
                      }),
                      (mt.prototype.parse = function(t) {
                        return (
                          (this.url = t.getAttribute('url').replace(/^#/, '')),
                          this
                        );
                      }),
                      (gt.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.name = t.getAttribute('name'));
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'technique_common':
                                this.parseCommon(i);
                                break;
                              case 'technique':
                                this.parseTechnique(i);
                            }
                        }
                        return this;
                      }),
                      (gt.prototype.parseCommon = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++)
                          switch (t.childNodes[e].nodeName) {
                            case 'directional':
                            case 'point':
                            case 'spot':
                            case 'ambient':
                              this.technique = t.childNodes[e].nodeName;
                              for (
                                var i = t.childNodes[e], n = 0;
                                n < i.childNodes.length;
                                n++
                              ) {
                                var r = i.childNodes[n];
                                switch (r.nodeName) {
                                  case 'color':
                                    var a = bt(r.textContent);
                                    (this.color = new THREE.Color(0)),
                                      this.color.setRGB(a[0], a[1], a[2]),
                                      (this.color.a = a[3]);
                                    break;
                                  case 'falloff_angle':
                                    this.falloff_angle = parseFloat(
                                      r.textContent
                                    );
                                    break;
                                  case 'quadratic_attenuation':
                                    var o = parseFloat(r.textContent);
                                    this.distance = o ? Math.sqrt(1 / o) : 0;
                                }
                              }
                          }
                        return this;
                      }),
                      (gt.prototype.parseTechnique = function(t) {
                        this.profile = t.getAttribute('profile');
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          switch (i.nodeName) {
                            case 'intensity':
                              this.intensity = parseFloat(i.textContent);
                          }
                        }
                        return this;
                      }),
                      (vt.prototype.parse = function(t) {
                        return (
                          (this.url = t.getAttribute('url').replace(/^#/, '')),
                          this
                        );
                      }),
                      (yt.prototype.parse = function(t) {
                        (this.id = t.getAttribute('id')),
                          (this.name = t.getAttribute('name')),
                          (this.joints = []),
                          (this.links = []);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'technique_common':
                                this.parseCommon(i);
                            }
                        }
                        return this;
                      }),
                      (yt.prototype.parseCommon = function(t) {
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (t.childNodes[e].nodeName) {
                              case 'joint':
                                this.joints.push(new Mt().parse(i));
                                break;
                              case 'link':
                                this.links.push(new wt().parse(i));
                            }
                        }
                        return this;
                      }),
                      (Mt.prototype.parse = function(t) {
                        (this.sid = t.getAttribute('sid')),
                          (this.name = t.getAttribute('name')),
                          (this.axis = new THREE.Vector3()),
                          (this.limits = { min: 0, max: 0 }),
                          (this.type = ''),
                          (this.static = !1),
                          (this.zeroPosition = 0),
                          (this.middlePosition = 0);
                        var e = bt(t.querySelector('axis').textContent);
                        this.axis = It(e, 0);
                        var i = t.querySelector('limits min')
                            ? parseFloat(
                                t.querySelector('limits min').textContent
                              )
                            : -360,
                          n = t.querySelector('limits max')
                            ? parseFloat(
                                t.querySelector('limits max').textContent
                              )
                            : 360;
                        this.limits = { min: i, max: n };
                        for (
                          var r = ['prismatic', 'revolute'], a = 0;
                          a < r.length;
                          a++
                        ) {
                          var o = r[a];
                          t.querySelector(o) && (this.type = o);
                        }
                        return (
                          this.limits.min >= this.limits.max &&
                            (this.static = !0),
                          (this.middlePosition =
                            (this.limits.min + this.limits.max) / 2),
                          this
                        );
                      }),
                      (wt.prototype.parse = function(t) {
                        (this.sid = t.getAttribute('sid')),
                          (this.name = t.getAttribute('name')),
                          (this.transforms = []),
                          (this.attachments = []);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'attachment_full':
                                this.attachments.push(new xt().parse(i));
                                break;
                              case 'rotate':
                              case 'translate':
                              case 'matrix':
                                this.transforms.push(new V().parse(i));
                            }
                        }
                        return this;
                      }),
                      (xt.prototype.parse = function(t) {
                        (this.joint = t
                          .getAttribute('joint')
                          .split('/')
                          .pop()),
                          (this.links = []);
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          if (1 == i.nodeType)
                            switch (i.nodeName) {
                              case 'link':
                                this.links.push(new wt().parse(i));
                                break;
                              case 'rotate':
                              case 'translate':
                              case 'matrix':
                                this.transforms.push(new V().parse(i));
                            }
                        }
                        return this;
                      }),
                      {
                        load: function(t, e, i, n) {
                          var r = 0;
                          if (
                            document.implementation &&
                            document.implementation.createDocument
                          ) {
                            var a = new XMLHttpRequest();
                            (a.onreadystatechange = function() {
                              4 === a.readyState
                                ? (0 !== a.status && 200 !== a.status) ||
                                  !a.response
                                  ? n && n({ type: 'error', url: t })
                                  : ((d = e), L(a.response, void 0, t))
                                : 3 === a.readyState &&
                                  i &&
                                  (0 === r &&
                                    (r = a.getResponseHeader('Content-Length')),
                                  i({
                                    total: r,
                                    loaded: a.responseText.length
                                  }));
                            }),
                              a.open('GET', t, !0),
                              a.send(null);
                          } else alert("Don't know how to parse XML!");
                        },
                        parse: L,
                        applySkin: I,
                        geometries: v,
                        options: A
                      }
                    );
                  };
                },
                {}
              ],
              43: [
                function(t, e, i) {
                  THREE.GLTFLoader = (function() {
                    function t(t) {
                      this.manager =
                        void 0 !== t ? t : THREE.DefaultLoadingManager;
                    }
                    t.prototype = {
                      constructor: t,
                      crossOrigin: 'Anonymous',
                      load: function(t, e, i, n) {
                        var r = this,
                          a =
                            this.path && 'string' == typeof this.path
                              ? this.path
                              : THREE.Loader.prototype.extractUrlBase(t),
                          o = new THREE.FileLoader(r.manager);
                        o.setResponseType('arraybuffer'),
                          o.load(
                            t,
                            function(t) {
                              try {
                                r.parse(t, a, e, n);
                              } catch (t) {
                                n(
                                  t.constructor === Error
                                    ? t
                                    : new Error(
                                        'THREE.GLTFLoader: Unable to parse model.'
                                      )
                                );
                              }
                            },
                            i,
                            n
                          );
                      },
                      setCrossOrigin: function(t) {
                        this.crossOrigin = t;
                      },
                      setPath: function(t) {
                        this.path = t;
                      },
                      parse: function(t, o, s, c) {
                        var u,
                          l = {};
                        b(new Uint8Array(t, 0, 4)) === n
                          ? ((l[e.KHR_BINARY_GLTF] = new function(t) {
                              (this.name = e.KHR_BINARY_GLTF),
                                (this.content = null),
                                (this.body = null);
                              var i = new DataView(t, 0, r);
                              if (
                                ((this.header = {
                                  magic: b(new Uint8Array(t.slice(0, 4))),
                                  version: i.getUint32(4, !0),
                                  length: i.getUint32(8, !0)
                                }),
                                this.header.magic !== n)
                              )
                                throw new Error(
                                  'THREE.GLTFLoader: Unsupported glTF-Binary header.'
                                );
                              if (this.header.version < 2)
                                throw new Error(
                                  'THREE.GLTFLoader: Legacy binary file detected. Use GLTFLoader instead.'
                                );
                              var o = new DataView(t, r),
                                s = 0;
                              for (; s < o.byteLength; ) {
                                var c = o.getUint32(s, !0);
                                s += 4;
                                var u = o.getUint32(s, !0);
                                if (((s += 4), u === a.JSON)) {
                                  var l = new Uint8Array(t, r + s, c);
                                  this.content = b(l);
                                } else if (u === a.BIN) {
                                  var h = r + s;
                                  this.body = t.slice(h, h + c);
                                }
                                s += c;
                              }
                              if (null === this.content)
                                throw new Error(
                                  'THREE.GLTFLoader: JSON content not found.'
                                );
                            }(t)),
                            (u = l[e.KHR_BINARY_GLTF].content))
                          : (u = b(new Uint8Array(t)));
                        var h = JSON.parse(u);
                        void 0 === h.asset || h.asset.version[0] < 2
                          ? c(
                              new Error(
                                'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'
                              )
                            )
                          : (h.extensionsUsed &&
                              (h.extensionsUsed.indexOf(e.KHR_LIGHTS) >= 0 &&
                                (l[e.KHR_LIGHTS] = new function(t) {
                                  (this.name = e.KHR_LIGHTS),
                                    (this.lights = {});
                                  var i =
                                    (
                                      (t.extensions &&
                                        t.extensions[e.KHR_LIGHTS]) ||
                                      {}
                                    ).lights || {};
                                  for (var n in i) {
                                    var r,
                                      a = i[n],
                                      o = new THREE.Color().fromArray(a.color);
                                    switch (a.type) {
                                      case 'directional':
                                        (r = new THREE.DirectionalLight(
                                          o
                                        )).position.set(0, 0, 1);
                                        break;
                                      case 'point':
                                        r = new THREE.PointLight(o);
                                        break;
                                      case 'spot':
                                        (r = new THREE.SpotLight(
                                          o
                                        )).position.set(0, 0, 1);
                                        break;
                                      case 'ambient':
                                        r = new THREE.AmbientLight(o);
                                    }
                                    r &&
                                      (void 0 !== a.constantAttenuation &&
                                        (r.intensity = a.constantAttenuation),
                                      void 0 !== a.linearAttenuation &&
                                        (r.distance = 1 / a.linearAttenuation),
                                      void 0 !== a.quadraticAttenuation &&
                                        (r.decay = a.quadraticAttenuation),
                                      void 0 !== a.fallOffAngle &&
                                        (r.angle = a.fallOffAngle),
                                      a.fallOffExponent,
                                      (r.name = a.name || 'light_' + n),
                                      (this.lights[n] = r));
                                  }
                                }(h)),
                              h.extensionsUsed.indexOf(
                                e.KHR_MATERIALS_COMMON
                              ) >= 0 && (l[e.KHR_MATERIALS_COMMON] = new i(h)),
                              h.extensionsUsed.indexOf(
                                e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS
                              ) >= 0 &&
                                (l[
                                  e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS
                                ] = new function() {
                                  return {
                                    name:
                                      e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,
                                    getMaterialType: function() {
                                      return THREE.ShaderMaterial;
                                    },
                                    extendParams: function(t, e, i) {
                                      var n = e.extensions[this.name],
                                        r = THREE.ShaderLib.standard,
                                        a = THREE.UniformsUtils.clone(
                                          r.uniforms
                                        ),
                                        o = [
                                          '#ifdef USE_SPECULARMAP',
                                          '\tuniform sampler2D specularMap;',
                                          '#endif'
                                        ].join('\n'),
                                        s = [
                                          '#ifdef USE_GLOSSINESSMAP',
                                          '\tuniform sampler2D glossinessMap;',
                                          '#endif'
                                        ].join('\n'),
                                        c = [
                                          'vec3 specularFactor = specular;',
                                          '#ifdef USE_SPECULARMAP',
                                          '\tvec4 texelSpecular = texture2D( specularMap, vUv );',
                                          '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
                                          '\tspecularFactor *= texelSpecular.rgb;',
                                          '#endif'
                                        ].join('\n'),
                                        u = [
                                          'float glossinessFactor = glossiness;',
                                          '#ifdef USE_GLOSSINESSMAP',
                                          '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',
                                          '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
                                          '\tglossinessFactor *= texelGlossiness.a;',
                                          '#endif'
                                        ].join('\n'),
                                        l = [
                                          'PhysicalMaterial material;',
                                          'material.diffuseColor = diffuseColor.rgb;',
                                          'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',
                                          'material.specularColor = specularFactor.rgb;'
                                        ].join('\n'),
                                        h = r.fragmentShader
                                          .replace(
                                            '#include <specularmap_fragment>',
                                            ''
                                          )
                                          .replace(
                                            'uniform float roughness;',
                                            'uniform vec3 specular;'
                                          )
                                          .replace(
                                            'uniform float metalness;',
                                            'uniform float glossiness;'
                                          )
                                          .replace(
                                            '#include <roughnessmap_pars_fragment>',
                                            o
                                          )
                                          .replace(
                                            '#include <metalnessmap_pars_fragment>',
                                            s
                                          )
                                          .replace(
                                            '#include <roughnessmap_fragment>',
                                            c
                                          )
                                          .replace(
                                            '#include <metalnessmap_fragment>',
                                            u
                                          )
                                          .replace(
                                            '#include <lights_physical_fragment>',
                                            l
                                          );
                                      delete a.roughness,
                                        delete a.metalness,
                                        delete a.roughnessMap,
                                        delete a.metalnessMap,
                                        (a.specular = {
                                          value: new THREE.Color().setHex(
                                            1118481
                                          )
                                        }),
                                        (a.glossiness = { value: 0.5 }),
                                        (a.specularMap = { value: null }),
                                        (a.glossinessMap = { value: null }),
                                        (t.vertexShader = r.vertexShader),
                                        (t.fragmentShader = h),
                                        (t.uniforms = a),
                                        (t.defines = { STANDARD: '' }),
                                        (t.color = new THREE.Color(1, 1, 1)),
                                        (t.opacity = 1);
                                      var d = [];
                                      if (Array.isArray(n.diffuseFactor)) {
                                        var p = n.diffuseFactor;
                                        t.color.fromArray(p),
                                          (t.opacity = p[3]);
                                      }
                                      if (
                                        (void 0 !== n.diffuseTexture &&
                                          d.push(
                                            i.assignTexture(
                                              t,
                                              'map',
                                              n.diffuseTexture.index
                                            )
                                          ),
                                        (t.emissive = new THREE.Color(0, 0, 0)),
                                        (t.glossiness =
                                          void 0 !== n.glossinessFactor
                                            ? n.glossinessFactor
                                            : 1),
                                        (t.specular = new THREE.Color(1, 1, 1)),
                                        Array.isArray(n.specularFactor) &&
                                          t.specular.fromArray(
                                            n.specularFactor
                                          ),
                                        void 0 !== n.specularGlossinessTexture)
                                      ) {
                                        var f =
                                          n.specularGlossinessTexture.index;
                                        d.push(
                                          i.assignTexture(t, 'glossinessMap', f)
                                        ),
                                          d.push(
                                            i.assignTexture(t, 'specularMap', f)
                                          );
                                      }
                                      return Promise.all(d);
                                    },
                                    createMaterial: function(t) {
                                      var e = new THREE.ShaderMaterial({
                                        defines: t.defines,
                                        vertexShader: t.vertexShader,
                                        fragmentShader: t.fragmentShader,
                                        uniforms: t.uniforms,
                                        fog: !0,
                                        lights: !0,
                                        opacity: t.opacity,
                                        transparent: t.transparent
                                      });
                                      return (
                                        (e.isGLTFSpecularGlossinessMaterial = !0),
                                        (e.color = t.color),
                                        (e.map =
                                          void 0 === t.map ? null : t.map),
                                        (e.lightMap = null),
                                        (e.lightMapIntensity = 1),
                                        (e.aoMap =
                                          void 0 === t.aoMap ? null : t.aoMap),
                                        (e.aoMapIntensity = 1),
                                        (e.emissive = t.emissive),
                                        (e.emissiveIntensity = 1),
                                        (e.emissiveMap =
                                          void 0 === t.emissiveMap
                                            ? null
                                            : t.emissiveMap),
                                        (e.bumpMap =
                                          void 0 === t.bumpMap
                                            ? null
                                            : t.bumpMap),
                                        (e.bumpScale = 1),
                                        (e.normalMap =
                                          void 0 === t.normalMap
                                            ? null
                                            : t.normalMap),
                                        (e.normalScale = new THREE.Vector2(
                                          1,
                                          1
                                        )),
                                        (e.displacementMap = null),
                                        (e.displacementScale = 1),
                                        (e.displacementBias = 0),
                                        (e.specularMap =
                                          void 0 === t.specularMap
                                            ? null
                                            : t.specularMap),
                                        (e.specular = t.specular),
                                        (e.glossinessMap =
                                          void 0 === t.glossinessMap
                                            ? null
                                            : t.glossinessMap),
                                        (e.glossiness = t.glossiness),
                                        (e.alphaMap = null),
                                        (e.envMap =
                                          void 0 === t.envMap
                                            ? null
                                            : t.envMap),
                                        (e.envMapIntensity = 1),
                                        (e.refractionRatio = 0.98),
                                        (e.extensions.derivatives = !0),
                                        e
                                      );
                                    },
                                    refreshUniforms: function(
                                      t,
                                      e,
                                      i,
                                      n,
                                      r,
                                      a
                                    ) {
                                      var o,
                                        s = r.uniforms,
                                        c = r.defines;
                                      if (
                                        ((s.opacity.value = r.opacity),
                                        s.diffuse.value.copy(r.color),
                                        s.emissive.value
                                          .copy(r.emissive)
                                          .multiplyScalar(r.emissiveIntensity),
                                        (s.map.value = r.map),
                                        (s.specularMap.value = r.specularMap),
                                        (s.alphaMap.value = r.alphaMap),
                                        (s.lightMap.value = r.lightMap),
                                        (s.lightMapIntensity.value =
                                          r.lightMapIntensity),
                                        (s.aoMap.value = r.aoMap),
                                        (s.aoMapIntensity.value =
                                          r.aoMapIntensity),
                                        r.map
                                          ? (o = r.map)
                                          : r.specularMap
                                            ? (o = r.specularMap)
                                            : r.displacementMap
                                              ? (o = r.displacementMap)
                                              : r.normalMap
                                                ? (o = r.normalMap)
                                                : r.bumpMap
                                                  ? (o = r.bumpMap)
                                                  : r.glossinessMap
                                                    ? (o = r.glossinessMap)
                                                    : r.alphaMap
                                                      ? (o = r.alphaMap)
                                                      : r.emissiveMap &&
                                                        (o = r.emissiveMap),
                                        void 0 !== o)
                                      ) {
                                        o.isWebGLRenderTarget &&
                                          (o = o.texture);
                                        var u = o.offset,
                                          l = o.repeat;
                                        s.offsetRepeat.value.set(
                                          u.x,
                                          u.y,
                                          l.x,
                                          l.y
                                        );
                                      }
                                      (s.envMap.value = r.envMap),
                                        (s.envMapIntensity.value =
                                          r.envMapIntensity),
                                        (s.flipEnvMap.value =
                                          r.envMap && r.envMap.isCubeTexture
                                            ? -1
                                            : 1),
                                        (s.refractionRatio.value =
                                          r.refractionRatio),
                                        s.specular.value.copy(r.specular),
                                        (s.glossiness.value = r.glossiness),
                                        (s.glossinessMap.value =
                                          r.glossinessMap),
                                        (s.emissiveMap.value = r.emissiveMap),
                                        (s.bumpMap.value = r.bumpMap),
                                        (s.normalMap.value = r.normalMap),
                                        (s.displacementMap.value =
                                          r.displacementMap),
                                        (s.displacementScale.value =
                                          r.displacementScale),
                                        (s.displacementBias.value =
                                          r.displacementBias),
                                        null !== s.glossinessMap.value &&
                                          void 0 === c.USE_GLOSSINESSMAP &&
                                          ((c.USE_GLOSSINESSMAP = ''),
                                          (c.USE_ROUGHNESSMAP = '')),
                                        null === s.glossinessMap.value &&
                                          void 0 !== c.USE_GLOSSINESSMAP &&
                                          (delete c.USE_GLOSSINESSMAP,
                                          delete c.USE_ROUGHNESSMAP);
                                    }
                                  };
                                }())),
                            new L(h, l, {
                              path: o || this.path,
                              crossOrigin: this.crossOrigin
                            }).parse(function(t, e, i, n) {
                              s({
                                scene: t,
                                scenes: e,
                                cameras: i,
                                animations: n
                              });
                            }, c));
                      }
                    };
                    var e = {
                      KHR_BINARY_GLTF: 'KHR_binary_glTF',
                      KHR_LIGHTS: 'KHR_lights',
                      KHR_MATERIALS_COMMON: 'KHR_materials_common',
                      KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
                        'KHR_materials_pbrSpecularGlossiness'
                    };
                    function i(t) {
                      this.name = e.KHR_MATERIALS_COMMON;
                    }
                    (i.prototype.getMaterialType = function(t) {
                      switch (t.extensions[this.name].type) {
                        case 'commonBlinn':
                        case 'commonPhong':
                          return THREE.MeshPhongMaterial;
                        case 'commonLambert':
                          return THREE.MeshLambertMaterial;
                        case 'commonConstant':
                        default:
                          return THREE.MeshBasicMaterial;
                      }
                    }),
                      (i.prototype.extendParams = function(t, e, i) {
                        var n = e.extensions[this.name],
                          r = [],
                          a = [];
                        switch (n.type) {
                          case 'commonBlinn':
                          case 'commonPhong':
                            a.push(
                              'diffuseFactor',
                              'diffuseTexture',
                              'specularFactor',
                              'specularTexture',
                              'shininessFactor'
                            );
                            break;
                          case 'commonLambert':
                            a.push('diffuseFactor', 'diffuseTexture');
                        }
                        var o = {};
                        return (
                          a.forEach(function(t) {
                            void 0 !== n[t] && (o[t] = n[t]);
                          }),
                          void 0 !== o.diffuseFactor &&
                            ((t.color = new THREE.Color().fromArray(
                              o.diffuseFactor
                            )),
                            (t.opacity = o.diffuseFactor[3])),
                          void 0 !== o.diffuseTexture &&
                            r.push(
                              i.assignTexture(t, 'map', o.diffuseTexture.index)
                            ),
                          void 0 !== o.specularFactor &&
                            (t.specular = new THREE.Color().fromArray(
                              o.specularFactor
                            )),
                          void 0 !== o.specularTexture &&
                            r.push(
                              i.assignTexture(
                                t,
                                'specularMap',
                                o.specularTexture.index
                              )
                            ),
                          void 0 !== o.shininessFactor &&
                            (t.shininess = o.shininessFactor),
                          Promise.all(r)
                        );
                      });
                    var n = 'glTF',
                      r = 12,
                      a = { JSON: 1313821514, BIN: 5130562 };
                    var o = 0,
                      s = 1,
                      c = 2,
                      u = 3,
                      l = 4,
                      h = 5,
                      d = 6,
                      p = (Number,
                      THREE.Matrix3,
                      THREE.Matrix4,
                      THREE.Vector2,
                      THREE.Vector3,
                      THREE.Vector4,
                      THREE.Texture,
                      {
                        5120: Int8Array,
                        5121: Uint8Array,
                        5122: Int16Array,
                        5123: Uint16Array,
                        5125: Uint32Array,
                        5126: Float32Array
                      }),
                      f = {
                        9728: THREE.NearestFilter,
                        9729: THREE.LinearFilter,
                        9984: THREE.NearestMipMapNearestFilter,
                        9985: THREE.LinearMipMapNearestFilter,
                        9986: THREE.NearestMipMapLinearFilter,
                        9987: THREE.LinearMipMapLinearFilter
                      },
                      m = {
                        33071: THREE.ClampToEdgeWrapping,
                        33648: THREE.MirroredRepeatWrapping,
                        10497: THREE.RepeatWrapping
                      },
                      g = {
                        6406: THREE.AlphaFormat,
                        6407: THREE.RGBFormat,
                        6408: THREE.RGBAFormat,
                        6409: THREE.LuminanceFormat,
                        6410: THREE.LuminanceAlphaFormat
                      },
                      v = {
                        5121: THREE.UnsignedByteType,
                        32819: THREE.UnsignedShort4444Type,
                        32820: THREE.UnsignedShort5551Type,
                        33635: THREE.UnsignedShort565Type
                      },
                      y = (THREE.BackSide,
                      THREE.FrontSide,
                      THREE.NeverDepth,
                      THREE.LessDepth,
                      THREE.EqualDepth,
                      THREE.LessEqualDepth,
                      THREE.GreaterEqualDepth,
                      THREE.NotEqualDepth,
                      THREE.GreaterEqualDepth,
                      THREE.AlwaysDepth,
                      THREE.AddEquation,
                      THREE.SubtractEquation,
                      THREE.ReverseSubtractEquation,
                      THREE.ZeroFactor,
                      THREE.OneFactor,
                      THREE.SrcColorFactor,
                      THREE.OneMinusSrcColorFactor,
                      THREE.SrcAlphaFactor,
                      THREE.OneMinusSrcAlphaFactor,
                      THREE.DstAlphaFactor,
                      THREE.OneMinusDstAlphaFactor,
                      THREE.DstColorFactor,
                      THREE.OneMinusDstColorFactor,
                      THREE.SrcAlphaSaturateFactor,
                      {
                        SCALAR: 1,
                        VEC2: 2,
                        VEC3: 3,
                        VEC4: 4,
                        MAT2: 4,
                        MAT3: 9,
                        MAT4: 16
                      }),
                      M = {
                        scale: 'scale',
                        translation: 'position',
                        rotation: 'quaternion',
                        weights: 'morphTargetInfluences'
                      },
                      w = {
                        CATMULLROMSPLINE: THREE.InterpolateSmooth,
                        CUBICSPLINE: THREE.InterpolateSmooth,
                        LINEAR: THREE.InterpolateLinear,
                        STEP: THREE.InterpolateDiscrete
                      },
                      x = 'OPAQUE';
                    function A(t, e, i) {
                      if (!t) return Promise.resolve();
                      var n,
                        r = [];
                      if (
                        '[object Array]' === Object.prototype.toString.call(t)
                      ) {
                        n = [];
                        for (var a = t.length, o = 0; o < a; o++) {
                          (c = e.call(i || this, t[o], o)) &&
                            (r.push(c),
                            c instanceof Promise
                              ? c.then(
                                  function(t, e) {
                                    n[t] = e;
                                  }.bind(this, o)
                                )
                              : (n[o] = c));
                        }
                      } else {
                        n = {};
                        for (var s in t) {
                          var c;
                          if (t.hasOwnProperty(s))
                            (c = e.call(i || this, t[s], s)) &&
                              (r.push(c),
                              c instanceof Promise
                                ? c.then(
                                    function(t, e) {
                                      n[t] = e;
                                    }.bind(this, s)
                                  )
                                : (n[s] = c));
                        }
                      }
                      return Promise.all(r).then(function() {
                        return n;
                      });
                    }
                    function E(t, e) {
                      return 'string' != typeof t || '' === t
                        ? ''
                        : /^(https?:)?\/\//i.test(t)
                          ? t
                          : /^data:.*,.*$/i.test(t)
                            ? t
                            : /^blob:.*$/i.test(t) ? t : (e || '') + t;
                    }
                    function b(t) {
                      if (void 0 !== window.TextDecoder)
                        return new TextDecoder().decode(t);
                      for (var e = '', i = 0, n = t.length; i < n; i++)
                        e += String.fromCharCode(t[i]);
                      return e;
                    }
                    function T(t, e, i, n) {
                      var r = t.geometry,
                        a = t.material,
                        o = i.targets,
                        s = r.morphAttributes;
                      (s.position = []), (s.normal = []), (a.morphTargets = !0);
                      for (var c = 0, u = o.length; c < u; c++) {
                        var l,
                          h,
                          d = o[c],
                          p = 'morphTarget' + c;
                        if (void 0 !== d.POSITION) {
                          l = n.accessors[d.POSITION].clone();
                          for (
                            var f = r.attributes.position, m = 0, g = l.count;
                            m < g;
                            m++
                          )
                            l.setXYZ(
                              m,
                              l.getX(m) + f.getX(m),
                              l.getY(m) + f.getY(m),
                              l.getZ(m) + f.getZ(m)
                            );
                        } else l = r.attributes.position.clone();
                        if (void 0 !== d.NORMAL) {
                          (a.morphNormals = !0),
                            (h = n.accessors[d.NORMAL].clone());
                          var v = r.attributes.normal;
                          for (m = 0, g = h.count; m < g; m++)
                            h.setXYZ(
                              m,
                              h.getX(m) + v.getX(m),
                              h.getY(m) + v.getY(m),
                              h.getZ(m) + v.getZ(m)
                            );
                        } else h = r.attributes.normal.clone();
                        d.TANGENT,
                          (l.name = p),
                          (h.name = p),
                          s.position.push(l),
                          s.normal.push(h);
                      }
                      if ((t.updateMorphTargets(), void 0 !== e.weights))
                        for (c = 0, u = e.weights.length; c < u; c++)
                          t.morphTargetInfluences[c] = e.weights[c];
                    }
                    function L(t, e, i) {
                      (this.json = t || {}),
                        (this.extensions = e || {}),
                        (this.options = i || {}),
                        (this.cache = new function() {
                          var t = {};
                          return {
                            get: function(e) {
                              return t[e];
                            },
                            add: function(e, i) {
                              t[e] = i;
                            },
                            remove: function(e) {
                              delete t[e];
                            },
                            removeAll: function() {
                              t = {};
                            },
                            update: function(e, i) {
                              for (var n in t) {
                                var r = t[n];
                                r.update && r.update(e, i);
                              }
                            }
                          };
                        }());
                    }
                    return (
                      (L.prototype._withDependencies = function(t) {
                        for (var e = {}, i = 0; i < t.length; i++) {
                          var n = t[i],
                            r = 'load' + n.charAt(0).toUpperCase() + n.slice(1),
                            a = this.cache.get(n);
                          if (void 0 !== a) e[n] = a;
                          else if (this[r]) {
                            var o = this[r]();
                            this.cache.add(n, o), (e[n] = o);
                          }
                        }
                        return A(e, function(t) {
                          return t;
                        });
                      }),
                      (L.prototype.parse = function(t, e) {
                        var i = this.json;
                        this.cache.removeAll(),
                          this._withDependencies([
                            'scenes',
                            'cameras',
                            'animations'
                          ])
                            .then(function(e) {
                              var n = [];
                              for (var r in e.scenes) n.push(e.scenes[r]);
                              var a =
                                  void 0 !== i.scene ? e.scenes[i.scene] : n[0],
                                o = [];
                              for (var r in e.cameras) {
                                var s = e.cameras[r];
                                o.push(s);
                              }
                              var c = [];
                              for (var r in e.animations)
                                c.push(e.animations[r]);
                              t(a, n, o, c);
                            })
                            .catch(e);
                      }),
                      (L.prototype.getDependency = function(t, e) {
                        var i = t + ':' + e,
                          n = this.cache.get(i);
                        n ||
                          ((n = this[
                            'load' + t.charAt(0).toUpperCase() + t.slice(1)
                          ](e)),
                          this.cache.add(i, n));
                        return n;
                      }),
                      (L.prototype.loadBuffer = function(t) {
                        var i = this.json.buffers[t];
                        if (i.type && 'arraybuffer' !== i.type)
                          throw new Error(
                            'THREE.GLTFLoader: %s buffer type is not supported.',
                            i.type
                          );
                        if (void 0 === i.uri && 0 === t)
                          return Promise.resolve(
                            this.extensions[e.KHR_BINARY_GLTF].body
                          );
                        var n = this.options;
                        return new Promise(function(t) {
                          var e = new THREE.FileLoader();
                          e.setResponseType('arraybuffer'),
                            e.load(E(i.uri, n.path), t);
                        });
                      }),
                      (L.prototype.loadBufferView = function(t) {
                        var e = this.json.bufferViews[t];
                        return this.getDependency('buffer', e.buffer).then(
                          function(t) {
                            var i = e.byteLength || 0,
                              n = e.byteOffset || 0;
                            return t.slice(n, n + i);
                          }
                        );
                      }),
                      (L.prototype.loadAccessors = function() {
                        var t = this,
                          e = this.json;
                        return A(e.accessors, function(i) {
                          return t
                            .getDependency('bufferView', i.bufferView)
                            .then(function(t) {
                              var n,
                                r = y[i.type],
                                a = p[i.componentType],
                                o = a.BYTES_PER_ELEMENT,
                                s = o * r,
                                c = e.bufferViews[i.bufferView].byteStride;
                              if (c && c !== s) {
                                n = new a(t);
                                var u = new THREE.InterleavedBuffer(n, c / o);
                                return new THREE.InterleavedBufferAttribute(
                                  u,
                                  r,
                                  i.byteOffset / o
                                );
                              }
                              return (
                                (n = new a(t, i.byteOffset, i.count * r)),
                                new THREE.BufferAttribute(n, r)
                              );
                            });
                        });
                      }),
                      (L.prototype.loadTexture = function(t) {
                        var e = this.json,
                          i = this.options,
                          n = window.URL || window.webkitURL,
                          r = e.textures[t],
                          a = e.images[r.source],
                          o = a.uri,
                          s = !1;
                        return (
                          void 0 !== a.bufferView &&
                            (o = this.getDependency(
                              'bufferView',
                              a.bufferView
                            ).then(function(t) {
                              s = !0;
                              var e = new Blob([t], { type: a.mimeType });
                              return (o = n.createObjectURL(e));
                            })),
                          Promise.resolve(o)
                            .then(function(t) {
                              var e =
                                THREE.Loader.Handlers.get(t) ||
                                new THREE.TextureLoader();
                              return (
                                e.setCrossOrigin(i.crossOrigin),
                                new Promise(function(n, r) {
                                  e.load(E(t, i.path), n, void 0, r);
                                })
                              );
                            })
                            .then(function(t) {
                              void 0 !== s && n.revokeObjectURL(o),
                                (t.flipY = !1),
                                void 0 !== r.name && (t.name = r.name),
                                (t.format =
                                  void 0 !== r.format
                                    ? g[r.format]
                                    : THREE.RGBAFormat),
                                void 0 !== r.internalFormat &&
                                  (t.format, r.internalFormat),
                                (t.type =
                                  void 0 !== r.type
                                    ? v[r.type]
                                    : THREE.UnsignedByteType);
                              var i = (e.samplers || {})[r.sampler] || {};
                              return (
                                (t.magFilter =
                                  f[i.magFilter] || THREE.LinearFilter),
                                (t.minFilter =
                                  f[i.minFilter] ||
                                  THREE.LinearMipMapLinearFilter),
                                (t.wrapS = m[i.wrapS] || THREE.RepeatWrapping),
                                (t.wrapT = m[i.wrapT] || THREE.RepeatWrapping),
                                t
                              );
                            })
                        );
                      }),
                      (L.prototype.assignTexture = function(t, e, i) {
                        return this.getDependency('texture', i).then(function(
                          i
                        ) {
                          t[e] = i;
                        });
                      }),
                      (L.prototype.loadMaterials = function() {
                        var t = this,
                          i = this.json,
                          n = this.extensions;
                        return A(i.materials, function(i) {
                          var r,
                            a = {},
                            o = i.extensions || {},
                            s = [];
                          if (o[e.KHR_MATERIALS_COMMON]) {
                            var c = n[e.KHR_MATERIALS_COMMON];
                            (r = c.getMaterialType(i)),
                              s.push(c.extendParams(a, i, t));
                          } else if (
                            o[e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]
                          ) {
                            var u = n[e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];
                            (r = u.getMaterialType(i)),
                              s.push(u.extendParams(a, i, t));
                          } else if (void 0 !== i.pbrMetallicRoughness) {
                            r = THREE.MeshStandardMaterial;
                            var l = i.pbrMetallicRoughness;
                            if (
                              ((a.color = new THREE.Color(1, 1, 1)),
                              (a.opacity = 1),
                              Array.isArray(l.baseColorFactor))
                            ) {
                              var h = l.baseColorFactor;
                              a.color.fromArray(h), (a.opacity = h[3]);
                            }
                            if (
                              (void 0 !== l.baseColorTexture &&
                                s.push(
                                  t.assignTexture(
                                    a,
                                    'map',
                                    l.baseColorTexture.index
                                  )
                                ),
                              (a.metalness =
                                void 0 !== l.metallicFactor
                                  ? l.metallicFactor
                                  : 1),
                              (a.roughness =
                                void 0 !== l.roughnessFactor
                                  ? l.roughnessFactor
                                  : 1),
                              void 0 !== l.metallicRoughnessTexture)
                            ) {
                              var d = l.metallicRoughnessTexture.index;
                              s.push(t.assignTexture(a, 'metalnessMap', d)),
                                s.push(t.assignTexture(a, 'roughnessMap', d));
                            }
                          } else r = THREE.MeshPhongMaterial;
                          !0 === i.doubleSided && (a.side = THREE.DoubleSide);
                          var p = i.alphaMode || x;
                          return (
                            (a.transparent = p !== x),
                            void 0 !== i.normalTexture &&
                              s.push(
                                t.assignTexture(
                                  a,
                                  'normalMap',
                                  i.normalTexture.index
                                )
                              ),
                            void 0 !== i.occlusionTexture &&
                              s.push(
                                t.assignTexture(
                                  a,
                                  'aoMap',
                                  i.occlusionTexture.index
                                )
                              ),
                            void 0 !== i.emissiveFactor &&
                              (r === THREE.MeshBasicMaterial
                                ? (a.color = new THREE.Color().fromArray(
                                    i.emissiveFactor
                                  ))
                                : (a.emissive = new THREE.Color().fromArray(
                                    i.emissiveFactor
                                  ))),
                            void 0 !== i.emissiveTexture &&
                              (r === THREE.MeshBasicMaterial
                                ? s.push(
                                    t.assignTexture(
                                      a,
                                      'map',
                                      i.emissiveTexture.index
                                    )
                                  )
                                : s.push(
                                    t.assignTexture(
                                      a,
                                      'emissiveMap',
                                      i.emissiveTexture.index
                                    )
                                  )),
                            Promise.all(s).then(function() {
                              var t;
                              return (
                                (t =
                                  r === THREE.ShaderMaterial
                                    ? n[
                                        e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS
                                      ].createMaterial(a)
                                    : new r(a)),
                                void 0 !== i.name && (t.name = i.name),
                                (t.normalScale.x = -1),
                                (t.userData = i.extras),
                                t
                              );
                            })
                          );
                        });
                      }),
                      (L.prototype.loadGeometries = function(t) {
                        return this._withDependencies(['accessors']).then(
                          function(e) {
                            return A(t, function(t) {
                              var i = new THREE.BufferGeometry(),
                                n = t.attributes;
                              for (var r in n) {
                                var a = n[r];
                                if (void 0 === a) return;
                                var o = e.accessors[a];
                                switch (r) {
                                  case 'POSITION':
                                    i.addAttribute('position', o);
                                    break;
                                  case 'NORMAL':
                                    i.addAttribute('normal', o);
                                    break;
                                  case 'TEXCOORD_0':
                                  case 'TEXCOORD0':
                                  case 'TEXCOORD':
                                    i.addAttribute('uv', o);
                                    break;
                                  case 'TEXCOORD_1':
                                    i.addAttribute('uv2', o);
                                    break;
                                  case 'COLOR_0':
                                  case 'COLOR0':
                                  case 'COLOR':
                                    i.addAttribute('color', o);
                                    break;
                                  case 'WEIGHTS_0':
                                  case 'WEIGHT':
                                    i.addAttribute('skinWeight', o);
                                    break;
                                  case 'JOINTS_0':
                                  case 'JOINT':
                                    i.addAttribute('skinIndex', o);
                                }
                              }
                              return (
                                void 0 !== t.indices &&
                                  i.setIndex(e.accessors[t.indices]),
                                i
                              );
                            });
                          }
                        );
                      }),
                      (L.prototype.loadMeshes = function() {
                        var t = this,
                          e = this.json;
                        return this._withDependencies([
                          'accessors',
                          'materials'
                        ]).then(function(i) {
                          return A(e.meshes, function(e) {
                            var n = new THREE.Group();
                            void 0 !== e.name && (n.name = e.name),
                              e.extras && (n.userData = e.extras);
                            var r = e.primitives || [];
                            return t.loadGeometries(r).then(function(t) {
                              for (var a in r) {
                                var p,
                                  f = r[a],
                                  m = t[a],
                                  g =
                                    void 0 === f.material
                                      ? new THREE.MeshStandardMaterial({
                                          color: 16777215,
                                          emissive: 0,
                                          metalness: 1,
                                          roughness: 1,
                                          transparent: !1,
                                          depthTest: !0,
                                          side: THREE.FrontSide
                                        })
                                      : i.materials[f.material];
                                if (
                                  (g.aoMap &&
                                    void 0 === m.attributes.uv2 &&
                                    void 0 !== m.attributes.uv &&
                                    m.addAttribute(
                                      'uv2',
                                      new THREE.BufferAttribute(
                                        m.attributes.uv.array,
                                        2
                                      )
                                    ),
                                  void 0 !== m.attributes.color &&
                                    ((g.vertexColors = THREE.VertexColors),
                                    (g.needsUpdate = !0)),
                                  void 0 === m.attributes.normal &&
                                    (void 0 !== g.flatShading
                                      ? (g.flatShading = !0)
                                      : (g.shading = THREE.FlatShading)),
                                  f.mode === l || void 0 === f.mode)
                                )
                                  p = new THREE.Mesh(m, g);
                                else if (f.mode === h)
                                  (p = new THREE.Mesh(m, g)).drawMode =
                                    THREE.TriangleStripDrawMode;
                                else if (f.mode === d)
                                  (p = new THREE.Mesh(m, g)).drawMode =
                                    THREE.TriangleFanDrawMode;
                                else if (f.mode === s)
                                  p = new THREE.LineSegments(m, g);
                                else if (f.mode === u) p = new THREE.Line(m, g);
                                else if (f.mode === c)
                                  p = new THREE.LineLoop(m, g);
                                else {
                                  if (f.mode !== o)
                                    throw new Error(
                                      'THREE.GLTFLoader: Primitive mode unsupported: ',
                                      f.mode
                                    );
                                  p = new THREE.Points(m, g);
                                }
                                (p.name = n.name + '_' + a),
                                  void 0 !== f.targets && T(p, e, f, i),
                                  f.extras && (p.userData = f.extras),
                                  n.add(p);
                              }
                              return n;
                            });
                          });
                        });
                      }),
                      (L.prototype.loadCameras = function() {
                        return A(this.json.cameras, function(t) {
                          var e,
                            i = t[t.type];
                          if (i) {
                            if ('perspective' === t.type) {
                              var n = i.aspectRatio || 1,
                                r = i.yfov * n;
                              e = new THREE.PerspectiveCamera(
                                THREE.Math.radToDeg(r),
                                n,
                                i.znear || 1,
                                i.zfar || 2e6
                              );
                            } else
                              'orthographic' === t.type &&
                                (e = new THREE.OrthographicCamera(
                                  i.xmag / -2,
                                  i.xmag / 2,
                                  i.ymag / 2,
                                  i.ymag / -2,
                                  i.znear,
                                  i.zfar
                                ));
                            return (
                              void 0 !== t.name && (e.name = t.name),
                              t.extras && (e.userData = t.extras),
                              e
                            );
                          }
                        });
                      }),
                      (L.prototype.loadSkins = function() {
                        var t = this.json;
                        return this._withDependencies(['accessors']).then(
                          function(e) {
                            return A(t.skins, function(t) {
                              return {
                                joints: t.joints,
                                inverseBindMatrices:
                                  e.accessors[t.inverseBindMatrices]
                              };
                            });
                          }
                        );
                      }),
                      (L.prototype.loadAnimations = function() {
                        var t = this.json;
                        return this._withDependencies([
                          'accessors',
                          'nodes'
                        ]).then(function(e) {
                          return A(t.animations, function(t, i) {
                            var n = [];
                            for (var r in t.channels) {
                              var a = t.channels[r],
                                o = t.samplers[a.sampler];
                              if (o) {
                                var s = a.target,
                                  c = void 0 !== s.node ? s.node : s.id,
                                  u =
                                    void 0 !== t.parameters
                                      ? t.parameters[o.input]
                                      : o.input,
                                  l =
                                    void 0 !== t.parameters
                                      ? t.parameters[o.output]
                                      : o.output,
                                  h = e.accessors[u],
                                  d = e.accessors[l],
                                  p = e.nodes[c];
                                if (p) {
                                  var f;
                                  switch ((p.updateMatrix(),
                                  (p.matrixAutoUpdate = !0),
                                  M[s.path])) {
                                    case M.weights:
                                      f = THREE.NumberKeyframeTrack;
                                      break;
                                    case M.rotation:
                                      f = THREE.QuaternionKeyframeTrack;
                                      break;
                                    case M.position:
                                    case M.scale:
                                    default:
                                      f = THREE.VectorKeyframeTrack;
                                  }
                                  var m = p.name ? p.name : p.uuid;
                                  o.interpolation;
                                  var g =
                                      void 0 !== o.interpolation
                                        ? w[o.interpolation]
                                        : THREE.InterpolateLinear,
                                    v = [];
                                  M[s.path] === M.weights
                                    ? p.traverse(function(t) {
                                        !0 === t.isMesh &&
                                          !0 === t.material.morphTargets &&
                                          v.push(t.name ? t.name : t.uuid);
                                      })
                                    : v.push(m);
                                  for (var y = 0, x = v.length; y < x; y++)
                                    n.push(
                                      new f(
                                        v[y] + '.' + M[s.path],
                                        THREE.AnimationUtils.arraySlice(
                                          h.array,
                                          0
                                        ),
                                        THREE.AnimationUtils.arraySlice(
                                          d.array,
                                          0
                                        ),
                                        g
                                      )
                                    );
                                }
                              }
                            }
                            c = void 0 !== t.name ? t.name : 'animation_' + i;
                            return new THREE.AnimationClip(c, void 0, n);
                          });
                        });
                      }),
                      (L.prototype.loadNodes = function() {
                        var t = this.json,
                          i = this.extensions,
                          n = this,
                          r = t.nodes || [];
                        return (
                          (t.skins || []).forEach(function(t) {
                            t.joints.forEach(function(t) {
                              r[t].isBone = !0;
                            });
                          }),
                          A(t.nodes, function(t) {
                            var e = new THREE.Matrix4(),
                              i =
                                !0 === t.isBone
                                  ? new THREE.Bone()
                                  : new THREE.Object3D();
                            return (
                              void 0 !== t.name &&
                                (i.name = THREE.PropertyBinding.sanitizeNodeName(
                                  t.name
                                )),
                              t.extras && (i.userData = t.extras),
                              void 0 !== t.matrix
                                ? (e.fromArray(t.matrix), i.applyMatrix(e))
                                : (void 0 !== t.translation &&
                                    i.position.fromArray(t.translation),
                                  void 0 !== t.rotation &&
                                    i.quaternion.fromArray(t.rotation),
                                  void 0 !== t.scale &&
                                    i.scale.fromArray(t.scale)),
                              i
                            );
                          }).then(function(r) {
                            return n
                              ._withDependencies(['meshes', 'skins', 'cameras'])
                              .then(function(n) {
                                return A(r, function(a, o) {
                                  var s,
                                    c = t.nodes[o];
                                  if (
                                    (void 0 !== c.mesh
                                      ? (s = [c.mesh])
                                      : void 0 !== c.meshes && (s = c.meshes),
                                    void 0 !== s)
                                  )
                                    for (var u in s) {
                                      var l = s[u],
                                        h = n.meshes[l];
                                      if (void 0 !== h) {
                                        var d = h.clone(!1);
                                        for (var p in h.children) {
                                          var f,
                                            m = h.children[p],
                                            g = m,
                                            v = m.material,
                                            y = m.geometry,
                                            M = m.morphTargetInfluences,
                                            w = m.userData,
                                            x = m.name,
                                            A = v;
                                          switch (m.type) {
                                            case 'LineSegments':
                                              m = new THREE.LineSegments(y, A);
                                              break;
                                            case 'LineLoop':
                                              m = new THREE.LineLoop(y, A);
                                              break;
                                            case 'Line':
                                              m = new THREE.Line(y, A);
                                              break;
                                            case 'Points':
                                              m = new THREE.Points(y, A);
                                              break;
                                            default:
                                              (m = new THREE.Mesh(
                                                y,
                                                A
                                              )).drawMode =
                                                g.drawMode;
                                          }
                                          if (
                                            ((m.castShadow = !0),
                                            (m.morphTargetInfluences = M),
                                            (m.userData = w),
                                            (m.name = x),
                                            void 0 !== c.skin &&
                                              (f = n.skins[c.skin]),
                                            f)
                                          ) {
                                            var E = y;
                                            ((A = v).skinning = !0),
                                              ((m = new THREE.SkinnedMesh(
                                                E,
                                                A
                                              )).castShadow = !0),
                                              (m.userData = w),
                                              (m.name = x);
                                            for (
                                              var b = [],
                                                T = [],
                                                L = 0,
                                                N = f.joints.length;
                                              L < N;
                                              L++
                                            ) {
                                              var D = f.joints[L],
                                                C = r[D];
                                              if (C) {
                                                b.push(C);
                                                var S =
                                                    f.inverseBindMatrices.array,
                                                  I = new THREE.Matrix4().fromArray(
                                                    S,
                                                    16 * L
                                                  );
                                                T.push(I);
                                              }
                                            }
                                            m.bind(
                                              new THREE.Skeleton(b, T),
                                              m.matrixWorld
                                            );
                                          }
                                          d.add(m);
                                        }
                                        a.add(d);
                                      }
                                    }
                                  if (void 0 !== c.camera) {
                                    var _ = n.cameras[c.camera];
                                    a.add(_);
                                  }
                                  if (
                                    c.extensions &&
                                    c.extensions[e.KHR_LIGHTS] &&
                                    void 0 !== c.extensions[e.KHR_LIGHTS].light
                                  ) {
                                    var j = i[e.KHR_LIGHTS].lights;
                                    a.add(j[c.extensions[e.KHR_LIGHTS].light]);
                                  }
                                  return a;
                                });
                              });
                          })
                        );
                      }),
                      (L.prototype.loadScenes = function() {
                        var t = this.json,
                          i = this.extensions;
                        function n(e, i, r) {
                          var a = r[e];
                          i.add(a);
                          var o = t.nodes[e];
                          if (o.children)
                            for (
                              var s = o.children, c = 0, u = s.length;
                              c < u;
                              c++
                            ) {
                              n(s[c], a, r);
                            }
                        }
                        return this._withDependencies(['nodes']).then(function(
                          r
                        ) {
                          return A(t.scenes, function(t) {
                            var a = new THREE.Scene();
                            void 0 !== t.name && (a.name = t.name),
                              t.extras && (a.userData = t.extras);
                            for (
                              var o = t.nodes || [], s = 0, c = o.length;
                              s < c;
                              s++
                            ) {
                              n(o[s], a, r.nodes);
                            }
                            if (
                              (a.traverse(function(t) {
                                t.material &&
                                  t.material.isGLTFSpecularGlossinessMaterial &&
                                  (t.onBeforeRender =
                                    i[
                                      e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS
                                    ].refreshUniforms);
                              }),
                              t.extensions &&
                                t.extensions[e.KHR_LIGHTS] &&
                                void 0 !== t.extensions[e.KHR_LIGHTS].light)
                            ) {
                              var u = i[e.KHR_LIGHTS].lights;
                              a.add(u[t.extensions[e.KHR_LIGHTS].light]);
                            }
                            return a;
                          });
                        });
                      }),
                      t
                    );
                  })();
                },
                {}
              ],
              44: [
                function(t, e, i) {
                  (THREE.MTLLoader = function(t) {
                    this.manager =
                      void 0 !== t ? t : THREE.DefaultLoadingManager;
                  }),
                    (THREE.MTLLoader.prototype = {
                      constructor: THREE.MTLLoader,
                      load: function(t, e, i, n) {
                        var r = this,
                          a = new THREE.FileLoader(this.manager);
                        a.setPath(this.path),
                          a.load(
                            t,
                            function(t) {
                              e(r.parse(t));
                            },
                            i,
                            n
                          );
                      },
                      setPath: function(t) {
                        this.path = t;
                      },
                      setTexturePath: function(t) {
                        this.texturePath = t;
                      },
                      setBaseUrl: function(t) {
                        this.setTexturePath(t);
                      },
                      setCrossOrigin: function(t) {
                        this.crossOrigin = t;
                      },
                      setMaterialOptions: function(t) {
                        this.materialOptions = t;
                      },
                      parse: function(t) {
                        for (
                          var e = t.split('\n'),
                            i = {},
                            n = /\s+/,
                            r = {},
                            a = 0;
                          a < e.length;
                          a++
                        ) {
                          var o = e[a];
                          if (
                            0 !== (o = o.trim()).length &&
                            '#' !== o.charAt(0)
                          ) {
                            var s = o.indexOf(' '),
                              c = s >= 0 ? o.substring(0, s) : o;
                            c = c.toLowerCase();
                            var u = s >= 0 ? o.substring(s + 1) : '';
                            if (((u = u.trim()), 'newmtl' === c))
                              (i = { name: u }), (r[u] = i);
                            else if (i)
                              if ('ka' === c || 'kd' === c || 'ks' === c) {
                                var l = u.split(n, 3);
                                i[c] = [
                                  parseFloat(l[0]),
                                  parseFloat(l[1]),
                                  parseFloat(l[2])
                                ];
                              } else i[c] = u;
                          }
                        }
                        var h = new THREE.MTLLoader.MaterialCreator(
                          this.texturePath || this.path,
                          this.materialOptions
                        );
                        return (
                          h.setCrossOrigin(this.crossOrigin),
                          h.setManager(this.manager),
                          h.setMaterials(r),
                          h
                        );
                      }
                    }),
                    (THREE.MTLLoader.MaterialCreator = function(t, e) {
                      (this.baseUrl = t || ''),
                        (this.options = e),
                        (this.materialsInfo = {}),
                        (this.materials = {}),
                        (this.materialsArray = []),
                        (this.nameLookup = {}),
                        (this.side =
                          this.options && this.options.side
                            ? this.options.side
                            : THREE.FrontSide),
                        (this.wrap =
                          this.options && this.options.wrap
                            ? this.options.wrap
                            : THREE.RepeatWrapping);
                    }),
                    (THREE.MTLLoader.MaterialCreator.prototype = {
                      constructor: THREE.MTLLoader.MaterialCreator,
                      crossOrigin: 'Anonymous',
                      setCrossOrigin: function(t) {
                        this.crossOrigin = t;
                      },
                      setManager: function(t) {
                        this.manager = t;
                      },
                      setMaterials: function(t) {
                        (this.materialsInfo = this.convert(t)),
                          (this.materials = {}),
                          (this.materialsArray = []),
                          (this.nameLookup = {});
                      },
                      convert: function(t) {
                        if (!this.options) return t;
                        var e = {};
                        for (var i in t) {
                          var n = t[i],
                            r = {};
                          e[i] = r;
                          for (var a in n) {
                            var o = !0,
                              s = n[a],
                              c = a.toLowerCase();
                            switch (c) {
                              case 'kd':
                              case 'ka':
                              case 'ks':
                                this.options &&
                                  this.options.normalizeRGB &&
                                  (s = [s[0] / 255, s[1] / 255, s[2] / 255]),
                                  this.options &&
                                    this.options.ignoreZeroRGBs &&
                                    0 === s[0] &&
                                    0 === s[1] &&
                                    0 === s[2] &&
                                    (o = !1);
                            }
                            o && (r[c] = s);
                          }
                        }
                        return e;
                      },
                      preload: function() {
                        for (var t in this.materialsInfo) this.create(t);
                      },
                      getIndex: function(t) {
                        return this.nameLookup[t];
                      },
                      getAsArray: function() {
                        var t = 0;
                        for (var e in this.materialsInfo)
                          (this.materialsArray[t] = this.create(e)),
                            (this.nameLookup[e] = t),
                            t++;
                        return this.materialsArray;
                      },
                      create: function(t) {
                        return (
                          void 0 === this.materials[t] &&
                            this.createMaterial_(t),
                          this.materials[t]
                        );
                      },
                      createMaterial_: function(t) {
                        var e = this,
                          i = this.materialsInfo[t],
                          n = { name: t, side: this.side };
                        function r(t, i) {
                          if (!n[t]) {
                            var r,
                              a,
                              o = e.getTextureParams(i, n),
                              s = e.loadTexture(
                                ((r = e.baseUrl),
                                'string' != typeof (a = o.url) || '' === a
                                  ? ''
                                  : /^https?:\/\//i.test(a) ? a : r + a)
                              );
                            s.repeat.copy(o.scale),
                              s.offset.copy(o.offset),
                              (s.wrapS = e.wrap),
                              (s.wrapT = e.wrap),
                              (n[t] = s);
                          }
                        }
                        for (var a in i) {
                          var o,
                            s = i[a];
                          if ('' !== s)
                            switch (a.toLowerCase()) {
                              case 'kd':
                                n.color = new THREE.Color().fromArray(s);
                                break;
                              case 'ks':
                                n.specular = new THREE.Color().fromArray(s);
                                break;
                              case 'map_kd':
                                r('map', s);
                                break;
                              case 'map_ks':
                                r('specularMap', s);
                                break;
                              case 'norm':
                                r('normalMap', s);
                                break;
                              case 'map_bump':
                              case 'bump':
                                r('bumpMap', s);
                                break;
                              case 'ns':
                                n.shininess = parseFloat(s);
                                break;
                              case 'd':
                                (o = parseFloat(s)) < 1 &&
                                  ((n.opacity = o), (n.transparent = !0));
                                break;
                              case 'tr':
                                (o = parseFloat(s)) > 0 &&
                                  ((n.opacity = 1 - o), (n.transparent = !0));
                            }
                        }
                        return (
                          (this.materials[t] = new THREE.MeshPhongMaterial(n)),
                          this.materials[t]
                        );
                      },
                      getTextureParams: function(t, e) {
                        var i,
                          n = {
                            scale: new THREE.Vector2(1, 1),
                            offset: new THREE.Vector2(0, 0)
                          },
                          r = t.split(/\s+/);
                        return (
                          (i = r.indexOf('-bm')) >= 0 &&
                            ((e.bumpScale = parseFloat(r[i + 1])),
                            r.splice(i, 2)),
                          (i = r.indexOf('-s')) >= 0 &&
                            (n.scale.set(
                              parseFloat(r[i + 1]),
                              parseFloat(r[i + 2])
                            ),
                            r.splice(i, 4)),
                          (i = r.indexOf('-o')) >= 0 &&
                            (n.offset.set(
                              parseFloat(r[i + 1]),
                              parseFloat(r[i + 2])
                            ),
                            r.splice(i, 4)),
                          (n.url = r.join(' ').trim()),
                          n
                        );
                      },
                      loadTexture: function(t, e, i, n, r) {
                        var a,
                          o = THREE.Loader.Handlers.get(t),
                          s =
                            void 0 !== this.manager
                              ? this.manager
                              : THREE.DefaultLoadingManager;
                        return (
                          null === o && (o = new THREE.TextureLoader(s)),
                          o.setCrossOrigin &&
                            o.setCrossOrigin(this.crossOrigin),
                          (a = o.load(t, i, n, r)),
                          void 0 !== e && (a.mapping = e),
                          a
                        );
                      }
                    });
                },
                {}
              ],
              45: [
                function(t, e, i) {
                  THREE.OBJLoader = (function() {
                    var t = /^[og]\s*(.+)?/,
                      e = /^mtllib /,
                      i = /^usemtl /;
                    function n(t) {
                      (this.manager =
                        void 0 !== t ? t : THREE.DefaultLoadingManager),
                        (this.materials = null);
                    }
                    return (
                      (n.prototype = {
                        constructor: n,
                        load: function(t, e, i, n) {
                          var r = this,
                            a = new THREE.FileLoader(r.manager);
                          a.setPath(this.path),
                            a.load(
                              t,
                              function(t) {
                                e(r.parse(t));
                              },
                              i,
                              n
                            );
                        },
                        setPath: function(t) {
                          this.path = t;
                        },
                        setMaterials: function(t) {
                          return (this.materials = t), this;
                        },
                        parse: function(n) {
                          var r = new function() {
                            var t = {
                              objects: [],
                              object: {},
                              vertices: [],
                              normals: [],
                              uvs: [],
                              materialLibraries: [],
                              startObject: function(t, e) {
                                if (
                                  this.object &&
                                  !1 === this.object.fromDeclaration
                                )
                                  return (
                                    (this.object.name = t),
                                    void (this.object.fromDeclaration =
                                      !1 !== e)
                                  );
                                var i =
                                  this.object &&
                                  'function' ==
                                    typeof this.object.currentMaterial
                                    ? this.object.currentMaterial()
                                    : void 0;
                                if (
                                  (this.object &&
                                    'function' ==
                                      typeof this.object._finalize &&
                                    this.object._finalize(!0),
                                  (this.object = {
                                    name: t || '',
                                    fromDeclaration: !1 !== e,
                                    geometry: {
                                      vertices: [],
                                      normals: [],
                                      uvs: []
                                    },
                                    materials: [],
                                    smooth: !0,
                                    startMaterial: function(t, e) {
                                      var i = this._finalize(!1);
                                      i &&
                                        (i.inherited || i.groupCount <= 0) &&
                                        this.materials.splice(i.index, 1);
                                      var n = {
                                        index: this.materials.length,
                                        name: t || '',
                                        mtllib:
                                          Array.isArray(e) && e.length > 0
                                            ? e[e.length - 1]
                                            : '',
                                        smooth:
                                          void 0 !== i ? i.smooth : this.smooth,
                                        groupStart:
                                          void 0 !== i ? i.groupEnd : 0,
                                        groupEnd: -1,
                                        groupCount: -1,
                                        inherited: !1,
                                        clone: function(t) {
                                          var e = {
                                            index:
                                              'number' == typeof t
                                                ? t
                                                : this.index,
                                            name: this.name,
                                            mtllib: this.mtllib,
                                            smooth: this.smooth,
                                            groupStart: 0,
                                            groupEnd: -1,
                                            groupCount: -1,
                                            inherited: !1
                                          };
                                          return (
                                            (e.clone = this.clone.bind(e)), e
                                          );
                                        }
                                      };
                                      return this.materials.push(n), n;
                                    },
                                    currentMaterial: function() {
                                      if (this.materials.length > 0)
                                        return this.materials[
                                          this.materials.length - 1
                                        ];
                                    },
                                    _finalize: function(t) {
                                      var e = this.currentMaterial();
                                      if (
                                        (e &&
                                          -1 === e.groupEnd &&
                                          ((e.groupEnd =
                                            this.geometry.vertices.length / 3),
                                          (e.groupCount =
                                            e.groupEnd - e.groupStart),
                                          (e.inherited = !1)),
                                        t && this.materials.length > 1)
                                      )
                                        for (
                                          var i = this.materials.length - 1;
                                          i >= 0;
                                          i--
                                        )
                                          this.materials[i].groupCount <= 0 &&
                                            this.materials.splice(i, 1);
                                      return (
                                        t &&
                                          0 === this.materials.length &&
                                          this.materials.push({
                                            name: '',
                                            smooth: this.smooth
                                          }),
                                        e
                                      );
                                    }
                                  }),
                                  i && i.name && 'function' == typeof i.clone)
                                ) {
                                  var n = i.clone(0);
                                  (n.inherited = !0),
                                    this.object.materials.push(n);
                                }
                                this.objects.push(this.object);
                              },
                              finalize: function() {
                                this.object &&
                                  'function' == typeof this.object._finalize &&
                                  this.object._finalize(!0);
                              },
                              parseVertexIndex: function(t, e) {
                                var i = parseInt(t, 10);
                                return 3 * (i >= 0 ? i - 1 : i + e / 3);
                              },
                              parseNormalIndex: function(t, e) {
                                var i = parseInt(t, 10);
                                return 3 * (i >= 0 ? i - 1 : i + e / 3);
                              },
                              parseUVIndex: function(t, e) {
                                var i = parseInt(t, 10);
                                return 2 * (i >= 0 ? i - 1 : i + e / 2);
                              },
                              addVertex: function(t, e, i) {
                                var n = this.vertices,
                                  r = this.object.geometry.vertices;
                                r.push(n[t + 0], n[t + 1], n[t + 2]),
                                  r.push(n[e + 0], n[e + 1], n[e + 2]),
                                  r.push(n[i + 0], n[i + 1], n[i + 2]);
                              },
                              addVertexLine: function(t) {
                                var e = this.vertices;
                                this.object.geometry.vertices.push(
                                  e[t + 0],
                                  e[t + 1],
                                  e[t + 2]
                                );
                              },
                              addNormal: function(t, e, i) {
                                var n = this.normals,
                                  r = this.object.geometry.normals;
                                r.push(n[t + 0], n[t + 1], n[t + 2]),
                                  r.push(n[e + 0], n[e + 1], n[e + 2]),
                                  r.push(n[i + 0], n[i + 1], n[i + 2]);
                              },
                              addUV: function(t, e, i) {
                                var n = this.uvs,
                                  r = this.object.geometry.uvs;
                                r.push(n[t + 0], n[t + 1]),
                                  r.push(n[e + 0], n[e + 1]),
                                  r.push(n[i + 0], n[i + 1]);
                              },
                              addUVLine: function(t) {
                                var e = this.uvs;
                                this.object.geometry.uvs.push(
                                  e[t + 0],
                                  e[t + 1]
                                );
                              },
                              addFace: function(t, e, i, n, r, a, o, s, c) {
                                var u = this.vertices.length,
                                  l = this.parseVertexIndex(t, u),
                                  h = this.parseVertexIndex(e, u),
                                  d = this.parseVertexIndex(i, u);
                                if ((this.addVertex(l, h, d), void 0 !== n)) {
                                  var p = this.uvs.length;
                                  (l = this.parseUVIndex(n, p)),
                                    (h = this.parseUVIndex(r, p)),
                                    (d = this.parseUVIndex(a, p)),
                                    this.addUV(l, h, d);
                                }
                                if (void 0 !== o) {
                                  var f = this.normals.length;
                                  (l = this.parseNormalIndex(o, f)),
                                    (h =
                                      o === s
                                        ? l
                                        : this.parseNormalIndex(s, f)),
                                    (d =
                                      o === c
                                        ? l
                                        : this.parseNormalIndex(c, f)),
                                    this.addNormal(l, h, d);
                                }
                              },
                              addLineGeometry: function(t, e) {
                                this.object.geometry.type = 'Line';
                                for (
                                  var i = this.vertices.length,
                                    n = this.uvs.length,
                                    r = 0,
                                    a = t.length;
                                  r < a;
                                  r++
                                )
                                  this.addVertexLine(
                                    this.parseVertexIndex(t[r], i)
                                  );
                                var o = 0;
                                for (a = e.length; o < a; o++)
                                  this.addUVLine(this.parseUVIndex(e[o], n));
                              }
                            };
                            return t.startObject('', !1), t;
                          }();
                          -1 !== n.indexOf('\r\n') &&
                            (n = n.replace(/\r\n/g, '\n')),
                            -1 !== n.indexOf('\\\n') &&
                              (n = n.replace(/\\\n/g, ''));
                          for (
                            var a = n.split('\n'),
                              o = '',
                              s = '',
                              c = [],
                              u = 'function' == typeof ''.trimLeft,
                              l = 0,
                              h = a.length;
                            l < h;
                            l++
                          )
                            if (
                              ((o = a[l]),
                              0 !== (o = u ? o.trimLeft() : o.trim()).length &&
                                '#' !== (s = o.charAt(0)))
                            )
                              if ('v' === s) {
                                var d = o.split(/\s+/);
                                switch (d[0]) {
                                  case 'v':
                                    r.vertices.push(
                                      parseFloat(d[1]),
                                      parseFloat(d[2]),
                                      parseFloat(d[3])
                                    );
                                    break;
                                  case 'vn':
                                    r.normals.push(
                                      parseFloat(d[1]),
                                      parseFloat(d[2]),
                                      parseFloat(d[3])
                                    );
                                    break;
                                  case 'vt':
                                    r.uvs.push(
                                      parseFloat(d[1]),
                                      parseFloat(d[2])
                                    );
                                }
                              } else if ('f' === s) {
                                for (
                                  var p = o
                                      .substr(1)
                                      .trim()
                                      .split(/\s+/),
                                    f = [],
                                    m = 0,
                                    g = p.length;
                                  m < g;
                                  m++
                                ) {
                                  var v = p[m];
                                  if (v.length > 0) {
                                    var y = v.split('/');
                                    f.push(y);
                                  }
                                }
                                var M = f[0];
                                for (m = 1, g = f.length - 1; m < g; m++) {
                                  var w = f[m],
                                    x = f[m + 1];
                                  r.addFace(
                                    M[0],
                                    w[0],
                                    x[0],
                                    M[1],
                                    w[1],
                                    x[1],
                                    M[2],
                                    w[2],
                                    x[2]
                                  );
                                }
                              } else if ('l' === s) {
                                var A = o
                                    .substring(1)
                                    .trim()
                                    .split(' '),
                                  E = [],
                                  b = [];
                                if (-1 === o.indexOf('/')) E = A;
                                else
                                  for (var T = 0, L = A.length; T < L; T++) {
                                    var N = A[T].split('/');
                                    '' !== N[0] && E.push(N[0]),
                                      '' !== N[1] && b.push(N[1]);
                                  }
                                r.addLineGeometry(E, b);
                              } else if (null !== (c = t.exec(o))) {
                                var D = (' ' + c[0].substr(1).trim()).substr(1);
                                r.startObject(D);
                              } else if (i.test(o))
                                r.object.startMaterial(
                                  o.substring(7).trim(),
                                  r.materialLibraries
                                );
                              else if (e.test(o))
                                r.materialLibraries.push(o.substring(7).trim());
                              else {
                                if ('s' !== s) {
                                  if ('\0' === o) continue;
                                  throw new Error(
                                    "Unexpected line: '" + o + "'"
                                  );
                                }
                                if ((c = o.split(' ')).length > 1) {
                                  var C = c[1].trim().toLowerCase();
                                  r.object.smooth = '0' !== C && 'off' !== C;
                                } else r.object.smooth = !0;
                                (F = r.object.currentMaterial()) &&
                                  (F.smooth = r.object.smooth);
                              }
                          r.finalize();
                          var S = new THREE.Group();
                          S.materialLibraries = [].concat(r.materialLibraries);
                          for (l = 0, h = r.objects.length; l < h; l++) {
                            var I = r.objects[l],
                              _ = I.geometry,
                              j = I.materials,
                              O = 'Line' === _.type;
                            if (0 !== _.vertices.length) {
                              var z = new THREE.BufferGeometry();
                              z.addAttribute(
                                'position',
                                new THREE.BufferAttribute(
                                  new Float32Array(_.vertices),
                                  3
                                )
                              ),
                                _.normals.length > 0
                                  ? z.addAttribute(
                                      'normal',
                                      new THREE.BufferAttribute(
                                        new Float32Array(_.normals),
                                        3
                                      )
                                    )
                                  : z.computeVertexNormals(),
                                _.uvs.length > 0 &&
                                  z.addAttribute(
                                    'uv',
                                    new THREE.BufferAttribute(
                                      new Float32Array(_.uvs),
                                      2
                                    )
                                  );
                              for (
                                var R, k = [], U = 0, P = j.length;
                                U < P;
                                U++
                              ) {
                                var B = j[U],
                                  F = void 0;
                                if (
                                  null !== this.materials &&
                                  ((F = this.materials.create(B.name)),
                                  O &&
                                    F &&
                                    !(F instanceof THREE.LineBasicMaterial))
                                ) {
                                  var G = new THREE.LineBasicMaterial();
                                  G.copy(F), (F = G);
                                }
                                F ||
                                  ((F = O
                                    ? new THREE.LineBasicMaterial()
                                    : new THREE.MeshPhongMaterial()).name =
                                    B.name),
                                  (F.flatShading = !B.smooth),
                                  k.push(F);
                              }
                              if (k.length > 1) {
                                for (U = 0, P = j.length; U < P; U++) {
                                  B = j[U];
                                  z.addGroup(B.groupStart, B.groupCount, U);
                                }
                                R = O
                                  ? new THREE.LineSegments(z, k)
                                  : new THREE.Mesh(z, k);
                              } else
                                R = O
                                  ? new THREE.LineSegments(z, k[0])
                                  : new THREE.Mesh(z, k[0]);
                              (R.name = I.name), S.add(R);
                            }
                          }
                          return S;
                        }
                      }),
                      n
                    );
                  })();
                },
                {}
              ],
              46: [
                function(t, e, i) {
                  ((i = e.exports = function(t) {
                    return t.replace(/^\s*|\s*$/g, '');
                  }).left = function(t) {
                    return t.replace(/^\s*/, '');
                  }),
                    (i.right = function(t) {
                      return t.replace(/\s*$/, '');
                    });
                },
                {}
              ],
              47: [
                function(t, e, i) {
                  e.exports = {
                    _args: [
                      [
                        {
                          raw: 'webvr-polyfill@^0.9.36',
                          scope: null,
                          escapedName: 'webvr-polyfill',
                          name: 'webvr-polyfill',
                          rawSpec: '^0.9.36',
                          spec: '>=0.9.36 <0.10.0',
                          type: 'range'
                        },
                        'X:\\Development\\aframe'
                      ]
                    ],
                    _from: 'webvr-polyfill@>=0.9.36 <0.10.0',
                    _id: 'webvr-polyfill@0.9.38',
                    _inCache: !0,
                    _location: '/webvr-polyfill',
                    _nodeVersion: '8.1.4',
                    _npmOperationalInternal: {
                      host: 's3://npm-registry-packages',
                      tmp:
                        'tmp/webvr-polyfill-0.9.38.tgz_1505328121599_0.8887633208651096'
                    },
                    _npmUser: { name: 'jsantell', email: 'jsantell@gmail.com' },
                    _npmVersion: '5.4.1',
                    _phantomChildren: {},
                    _requested: {
                      raw: 'webvr-polyfill@^0.9.36',
                      scope: null,
                      escapedName: 'webvr-polyfill',
                      name: 'webvr-polyfill',
                      rawSpec: '^0.9.36',
                      spec: '>=0.9.36 <0.10.0',
                      type: 'range'
                    },
                    _requiredBy: ['/'],
                    _resolved:
                      'https://registry.npmjs.org/webvr-polyfill/-/webvr-polyfill-0.9.38.tgz',
                    _shasum: '740099a2f268a56a0bf18181fb57395efad70712',
                    _shrinkwrap: null,
                    _spec: 'webvr-polyfill@^0.9.36',
                    _where: 'X:\\Development\\aframe',
                    authors: [
                      'Boris Smus <boris@smus.com>',
                      'Brandon Jones <tojiro@gmail.com>',
                      'Jordan Santell <jordan@jsantell.com>'
                    ],
                    bugs: {
                      url: 'https://github.com/googlevr/webvr-polyfill/issues'
                    },
                    dependencies: {},
                    description:
                      'Use WebVR today, on mobile or desktop, without requiring a special browser build.',
                    devDependencies: {
                      chai: '^3.5.0',
                      jsdom: '^9.12.0',
                      mocha: '^3.2.0',
                      semver: '^5.3.0',
                      webpack: '^2.6.1',
                      'webpack-dev-server': '^2.4.5'
                    },
                    directories: {},
                    dist: {
                      integrity:
                        'sha512-HABweqWYE0suk6P5TdHlagJK56HSecB5xKj6ZshocrxSj9UmNOCjCRv4vFYHCaFZKtuKWa8niRHVbJ3Vo7JYDg==',
                      shasum: '740099a2f268a56a0bf18181fb57395efad70712',
                      tarball:
                        'https://registry.npmjs.org/webvr-polyfill/-/webvr-polyfill-0.9.38.tgz'
                    },
                    gitHead: '8063169c6fc52342ebe5524d7f217987f9aa9cab',
                    homepage: 'https://github.com/googlevr/webvr-polyfill',
                    keywords: ['vr', 'webvr'],
                    license: 'Apache-2.0',
                    main: 'src/node-entry',
                    maintainers: [
                      { name: 'jsantell', email: 'jsantell@gmail.com' },
                      { name: 'toji', email: 'tojiro@gmail.com' },
                      { name: 'smus', email: 'boris@smus.com' }
                    ],
                    name: 'webvr-polyfill',
                    optionalDependencies: {},
                    readme: 'ERROR: No README data found!',
                    repository: {
                      type: 'git',
                      url: 'git+https://github.com/googlevr/webvr-polyfill.git'
                    },
                    scripts: {
                      build: 'webpack',
                      start: 'npm run watch',
                      test: 'mocha',
                      watch: 'webpack-dev-server'
                    },
                    version: '0.9.38'
                  };
                },
                {}
              ],
              48: [
                function(t, e, i) {
                  var n = t('./util.js'),
                    r = t('./wakelock.js'),
                    a = 1e3,
                    o = !1,
                    s = [0, 0, 0.5, 1],
                    c = [0.5, 0, 0.5, 1];
                  function u() {
                    (this.isPolyfilled = !0),
                      (this.displayId = a++),
                      (this.displayName = 'webvr-polyfill displayName'),
                      (this.depthNear = 0.01),
                      (this.depthFar = 1e4),
                      (this.isConnected = !0),
                      (this.isPresenting = !1),
                      (this.capabilities = {
                        hasPosition: !1,
                        hasOrientation: !1,
                        hasExternalDisplay: !1,
                        canPresent: !1,
                        maxLayers: 1
                      }),
                      (this.stageParameters = null),
                      (this.waitingForPresent_ = !1),
                      (this.layer_ = null),
                      (this.fullscreenElement_ = null),
                      (this.fullscreenWrapper_ = null),
                      (this.fullscreenElementCachedStyle_ = null),
                      (this.fullscreenEventTarget_ = null),
                      (this.fullscreenChangeHandler_ = null),
                      (this.fullscreenErrorHandler_ = null),
                      (this.wakelock_ = new r());
                  }
                  function l() {
                    (this.isPolyfilled = !0),
                      (this.hardwareUnitId = 'webvr-polyfill hardwareUnitId'),
                      (this.deviceId = 'webvr-polyfill deviceId'),
                      (this.deviceName = 'webvr-polyfill deviceName');
                  }
                  function h() {}
                  function d() {}
                  (u.prototype.getFrameData = function(t) {
                    return n.frameDataFromPose(t, this.getPose(), this);
                  }),
                    (u.prototype.getPose = function() {
                      return this.getImmediatePose();
                    }),
                    (u.prototype.requestAnimationFrame = function(t) {
                      return window.requestAnimationFrame(t);
                    }),
                    (u.prototype.cancelAnimationFrame = function(t) {
                      return window.cancelAnimationFrame(t);
                    }),
                    (u.prototype.wrapForFullscreen = function(t) {
                      if (n.isIOS()) return t;
                      if (!this.fullscreenWrapper_) {
                        this.fullscreenWrapper_ = document.createElement('div');
                        var e = [
                          'height: ' +
                            Math.min(screen.height, screen.width) +
                            'px !important',
                          'top: 0 !important',
                          'left: 0 !important',
                          'right: 0 !important',
                          'border: 0',
                          'margin: 0',
                          'padding: 0',
                          'z-index: 999999 !important',
                          'position: fixed'
                        ];
                        this.fullscreenWrapper_.setAttribute(
                          'style',
                          e.join('; ') + ';'
                        ),
                          this.fullscreenWrapper_.classList.add(
                            'webvr-polyfill-fullscreen-wrapper'
                          );
                      }
                      if (this.fullscreenElement_ == t)
                        return this.fullscreenWrapper_;
                      this.removeFullscreenWrapper(),
                        (this.fullscreenElement_ = t);
                      var i = this.fullscreenElement_.parentElement;
                      i.insertBefore(
                        this.fullscreenWrapper_,
                        this.fullscreenElement_
                      ),
                        i.removeChild(this.fullscreenElement_),
                        this.fullscreenWrapper_.insertBefore(
                          this.fullscreenElement_,
                          this.fullscreenWrapper_.firstChild
                        ),
                        (this.fullscreenElementCachedStyle_ = this.fullscreenElement_.getAttribute(
                          'style'
                        ));
                      var r = this;
                      return (
                        (function() {
                          if (r.fullscreenElement_) {
                            var t = [
                              'position: absolute',
                              'top: 0',
                              'left: 0',
                              'width: ' +
                                Math.max(screen.width, screen.height) +
                                'px',
                              'height: ' +
                                Math.min(screen.height, screen.width) +
                                'px',
                              'border: 0',
                              'margin: 0',
                              'padding: 0'
                            ];
                            r.fullscreenElement_.setAttribute(
                              'style',
                              t.join('; ') + ';'
                            );
                          }
                        })(),
                        this.fullscreenWrapper_
                      );
                    }),
                    (u.prototype.removeFullscreenWrapper = function() {
                      if (this.fullscreenElement_) {
                        var t = this.fullscreenElement_;
                        this.fullscreenElementCachedStyle_
                          ? t.setAttribute(
                              'style',
                              this.fullscreenElementCachedStyle_
                            )
                          : t.removeAttribute('style'),
                          (this.fullscreenElement_ = null),
                          (this.fullscreenElementCachedStyle_ = null);
                        var e = this.fullscreenWrapper_.parentElement;
                        return (
                          this.fullscreenWrapper_.removeChild(t),
                          e.insertBefore(t, this.fullscreenWrapper_),
                          e.removeChild(this.fullscreenWrapper_),
                          t
                        );
                      }
                    }),
                    (u.prototype.requestPresent = function(t) {
                      var e = this.isPresenting,
                        i = this;
                      return (
                        t instanceof Array || (o || (o = !0), (t = [t])),
                        new Promise(function(r, a) {
                          if (i.capabilities.canPresent)
                            if (
                              0 == t.length ||
                              t.length > i.capabilities.maxLayers
                            )
                              a(new Error('Invalid number of layers.'));
                            else {
                              var o = t[0];
                              if (o.source) {
                                var u = o.leftBounds || s,
                                  l = o.rightBounds || c;
                                if (e) {
                                  var h = i.layer_;
                                  h.source !== o.source &&
                                    (h.source = o.source);
                                  for (var d = 0; d < 4; d++)
                                    (h.leftBounds[d] = u[d]),
                                      (h.rightBounds[d] = l[d]);
                                  r();
                                } else {
                                  if (
                                    ((i.layer_ = {
                                      predistorted: o.predistorted,
                                      source: o.source,
                                      leftBounds: u.slice(0),
                                      rightBounds: l.slice(0)
                                    }),
                                    (i.waitingForPresent_ = !1),
                                    i.layer_ && i.layer_.source)
                                  ) {
                                    var p = i.wrapForFullscreen(
                                      i.layer_.source
                                    );
                                    i.addFullscreenListeners_(
                                      p,
                                      function() {
                                        var t = n.getFullscreenElement();
                                        (i.isPresenting = p === t),
                                          i.isPresenting
                                            ? (screen.orientation &&
                                                screen.orientation.lock &&
                                                screen.orientation
                                                  .lock('landscape-primary')
                                                  .catch(function(t) {}),
                                              (i.waitingForPresent_ = !1),
                                              i.beginPresent_(),
                                              r())
                                            : (screen.orientation &&
                                                screen.orientation.unlock &&
                                                screen.orientation.unlock(),
                                              i.removeFullscreenWrapper(),
                                              i.wakelock_.release(),
                                              i.endPresent_(),
                                              i.removeFullscreenListeners_()),
                                          i.fireVRDisplayPresentChange_();
                                      },
                                      function() {
                                        i.waitingForPresent_ &&
                                          (i.removeFullscreenWrapper(),
                                          i.removeFullscreenListeners_(),
                                          i.wakelock_.release(),
                                          (i.waitingForPresent_ = !1),
                                          (i.isPresenting = !1),
                                          a(new Error('Unable to present.')));
                                      }
                                    ),
                                      n.requestFullscreen(p)
                                        ? (i.wakelock_.request(),
                                          (i.waitingForPresent_ = !0))
                                        : (n.isIOS() || n.isWebViewAndroid()) &&
                                          (i.wakelock_.request(),
                                          (i.isPresenting = !0),
                                          i.beginPresent_(),
                                          i.fireVRDisplayPresentChange_(),
                                          r());
                                  }
                                  i.waitingForPresent_ ||
                                    n.isIOS() ||
                                    (n.exitFullscreen(),
                                    a(new Error('Unable to present.')));
                                }
                              } else r();
                            }
                          else
                            a(
                              new Error(
                                'VRDisplay is not capable of presenting.'
                              )
                            );
                        })
                      );
                    }),
                    (u.prototype.exitPresent = function() {
                      var t = this.isPresenting,
                        e = this;
                      return (
                        (this.isPresenting = !1),
                        (this.layer_ = null),
                        this.wakelock_.release(),
                        new Promise(function(i, r) {
                          t
                            ? (!n.exitFullscreen() &&
                                n.isIOS() &&
                                (e.endPresent_(),
                                e.fireVRDisplayPresentChange_()),
                              n.isWebViewAndroid() &&
                                (e.removeFullscreenWrapper(),
                                e.removeFullscreenListeners_(),
                                e.endPresent_(),
                                e.fireVRDisplayPresentChange_()),
                              i())
                            : r(new Error('Was not presenting to VRDisplay.'));
                        })
                      );
                    }),
                    (u.prototype.getLayers = function() {
                      return this.layer_ ? [this.layer_] : [];
                    }),
                    (u.prototype.fireVRDisplayPresentChange_ = function() {
                      var t = new CustomEvent('vrdisplaypresentchange', {
                        detail: { display: this }
                      });
                      window.dispatchEvent(t);
                    }),
                    (u.prototype.fireVRDisplayConnect_ = function() {
                      var t = new CustomEvent('vrdisplayconnect', {
                        detail: { display: this }
                      });
                      window.dispatchEvent(t);
                    }),
                    (u.prototype.addFullscreenListeners_ = function(t, e, i) {
                      this.removeFullscreenListeners_(),
                        (this.fullscreenEventTarget_ = t),
                        (this.fullscreenChangeHandler_ = e),
                        (this.fullscreenErrorHandler_ = i),
                        e &&
                          (document.fullscreenEnabled
                            ? t.addEventListener('fullscreenchange', e, !1)
                            : document.webkitFullscreenEnabled
                              ? t.addEventListener(
                                  'webkitfullscreenchange',
                                  e,
                                  !1
                                )
                              : document.mozFullScreenEnabled
                                ? document.addEventListener(
                                    'mozfullscreenchange',
                                    e,
                                    !1
                                  )
                                : document.msFullscreenEnabled &&
                                  t.addEventListener(
                                    'msfullscreenchange',
                                    e,
                                    !1
                                  )),
                        i &&
                          (document.fullscreenEnabled
                            ? t.addEventListener('fullscreenerror', i, !1)
                            : document.webkitFullscreenEnabled
                              ? t.addEventListener(
                                  'webkitfullscreenerror',
                                  i,
                                  !1
                                )
                              : document.mozFullScreenEnabled
                                ? document.addEventListener(
                                    'mozfullscreenerror',
                                    i,
                                    !1
                                  )
                                : document.msFullscreenEnabled &&
                                  t.addEventListener(
                                    'msfullscreenerror',
                                    i,
                                    !1
                                  ));
                    }),
                    (u.prototype.removeFullscreenListeners_ = function() {
                      if (this.fullscreenEventTarget_) {
                        var t = this.fullscreenEventTarget_;
                        if (this.fullscreenChangeHandler_) {
                          var e = this.fullscreenChangeHandler_;
                          t.removeEventListener('fullscreenchange', e, !1),
                            t.removeEventListener(
                              'webkitfullscreenchange',
                              e,
                              !1
                            ),
                            document.removeEventListener(
                              'mozfullscreenchange',
                              e,
                              !1
                            ),
                            t.removeEventListener('msfullscreenchange', e, !1);
                        }
                        if (this.fullscreenErrorHandler_) {
                          var i = this.fullscreenErrorHandler_;
                          t.removeEventListener('fullscreenerror', i, !1),
                            t.removeEventListener(
                              'webkitfullscreenerror',
                              i,
                              !1
                            ),
                            document.removeEventListener(
                              'mozfullscreenerror',
                              i,
                              !1
                            ),
                            t.removeEventListener('msfullscreenerror', i, !1);
                        }
                        (this.fullscreenEventTarget_ = null),
                          (this.fullscreenChangeHandler_ = null),
                          (this.fullscreenErrorHandler_ = null);
                      }
                    }),
                    (u.prototype.beginPresent_ = function() {}),
                    (u.prototype.endPresent_ = function() {}),
                    (u.prototype.submitFrame = function(t) {}),
                    (u.prototype.getEyeParameters = function(t) {
                      return null;
                    }),
                    (h.prototype = new l()),
                    (d.prototype = new l()),
                    (e.exports.VRFrameData = function() {
                      (this.leftProjectionMatrix = new Float32Array(16)),
                        (this.leftViewMatrix = new Float32Array(16)),
                        (this.rightProjectionMatrix = new Float32Array(16)),
                        (this.rightViewMatrix = new Float32Array(16)),
                        (this.pose = null);
                    }),
                    (e.exports.VRDisplay = u),
                    (e.exports.VRDevice = l),
                    (e.exports.HMDVRDevice = h),
                    (e.exports.PositionSensorVRDevice = d);
                },
                { './util.js': 68, './wakelock.js': 70 }
              ],
              49: [
                function(t, e, i) {
                  var n = t('./cardboard-ui.js'),
                    r = t('./util.js'),
                    a = t('./deps/wglu-preserve-state.js'),
                    o = [
                      'attribute vec2 position;',
                      'attribute vec3 texCoord;',
                      'varying vec2 vTexCoord;',
                      'uniform vec4 viewportOffsetScale[2];',
                      'void main() {',
                      '  vec4 viewport = viewportOffsetScale[int(texCoord.z)];',
                      '  vTexCoord = (texCoord.xy * viewport.zw) + viewport.xy;',
                      '  gl_Position = vec4( position, 1.0, 1.0 );',
                      '}'
                    ].join('\n'),
                    s = [
                      'precision mediump float;',
                      'uniform sampler2D diffuse;',
                      'varying vec2 vTexCoord;',
                      'void main() {',
                      '  gl_FragColor = texture2D(diffuse, vTexCoord);',
                      '}'
                    ].join('\n');
                  function c(t) {
                    (this.gl = t),
                      (this.ctxAttribs = t.getContextAttributes()),
                      (this.meshWidth = 20),
                      (this.meshHeight = 20),
                      (this.bufferScale = window.WebVRConfig.BUFFER_SCALE),
                      (this.bufferWidth = t.drawingBufferWidth),
                      (this.bufferHeight = t.drawingBufferHeight),
                      (this.realBindFramebuffer = t.bindFramebuffer),
                      (this.realEnable = t.enable),
                      (this.realDisable = t.disable),
                      (this.realColorMask = t.colorMask),
                      (this.realClearColor = t.clearColor),
                      (this.realViewport = t.viewport),
                      r.isIOS() ||
                        ((this.realCanvasWidth = Object.getOwnPropertyDescriptor(
                          t.canvas.__proto__,
                          'width'
                        )),
                        (this.realCanvasHeight = Object.getOwnPropertyDescriptor(
                          t.canvas.__proto__,
                          'height'
                        ))),
                      (this.isPatched = !1),
                      (this.lastBoundFramebuffer = null),
                      (this.cullFace = !1),
                      (this.depthTest = !1),
                      (this.blend = !1),
                      (this.scissorTest = !1),
                      (this.stencilTest = !1),
                      (this.viewport = [0, 0, 0, 0]),
                      (this.colorMask = [!0, !0, !0, !0]),
                      (this.clearColor = [0, 0, 0, 0]),
                      (this.attribs = { position: 0, texCoord: 1 }),
                      (this.program = r.linkProgram(t, o, s, this.attribs)),
                      (this.uniforms = r.getProgramUniforms(t, this.program)),
                      (this.viewportOffsetScale = new Float32Array(8)),
                      this.setTextureBounds(),
                      (this.vertexBuffer = t.createBuffer()),
                      (this.indexBuffer = t.createBuffer()),
                      (this.indexCount = 0),
                      (this.renderTarget = t.createTexture()),
                      (this.framebuffer = t.createFramebuffer()),
                      (this.depthStencilBuffer = null),
                      (this.depthBuffer = null),
                      (this.stencilBuffer = null),
                      this.ctxAttribs.depth && this.ctxAttribs.stencil
                        ? (this.depthStencilBuffer = t.createRenderbuffer())
                        : this.ctxAttribs.depth
                          ? (this.depthBuffer = t.createRenderbuffer())
                          : this.ctxAttribs.stencil &&
                            (this.stencilBuffer = t.createRenderbuffer()),
                      this.patch(),
                      this.onResize(),
                      window.WebVRConfig.CARDBOARD_UI_DISABLED ||
                        (this.cardboardUI = new n(t));
                  }
                  (c.prototype.destroy = function() {
                    var t = this.gl;
                    this.unpatch(),
                      t.deleteProgram(this.program),
                      t.deleteBuffer(this.vertexBuffer),
                      t.deleteBuffer(this.indexBuffer),
                      t.deleteTexture(this.renderTarget),
                      t.deleteFramebuffer(this.framebuffer),
                      this.depthStencilBuffer &&
                        t.deleteRenderbuffer(this.depthStencilBuffer),
                      this.depthBuffer &&
                        t.deleteRenderbuffer(this.depthBuffer),
                      this.stencilBuffer &&
                        t.deleteRenderbuffer(this.stencilBuffer),
                      this.cardboardUI && this.cardboardUI.destroy();
                  }),
                    (c.prototype.onResize = function() {
                      var t = this.gl,
                        e = this,
                        i = [
                          t.RENDERBUFFER_BINDING,
                          t.TEXTURE_BINDING_2D,
                          t.TEXTURE0
                        ];
                      a(t, i, function(t) {
                        e.realBindFramebuffer.call(t, t.FRAMEBUFFER, null),
                          e.scissorTest &&
                            e.realDisable.call(t, t.SCISSOR_TEST),
                          e.realColorMask.call(t, !0, !0, !0, !0),
                          e.realViewport.call(
                            t,
                            0,
                            0,
                            t.drawingBufferWidth,
                            t.drawingBufferHeight
                          ),
                          e.realClearColor.call(t, 0, 0, 0, 1),
                          t.clear(t.COLOR_BUFFER_BIT),
                          e.realBindFramebuffer.call(
                            t,
                            t.FRAMEBUFFER,
                            e.framebuffer
                          ),
                          t.bindTexture(t.TEXTURE_2D, e.renderTarget),
                          t.texImage2D(
                            t.TEXTURE_2D,
                            0,
                            e.ctxAttribs.alpha ? t.RGBA : t.RGB,
                            e.bufferWidth,
                            e.bufferHeight,
                            0,
                            e.ctxAttribs.alpha ? t.RGBA : t.RGB,
                            t.UNSIGNED_BYTE,
                            null
                          ),
                          t.texParameteri(
                            t.TEXTURE_2D,
                            t.TEXTURE_MAG_FILTER,
                            t.LINEAR
                          ),
                          t.texParameteri(
                            t.TEXTURE_2D,
                            t.TEXTURE_MIN_FILTER,
                            t.LINEAR
                          ),
                          t.texParameteri(
                            t.TEXTURE_2D,
                            t.TEXTURE_WRAP_S,
                            t.CLAMP_TO_EDGE
                          ),
                          t.texParameteri(
                            t.TEXTURE_2D,
                            t.TEXTURE_WRAP_T,
                            t.CLAMP_TO_EDGE
                          ),
                          t.framebufferTexture2D(
                            t.FRAMEBUFFER,
                            t.COLOR_ATTACHMENT0,
                            t.TEXTURE_2D,
                            e.renderTarget,
                            0
                          ),
                          e.ctxAttribs.depth && e.ctxAttribs.stencil
                            ? (t.bindRenderbuffer(
                                t.RENDERBUFFER,
                                e.depthStencilBuffer
                              ),
                              t.renderbufferStorage(
                                t.RENDERBUFFER,
                                t.DEPTH_STENCIL,
                                e.bufferWidth,
                                e.bufferHeight
                              ),
                              t.framebufferRenderbuffer(
                                t.FRAMEBUFFER,
                                t.DEPTH_STENCIL_ATTACHMENT,
                                t.RENDERBUFFER,
                                e.depthStencilBuffer
                              ))
                            : e.ctxAttribs.depth
                              ? (t.bindRenderbuffer(
                                  t.RENDERBUFFER,
                                  e.depthBuffer
                                ),
                                t.renderbufferStorage(
                                  t.RENDERBUFFER,
                                  t.DEPTH_COMPONENT16,
                                  e.bufferWidth,
                                  e.bufferHeight
                                ),
                                t.framebufferRenderbuffer(
                                  t.FRAMEBUFFER,
                                  t.DEPTH_ATTACHMENT,
                                  t.RENDERBUFFER,
                                  e.depthBuffer
                                ))
                              : e.ctxAttribs.stencil &&
                                (t.bindRenderbuffer(
                                  t.RENDERBUFFER,
                                  e.stencilBuffer
                                ),
                                t.renderbufferStorage(
                                  t.RENDERBUFFER,
                                  t.STENCIL_INDEX8,
                                  e.bufferWidth,
                                  e.bufferHeight
                                ),
                                t.framebufferRenderbuffer(
                                  t.FRAMEBUFFER,
                                  t.STENCIL_ATTACHMENT,
                                  t.RENDERBUFFER,
                                  e.stencilBuffer
                                )),
                          t.checkFramebufferStatus(t.FRAMEBUFFER),
                          t.FRAMEBUFFER_COMPLETE,
                          e.realBindFramebuffer.call(
                            t,
                            t.FRAMEBUFFER,
                            e.lastBoundFramebuffer
                          ),
                          e.scissorTest && e.realEnable.call(t, t.SCISSOR_TEST),
                          e.realColorMask.apply(t, e.colorMask),
                          e.realViewport.apply(t, e.viewport),
                          e.realClearColor.apply(t, e.clearColor);
                      }),
                        this.cardboardUI && this.cardboardUI.onResize();
                    }),
                    (c.prototype.patch = function() {
                      if (!this.isPatched) {
                        var t = this,
                          e = this.gl.canvas,
                          i = this.gl;
                        r.isIOS() ||
                          ((e.width = r.getScreenWidth() * this.bufferScale),
                          (e.height = r.getScreenHeight() * this.bufferScale),
                          Object.defineProperty(e, 'width', {
                            configurable: !0,
                            enumerable: !0,
                            get: function() {
                              return t.bufferWidth;
                            },
                            set: function(i) {
                              (t.bufferWidth = i),
                                t.realCanvasWidth.set.call(e, i),
                                t.onResize();
                            }
                          }),
                          Object.defineProperty(e, 'height', {
                            configurable: !0,
                            enumerable: !0,
                            get: function() {
                              return t.bufferHeight;
                            },
                            set: function(i) {
                              (t.bufferHeight = i),
                                t.realCanvasHeight.set.call(e, i),
                                t.onResize();
                            }
                          })),
                          (this.lastBoundFramebuffer = i.getParameter(
                            i.FRAMEBUFFER_BINDING
                          )),
                          null == this.lastBoundFramebuffer &&
                            ((this.lastBoundFramebuffer = this.framebuffer),
                            this.gl.bindFramebuffer(
                              i.FRAMEBUFFER,
                              this.framebuffer
                            )),
                          (this.gl.bindFramebuffer = function(e, n) {
                            (t.lastBoundFramebuffer = n || t.framebuffer),
                              t.realBindFramebuffer.call(
                                i,
                                e,
                                t.lastBoundFramebuffer
                              );
                          }),
                          (this.cullFace = i.getParameter(i.CULL_FACE)),
                          (this.depthTest = i.getParameter(i.DEPTH_TEST)),
                          (this.blend = i.getParameter(i.BLEND)),
                          (this.scissorTest = i.getParameter(i.SCISSOR_TEST)),
                          (this.stencilTest = i.getParameter(i.STENCIL_TEST)),
                          (i.enable = function(e) {
                            switch (e) {
                              case i.CULL_FACE:
                                t.cullFace = !0;
                                break;
                              case i.DEPTH_TEST:
                                t.depthTest = !0;
                                break;
                              case i.BLEND:
                                t.blend = !0;
                                break;
                              case i.SCISSOR_TEST:
                                t.scissorTest = !0;
                                break;
                              case i.STENCIL_TEST:
                                t.stencilTest = !0;
                            }
                            t.realEnable.call(i, e);
                          }),
                          (i.disable = function(e) {
                            switch (e) {
                              case i.CULL_FACE:
                                t.cullFace = !1;
                                break;
                              case i.DEPTH_TEST:
                                t.depthTest = !1;
                                break;
                              case i.BLEND:
                                t.blend = !1;
                                break;
                              case i.SCISSOR_TEST:
                                t.scissorTest = !1;
                                break;
                              case i.STENCIL_TEST:
                                t.stencilTest = !1;
                            }
                            t.realDisable.call(i, e);
                          }),
                          (this.colorMask = i.getParameter(i.COLOR_WRITEMASK)),
                          (i.colorMask = function(e, n, r, a) {
                            (t.colorMask[0] = e),
                              (t.colorMask[1] = n),
                              (t.colorMask[2] = r),
                              (t.colorMask[3] = a),
                              t.realColorMask.call(i, e, n, r, a);
                          }),
                          (this.clearColor = i.getParameter(
                            i.COLOR_CLEAR_VALUE
                          )),
                          (i.clearColor = function(e, n, r, a) {
                            (t.clearColor[0] = e),
                              (t.clearColor[1] = n),
                              (t.clearColor[2] = r),
                              (t.clearColor[3] = a),
                              t.realClearColor.call(i, e, n, r, a);
                          }),
                          (this.viewport = i.getParameter(i.VIEWPORT)),
                          (i.viewport = function(e, n, r, a) {
                            (t.viewport[0] = e),
                              (t.viewport[1] = n),
                              (t.viewport[2] = r),
                              (t.viewport[3] = a),
                              t.realViewport.call(i, e, n, r, a);
                          }),
                          (this.isPatched = !0),
                          r.safariCssSizeWorkaround(e);
                      }
                    }),
                    (c.prototype.unpatch = function() {
                      if (this.isPatched) {
                        var t = this.gl,
                          e = this.gl.canvas;
                        r.isIOS() ||
                          (Object.defineProperty(
                            e,
                            'width',
                            this.realCanvasWidth
                          ),
                          Object.defineProperty(
                            e,
                            'height',
                            this.realCanvasHeight
                          )),
                          (e.width = this.bufferWidth),
                          (e.height = this.bufferHeight),
                          (t.bindFramebuffer = this.realBindFramebuffer),
                          (t.enable = this.realEnable),
                          (t.disable = this.realDisable),
                          (t.colorMask = this.realColorMask),
                          (t.clearColor = this.realClearColor),
                          (t.viewport = this.realViewport),
                          this.lastBoundFramebuffer == this.framebuffer &&
                            t.bindFramebuffer(t.FRAMEBUFFER, null),
                          (this.isPatched = !1),
                          setTimeout(function() {
                            r.safariCssSizeWorkaround(e);
                          }, 1);
                      }
                    }),
                    (c.prototype.setTextureBounds = function(t, e) {
                      t || (t = [0, 0, 0.5, 1]),
                        e || (e = [0.5, 0, 0.5, 1]),
                        (this.viewportOffsetScale[0] = t[0]),
                        (this.viewportOffsetScale[1] = t[1]),
                        (this.viewportOffsetScale[2] = t[2]),
                        (this.viewportOffsetScale[3] = t[3]),
                        (this.viewportOffsetScale[4] = e[0]),
                        (this.viewportOffsetScale[5] = e[1]),
                        (this.viewportOffsetScale[6] = e[2]),
                        (this.viewportOffsetScale[7] = e[3]);
                    }),
                    (c.prototype.submitFrame = function() {
                      var t = this.gl,
                        e = this,
                        i = [];
                      if (
                        (window.WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS ||
                          i.push(
                            t.CURRENT_PROGRAM,
                            t.ARRAY_BUFFER_BINDING,
                            t.ELEMENT_ARRAY_BUFFER_BINDING,
                            t.TEXTURE_BINDING_2D,
                            t.TEXTURE0
                          ),
                        a(t, i, function(t) {
                          e.realBindFramebuffer.call(t, t.FRAMEBUFFER, null),
                            e.cullFace && e.realDisable.call(t, t.CULL_FACE),
                            e.depthTest && e.realDisable.call(t, t.DEPTH_TEST),
                            e.blend && e.realDisable.call(t, t.BLEND),
                            e.scissorTest &&
                              e.realDisable.call(t, t.SCISSOR_TEST),
                            e.stencilTest &&
                              e.realDisable.call(t, t.STENCIL_TEST),
                            e.realColorMask.call(t, !0, !0, !0, !0),
                            e.realViewport.call(
                              t,
                              0,
                              0,
                              t.drawingBufferWidth,
                              t.drawingBufferHeight
                            ),
                            (e.ctxAttribs.alpha || r.isIOS()) &&
                              (e.realClearColor.call(t, 0, 0, 0, 1),
                              t.clear(t.COLOR_BUFFER_BIT)),
                            t.useProgram(e.program),
                            t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, e.indexBuffer),
                            t.bindBuffer(t.ARRAY_BUFFER, e.vertexBuffer),
                            t.enableVertexAttribArray(e.attribs.position),
                            t.enableVertexAttribArray(e.attribs.texCoord),
                            t.vertexAttribPointer(
                              e.attribs.position,
                              2,
                              t.FLOAT,
                              !1,
                              20,
                              0
                            ),
                            t.vertexAttribPointer(
                              e.attribs.texCoord,
                              3,
                              t.FLOAT,
                              !1,
                              20,
                              8
                            ),
                            t.activeTexture(t.TEXTURE0),
                            t.uniform1i(e.uniforms.diffuse, 0),
                            t.bindTexture(t.TEXTURE_2D, e.renderTarget),
                            t.uniform4fv(
                              e.uniforms.viewportOffsetScale,
                              e.viewportOffsetScale
                            ),
                            t.drawElements(
                              t.TRIANGLES,
                              e.indexCount,
                              t.UNSIGNED_SHORT,
                              0
                            ),
                            e.cardboardUI && e.cardboardUI.renderNoState(),
                            e.realBindFramebuffer.call(
                              e.gl,
                              t.FRAMEBUFFER,
                              e.framebuffer
                            ),
                            e.ctxAttribs.preserveDrawingBuffer ||
                              (e.realClearColor.call(t, 0, 0, 0, 0),
                              t.clear(t.COLOR_BUFFER_BIT)),
                            window.WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS ||
                              e.realBindFramebuffer.call(
                                t,
                                t.FRAMEBUFFER,
                                e.lastBoundFramebuffer
                              ),
                            e.cullFace && e.realEnable.call(t, t.CULL_FACE),
                            e.depthTest && e.realEnable.call(t, t.DEPTH_TEST),
                            e.blend && e.realEnable.call(t, t.BLEND),
                            e.scissorTest &&
                              e.realEnable.call(t, t.SCISSOR_TEST),
                            e.stencilTest &&
                              e.realEnable.call(t, t.STENCIL_TEST),
                            e.realColorMask.apply(t, e.colorMask),
                            e.realViewport.apply(t, e.viewport),
                            (!e.ctxAttribs.alpha &&
                              e.ctxAttribs.preserveDrawingBuffer) ||
                              e.realClearColor.apply(t, e.clearColor);
                        }),
                        r.isIOS())
                      ) {
                        var n = t.canvas;
                        (n.width == e.bufferWidth &&
                          n.height == e.bufferHeight) ||
                          ((e.bufferWidth = n.width),
                          (e.bufferHeight = n.height),
                          e.onResize());
                      }
                    }),
                    (c.prototype.updateDeviceInfo = function(t) {
                      var e = this.gl,
                        i = this,
                        n = [
                          e.ARRAY_BUFFER_BINDING,
                          e.ELEMENT_ARRAY_BUFFER_BINDING
                        ];
                      a(e, n, function(e) {
                        var n = i.computeMeshVertices_(
                          i.meshWidth,
                          i.meshHeight,
                          t
                        );
                        if (
                          (e.bindBuffer(e.ARRAY_BUFFER, i.vertexBuffer),
                          e.bufferData(e.ARRAY_BUFFER, n, e.STATIC_DRAW),
                          !i.indexCount)
                        ) {
                          var r = i.computeMeshIndices_(
                            i.meshWidth,
                            i.meshHeight
                          );
                          e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, i.indexBuffer),
                            e.bufferData(
                              e.ELEMENT_ARRAY_BUFFER,
                              r,
                              e.STATIC_DRAW
                            ),
                            (i.indexCount = r.length);
                        }
                      });
                    }),
                    (c.prototype.computeMeshVertices_ = function(t, e, i) {
                      for (
                        var n = new Float32Array(2 * t * e * 5),
                          a = i.getLeftEyeVisibleTanAngles(),
                          o = i.getLeftEyeNoLensTanAngles(),
                          s = i.getLeftEyeVisibleScreenRect(o),
                          c = 0,
                          u = 0;
                        u < 2;
                        u++
                      ) {
                        for (var l = 0; l < e; l++)
                          for (var h = 0; h < t; h++, c++) {
                            var d = h / (t - 1),
                              p = l / (e - 1),
                              f = d,
                              m = p,
                              g = r.lerp(a[0], a[2], d),
                              v = r.lerp(a[3], a[1], p),
                              y = Math.sqrt(g * g + v * v),
                              M = i.distortion.distortInverse(y),
                              w = v * M / y;
                            (d = (g * M / y - o[0]) / (o[2] - o[0])),
                              (p = (w - o[3]) / (o[1] - o[3]));
                            i.device.widthMeters, i.device.heightMeters;
                            (d = 2 * (s.x + d * s.width - 0.5)),
                              (p = 2 * (s.y + p * s.height - 0.5)),
                              (n[5 * c + 0] = d),
                              (n[5 * c + 1] = p),
                              (n[5 * c + 2] = f),
                              (n[5 * c + 3] = m),
                              (n[5 * c + 4] = u);
                          }
                        var x = a[2] - a[0];
                        (a[0] = -(x + a[0])),
                          (a[2] = x - a[2]),
                          (x = o[2] - o[0]),
                          (o[0] = -(x + o[0])),
                          (o[2] = x - o[2]),
                          (s.x = 1 - (s.x + s.width));
                      }
                      return n;
                    }),
                    (c.prototype.computeMeshIndices_ = function(t, e) {
                      for (
                        var i = new Uint16Array(2 * (t - 1) * (e - 1) * 6),
                          n = t / 2,
                          r = e / 2,
                          a = 0,
                          o = 0,
                          s = 0;
                        s < 2;
                        s++
                      )
                        for (var c = 0; c < e; c++)
                          for (var u = 0; u < t; u++, a++)
                            0 != u &&
                              0 != c &&
                              (u <= n == c <= r
                                ? ((i[o++] = a),
                                  (i[o++] = a - t - 1),
                                  (i[o++] = a - t),
                                  (i[o++] = a - t - 1),
                                  (i[o++] = a),
                                  (i[o++] = a - 1))
                                : ((i[o++] = a - 1),
                                  (i[o++] = a - t),
                                  (i[o++] = a),
                                  (i[o++] = a - t),
                                  (i[o++] = a - 1),
                                  (i[o++] = a - t - 1)));
                      return i;
                    }),
                    (c.prototype.getOwnPropertyDescriptor_ = function(t, e) {
                      var i = Object.getOwnPropertyDescriptor(t, e);
                      return (
                        (void 0 !== i.get && void 0 !== i.set) ||
                          ((i.configurable = !0),
                          (i.enumerable = !0),
                          (i.get = function() {
                            return this.getAttribute(e);
                          }),
                          (i.set = function(t) {
                            this.setAttribute(e, t);
                          })),
                        i
                      );
                    }),
                    (e.exports = c);
                },
                {
                  './cardboard-ui.js': 50,
                  './deps/wglu-preserve-state.js': 52,
                  './util.js': 68
                }
              ],
              50: [
                function(t, e, i) {
                  var n = t('./util.js'),
                    r = t('./deps/wglu-preserve-state.js'),
                    a = [
                      'attribute vec2 position;',
                      'uniform mat4 projectionMat;',
                      'void main() {',
                      '  gl_Position = projectionMat * vec4( position, -1.0, 1.0 );',
                      '}'
                    ].join('\n'),
                    o = [
                      'precision mediump float;',
                      'uniform vec4 color;',
                      'void main() {',
                      '  gl_FragColor = color;',
                      '}'
                    ].join('\n'),
                    s = Math.PI / 180,
                    c = 0.3125;
                  function u(t) {
                    (this.gl = t),
                      (this.attribs = { position: 0 }),
                      (this.program = n.linkProgram(t, a, o, this.attribs)),
                      (this.uniforms = n.getProgramUniforms(t, this.program)),
                      (this.vertexBuffer = t.createBuffer()),
                      (this.gearOffset = 0),
                      (this.gearVertexCount = 0),
                      (this.arrowOffset = 0),
                      (this.arrowVertexCount = 0),
                      (this.projMat = new Float32Array(16)),
                      (this.listener = null),
                      this.onResize();
                  }
                  (u.prototype.destroy = function() {
                    var t = this.gl;
                    this.listener &&
                      t.canvas.removeEventListener('click', this.listener, !1),
                      t.deleteProgram(this.program),
                      t.deleteBuffer(this.vertexBuffer);
                  }),
                    (u.prototype.listen = function(t, e) {
                      var i = this.gl.canvas;
                      (this.listener = function(n) {
                        var r = i.clientWidth / 2;
                        n.clientX > r - 42 &&
                        n.clientX < r + 42 &&
                        n.clientY > i.clientHeight - 42
                          ? t(n)
                          : n.clientX < 42 && n.clientY < 42 && e(n);
                      }),
                        i.addEventListener('click', this.listener, !1);
                    }),
                    (u.prototype.onResize = function() {
                      var t = this.gl,
                        e = this,
                        i = [t.ARRAY_BUFFER_BINDING];
                      r(t, i, function(t) {
                        var i = [],
                          n = t.drawingBufferWidth / 2,
                          r =
                            Math.max(screen.width, screen.height) *
                            window.devicePixelRatio,
                          a =
                            t.drawingBufferWidth / r * window.devicePixelRatio,
                          o = 4 * a / 2,
                          u = 42 * a,
                          l = 28 * a / 2,
                          h = 14 * a;
                        function d(t, e) {
                          var r = (90 - t) * s,
                            a = Math.cos(r),
                            o = Math.sin(r);
                          i.push(c * a * l + n, c * o * l + l),
                            i.push(e * a * l + n, e * o * l + l);
                        }
                        i.push(n - o, u),
                          i.push(n - o, t.drawingBufferHeight),
                          i.push(n + o, u),
                          i.push(n + o, t.drawingBufferHeight),
                          (e.gearOffset = i.length / 2);
                        for (var p = 0; p <= 6; p++) {
                          var f = 60 * p;
                          d(f, 1),
                            d(f + 12, 1),
                            d(f + 20, 0.75),
                            d(f + 40, 0.75),
                            d(f + 48, 1);
                        }
                        function m(e, n) {
                          i.push(h + e, t.drawingBufferHeight - h - n);
                        }
                        (e.gearVertexCount = i.length / 2 - e.gearOffset),
                          (e.arrowOffset = i.length / 2);
                        var g = o / Math.sin(45 * s);
                        m(0, l),
                          m(l, 0),
                          m(l + g, g),
                          m(g, l + g),
                          m(g, l - g),
                          m(0, l),
                          m(l, 2 * l),
                          m(l + g, 2 * l - g),
                          m(g, l - g),
                          m(0, l),
                          m(g, l - o),
                          m(28 * a, l - o),
                          m(g, l + o),
                          m(28 * a, l + o),
                          (e.arrowVertexCount = i.length / 2 - e.arrowOffset),
                          t.bindBuffer(t.ARRAY_BUFFER, e.vertexBuffer),
                          t.bufferData(
                            t.ARRAY_BUFFER,
                            new Float32Array(i),
                            t.STATIC_DRAW
                          );
                      });
                    }),
                    (u.prototype.render = function() {
                      var t = this.gl,
                        e = this,
                        i = [
                          t.CULL_FACE,
                          t.DEPTH_TEST,
                          t.BLEND,
                          t.SCISSOR_TEST,
                          t.STENCIL_TEST,
                          t.COLOR_WRITEMASK,
                          t.VIEWPORT,
                          t.CURRENT_PROGRAM,
                          t.ARRAY_BUFFER_BINDING
                        ];
                      r(t, i, function(t) {
                        t.disable(t.CULL_FACE),
                          t.disable(t.DEPTH_TEST),
                          t.disable(t.BLEND),
                          t.disable(t.SCISSOR_TEST),
                          t.disable(t.STENCIL_TEST),
                          t.colorMask(!0, !0, !0, !0),
                          t.viewport(
                            0,
                            0,
                            t.drawingBufferWidth,
                            t.drawingBufferHeight
                          ),
                          e.renderNoState();
                      });
                    }),
                    (u.prototype.renderNoState = function() {
                      var t = this.gl;
                      t.useProgram(this.program),
                        t.bindBuffer(t.ARRAY_BUFFER, this.vertexBuffer),
                        t.enableVertexAttribArray(this.attribs.position),
                        t.vertexAttribPointer(
                          this.attribs.position,
                          2,
                          t.FLOAT,
                          !1,
                          8,
                          0
                        ),
                        t.uniform4f(this.uniforms.color, 1, 1, 1, 1),
                        n.orthoMatrix(
                          this.projMat,
                          0,
                          t.drawingBufferWidth,
                          0,
                          t.drawingBufferHeight,
                          0.1,
                          1024
                        ),
                        t.uniformMatrix4fv(
                          this.uniforms.projectionMat,
                          !1,
                          this.projMat
                        ),
                        t.drawArrays(t.TRIANGLE_STRIP, 0, 4),
                        t.drawArrays(
                          t.TRIANGLE_STRIP,
                          this.gearOffset,
                          this.gearVertexCount
                        ),
                        t.drawArrays(
                          t.TRIANGLE_STRIP,
                          this.arrowOffset,
                          this.arrowVertexCount
                        );
                    }),
                    (e.exports = u);
                },
                { './deps/wglu-preserve-state.js': 52, './util.js': 68 }
              ],
              51: [
                function(t, e, i) {
                  var n = t('./cardboard-distorter.js'),
                    r = t('./cardboard-ui.js'),
                    a = t('./device-info.js'),
                    o = t('./dpdb/dpdb.js'),
                    s = t('./sensor-fusion/fusion-pose-sensor.js'),
                    c = t('./rotate-instructions.js'),
                    u = t('./viewer-selector.js'),
                    l = t('./base.js').VRDisplay,
                    h = t('./util.js'),
                    d = 'left',
                    p = 'right';
                  function f() {
                    (this.displayName = 'Cardboard VRDisplay (webvr-polyfill)'),
                      (this.capabilities.hasOrientation = !0),
                      (this.capabilities.canPresent = !0),
                      (this.bufferScale_ = window.WebVRConfig.BUFFER_SCALE),
                      (this.poseSensor_ = new s()),
                      (this.distorter_ = null),
                      (this.cardboardUI_ = null),
                      (this.dpdb_ = new o(
                        !0,
                        this.onDeviceParamsUpdated_.bind(this)
                      )),
                      (this.deviceInfo_ = new a(this.dpdb_.getDeviceParams())),
                      (this.viewerSelector_ = new u()),
                      this.viewerSelector_.onChange(
                        this.onViewerChanged_.bind(this)
                      ),
                      this.deviceInfo_.setViewer(
                        this.viewerSelector_.getCurrentViewer()
                      ),
                      window.WebVRConfig.ROTATE_INSTRUCTIONS_DISABLED ||
                        (this.rotateInstructions_ = new c()),
                      h.isIOS() &&
                        window.addEventListener(
                          'resize',
                          this.onResize_.bind(this)
                        );
                  }
                  (f.prototype = new l()),
                    (f.prototype.getImmediatePose = function() {
                      return {
                        position: this.poseSensor_.getPosition(),
                        orientation: this.poseSensor_.getOrientation(),
                        linearVelocity: null,
                        linearAcceleration: null,
                        angularVelocity: null,
                        angularAcceleration: null
                      };
                    }),
                    (f.prototype.resetPose = function() {
                      this.poseSensor_.resetPose();
                    }),
                    (f.prototype.getEyeParameters = function(t) {
                      var e,
                        i = [
                          0.5 * this.deviceInfo_.viewer.interLensDistance,
                          0,
                          0
                        ];
                      if (t == d)
                        (i[0] *= -1),
                          (e = this.deviceInfo_.getFieldOfViewLeftEye());
                      else {
                        if (t != p) return null;
                        e = this.deviceInfo_.getFieldOfViewRightEye();
                      }
                      return {
                        fieldOfView: e,
                        offset: i,
                        renderWidth:
                          0.5 *
                          this.deviceInfo_.device.width *
                          this.bufferScale_,
                        renderHeight:
                          this.deviceInfo_.device.height * this.bufferScale_
                      };
                    }),
                    (f.prototype.onDeviceParamsUpdated_ = function(t) {
                      h.isDebug(),
                        this.deviceInfo_.updateDeviceParams(t),
                        this.distorter_ &&
                          this.distorter_.updateDeviceInfo(this.deviceInfo_);
                    }),
                    (f.prototype.updateBounds_ = function() {
                      this.layer_ &&
                        this.distorter_ &&
                        (this.layer_.leftBounds || this.layer_.rightBounds) &&
                        this.distorter_.setTextureBounds(
                          this.layer_.leftBounds,
                          this.layer_.rightBounds
                        );
                    }),
                    (f.prototype.beginPresent_ = function() {
                      var t = this.layer_.source.getContext('webgl');
                      t ||
                        (t = this.layer_.source.getContext(
                          'experimental-webgl'
                        )),
                        t || (t = this.layer_.source.getContext('webgl2')),
                        t &&
                          (this.layer_.predistorted
                            ? window.WebVRConfig.CARDBOARD_UI_DISABLED ||
                              ((t.canvas.width =
                                h.getScreenWidth() * this.bufferScale_),
                              (t.canvas.height =
                                h.getScreenHeight() * this.bufferScale_),
                              (this.cardboardUI_ = new r(t)))
                            : ((this.distorter_ = new n(t)),
                              this.distorter_.updateDeviceInfo(
                                this.deviceInfo_
                              ),
                              (this.cardboardUI_ = this.distorter_.cardboardUI)),
                          this.cardboardUI_ &&
                            this.cardboardUI_.listen(
                              function(t) {
                                this.viewerSelector_.show(
                                  this.layer_.source.parentElement
                                ),
                                  t.stopPropagation(),
                                  t.preventDefault();
                              }.bind(this),
                              function(t) {
                                this.exitPresent(),
                                  t.stopPropagation(),
                                  t.preventDefault();
                              }.bind(this)
                            ),
                          this.rotateInstructions_ &&
                            (h.isLandscapeMode() && h.isMobile()
                              ? this.rotateInstructions_.showTemporarily(
                                  3e3,
                                  this.layer_.source.parentElement
                                )
                              : this.rotateInstructions_.update()),
                          (this.orientationHandler = this.onOrientationChange_.bind(
                            this
                          )),
                          window.addEventListener(
                            'orientationchange',
                            this.orientationHandler
                          ),
                          (this.vrdisplaypresentchangeHandler = this.updateBounds_.bind(
                            this
                          )),
                          window.addEventListener(
                            'vrdisplaypresentchange',
                            this.vrdisplaypresentchangeHandler
                          ),
                          this.fireVRDisplayDeviceParamsChange_());
                    }),
                    (f.prototype.endPresent_ = function() {
                      this.distorter_ &&
                        (this.distorter_.destroy(), (this.distorter_ = null)),
                        this.cardboardUI_ &&
                          (this.cardboardUI_.destroy(),
                          (this.cardboardUI_ = null)),
                        this.rotateInstructions_ &&
                          this.rotateInstructions_.hide(),
                        this.viewerSelector_.hide(),
                        window.removeEventListener(
                          'orientationchange',
                          this.orientationHandler
                        ),
                        window.removeEventListener(
                          'vrdisplaypresentchange',
                          this.vrdisplaypresentchangeHandler
                        );
                    }),
                    (f.prototype.submitFrame = function(t) {
                      if (this.distorter_)
                        this.updateBounds_(), this.distorter_.submitFrame();
                      else if (this.cardboardUI_ && this.layer_) {
                        var e = this.layer_.source.getContext('webgl').canvas;
                        (e.width == this.lastWidth &&
                          e.height == this.lastHeight) ||
                          this.cardboardUI_.onResize(),
                          (this.lastWidth = e.width),
                          (this.lastHeight = e.height),
                          this.cardboardUI_.render();
                      }
                    }),
                    (f.prototype.onOrientationChange_ = function(t) {
                      this.viewerSelector_.hide(),
                        this.rotateInstructions_ &&
                          this.rotateInstructions_.update(),
                        this.onResize_();
                    }),
                    (f.prototype.onResize_ = function(t) {
                      if (this.layer_) {
                        var e = this.layer_.source.getContext('webgl'),
                          i = [
                            'position: absolute',
                            'top: 0',
                            'left: 0',
                            'width: ' +
                              Math.max(screen.width, screen.height) +
                              'px',
                            'height: ' +
                              Math.min(screen.height, screen.width) +
                              'px',
                            'border: 0',
                            'margin: 0',
                            'padding: 0 10px 10px 0',
                            'box-sizing: content-box'
                          ];
                        e.canvas.setAttribute('style', i.join('; ') + ';'),
                          h.safariCssSizeWorkaround(e.canvas);
                      }
                    }),
                    (f.prototype.onViewerChanged_ = function(t) {
                      this.deviceInfo_.setViewer(t),
                        this.distorter_ &&
                          this.distorter_.updateDeviceInfo(this.deviceInfo_),
                        this.fireVRDisplayDeviceParamsChange_();
                    }),
                    (f.prototype.fireVRDisplayDeviceParamsChange_ = function() {
                      var t = new CustomEvent('vrdisplaydeviceparamschange', {
                        detail: {
                          vrdisplay: this,
                          deviceInfo: this.deviceInfo_
                        }
                      });
                      window.dispatchEvent(t);
                    }),
                    (e.exports = f);
                },
                {
                  './base.js': 48,
                  './cardboard-distorter.js': 49,
                  './cardboard-ui.js': 50,
                  './device-info.js': 53,
                  './dpdb/dpdb.js': 57,
                  './rotate-instructions.js': 62,
                  './sensor-fusion/fusion-pose-sensor.js': 64,
                  './util.js': 68,
                  './viewer-selector.js': 69
                }
              ],
              52: [
                function(t, e, i) {
                  e.exports = function(t, e, i) {
                    if (e) {
                      for (var n = [], r = null, a = 0; a < e.length; ++a)
                        switch ((o = e[a])) {
                          case t.TEXTURE_BINDING_2D:
                          case t.TEXTURE_BINDING_CUBE_MAP:
                            if ((c = e[++a]) < t.TEXTURE0 || c > t.TEXTURE31) {
                              n.push(null, null);
                              break;
                            }
                            r || (r = t.getParameter(t.ACTIVE_TEXTURE)),
                              t.activeTexture(c),
                              n.push(t.getParameter(o), null);
                            break;
                          case t.ACTIVE_TEXTURE:
                            (r = t.getParameter(t.ACTIVE_TEXTURE)),
                              n.push(null);
                            break;
                          default:
                            n.push(t.getParameter(o));
                        }
                      for (i(t), a = 0; a < e.length; ++a) {
                        var o = e[a],
                          s = n[a];
                        switch (o) {
                          case t.ACTIVE_TEXTURE:
                            break;
                          case t.ARRAY_BUFFER_BINDING:
                            t.bindBuffer(t.ARRAY_BUFFER, s);
                            break;
                          case t.COLOR_CLEAR_VALUE:
                            t.clearColor(s[0], s[1], s[2], s[3]);
                            break;
                          case t.COLOR_WRITEMASK:
                            t.colorMask(s[0], s[1], s[2], s[3]);
                            break;
                          case t.CURRENT_PROGRAM:
                            t.useProgram(s);
                            break;
                          case t.ELEMENT_ARRAY_BUFFER_BINDING:
                            t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, s);
                            break;
                          case t.FRAMEBUFFER_BINDING:
                            t.bindFramebuffer(t.FRAMEBUFFER, s);
                            break;
                          case t.RENDERBUFFER_BINDING:
                            t.bindRenderbuffer(t.RENDERBUFFER, s);
                            break;
                          case t.TEXTURE_BINDING_2D:
                            if ((c = e[++a]) < t.TEXTURE0 || c > t.TEXTURE31)
                              break;
                            t.activeTexture(c), t.bindTexture(t.TEXTURE_2D, s);
                            break;
                          case t.TEXTURE_BINDING_CUBE_MAP:
                            var c;
                            if ((c = e[++a]) < t.TEXTURE0 || c > t.TEXTURE31)
                              break;
                            t.activeTexture(c),
                              t.bindTexture(t.TEXTURE_CUBE_MAP, s);
                            break;
                          case t.VIEWPORT:
                            t.viewport(s[0], s[1], s[2], s[3]);
                            break;
                          case t.BLEND:
                          case t.CULL_FACE:
                          case t.DEPTH_TEST:
                          case t.SCISSOR_TEST:
                          case t.STENCIL_TEST:
                            s ? t.enable(o) : t.disable(o);
                        }
                        r && t.activeTexture(r);
                      }
                    } else i(t);
                  };
                },
                {}
              ],
              53: [
                function(t, e, i) {
                  var n = t('./distortion/distortion.js'),
                    r = t('./math-util.js'),
                    a = t('./util.js');
                  function o(t) {
                    (this.width = t.width || a.getScreenWidth()),
                      (this.height = t.height || a.getScreenHeight()),
                      (this.widthMeters = t.widthMeters),
                      (this.heightMeters = t.heightMeters),
                      (this.bevelMeters = t.bevelMeters);
                  }
                  var s = new o({
                      widthMeters: 0.11,
                      heightMeters: 0.062,
                      bevelMeters: 0.004
                    }),
                    c = new o({
                      widthMeters: 0.1038,
                      heightMeters: 0.0584,
                      bevelMeters: 0.004
                    }),
                    u = {
                      CardboardV1: new h({
                        id: 'CardboardV1',
                        label: 'Cardboard I/O 2014',
                        fov: 40,
                        interLensDistance: 0.06,
                        baselineLensDistance: 0.035,
                        screenLensDistance: 0.042,
                        distortionCoefficients: [0.441, 0.156],
                        inverseCoefficients: [
                          -0.4410035,
                          0.42756155,
                          -0.4804439,
                          0.5460139,
                          -0.58821183,
                          0.5733938,
                          -0.48303202,
                          0.33299083,
                          -0.17573841,
                          0.0651772,
                          -0.01488963,
                          0.001559834
                        ]
                      }),
                      CardboardV2: new h({
                        id: 'CardboardV2',
                        label: 'Cardboard I/O 2015',
                        fov: 60,
                        interLensDistance: 0.064,
                        baselineLensDistance: 0.035,
                        screenLensDistance: 0.039,
                        distortionCoefficients: [0.34, 0.55],
                        inverseCoefficients: [
                          -0.33836704,
                          -0.18162185,
                          0.862655,
                          -1.2462051,
                          1.0560602,
                          -0.58208317,
                          0.21609078,
                          -0.05444823,
                          0.009177956,
                          -0.0009904169,
                          6183535e-11,
                          -16981803e-13
                        ]
                      })
                    };
                  function l(t) {
                    (this.viewer = u.CardboardV2),
                      this.updateDeviceParams(t),
                      (this.distortion = new n(
                        this.viewer.distortionCoefficients
                      ));
                  }
                  function h(t) {
                    (this.id = t.id),
                      (this.label = t.label),
                      (this.fov = t.fov),
                      (this.interLensDistance = t.interLensDistance),
                      (this.baselineLensDistance = t.baselineLensDistance),
                      (this.screenLensDistance = t.screenLensDistance),
                      (this.distortionCoefficients = t.distortionCoefficients),
                      (this.inverseCoefficients = t.inverseCoefficients);
                  }
                  (l.prototype.updateDeviceParams = function(t) {
                    this.device = this.determineDevice_(t) || this.device;
                  }),
                    (l.prototype.getDevice = function() {
                      return this.device;
                    }),
                    (l.prototype.setViewer = function(t) {
                      (this.viewer = t),
                        (this.distortion = new n(
                          this.viewer.distortionCoefficients
                        ));
                    }),
                    (l.prototype.determineDevice_ = function(t) {
                      if (!t) return a.isIOS() ? c : s;
                      var e = 0.0254 / t.xdpi,
                        i = 0.0254 / t.ydpi;
                      return new o({
                        widthMeters: e * a.getScreenWidth(),
                        heightMeters: i * a.getScreenHeight(),
                        bevelMeters: 0.001 * t.bevelMm
                      });
                    }),
                    (l.prototype.getDistortedFieldOfViewLeftEye = function() {
                      var t = this.viewer,
                        e = this.device,
                        i = this.distortion,
                        n = t.screenLensDistance,
                        a = (e.widthMeters - t.interLensDistance) / 2,
                        o = t.interLensDistance / 2,
                        s = t.baselineLensDistance - e.bevelMeters,
                        c = e.heightMeters - s,
                        u = r.radToDeg * Math.atan(i.distort(a / n)),
                        l = r.radToDeg * Math.atan(i.distort(o / n)),
                        h = r.radToDeg * Math.atan(i.distort(s / n)),
                        d = r.radToDeg * Math.atan(i.distort(c / n));
                      return {
                        leftDegrees: Math.min(u, t.fov),
                        rightDegrees: Math.min(l, t.fov),
                        downDegrees: Math.min(h, t.fov),
                        upDegrees: Math.min(d, t.fov)
                      };
                    }),
                    (l.prototype.getLeftEyeVisibleTanAngles = function() {
                      var t = this.viewer,
                        e = this.device,
                        i = this.distortion,
                        n = Math.tan(-r.degToRad * t.fov),
                        a = Math.tan(r.degToRad * t.fov),
                        o = Math.tan(r.degToRad * t.fov),
                        s = Math.tan(-r.degToRad * t.fov),
                        c = e.widthMeters / 4,
                        u = e.heightMeters / 2,
                        l = t.baselineLensDistance - e.bevelMeters - u,
                        h = t.interLensDistance / 2 - c,
                        d = -l,
                        p = t.screenLensDistance,
                        f = i.distort((h - c) / p),
                        m = i.distort((d + u) / p),
                        g = i.distort((h + c) / p),
                        v = i.distort((d - u) / p),
                        y = new Float32Array(4);
                      return (
                        (y[0] = Math.max(n, f)),
                        (y[1] = Math.min(a, m)),
                        (y[2] = Math.min(o, g)),
                        (y[3] = Math.max(s, v)),
                        y
                      );
                    }),
                    (l.prototype.getLeftEyeNoLensTanAngles = function() {
                      var t = this.viewer,
                        e = this.device,
                        i = this.distortion,
                        n = new Float32Array(4),
                        a = i.distortInverse(Math.tan(-r.degToRad * t.fov)),
                        o = i.distortInverse(Math.tan(r.degToRad * t.fov)),
                        s = i.distortInverse(Math.tan(r.degToRad * t.fov)),
                        c = i.distortInverse(Math.tan(-r.degToRad * t.fov)),
                        u = e.widthMeters / 4,
                        l = e.heightMeters / 2,
                        h = t.baselineLensDistance - e.bevelMeters - l,
                        d = t.interLensDistance / 2 - u,
                        p = -h,
                        f = t.screenLensDistance,
                        m = (d - u) / f,
                        g = (p + l) / f,
                        v = (d + u) / f,
                        y = (p - l) / f;
                      return (
                        (n[0] = Math.max(a, m)),
                        (n[1] = Math.min(o, g)),
                        (n[2] = Math.min(s, v)),
                        (n[3] = Math.max(c, y)),
                        n
                      );
                    }),
                    (l.prototype.getLeftEyeVisibleScreenRect = function(t) {
                      var e = this.viewer,
                        i = this.device,
                        n = e.screenLensDistance,
                        r = (i.widthMeters - e.interLensDistance) / 2,
                        a = e.baselineLensDistance - i.bevelMeters,
                        o = (t[0] * n + r) / i.widthMeters,
                        s = (t[1] * n + a) / i.heightMeters,
                        c = (t[2] * n + r) / i.widthMeters,
                        u = (t[3] * n + a) / i.heightMeters;
                      return { x: o, y: u, width: c - o, height: s - u };
                    }),
                    (l.prototype.getFieldOfViewLeftEye = function(t) {
                      return t
                        ? this.getUndistortedFieldOfViewLeftEye()
                        : this.getDistortedFieldOfViewLeftEye();
                    }),
                    (l.prototype.getFieldOfViewRightEye = function(t) {
                      var e = this.getFieldOfViewLeftEye(t);
                      return {
                        leftDegrees: e.rightDegrees,
                        rightDegrees: e.leftDegrees,
                        upDegrees: e.upDegrees,
                        downDegrees: e.downDegrees
                      };
                    }),
                    (l.prototype.getUndistortedFieldOfViewLeftEye = function() {
                      var t = this.getUndistortedParams_();
                      return {
                        leftDegrees: r.radToDeg * Math.atan(t.outerDist),
                        rightDegrees: r.radToDeg * Math.atan(t.innerDist),
                        downDegrees: r.radToDeg * Math.atan(t.bottomDist),
                        upDegrees: r.radToDeg * Math.atan(t.topDist)
                      };
                    }),
                    (l.prototype.getUndistortedViewportLeftEye = function() {
                      var t = this.getUndistortedParams_(),
                        e = this.viewer,
                        i = this.device,
                        n = e.screenLensDistance,
                        r = i.widthMeters / n,
                        a = i.heightMeters / n,
                        o = i.width / r,
                        s = i.height / a,
                        c = Math.round((t.eyePosX - t.outerDist) * o),
                        u = Math.round((t.eyePosY - t.bottomDist) * s);
                      return {
                        x: c,
                        y: u,
                        width: Math.round((t.eyePosX + t.innerDist) * o) - c,
                        height: Math.round((t.eyePosY + t.topDist) * s) - u
                      };
                    }),
                    (l.prototype.getUndistortedParams_ = function() {
                      var t = this.viewer,
                        e = this.device,
                        i = this.distortion,
                        n = t.screenLensDistance,
                        a = t.interLensDistance / 2 / n,
                        o = e.widthMeters / n,
                        s = e.heightMeters / n,
                        c = o / 2 - a,
                        u = (t.baselineLensDistance - e.bevelMeters) / n,
                        l = t.fov,
                        h = i.distortInverse(Math.tan(r.degToRad * l)),
                        d = Math.min(c, h),
                        p = Math.min(a, h),
                        f = Math.min(u, h);
                      return {
                        outerDist: d,
                        innerDist: p,
                        topDist: Math.min(s - u, h),
                        bottomDist: f,
                        eyePosX: c,
                        eyePosY: u
                      };
                    }),
                    (l.Viewers = u),
                    (e.exports = l);
                },
                {
                  './distortion/distortion.js': 55,
                  './math-util.js': 59,
                  './util.js': 68
                }
              ],
              54: [
                function(t, e, i) {
                  t('./base.js').VRDisplay;
                  var n = t('./base.js').HMDVRDevice,
                    r = t('./base.js').PositionSensorVRDevice;
                  function a(t) {
                    (this.display = t),
                      (this.hardwareUnitId = t.displayId),
                      (this.deviceId = 'webvr-polyfill:HMD:' + t.displayId),
                      (this.deviceName = t.displayName + ' (HMD)');
                  }
                  function o(t) {
                    (this.display = t),
                      (this.hardwareUnitId = t.displayId),
                      (this.deviceId =
                        'webvr-polyfill:PositionSensor: ' + t.displayId),
                      (this.deviceName = t.displayName + ' (PositionSensor)');
                  }
                  (a.prototype = new n()),
                    (a.prototype.getEyeParameters = function(t) {
                      var e = this.display.getEyeParameters(t);
                      return {
                        currentFieldOfView: e.fieldOfView,
                        maximumFieldOfView: e.fieldOfView,
                        minimumFieldOfView: e.fieldOfView,
                        recommendedFieldOfView: e.fieldOfView,
                        eyeTranslation: {
                          x: e.offset[0],
                          y: e.offset[1],
                          z: e.offset[2]
                        },
                        renderRect: {
                          x: 'right' == t ? e.renderWidth : 0,
                          y: 0,
                          width: e.renderWidth,
                          height: e.renderHeight
                        }
                      };
                    }),
                    (a.prototype.setFieldOfView = function(t, e, i, n) {}),
                    (o.prototype = new r()),
                    (o.prototype.getState = function() {
                      var t = this.display.getPose();
                      return {
                        position: t.position
                          ? {
                              x: t.position[0],
                              y: t.position[1],
                              z: t.position[2]
                            }
                          : null,
                        orientation: t.orientation
                          ? {
                              x: t.orientation[0],
                              y: t.orientation[1],
                              z: t.orientation[2],
                              w: t.orientation[3]
                            }
                          : null,
                        linearVelocity: null,
                        linearAcceleration: null,
                        angularVelocity: null,
                        angularAcceleration: null
                      };
                    }),
                    (o.prototype.resetState = function() {
                      return this.positionDevice.resetPose();
                    }),
                    (e.exports.VRDisplayHMDDevice = a),
                    (e.exports.VRDisplayPositionSensorDevice = o);
                },
                { './base.js': 48 }
              ],
              55: [
                function(t, e, i) {
                  function n(t) {
                    this.coefficients = t;
                  }
                  (n.prototype.distortInverse = function(t) {
                    for (
                      var e = 0, i = 1, n = t - this.distort(e);
                      Math.abs(i - e) > 1e-4;

                    ) {
                      var r = t - this.distort(i),
                        a = i - r * ((i - e) / (r - n));
                      (e = i), (i = a), (n = r);
                    }
                    return i;
                  }),
                    (n.prototype.distort = function(t) {
                      for (
                        var e = t * t, i = 0, n = 0;
                        n < this.coefficients.length;
                        n++
                      )
                        i = e * (i + this.coefficients[n]);
                      return (i + 1) * t;
                    }),
                    (e.exports = n);
                },
                {}
              ],
              56: [
                function(t, e, i) {
                  e.exports = {
                    format: 1,
                    last_updated: '2017-08-27T14:39:31Z',
                    devices: [
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'asus/*/Nexus 7/*' },
                          { ua: 'Nexus 7' }
                        ],
                        dpi: [320.8, 323],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'asus/*/ASUS_Z00AD/*' },
                          { ua: 'ASUS_Z00AD' }
                        ],
                        dpi: [403, 404.6],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'Google/*/Pixel XL/*' },
                          { ua: 'Pixel XL' }
                        ],
                        dpi: [537.9, 533],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'Google/*/Pixel/*' }, { ua: 'Pixel' }],
                        dpi: [432.6, 436.7],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'HTC/*/HTC6435LVW/*' },
                          { ua: 'HTC6435LVW' }
                        ],
                        dpi: [449.7, 443.3],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'HTC/*/HTC One XL/*' },
                          { ua: 'HTC One XL' }
                        ],
                        dpi: [315.3, 314.6],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'htc/*/Nexus 9/*' }, { ua: 'Nexus 9' }],
                        dpi: 289,
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'HTC/*/HTC One M9/*' },
                          { ua: 'HTC One M9' }
                        ],
                        dpi: [442.5, 443.3],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'HTC/*/HTC One_M8/*' },
                          { ua: 'HTC One_M8' }
                        ],
                        dpi: [449.7, 447.4],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'HTC/*/HTC One/*' }, { ua: 'HTC One' }],
                        dpi: 472.8,
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'Huawei/*/Nexus 6P/*' },
                          { ua: 'Nexus 6P' }
                        ],
                        dpi: [515.1, 518],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'LENOVO/*/Lenovo PB2-690Y/*' },
                          { ua: 'Lenovo PB2-690Y' }
                        ],
                        dpi: [457.2, 454.713],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'LGE/*/Nexus 5X/*' },
                          { ua: 'Nexus 5X' }
                        ],
                        dpi: [422, 419.9],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'LGE/*/LGMS345/*' }, { ua: 'LGMS345' }],
                        dpi: [221.7, 219.1],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'LGE/*/LG-D800/*' }, { ua: 'LG-D800' }],
                        dpi: [422, 424.1],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'LGE/*/LG-D850/*' }, { ua: 'LG-D850' }],
                        dpi: [537.9, 541.9],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'LGE/*/VS985 4G/*' },
                          { ua: 'VS985 4G' }
                        ],
                        dpi: [537.9, 535.6],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'LGE/*/Nexus 5/*' },
                          { ua: 'Nexus 5 B' }
                        ],
                        dpi: [442.4, 444.8],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'LGE/*/Nexus 4/*' }, { ua: 'Nexus 4' }],
                        dpi: [319.8, 318.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'LGE/*/LG-P769/*' }, { ua: 'LG-P769' }],
                        dpi: [240.6, 247.5],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'LGE/*/LGMS323/*' }, { ua: 'LGMS323' }],
                        dpi: [206.6, 204.6],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'LGE/*/LGLS996/*' }, { ua: 'LGLS996' }],
                        dpi: [403.4, 401.5],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'Micromax/*/4560MMX/*' },
                          { ua: '4560MMX' }
                        ],
                        dpi: [240, 219.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'Micromax/*/A250/*' },
                          { ua: 'Micromax A250' }
                        ],
                        dpi: [480, 446.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'Micromax/*/Micromax AQ4501/*' },
                          { ua: 'Micromax AQ4501' }
                        ],
                        dpi: 240,
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/DROID RAZR/*' },
                          { ua: 'DROID RAZR' }
                        ],
                        dpi: [368.1, 256.7],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT830C/*' },
                          { ua: 'XT830C' }
                        ],
                        dpi: [254, 255.9],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1021/*' },
                          { ua: 'XT1021' }
                        ],
                        dpi: [254, 256.7],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1023/*' },
                          { ua: 'XT1023' }
                        ],
                        dpi: [254, 256.7],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1028/*' },
                          { ua: 'XT1028' }
                        ],
                        dpi: [326.6, 327.6],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1034/*' },
                          { ua: 'XT1034' }
                        ],
                        dpi: [326.6, 328.4],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1053/*' },
                          { ua: 'XT1053' }
                        ],
                        dpi: [315.3, 316.1],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1562/*' },
                          { ua: 'XT1562' }
                        ],
                        dpi: [403.4, 402.7],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/Nexus 6/*' },
                          { ua: 'Nexus 6 B' }
                        ],
                        dpi: [494.3, 489.7],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1063/*' },
                          { ua: 'XT1063' }
                        ],
                        dpi: [295, 296.6],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1064/*' },
                          { ua: 'XT1064' }
                        ],
                        dpi: [295, 295.6],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1092/*' },
                          { ua: 'XT1092' }
                        ],
                        dpi: [422, 424.1],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/XT1095/*' },
                          { ua: 'XT1095' }
                        ],
                        dpi: [422, 423.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'motorola/*/G4/*' },
                          { ua: 'Moto G (4)' }
                        ],
                        dpi: 401,
                        bw: 4,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'OnePlus/*/A0001/*' }, { ua: 'A0001' }],
                        dpi: [403.4, 401],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'OnePlus/*/ONE E1005/*' },
                          { ua: 'ONE E1005' }
                        ],
                        dpi: [442.4, 441.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'OnePlus/*/ONE A2005/*' },
                          { ua: 'ONE A2005' }
                        ],
                        dpi: [391.9, 405.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'OPPO/*/X909/*' }, { ua: 'X909' }],
                        dpi: [442.4, 444.1],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/GT-I9082/*' },
                          { ua: 'GT-I9082' }
                        ],
                        dpi: [184.7, 185.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G360P/*' },
                          { ua: 'SM-G360P' }
                        ],
                        dpi: [196.7, 205.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/Nexus S/*' },
                          { ua: 'Nexus S' }
                        ],
                        dpi: [234.5, 229.8],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/GT-I9300/*' },
                          { ua: 'GT-I9300' }
                        ],
                        dpi: [304.8, 303.9],
                        bw: 5,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-T230NU/*' },
                          { ua: 'SM-T230NU' }
                        ],
                        dpi: 216,
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SGH-T399/*' },
                          { ua: 'SGH-T399' }
                        ],
                        dpi: [217.7, 231.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SGH-M919/*' },
                          { ua: 'SGH-M919' }
                        ],
                        dpi: [440.8, 437.7],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-N9005/*' },
                          { ua: 'SM-N9005' }
                        ],
                        dpi: [386.4, 387],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SAMSUNG-SM-N900A/*' },
                          { ua: 'SAMSUNG-SM-N900A' }
                        ],
                        dpi: [386.4, 387.7],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/GT-I9500/*' },
                          { ua: 'GT-I9500' }
                        ],
                        dpi: [442.5, 443.3],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/GT-I9505/*' },
                          { ua: 'GT-I9505' }
                        ],
                        dpi: 439.4,
                        bw: 4,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G900F/*' },
                          { ua: 'SM-G900F' }
                        ],
                        dpi: [415.6, 431.6],
                        bw: 5,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G900M/*' },
                          { ua: 'SM-G900M' }
                        ],
                        dpi: [415.6, 431.6],
                        bw: 5,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G800F/*' },
                          { ua: 'SM-G800F' }
                        ],
                        dpi: 326.8,
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G906S/*' },
                          { ua: 'SM-G906S' }
                        ],
                        dpi: [562.7, 572.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/GT-I9300/*' },
                          { ua: 'GT-I9300' }
                        ],
                        dpi: [306.7, 304.8],
                        bw: 5,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-T535/*' },
                          { ua: 'SM-T535' }
                        ],
                        dpi: [142.6, 136.4],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-N920C/*' },
                          { ua: 'SM-N920C' }
                        ],
                        dpi: [515.1, 518.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-N920W8/*' },
                          { ua: 'SM-N920W8' }
                        ],
                        dpi: [515.1, 518.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/GT-I9300I/*' },
                          { ua: 'GT-I9300I' }
                        ],
                        dpi: [304.8, 305.8],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/GT-I9195/*' },
                          { ua: 'GT-I9195' }
                        ],
                        dpi: [249.4, 256.7],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SPH-L520/*' },
                          { ua: 'SPH-L520' }
                        ],
                        dpi: [249.4, 255.9],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SAMSUNG-SGH-I717/*' },
                          { ua: 'SAMSUNG-SGH-I717' }
                        ],
                        dpi: 285.8,
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SPH-D710/*' },
                          { ua: 'SPH-D710' }
                        ],
                        dpi: [217.7, 204.2],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/GT-N7100/*' },
                          { ua: 'GT-N7100' }
                        ],
                        dpi: 265.1,
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SCH-I605/*' },
                          { ua: 'SCH-I605' }
                        ],
                        dpi: 265.1,
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/Galaxy Nexus/*' },
                          { ua: 'Galaxy Nexus' }
                        ],
                        dpi: [315.3, 314.2],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-N910H/*' },
                          { ua: 'SM-N910H' }
                        ],
                        dpi: [515.1, 518],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-N910C/*' },
                          { ua: 'SM-N910C' }
                        ],
                        dpi: [515.2, 520.2],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G130M/*' },
                          { ua: 'SM-G130M' }
                        ],
                        dpi: [165.9, 164.8],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G928I/*' },
                          { ua: 'SM-G928I' }
                        ],
                        dpi: [515.1, 518.4],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G920F/*' },
                          { ua: 'SM-G920F' }
                        ],
                        dpi: 580.6,
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G920P/*' },
                          { ua: 'SM-G920P' }
                        ],
                        dpi: [522.5, 577],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G925F/*' },
                          { ua: 'SM-G925F' }
                        ],
                        dpi: 580.6,
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G925V/*' },
                          { ua: 'SM-G925V' }
                        ],
                        dpi: [522.5, 576.6],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G930F/*' },
                          { ua: 'SM-G930F' }
                        ],
                        dpi: 576.6,
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G935F/*' },
                          { ua: 'SM-G935F' }
                        ],
                        dpi: 533,
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G950F/*' },
                          { ua: 'SM-G950F' }
                        ],
                        dpi: [562.707, 565.293],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'samsung/*/SM-G955U/*' },
                          { ua: 'SM-G955U' }
                        ],
                        dpi: [522.514, 525.762],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'Sony/*/C6903/*' }, { ua: 'C6903' }],
                        dpi: [442.5, 443.3],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'Sony/*/D6653/*' }, { ua: 'D6653' }],
                        dpi: [428.6, 427.6],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'Sony/*/E6653/*' }, { ua: 'E6653' }],
                        dpi: [428.6, 425.7],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'Sony/*/E6853/*' }, { ua: 'E6853' }],
                        dpi: [403.4, 401.9],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [{ mdmh: 'Sony/*/SGP321/*' }, { ua: 'SGP321' }],
                        dpi: [224.7, 224.1],
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'TCT/*/ALCATEL ONE TOUCH Fierce/*' },
                          { ua: 'ALCATEL ONE TOUCH Fierce' }
                        ],
                        dpi: [240, 247.5],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'THL/*/thl 5000/*' },
                          { ua: 'thl 5000' }
                        ],
                        dpi: [480, 443.3],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'android',
                        rules: [
                          { mdmh: 'ZTE/*/ZTE Blade L2/*' },
                          { ua: 'ZTE Blade L2' }
                        ],
                        dpi: 240,
                        bw: 3,
                        ac: 500
                      },
                      {
                        type: 'ios',
                        rules: [{ res: [640, 960] }],
                        dpi: [325.1, 328.4],
                        bw: 4,
                        ac: 1e3
                      },
                      {
                        type: 'ios',
                        rules: [{ res: [640, 1136] }],
                        dpi: [317.1, 320.2],
                        bw: 3,
                        ac: 1e3
                      },
                      {
                        type: 'ios',
                        rules: [{ res: [750, 1334] }],
                        dpi: 326.4,
                        bw: 4,
                        ac: 1e3
                      },
                      {
                        type: 'ios',
                        rules: [{ res: [1242, 2208] }],
                        dpi: [453.6, 458.4],
                        bw: 4,
                        ac: 1e3
                      },
                      {
                        type: 'ios',
                        rules: [{ res: [1125, 2001] }],
                        dpi: [410.9, 415.4],
                        bw: 4,
                        ac: 1e3
                      }
                    ]
                  };
                },
                {}
              ],
              57: [
                function(t, e, i) {
                  var n = t('./dpdb.json'),
                    r = t('../util.js'),
                    a = 'https://dpdb.webvr.rocks/dpdb.json';
                  function o(t, e) {
                    if (((this.dpdb = n), this.recalculateDeviceParams_(), t)) {
                      this.onDeviceParamsUpdated = e;
                      var i = new XMLHttpRequest(),
                        r = this;
                      i.open('GET', a, !0),
                        i.addEventListener('load', function() {
                          (r.loading = !1),
                            i.status >= 200 &&
                              i.status <= 299 &&
                              ((r.dpdb = JSON.parse(i.response)),
                              r.recalculateDeviceParams_());
                        }),
                        i.send();
                    }
                  }
                  function s(t) {
                    (this.xdpi = t.xdpi),
                      (this.ydpi = t.ydpi),
                      (this.bevelMm = t.bevelMm);
                  }
                  (o.prototype.getDeviceParams = function() {
                    return this.deviceParams;
                  }),
                    (o.prototype.recalculateDeviceParams_ = function() {
                      var t = this.calcDeviceParams_();
                      t &&
                        ((this.deviceParams = t),
                        this.onDeviceParamsUpdated &&
                          this.onDeviceParamsUpdated(this.deviceParams));
                    }),
                    (o.prototype.calcDeviceParams_ = function() {
                      var t = this.dpdb;
                      if (!t) return null;
                      if (1 != t.format) return null;
                      if (!t.devices || !t.devices.length) return null;
                      var e =
                          navigator.userAgent ||
                          navigator.vendor ||
                          window.opera,
                        i = r.getScreenWidth(),
                        n = r.getScreenHeight();
                      if (!t.devices) return null;
                      for (var a = 0; a < t.devices.length; a++) {
                        var o = t.devices[a];
                        if (
                          o.rules &&
                          (('ios' == o.type || 'android' == o.type) &&
                            r.isIOS() == ('ios' == o.type))
                        ) {
                          for (var c = !1, u = 0; u < o.rules.length; u++) {
                            var l = o.rules[u];
                            if (this.matchRule_(l, e, i, n)) {
                              c = !0;
                              break;
                            }
                          }
                          if (c)
                            return new s({
                              xdpi: o.dpi[0] || o.dpi,
                              ydpi: o.dpi[1] || o.dpi,
                              bevelMm: o.bw
                            });
                        }
                      }
                      return null;
                    }),
                    (o.prototype.matchRule_ = function(t, e, i, n) {
                      if (!t.ua && !t.res) return !1;
                      if (t.ua && e.indexOf(t.ua) < 0) return !1;
                      if (t.res) {
                        if (!t.res[0] || !t.res[1]) return !1;
                        var r = t.res[0],
                          a = t.res[1];
                        if (
                          Math.min(i, n) != Math.min(r, a) ||
                          Math.max(i, n) != Math.max(r, a)
                        )
                          return !1;
                      }
                      return !0;
                    }),
                    (e.exports = o);
                },
                { '../util.js': 68, './dpdb.json': 56 }
              ],
              58: [
                function(t, e, i) {
                  var n = t('./util.js'),
                    r = t('./webvr-polyfill.js').WebVRPolyfill;
                  (window.WebVRConfig = n.extend(
                    {
                      FORCE_ENABLE_VR: !1,
                      K_FILTER: 0.98,
                      PREDICTION_TIME_S: 0.04,
                      TOUCH_PANNER_DISABLED: !0,
                      CARDBOARD_UI_DISABLED: !1,
                      ROTATE_INSTRUCTIONS_DISABLED: !1,
                      YAW_ONLY: !1,
                      MOUSE_KEYBOARD_CONTROLS_DISABLED: !1,
                      DEFER_INITIALIZATION: !1,
                      ENABLE_DEPRECATED_API: !1,
                      BUFFER_SCALE: 0.5,
                      DIRTY_SUBMIT_FRAME_BINDINGS: !1,
                      ALWAYS_APPEND_POLYFILL_DISPLAY: !1,
                      GET_VR_DISPLAYS_TIMEOUT: 1e3
                    },
                    window.WebVRConfig
                  )),
                    window.WebVRConfig.DEFER_INITIALIZATION
                      ? (window.InitializeWebVRPolyfill = function() {
                          new r();
                        })
                      : new r(),
                    (window.WebVRPolyfill = r);
                },
                { './util.js': 68, './webvr-polyfill.js': 71 }
              ],
              59: [
                function(t, e, i) {
                  var n,
                    r,
                    a = window.MathUtil || {};
                  (a.degToRad = Math.PI / 180),
                    (a.radToDeg = 180 / Math.PI),
                    (a.Vector2 = function(t, e) {
                      (this.x = t || 0), (this.y = e || 0);
                    }),
                    (a.Vector2.prototype = {
                      constructor: a.Vector2,
                      set: function(t, e) {
                        return (this.x = t), (this.y = e), this;
                      },
                      copy: function(t) {
                        return (this.x = t.x), (this.y = t.y), this;
                      },
                      subVectors: function(t, e) {
                        return (this.x = t.x - e.x), (this.y = t.y - e.y), this;
                      }
                    }),
                    (a.Vector3 = function(t, e, i) {
                      (this.x = t || 0), (this.y = e || 0), (this.z = i || 0);
                    }),
                    (a.Vector3.prototype = {
                      constructor: a.Vector3,
                      set: function(t, e, i) {
                        return (this.x = t), (this.y = e), (this.z = i), this;
                      },
                      copy: function(t) {
                        return (
                          (this.x = t.x), (this.y = t.y), (this.z = t.z), this
                        );
                      },
                      length: function() {
                        return Math.sqrt(
                          this.x * this.x + this.y * this.y + this.z * this.z
                        );
                      },
                      normalize: function() {
                        var t = this.length();
                        if (0 !== t) {
                          var e = 1 / t;
                          this.multiplyScalar(e);
                        } else (this.x = 0), (this.y = 0), (this.z = 0);
                        return this;
                      },
                      multiplyScalar: function(t) {
                        (this.x *= t), (this.y *= t), (this.z *= t);
                      },
                      applyQuaternion: function(t) {
                        var e = this.x,
                          i = this.y,
                          n = this.z,
                          r = t.x,
                          a = t.y,
                          o = t.z,
                          s = t.w,
                          c = s * e + a * n - o * i,
                          u = s * i + o * e - r * n,
                          l = s * n + r * i - a * e,
                          h = -r * e - a * i - o * n;
                        return (
                          (this.x = c * s + h * -r + u * -o - l * -a),
                          (this.y = u * s + h * -a + l * -r - c * -o),
                          (this.z = l * s + h * -o + c * -a - u * -r),
                          this
                        );
                      },
                      dot: function(t) {
                        return this.x * t.x + this.y * t.y + this.z * t.z;
                      },
                      crossVectors: function(t, e) {
                        var i = t.x,
                          n = t.y,
                          r = t.z,
                          a = e.x,
                          o = e.y,
                          s = e.z;
                        return (
                          (this.x = n * s - r * o),
                          (this.y = r * a - i * s),
                          (this.z = i * o - n * a),
                          this
                        );
                      }
                    }),
                    (a.Quaternion = function(t, e, i, n) {
                      (this.x = t || 0),
                        (this.y = e || 0),
                        (this.z = i || 0),
                        (this.w = void 0 !== n ? n : 1);
                    }),
                    (a.Quaternion.prototype = {
                      constructor: a.Quaternion,
                      set: function(t, e, i, n) {
                        return (
                          (this.x = t),
                          (this.y = e),
                          (this.z = i),
                          (this.w = n),
                          this
                        );
                      },
                      copy: function(t) {
                        return (
                          (this.x = t.x),
                          (this.y = t.y),
                          (this.z = t.z),
                          (this.w = t.w),
                          this
                        );
                      },
                      setFromEulerXYZ: function(t, e, i) {
                        var n = Math.cos(t / 2),
                          r = Math.cos(e / 2),
                          a = Math.cos(i / 2),
                          o = Math.sin(t / 2),
                          s = Math.sin(e / 2),
                          c = Math.sin(i / 2);
                        return (
                          (this.x = o * r * a + n * s * c),
                          (this.y = n * s * a - o * r * c),
                          (this.z = n * r * c + o * s * a),
                          (this.w = n * r * a - o * s * c),
                          this
                        );
                      },
                      setFromEulerYXZ: function(t, e, i) {
                        var n = Math.cos(t / 2),
                          r = Math.cos(e / 2),
                          a = Math.cos(i / 2),
                          o = Math.sin(t / 2),
                          s = Math.sin(e / 2),
                          c = Math.sin(i / 2);
                        return (
                          (this.x = o * r * a + n * s * c),
                          (this.y = n * s * a - o * r * c),
                          (this.z = n * r * c - o * s * a),
                          (this.w = n * r * a + o * s * c),
                          this
                        );
                      },
                      setFromAxisAngle: function(t, e) {
                        var i = e / 2,
                          n = Math.sin(i);
                        return (
                          (this.x = t.x * n),
                          (this.y = t.y * n),
                          (this.z = t.z * n),
                          (this.w = Math.cos(i)),
                          this
                        );
                      },
                      multiply: function(t) {
                        return this.multiplyQuaternions(this, t);
                      },
                      multiplyQuaternions: function(t, e) {
                        var i = t.x,
                          n = t.y,
                          r = t.z,
                          a = t.w,
                          o = e.x,
                          s = e.y,
                          c = e.z,
                          u = e.w;
                        return (
                          (this.x = i * u + a * o + n * c - r * s),
                          (this.y = n * u + a * s + r * o - i * c),
                          (this.z = r * u + a * c + i * s - n * o),
                          (this.w = a * u - i * o - n * s - r * c),
                          this
                        );
                      },
                      inverse: function() {
                        return (
                          (this.x *= -1),
                          (this.y *= -1),
                          (this.z *= -1),
                          this.normalize(),
                          this
                        );
                      },
                      normalize: function() {
                        var t = Math.sqrt(
                          this.x * this.x +
                            this.y * this.y +
                            this.z * this.z +
                            this.w * this.w
                        );
                        return (
                          0 === t
                            ? ((this.x = 0),
                              (this.y = 0),
                              (this.z = 0),
                              (this.w = 1))
                            : ((t = 1 / t),
                              (this.x = this.x * t),
                              (this.y = this.y * t),
                              (this.z = this.z * t),
                              (this.w = this.w * t)),
                          this
                        );
                      },
                      slerp: function(t, e) {
                        if (0 === e) return this;
                        if (1 === e) return this.copy(t);
                        var i = this.x,
                          n = this.y,
                          r = this.z,
                          a = this.w,
                          o = a * t.w + i * t.x + n * t.y + r * t.z;
                        if (
                          (o < 0
                            ? ((this.w = -t.w),
                              (this.x = -t.x),
                              (this.y = -t.y),
                              (this.z = -t.z),
                              (o = -o))
                            : this.copy(t),
                          o >= 1)
                        )
                          return (
                            (this.w = a),
                            (this.x = i),
                            (this.y = n),
                            (this.z = r),
                            this
                          );
                        var s = Math.acos(o),
                          c = Math.sqrt(1 - o * o);
                        if (Math.abs(c) < 0.001)
                          return (
                            (this.w = 0.5 * (a + this.w)),
                            (this.x = 0.5 * (i + this.x)),
                            (this.y = 0.5 * (n + this.y)),
                            (this.z = 0.5 * (r + this.z)),
                            this
                          );
                        var u = Math.sin((1 - e) * s) / c,
                          l = Math.sin(e * s) / c;
                        return (
                          (this.w = a * u + this.w * l),
                          (this.x = i * u + this.x * l),
                          (this.y = n * u + this.y * l),
                          (this.z = r * u + this.z * l),
                          this
                        );
                      },
                      setFromUnitVectors: function(t, e) {
                        return (
                          void 0 === n && (n = new a.Vector3()),
                          (r = t.dot(e) + 1) < 1e-6
                            ? ((r = 0),
                              Math.abs(t.x) > Math.abs(t.z)
                                ? n.set(-t.y, t.x, 0)
                                : n.set(0, -t.z, t.y))
                            : n.crossVectors(t, e),
                          (this.x = n.x),
                          (this.y = n.y),
                          (this.z = n.z),
                          (this.w = r),
                          this.normalize(),
                          this
                        );
                      }
                    }),
                    (e.exports = a);
                },
                {}
              ],
              60: [
                function(t, e, i) {
                  var n = t('./base.js').VRDisplay,
                    r = t('./math-util.js'),
                    a = t('./util.js');
                  function o() {
                    (this.displayName =
                      'Mouse and Keyboard VRDisplay (webvr-polyfill)'),
                      (this.capabilities.hasOrientation = !0),
                      window.addEventListener(
                        'keydown',
                        this.onKeyDown_.bind(this)
                      ),
                      window.addEventListener(
                        'mousemove',
                        this.onMouseMove_.bind(this)
                      ),
                      window.addEventListener(
                        'mousedown',
                        this.onMouseDown_.bind(this)
                      ),
                      window.addEventListener(
                        'mouseup',
                        this.onMouseUp_.bind(this)
                      ),
                      (this.phi_ = 0),
                      (this.theta_ = 0),
                      (this.targetAngle_ = null),
                      (this.angleAnimation_ = null),
                      (this.orientation_ = new r.Quaternion()),
                      (this.rotateStart_ = new r.Vector2()),
                      (this.rotateEnd_ = new r.Vector2()),
                      (this.rotateDelta_ = new r.Vector2()),
                      (this.isDragging_ = !1),
                      (this.orientationOut_ = new Float32Array(4));
                  }
                  (o.prototype = new n()),
                    (o.prototype.getImmediatePose = function() {
                      return (
                        this.orientation_.setFromEulerYXZ(
                          this.phi_,
                          this.theta_,
                          0
                        ),
                        (this.orientationOut_[0] = this.orientation_.x),
                        (this.orientationOut_[1] = this.orientation_.y),
                        (this.orientationOut_[2] = this.orientation_.z),
                        (this.orientationOut_[3] = this.orientation_.w),
                        {
                          position: null,
                          orientation: this.orientationOut_,
                          linearVelocity: null,
                          linearAcceleration: null,
                          angularVelocity: null,
                          angularAcceleration: null
                        }
                      );
                    }),
                    (o.prototype.onKeyDown_ = function(t) {
                      38 == t.keyCode
                        ? this.animatePhi_(this.phi_ + 0.15)
                        : 39 == t.keyCode
                          ? this.animateTheta_(this.theta_ - 0.15)
                          : 40 == t.keyCode
                            ? this.animatePhi_(this.phi_ - 0.15)
                            : 37 == t.keyCode &&
                              this.animateTheta_(this.theta_ + 0.15);
                    }),
                    (o.prototype.animateTheta_ = function(t) {
                      this.animateKeyTransitions_('theta_', t);
                    }),
                    (o.prototype.animatePhi_ = function(t) {
                      (t = a.clamp(t, -Math.PI / 2, Math.PI / 2)),
                        this.animateKeyTransitions_('phi_', t);
                    }),
                    (o.prototype.animateKeyTransitions_ = function(t, e) {
                      this.angleAnimation_ &&
                        cancelAnimationFrame(this.angleAnimation_);
                      var i = this[t],
                        n = new Date();
                      this.angleAnimation_ = requestAnimationFrame(
                        function r() {
                          var a = new Date() - n;
                          if (a >= 80)
                            return (
                              (this[t] = e),
                              void cancelAnimationFrame(this.angleAnimation_)
                            );
                          this.angleAnimation_ = requestAnimationFrame(
                            r.bind(this)
                          );
                          var o = a / 80;
                          this[t] = i + (e - i) * o;
                        }.bind(this)
                      );
                    }),
                    (o.prototype.onMouseDown_ = function(t) {
                      this.rotateStart_.set(t.clientX, t.clientY),
                        (this.isDragging_ = !0);
                    }),
                    (o.prototype.onMouseMove_ = function(t) {
                      if (this.isDragging_ || this.isPointerLocked_()) {
                        if (this.isPointerLocked_()) {
                          var e = t.movementX || t.mozMovementX || 0,
                            i = t.movementY || t.mozMovementY || 0;
                          this.rotateEnd_.set(
                            this.rotateStart_.x - e,
                            this.rotateStart_.y - i
                          );
                        } else this.rotateEnd_.set(t.clientX, t.clientY);
                        this.rotateDelta_.subVectors(
                          this.rotateEnd_,
                          this.rotateStart_
                        ),
                          this.rotateStart_.copy(this.rotateEnd_),
                          (this.phi_ +=
                            2 *
                            Math.PI *
                            this.rotateDelta_.y /
                            screen.height *
                            0.3),
                          (this.theta_ +=
                            2 *
                            Math.PI *
                            this.rotateDelta_.x /
                            screen.width *
                            0.5),
                          (this.phi_ = a.clamp(
                            this.phi_,
                            -Math.PI / 2,
                            Math.PI / 2
                          ));
                      }
                    }),
                    (o.prototype.onMouseUp_ = function(t) {
                      this.isDragging_ = !1;
                    }),
                    (o.prototype.isPointerLocked_ = function() {
                      return (
                        void 0 !==
                        (document.pointerLockElement ||
                          document.mozPointerLockElement ||
                          document.webkitPointerLockElement)
                      );
                    }),
                    (o.prototype.resetPose = function() {
                      (this.phi_ = 0), (this.theta_ = 0);
                    }),
                    (e.exports = o);
                },
                { './base.js': 48, './math-util.js': 59, './util.js': 68 }
              ],
              61: [
                function(e, i, n) {
                  (function(t) {
                    void 0 !== t &&
                      t.window &&
                      ((t.document = t.window.document),
                      (t.navigator = t.window.navigator)),
                      e('./main');
                  }.call(
                    this,
                    void 0 !== t
                      ? t
                      : 'undefined' != typeof self
                        ? self
                        : 'undefined' != typeof window ? window : {}
                  ));
                },
                { './main': 58 }
              ],
              62: [
                function(t, e, i) {
                  var n = t('./util.js');
                  function r() {
                    this.loadIcon_();
                    var t = document.createElement('div');
                    ((a = t.style).position = 'fixed'),
                      (a.top = 0),
                      (a.right = 0),
                      (a.bottom = 0),
                      (a.left = 0),
                      (a.backgroundColor = 'gray'),
                      (a.fontFamily = 'sans-serif'),
                      (a.zIndex = 1e6);
                    var e = document.createElement('img');
                    (e.src = this.icon),
                      ((a = e.style).marginLeft = '25%'),
                      (a.marginTop = '25%'),
                      (a.width = '50%'),
                      t.appendChild(e);
                    var i = document.createElement('div');
                    ((a = i.style).textAlign = 'center'),
                      (a.fontSize = '16px'),
                      (a.lineHeight = '24px'),
                      (a.margin = '24px 25%'),
                      (a.width = '50%'),
                      (i.innerHTML =
                        'Place your phone into your Cardboard viewer.'),
                      t.appendChild(i);
                    var n = document.createElement('div');
                    ((a = n.style).backgroundColor = '#CFD8DC'),
                      (a.position = 'fixed'),
                      (a.bottom = 0),
                      (a.width = '100%'),
                      (a.height = '48px'),
                      (a.padding = '14px 24px'),
                      (a.boxSizing = 'border-box'),
                      (a.color = '#656A6B'),
                      t.appendChild(n);
                    var r = document.createElement('div');
                    (r.style.float = 'left'),
                      (r.innerHTML = 'No Cardboard viewer?');
                    var a,
                      o = document.createElement('a');
                    (o.href =
                      'https://www.google.com/get/cardboard/get-cardboard/'),
                      (o.innerHTML = 'get one'),
                      (o.target = '_blank'),
                      ((a = o.style).float = 'right'),
                      (a.fontWeight = 600),
                      (a.textTransform = 'uppercase'),
                      (a.borderLeft = '1px solid gray'),
                      (a.paddingLeft = '24px'),
                      (a.textDecoration = 'none'),
                      (a.color = '#656A6B'),
                      n.appendChild(r),
                      n.appendChild(o),
                      (this.overlay = t),
                      (this.text = i),
                      this.hide();
                  }
                  (r.prototype.show = function(t) {
                    t || this.overlay.parentElement
                      ? t &&
                        (this.overlay.parentElement &&
                          this.overlay.parentElement != t &&
                          this.overlay.parentElement.removeChild(this.overlay),
                        t.appendChild(this.overlay))
                      : document.body.appendChild(this.overlay),
                      (this.overlay.style.display = 'block');
                    var e = this.overlay.querySelector('img').style;
                    n.isLandscapeMode()
                      ? ((e.width = '20%'),
                        (e.marginLeft = '40%'),
                        (e.marginTop = '3%'))
                      : ((e.width = '50%'),
                        (e.marginLeft = '25%'),
                        (e.marginTop = '25%'));
                  }),
                    (r.prototype.hide = function() {
                      this.overlay.style.display = 'none';
                    }),
                    (r.prototype.showTemporarily = function(t, e) {
                      this.show(e),
                        (this.timer = setTimeout(this.hide.bind(this), t));
                    }),
                    (r.prototype.disableShowTemporarily = function() {
                      clearTimeout(this.timer);
                    }),
                    (r.prototype.update = function() {
                      this.disableShowTemporarily(),
                        !n.isLandscapeMode() && n.isMobile()
                          ? this.show()
                          : this.hide();
                    }),
                    (r.prototype.loadIcon_ = function() {
                      this.icon = n.base64(
                        'image/svg+xml',
                        ''
                      );
                    }),
                    (e.exports = r);
                },
                { './util.js': 68 }
              ],
              63: [
                function(t, e, i) {
                  var n = t('./sensor-sample.js'),
                    r = t('../math-util.js'),
                    a = t('../util.js');
                  function o(t) {
                    (this.kFilter = t),
                      (this.currentAccelMeasurement = new n()),
                      (this.currentGyroMeasurement = new n()),
                      (this.previousGyroMeasurement = new n()),
                      a.isIOS()
                        ? (this.filterQ = new r.Quaternion(-1, 0, 0, 1))
                        : (this.filterQ = new r.Quaternion(1, 0, 0, 1)),
                      (this.previousFilterQ = new r.Quaternion()),
                      this.previousFilterQ.copy(this.filterQ),
                      (this.accelQ = new r.Quaternion()),
                      (this.isOrientationInitialized = !1),
                      (this.estimatedGravity = new r.Vector3()),
                      (this.measuredGravity = new r.Vector3()),
                      (this.gyroIntegralQ = new r.Quaternion());
                  }
                  (o.prototype.addAccelMeasurement = function(t, e) {
                    this.currentAccelMeasurement.set(t, e);
                  }),
                    (o.prototype.addGyroMeasurement = function(t, e) {
                      this.currentGyroMeasurement.set(t, e);
                      var i = e - this.previousGyroMeasurement.timestampS;
                      a.isTimestampDeltaValid(i) && this.run_(),
                        this.previousGyroMeasurement.copy(
                          this.currentGyroMeasurement
                        );
                    }),
                    (o.prototype.run_ = function() {
                      if (!this.isOrientationInitialized)
                        return (
                          (this.accelQ = this.accelToQuaternion_(
                            this.currentAccelMeasurement.sample
                          )),
                          this.previousFilterQ.copy(this.accelQ),
                          void (this.isOrientationInitialized = !0)
                        );
                      var t =
                          this.currentGyroMeasurement.timestampS -
                          this.previousGyroMeasurement.timestampS,
                        e = this.gyroToQuaternionDelta_(
                          this.currentGyroMeasurement.sample,
                          t
                        );
                      this.gyroIntegralQ.multiply(e),
                        this.filterQ.copy(this.previousFilterQ),
                        this.filterQ.multiply(e);
                      var i = new r.Quaternion();
                      i.copy(this.filterQ),
                        i.inverse(),
                        this.estimatedGravity.set(0, 0, -1),
                        this.estimatedGravity.applyQuaternion(i),
                        this.estimatedGravity.normalize(),
                        this.measuredGravity.copy(
                          this.currentAccelMeasurement.sample
                        ),
                        this.measuredGravity.normalize();
                      var n = new r.Quaternion();
                      n.setFromUnitVectors(
                        this.estimatedGravity,
                        this.measuredGravity
                      ),
                        n.inverse(),
                        a.isDebug();
                      var o = new r.Quaternion();
                      o.copy(this.filterQ),
                        o.multiply(n),
                        this.filterQ.slerp(o, 1 - this.kFilter),
                        this.previousFilterQ.copy(this.filterQ);
                    }),
                    (o.prototype.getOrientation = function() {
                      return this.filterQ;
                    }),
                    (o.prototype.accelToQuaternion_ = function(t) {
                      var e = new r.Vector3();
                      e.copy(t), e.normalize();
                      var i = new r.Quaternion();
                      return (
                        i.setFromUnitVectors(new r.Vector3(0, 0, -1), e),
                        i.inverse(),
                        i
                      );
                    }),
                    (o.prototype.gyroToQuaternionDelta_ = function(t, e) {
                      var i = new r.Quaternion(),
                        n = new r.Vector3();
                      return (
                        n.copy(t),
                        n.normalize(),
                        i.setFromAxisAngle(n, t.length() * e),
                        i
                      );
                    }),
                    (e.exports = o);
                },
                {
                  '../math-util.js': 59,
                  '../util.js': 68,
                  './sensor-sample.js': 66
                }
              ],
              64: [
                function(t, e, i) {
                  var n = t('./complementary-filter.js'),
                    r = t('./pose-predictor.js'),
                    a = t('../touch-panner.js'),
                    o = t('../math-util.js'),
                    s = t('../util.js');
                  function c() {
                    (this.deviceId = 'webvr-polyfill:fused'),
                      (this.deviceName =
                        'VR Position Device (webvr-polyfill:fused)'),
                      (this.accelerometer = new o.Vector3()),
                      (this.gyroscope = new o.Vector3()),
                      this.start(),
                      (this.filter = new n(window.WebVRConfig.K_FILTER)),
                      (this.posePredictor = new r(
                        window.WebVRConfig.PREDICTION_TIME_S
                      )),
                      (this.touchPanner = new a()),
                      (this.filterToWorldQ = new o.Quaternion()),
                      s.isIOS()
                        ? this.filterToWorldQ.setFromAxisAngle(
                            new o.Vector3(1, 0, 0),
                            Math.PI / 2
                          )
                        : this.filterToWorldQ.setFromAxisAngle(
                            new o.Vector3(1, 0, 0),
                            -Math.PI / 2
                          ),
                      (this.inverseWorldToScreenQ = new o.Quaternion()),
                      (this.worldToScreenQ = new o.Quaternion()),
                      (this.originalPoseAdjustQ = new o.Quaternion()),
                      this.originalPoseAdjustQ.setFromAxisAngle(
                        new o.Vector3(0, 0, 1),
                        -window.orientation * Math.PI / 180
                      ),
                      this.setScreenTransform_(),
                      s.isLandscapeMode() &&
                        this.filterToWorldQ.multiply(
                          this.inverseWorldToScreenQ
                        ),
                      (this.resetQ = new o.Quaternion()),
                      (this.isFirefoxAndroid = s.isFirefoxAndroid()),
                      (this.isIOS = s.isIOS()),
                      (this.orientationOut_ = new Float32Array(4));
                  }
                  (c.prototype.getPosition = function() {
                    return null;
                  }),
                    (c.prototype.getOrientation = function() {
                      var t = this.filter.getOrientation();
                      this.predictedQ = this.posePredictor.getPrediction(
                        t,
                        this.gyroscope,
                        this.previousTimestampS
                      );
                      var e = new o.Quaternion();
                      return (
                        e.copy(this.filterToWorldQ),
                        e.multiply(this.resetQ),
                        window.WebVRConfig.TOUCH_PANNER_DISABLED ||
                          e.multiply(this.touchPanner.getOrientation()),
                        e.multiply(this.predictedQ),
                        e.multiply(this.worldToScreenQ),
                        window.WebVRConfig.YAW_ONLY &&
                          ((e.x = 0), (e.z = 0), e.normalize()),
                        (this.orientationOut_[0] = e.x),
                        (this.orientationOut_[1] = e.y),
                        (this.orientationOut_[2] = e.z),
                        (this.orientationOut_[3] = e.w),
                        this.orientationOut_
                      );
                    }),
                    (c.prototype.resetPose = function() {
                      this.resetQ.copy(this.filter.getOrientation()),
                        (this.resetQ.x = 0),
                        (this.resetQ.y = 0),
                        (this.resetQ.z *= -1),
                        this.resetQ.normalize(),
                        s.isLandscapeMode() &&
                          this.resetQ.multiply(this.inverseWorldToScreenQ),
                        this.resetQ.multiply(this.originalPoseAdjustQ),
                        window.WebVRConfig.TOUCH_PANNER_DISABLED ||
                          this.touchPanner.resetSensor();
                    }),
                    (c.prototype.onDeviceMotion_ = function(t) {
                      this.updateDeviceMotion_(t);
                    }),
                    (c.prototype.updateDeviceMotion_ = function(t) {
                      var e = t.accelerationIncludingGravity,
                        i = t.rotationRate,
                        n = t.timeStamp / 1e3,
                        r = n - this.previousTimestampS;
                      r <= s.MIN_TIMESTEP || r > s.MAX_TIMESTEP
                        ? (this.previousTimestampS = n)
                        : (this.accelerometer.set(-e.x, -e.y, -e.z),
                          this.gyroscope.set(i.alpha, i.beta, i.gamma),
                          (this.isIOS || this.isFirefoxAndroid) &&
                            this.gyroscope.multiplyScalar(Math.PI / 180),
                          this.filter.addAccelMeasurement(
                            this.accelerometer,
                            n
                          ),
                          this.filter.addGyroMeasurement(this.gyroscope, n),
                          (this.previousTimestampS = n));
                    }),
                    (c.prototype.onOrientationChange_ = function(t) {
                      this.setScreenTransform_();
                    }),
                    (c.prototype.onMessage_ = function(t) {
                      var e = t.data;
                      e &&
                        e.type &&
                        ('devicemotion' === e.type.toLowerCase() &&
                          this.updateDeviceMotion_(e.deviceMotionEvent));
                    }),
                    (c.prototype.setScreenTransform_ = function() {
                      switch ((this.worldToScreenQ.set(0, 0, 0, 1),
                      window.orientation)) {
                        case 0:
                          break;
                        case 90:
                          this.worldToScreenQ.setFromAxisAngle(
                            new o.Vector3(0, 0, 1),
                            -Math.PI / 2
                          );
                          break;
                        case -90:
                          this.worldToScreenQ.setFromAxisAngle(
                            new o.Vector3(0, 0, 1),
                            Math.PI / 2
                          );
                      }
                      this.inverseWorldToScreenQ.copy(this.worldToScreenQ),
                        this.inverseWorldToScreenQ.inverse();
                    }),
                    (c.prototype.start = function() {
                      (this.onDeviceMotionCallback_ = this.onDeviceMotion_.bind(
                        this
                      )),
                        (this.onOrientationChangeCallback_ = this.onOrientationChange_.bind(
                          this
                        )),
                        (this.onMessageCallback_ = this.onMessage_.bind(this)),
                        s.isIOS() &&
                          s.isInsideCrossDomainIFrame() &&
                          window.addEventListener(
                            'message',
                            this.onMessageCallback_
                          ),
                        window.addEventListener(
                          'orientationchange',
                          this.onOrientationChangeCallback_
                        ),
                        window.addEventListener(
                          'devicemotion',
                          this.onDeviceMotionCallback_
                        );
                    }),
                    (c.prototype.stop = function() {
                      window.removeEventListener(
                        'devicemotion',
                        this.onDeviceMotionCallback_
                      ),
                        window.removeEventListener(
                          'orientationchange',
                          this.onOrientationChangeCallback_
                        ),
                        window.removeEventListener(
                          'message',
                          this.onMessageCallback_
                        );
                    }),
                    (e.exports = c);
                },
                {
                  '../math-util.js': 59,
                  '../touch-panner.js': 67,
                  '../util.js': 68,
                  './complementary-filter.js': 63,
                  './pose-predictor.js': 65
                }
              ],
              65: [
                function(t, e, i) {
                  var n = t('../math-util'),
                    r = t('../util');
                  function a(t) {
                    (this.predictionTimeS = t),
                      (this.previousQ = new n.Quaternion()),
                      (this.previousTimestampS = null),
                      (this.deltaQ = new n.Quaternion()),
                      (this.outQ = new n.Quaternion());
                  }
                  (a.prototype.getPrediction = function(t, e, i) {
                    if (!this.previousTimestampS)
                      return (
                        this.previousQ.copy(t), (this.previousTimestampS = i), t
                      );
                    var a = new n.Vector3();
                    a.copy(e), a.normalize();
                    var o = e.length();
                    if (o < 20 * n.degToRad)
                      return (
                        r.isDebug(),
                        this.outQ.copy(t),
                        this.previousQ.copy(t),
                        this.outQ
                      );
                    this.previousTimestampS;
                    var s = o * this.predictionTimeS;
                    return (
                      this.deltaQ.setFromAxisAngle(a, s),
                      this.outQ.copy(this.previousQ),
                      this.outQ.multiply(this.deltaQ),
                      this.previousQ.copy(t),
                      (this.previousTimestampS = i),
                      this.outQ
                    );
                  }),
                    (e.exports = a);
                },
                { '../math-util': 59, '../util': 68 }
              ],
              66: [
                function(t, e, i) {
                  function n(t, e) {
                    this.set(t, e);
                  }
                  (n.prototype.set = function(t, e) {
                    (this.sample = t), (this.timestampS = e);
                  }),
                    (n.prototype.copy = function(t) {
                      this.set(t.sample, t.timestampS);
                    }),
                    (e.exports = n);
                },
                {}
              ],
              67: [
                function(t, e, i) {
                  var n = t('./math-util.js'),
                    r = t('./util.js');
                  function a() {
                    window.addEventListener(
                      'touchstart',
                      this.onTouchStart_.bind(this)
                    ),
                      window.addEventListener(
                        'touchmove',
                        this.onTouchMove_.bind(this)
                      ),
                      window.addEventListener(
                        'touchend',
                        this.onTouchEnd_.bind(this)
                      ),
                      (this.isTouching = !1),
                      (this.rotateStart = new n.Vector2()),
                      (this.rotateEnd = new n.Vector2()),
                      (this.rotateDelta = new n.Vector2()),
                      (this.theta = 0),
                      (this.orientation = new n.Quaternion());
                  }
                  (a.prototype.getOrientation = function() {
                    return (
                      this.orientation.setFromEulerXYZ(0, 0, this.theta),
                      this.orientation
                    );
                  }),
                    (a.prototype.resetSensor = function() {
                      this.theta = 0;
                    }),
                    (a.prototype.onTouchStart_ = function(t) {
                      t.touches &&
                        1 == t.touches.length &&
                        (this.rotateStart.set(
                          t.touches[0].pageX,
                          t.touches[0].pageY
                        ),
                        (this.isTouching = !0));
                    }),
                    (a.prototype.onTouchMove_ = function(t) {
                      if (this.isTouching) {
                        this.rotateEnd.set(
                          t.touches[0].pageX,
                          t.touches[0].pageY
                        ),
                          this.rotateDelta.subVectors(
                            this.rotateEnd,
                            this.rotateStart
                          ),
                          this.rotateStart.copy(this.rotateEnd),
                          r.isIOS() && (this.rotateDelta.x *= -1);
                        var e = document.body;
                        this.theta +=
                          2 *
                          Math.PI *
                          this.rotateDelta.x /
                          e.clientWidth *
                          0.5;
                      }
                    }),
                    (a.prototype.onTouchEnd_ = function(t) {
                      this.isTouching = !1;
                    }),
                    (e.exports = a);
                },
                { './math-util.js': 59, './util.js': 68 }
              ],
              68: [
                function(t, e, i) {
                  var n,
                    r,
                    a,
                    o,
                    s = window.Util || {};
                  (s.MIN_TIMESTEP = 0.001),
                    (s.MAX_TIMESTEP = 1),
                    (s.base64 = function(t, e) {
                      return 'data:' + t + ';base64,' + e;
                    }),
                    (s.clamp = function(t, e, i) {
                      return Math.min(Math.max(e, t), i);
                    }),
                    (s.lerp = function(t, e, i) {
                      return t + (e - t) * i;
                    }),
                    (s.race = function(t) {
                      return Promise.race
                        ? Promise.race(t)
                        : new Promise(function(e, i) {
                            for (var n = 0; n < t.length; n++) t[n].then(e, i);
                          });
                    }),
                    (s.isIOS = ((n = /iPad|iPhone|iPod/.test(
                      navigator.platform
                    )),
                    function() {
                      return n;
                    })),
                    (s.isWebViewAndroid = ((r =
                      -1 !== navigator.userAgent.indexOf('Version') &&
                      -1 !== navigator.userAgent.indexOf('Android') &&
                      -1 !== navigator.userAgent.indexOf('Chrome')),
                    function() {
                      return r;
                    })),
                    (s.isSafari = ((a = /^((?!chrome|android).)*safari/i.test(
                      navigator.userAgent
                    )),
                    function() {
                      return a;
                    })),
                    (s.isFirefoxAndroid = ((o =
                      -1 !== navigator.userAgent.indexOf('Firefox') &&
                      -1 !== navigator.userAgent.indexOf('Android')),
                    function() {
                      return o;
                    })),
                    (s.isLandscapeMode = function() {
                      return (
                        90 == window.orientation || -90 == window.orientation
                      );
                    }),
                    (s.isTimestampDeltaValid = function(t) {
                      return (
                        !isNaN(t) &&
                        (!(t <= s.MIN_TIMESTEP) && !(t > s.MAX_TIMESTEP))
                      );
                    }),
                    (s.getScreenWidth = function() {
                      return (
                        Math.max(window.screen.width, window.screen.height) *
                        window.devicePixelRatio
                      );
                    }),
                    (s.getScreenHeight = function() {
                      return (
                        Math.min(window.screen.width, window.screen.height) *
                        window.devicePixelRatio
                      );
                    }),
                    (s.requestFullscreen = function(t) {
                      if (s.isWebViewAndroid()) return !1;
                      if (t.requestFullscreen) t.requestFullscreen();
                      else if (t.webkitRequestFullscreen)
                        t.webkitRequestFullscreen();
                      else if (t.mozRequestFullScreen) t.mozRequestFullScreen();
                      else {
                        if (!t.msRequestFullscreen) return !1;
                        t.msRequestFullscreen();
                      }
                      return !0;
                    }),
                    (s.exitFullscreen = function() {
                      if (document.exitFullscreen) document.exitFullscreen();
                      else if (document.webkitExitFullscreen)
                        document.webkitExitFullscreen();
                      else if (document.mozCancelFullScreen)
                        document.mozCancelFullScreen();
                      else {
                        if (!document.msExitFullscreen) return !1;
                        document.msExitFullscreen();
                      }
                      return !0;
                    }),
                    (s.getFullscreenElement = function() {
                      return (
                        document.fullscreenElement ||
                        document.webkitFullscreenElement ||
                        document.mozFullScreenElement ||
                        document.msFullscreenElement
                      );
                    }),
                    (s.linkProgram = function(t, e, i, n) {
                      var r = t.createShader(t.VERTEX_SHADER);
                      t.shaderSource(r, e), t.compileShader(r);
                      var a = t.createShader(t.FRAGMENT_SHADER);
                      t.shaderSource(a, i), t.compileShader(a);
                      var o = t.createProgram();
                      t.attachShader(o, r), t.attachShader(o, a);
                      for (var s in n) t.bindAttribLocation(o, n[s], s);
                      return (
                        t.linkProgram(o),
                        t.deleteShader(r),
                        t.deleteShader(a),
                        o
                      );
                    }),
                    (s.getProgramUniforms = function(t, e) {
                      for (
                        var i = {},
                          n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS),
                          r = '',
                          a = 0;
                        a < n;
                        a++
                      ) {
                        i[
                          (r = t.getActiveUniform(e, a).name.replace('[0]', ''))
                        ] = t.getUniformLocation(e, r);
                      }
                      return i;
                    }),
                    (s.orthoMatrix = function(t, e, i, n, r, a, o) {
                      var s = 1 / (e - i),
                        c = 1 / (n - r),
                        u = 1 / (a - o);
                      return (
                        (t[0] = -2 * s),
                        (t[1] = 0),
                        (t[2] = 0),
                        (t[3] = 0),
                        (t[4] = 0),
                        (t[5] = -2 * c),
                        (t[6] = 0),
                        (t[7] = 0),
                        (t[8] = 0),
                        (t[9] = 0),
                        (t[10] = 2 * u),
                        (t[11] = 0),
                        (t[12] = (e + i) * s),
                        (t[13] = (r + n) * c),
                        (t[14] = (o + a) * u),
                        (t[15] = 1),
                        t
                      );
                    }),
                    (s.copyArray = function(t, e) {
                      for (var i = 0, n = t.length; i < n; i++) e[i] = t[i];
                    }),
                    (s.isMobile = function() {
                      var t,
                        e = !1;
                      return (
                        (t =
                          navigator.userAgent ||
                          navigator.vendor ||
                          window.opera),
                        (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                          t
                        ) ||
                          /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                            t.substr(0, 4)
                          )) &&
                          (e = !0),
                        e
                      );
                    }),
                    (s.extend = function(t, e) {
                      for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
                      return t;
                    }),
                    (s.safariCssSizeWorkaround = function(t) {
                      if (s.isIOS()) {
                        var e = t.style.width,
                          i = t.style.height;
                        (t.style.width = parseInt(e) + 1 + 'px'),
                          (t.style.height = parseInt(i) + 'px'),
                          setTimeout(function() {
                            (t.style.width = e), (t.style.height = i);
                          }, 100);
                      }
                      (window.Util = s), (window.canvas = t);
                    }),
                    (s.isDebug = function() {
                      return s.getQueryParameter('debug');
                    }),
                    (s.getQueryParameter = function(t) {
                      t = t.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                      var e = new RegExp('[\\?&]' + t + '=([^&#]*)').exec(
                        location.search
                      );
                      return null === e
                        ? ''
                        : decodeURIComponent(e[1].replace(/\+/g, ' '));
                    }),
                    (s.frameDataFromPose = (function() {
                      var t = Math.PI / 180,
                        e = 0.25 * Math.PI;
                      var i = new Float32Array([0, 0, 0, 1]),
                        n = new Float32Array([0, 0, 0]);
                      function r(r, a, o, s, c) {
                        var u, l, h, d, p, f, m, g, v, y;
                        (u = r),
                          (l = s ? s.fieldOfView : null),
                          (h = c.depthNear),
                          (d = c.depthFar),
                          (p = Math.tan(l ? l.upDegrees * t : e)),
                          (f = Math.tan(l ? l.downDegrees * t : e)),
                          (m = Math.tan(l ? l.leftDegrees * t : e)),
                          (g = Math.tan(l ? l.rightDegrees * t : e)),
                          (v = 2 / (m + g)),
                          (y = 2 / (p + f)),
                          (u[0] = v),
                          (u[1] = 0),
                          (u[2] = 0),
                          (u[3] = 0),
                          (u[4] = 0),
                          (u[5] = y),
                          (u[6] = 0),
                          (u[7] = 0),
                          (u[8] = -(m - g) * v * 0.5),
                          (u[9] = (p - f) * y * 0.5),
                          (u[10] = d / (h - d)),
                          (u[11] = -1),
                          (u[12] = 0),
                          (u[13] = 0),
                          (u[14] = d * h / (h - d)),
                          (u[15] = 0);
                        var M,
                          w,
                          x,
                          A,
                          E,
                          b,
                          T,
                          L,
                          N,
                          D,
                          C,
                          S,
                          I,
                          _,
                          j,
                          O,
                          z,
                          R,
                          k,
                          U,
                          P,
                          B,
                          F,
                          G,
                          V,
                          Y,
                          Q,
                          H,
                          W,
                          X,
                          q,
                          Z,
                          K,
                          J,
                          $,
                          tt,
                          et,
                          it,
                          nt,
                          rt,
                          at,
                          ot,
                          st,
                          ct,
                          ut,
                          lt,
                          ht,
                          dt,
                          pt,
                          ft,
                          mt,
                          gt,
                          vt,
                          yt,
                          Mt,
                          wt,
                          xt,
                          At,
                          Et,
                          bt,
                          Tt,
                          Lt,
                          Nt,
                          Dt,
                          Ct,
                          St,
                          It,
                          _t,
                          jt = o.orientation || i,
                          Ot = o.position || n;
                        (M = a),
                          (x = Ot),
                          (A = (w = jt)[0]),
                          (E = w[1]),
                          (b = w[2]),
                          (T = w[3]),
                          (C = A * (L = A + A)),
                          (S = A * (N = E + E)),
                          (I = A * (D = b + b)),
                          (_ = E * N),
                          (j = E * D),
                          (O = b * D),
                          (z = T * L),
                          (R = T * N),
                          (k = T * D),
                          (M[0] = 1 - (_ + O)),
                          (M[1] = S + k),
                          (M[2] = I - R),
                          (M[3] = 0),
                          (M[4] = S - k),
                          (M[5] = 1 - (C + O)),
                          (M[6] = j + z),
                          (M[7] = 0),
                          (M[8] = I + R),
                          (M[9] = j - z),
                          (M[10] = 1 - (C + _)),
                          (M[11] = 0),
                          (M[12] = x[0]),
                          (M[13] = x[1]),
                          (M[14] = x[2]),
                          (M[15] = 1),
                          s &&
                            ((U = a),
                            (P = a),
                            (B = s.offset),
                            ($ = B[0]),
                            (tt = B[1]),
                            (et = B[2]),
                            P === U
                              ? ((U[12] =
                                  P[0] * $ + P[4] * tt + P[8] * et + P[12]),
                                (U[13] =
                                  P[1] * $ + P[5] * tt + P[9] * et + P[13]),
                                (U[14] =
                                  P[2] * $ + P[6] * tt + P[10] * et + P[14]),
                                (U[15] =
                                  P[3] * $ + P[7] * tt + P[11] * et + P[15]))
                              : ((F = P[0]),
                                (G = P[1]),
                                (V = P[2]),
                                (Y = P[3]),
                                (Q = P[4]),
                                (H = P[5]),
                                (W = P[6]),
                                (X = P[7]),
                                (q = P[8]),
                                (Z = P[9]),
                                (K = P[10]),
                                (J = P[11]),
                                (U[0] = F),
                                (U[1] = G),
                                (U[2] = V),
                                (U[3] = Y),
                                (U[4] = Q),
                                (U[5] = H),
                                (U[6] = W),
                                (U[7] = X),
                                (U[8] = q),
                                (U[9] = Z),
                                (U[10] = K),
                                (U[11] = J),
                                (U[12] = F * $ + Q * tt + q * et + P[12]),
                                (U[13] = G * $ + H * tt + Z * et + P[13]),
                                (U[14] = V * $ + W * tt + K * et + P[14]),
                                (U[15] = Y * $ + X * tt + J * et + P[15]))),
                          (it = a),
                          (rt = (nt = a)[0]),
                          (at = nt[1]),
                          (ot = nt[2]),
                          (st = nt[3]),
                          (ct = nt[4]),
                          (ut = nt[5]),
                          (lt = nt[6]),
                          (ht = nt[7]),
                          (dt = nt[8]),
                          (pt = nt[9]),
                          (ft = nt[10]),
                          (mt = nt[11]),
                          (gt = nt[12]),
                          (vt = nt[13]),
                          (yt = nt[14]),
                          (Mt = nt[15]),
                          (_t =
                            (wt = rt * ut - at * ct) *
                              (It = ft * Mt - mt * yt) -
                            (xt = rt * lt - ot * ct) *
                              (St = pt * Mt - mt * vt) +
                            (At = rt * ht - st * ct) *
                              (Ct = pt * yt - ft * vt) +
                            (Et = at * lt - ot * ut) *
                              (Dt = dt * Mt - mt * gt) -
                            (bt = at * ht - st * ut) *
                              (Nt = dt * yt - ft * gt) +
                            (Tt = ot * ht - st * lt) *
                              (Lt = dt * vt - pt * gt)) &&
                            ((_t = 1 / _t),
                            (it[0] = (ut * It - lt * St + ht * Ct) * _t),
                            (it[1] = (ot * St - at * It - st * Ct) * _t),
                            (it[2] = (vt * Tt - yt * bt + Mt * Et) * _t),
                            (it[3] = (ft * bt - pt * Tt - mt * Et) * _t),
                            (it[4] = (lt * Dt - ct * It - ht * Nt) * _t),
                            (it[5] = (rt * It - ot * Dt + st * Nt) * _t),
                            (it[6] = (yt * At - gt * Tt - Mt * xt) * _t),
                            (it[7] = (dt * Tt - ft * At + mt * xt) * _t),
                            (it[8] = (ct * St - ut * Dt + ht * Lt) * _t),
                            (it[9] = (at * Dt - rt * St - st * Lt) * _t),
                            (it[10] = (gt * bt - vt * At + Mt * wt) * _t),
                            (it[11] = (pt * At - dt * bt - mt * wt) * _t),
                            (it[12] = (ut * Nt - ct * Ct - lt * Lt) * _t),
                            (it[13] = (rt * Ct - at * Nt + ot * Lt) * _t),
                            (it[14] = (vt * xt - gt * Et - yt * wt) * _t),
                            (it[15] = (dt * Et - pt * xt + ft * wt) * _t));
                      }
                      return function(t, e, i) {
                        return (
                          !(!t || !e) &&
                          ((t.pose = e),
                          (t.timestamp = e.timestamp),
                          r(
                            t.leftProjectionMatrix,
                            t.leftViewMatrix,
                            e,
                            i.getEyeParameters('left'),
                            i
                          ),
                          r(
                            t.rightProjectionMatrix,
                            t.rightViewMatrix,
                            e,
                            i.getEyeParameters('right'),
                            i
                          ),
                          !0)
                        );
                      };
                    })()),
                    (s.isInsideCrossDomainIFrame = function() {
                      var t = window.self !== window.top,
                        e = s.getDomainFromUrl(document.referrer),
                        i = s.getDomainFromUrl(window.location.href);
                      return t && e !== i;
                    }),
                    (s.getDomainFromUrl = function(t) {
                      return (t.indexOf('://') > -1
                        ? t.split('/')[2]
                        : t.split('/')[0]
                      ).split(':')[0];
                    }),
                    (e.exports = s);
                },
                {}
              ],
              69: [
                function(t, e, i) {
                  var n = t('./device-info.js'),
                    r = (t('./util.js'), 'CardboardV1'),
                    a = 'WEBVR_CARDBOARD_VIEWER';
                  function o() {
                    try {
                      this.selectedKey = localStorage.getItem(a);
                    } catch (t) {}
                    this.selectedKey || (this.selectedKey = r),
                      (this.dialog = this.createDialog_(n.Viewers)),
                      (this.root = null),
                      (this.onChangeCallbacks_ = []);
                  }
                  (o.prototype.show = function(t) {
                    (this.root = t),
                      t.appendChild(this.dialog),
                      (this.dialog.querySelector(
                        '#' + this.selectedKey
                      ).checked = !0),
                      (this.dialog.style.display = 'block');
                  }),
                    (o.prototype.hide = function() {
                      this.root &&
                        this.root.contains(this.dialog) &&
                        this.root.removeChild(this.dialog),
                        (this.dialog.style.display = 'none');
                    }),
                    (o.prototype.getCurrentViewer = function() {
                      return n.Viewers[this.selectedKey];
                    }),
                    (o.prototype.getSelectedKey_ = function() {
                      var t = this.dialog.querySelector(
                        'input[name=field]:checked'
                      );
                      return t ? t.id : null;
                    }),
                    (o.prototype.onChange = function(t) {
                      this.onChangeCallbacks_.push(t);
                    }),
                    (o.prototype.fireOnChange_ = function(t) {
                      for (var e = 0; e < this.onChangeCallbacks_.length; e++)
                        this.onChangeCallbacks_[e](t);
                    }),
                    (o.prototype.onSave_ = function() {
                      if (
                        ((this.selectedKey = this.getSelectedKey_()),
                        this.selectedKey && n.Viewers[this.selectedKey])
                      ) {
                        this.fireOnChange_(n.Viewers[this.selectedKey]);
                        try {
                          localStorage.setItem(a, this.selectedKey);
                        } catch (t) {}
                        this.hide();
                      }
                    }),
                    (o.prototype.createDialog_ = function(t) {
                      var e = document.createElement('div');
                      e.classList.add('webvr-polyfill-viewer-selector'),
                        (e.style.display = 'none');
                      var i = document.createElement('div');
                      ((n = i.style).position = 'fixed'),
                        (n.left = 0),
                        (n.top = 0),
                        (n.width = '100%'),
                        (n.height = '100%'),
                        (n.background = 'rgba(0, 0, 0, 0.3)'),
                        i.addEventListener('click', this.hide.bind(this));
                      var n,
                        r = document.createElement('div');
                      ((n = r.style).boxSizing = 'border-box'),
                        (n.position = 'fixed'),
                        (n.top = '24px'),
                        (n.left = '50%'),
                        (n.marginLeft = '-140px'),
                        (n.width = '280px'),
                        (n.padding = '24px'),
                        (n.overflow = 'hidden'),
                        (n.background = '#fafafa'),
                        (n.fontFamily = "'Roboto', sans-serif"),
                        (n.boxShadow = '0px 5px 20px #666'),
                        r.appendChild(this.createH1_('Select your viewer'));
                      for (var a in t)
                        r.appendChild(this.createChoice_(a, t[a].label));
                      return (
                        r.appendChild(
                          this.createButton_('Save', this.onSave_.bind(this))
                        ),
                        e.appendChild(i),
                        e.appendChild(r),
                        e
                      );
                    }),
                    (o.prototype.createH1_ = function(t) {
                      var e = document.createElement('h1'),
                        i = e.style;
                      return (
                        (i.color = 'black'),
                        (i.fontSize = '20px'),
                        (i.fontWeight = 'bold'),
                        (i.marginTop = 0),
                        (i.marginBottom = '24px'),
                        (e.innerHTML = t),
                        e
                      );
                    }),
                    (o.prototype.createChoice_ = function(t, e) {
                      var i = document.createElement('div');
                      (i.style.marginTop = '8px'), (i.style.color = 'black');
                      var n = document.createElement('input');
                      (n.style.fontSize = '30px'),
                        n.setAttribute('id', t),
                        n.setAttribute('type', 'radio'),
                        n.setAttribute('value', t),
                        n.setAttribute('name', 'field');
                      var r = document.createElement('label');
                      return (
                        (r.style.marginLeft = '4px'),
                        r.setAttribute('for', t),
                        (r.innerHTML = e),
                        i.appendChild(n),
                        i.appendChild(r),
                        i
                      );
                    }),
                    (o.prototype.createButton_ = function(t, e) {
                      var i = document.createElement('button');
                      i.innerHTML = t;
                      var n = i.style;
                      return (
                        (n.float = 'right'),
                        (n.textTransform = 'uppercase'),
                        (n.color = '#1094f7'),
                        (n.fontSize = '14px'),
                        (n.letterSpacing = 0),
                        (n.border = 0),
                        (n.background = 'none'),
                        (n.marginTop = '16px'),
                        i.addEventListener('click', e),
                        i
                      );
                    }),
                    (e.exports = o);
                },
                { './device-info.js': 53, './util.js': 68 }
              ],
              70: [
                function(t, e, i) {
                  var n,
                    r = t('./util.js');
                  function a() {
                    var t = document.createElement('video');
                    function e(t, e, i) {
                      var n = document.createElement('source');
                      (n.src = i), (n.type = 'video/' + e), t.appendChild(n);
                    }
                    t.setAttribute('loop', ''),
                      e(
                        t,
                        'webm',
                        r.base64(
                          'video/webm',
                          'GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA='
                        )
                      ),
                      e(
                        t,
                        'mp4',
                        r.base64(
                          'video/mp4',
                          'AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw=='
                        )
                      ),
                      (this.request = function() {
                        t.paused && t.play();
                      }),
                      (this.release = function() {
                        t.pause();
                      });
                  }
                  function o() {
                    var t = null;
                    (this.request = function() {
                      t ||
                        (t = setInterval(function() {
                          (window.location = window.location),
                            setTimeout(window.stop, 0);
                        }, 3e4));
                    }),
                      (this.release = function() {
                        t && (clearInterval(t), (t = null));
                      });
                  }
                  e.exports =
                    (n =
                      navigator.userAgent ||
                      navigator.vendor ||
                      window.opera).match(/iPhone/i) || n.match(/iPod/i)
                      ? o
                      : a;
                },
                { './util.js': 68 }
              ],
              71: [
                function(t, e, i) {
                  var n = t('./util.js'),
                    r = t('./cardboard-vr-display.js'),
                    a = t('./mouse-keyboard-vr-display.js'),
                    o = t('./base.js').VRDisplay,
                    s = t('./base.js').VRFrameData,
                    c = t('./base.js').HMDVRDevice,
                    u = t('./base.js').PositionSensorVRDevice,
                    l = t('./display-wrappers.js').VRDisplayHMDDevice,
                    h = t('./display-wrappers.js')
                      .VRDisplayPositionSensorDevice,
                    d = t('../package.json').version;
                  function p() {
                    (this.displays = []),
                      (this.devices = []),
                      (this.devicesPopulated = !1),
                      (this.nativeWebVRAvailable = this.isWebVRAvailable()),
                      (this.nativeLegacyWebVRAvailable = this.isDeprecatedWebVRAvailable()),
                      (this.nativeGetVRDisplaysFunc = this.nativeWebVRAvailable
                        ? navigator.getVRDisplays
                        : null),
                      this.nativeLegacyWebVRAvailable ||
                        this.nativeWebVRAvailable ||
                        (this.enablePolyfill(),
                        window.WebVRConfig.ENABLE_DEPRECATED_API &&
                          this.enableDeprecatedPolyfill()),
                      f();
                  }
                  function f() {
                    'VRDisplay' in window &&
                      !('VRFrameData' in window) &&
                      ((window.VRFrameData = s),
                      'depthNear' in window.VRDisplay.prototype ||
                        (window.VRDisplay.prototype.depthNear = 0.01),
                      'depthFar' in window.VRDisplay.prototype ||
                        (window.VRDisplay.prototype.depthFar = 1e4),
                      (window.VRDisplay.prototype.getFrameData = function(t) {
                        return n.frameDataFromPose(t, this.getPose(), this);
                      }));
                  }
                  (p.prototype.isWebVRAvailable = function() {
                    return 'getVRDisplays' in navigator;
                  }),
                    (p.prototype.isDeprecatedWebVRAvailable = function() {
                      return (
                        'getVRDevices' in navigator ||
                        'mozGetVRDevices' in navigator
                      );
                    }),
                    (p.prototype.connectDisplay = function(t) {
                      t.fireVRDisplayConnect_(), this.displays.push(t);
                    }),
                    (p.prototype.populateDevices = function() {
                      if (!this.devicesPopulated) {
                        var t = null;
                        this.isCardboardCompatible() &&
                          ((t = new r()),
                          this.connectDisplay(t),
                          window.WebVRConfig.ENABLE_DEPRECATED_API &&
                            (this.devices.push(new l(t)),
                            this.devices.push(new h(t)))),
                          this.isMobile() ||
                            window.WebVRConfig
                              .MOUSE_KEYBOARD_CONTROLS_DISABLED ||
                            ((t = new a()),
                            this.connectDisplay(t),
                            window.WebVRConfig.ENABLE_DEPRECATED_API &&
                              (this.devices.push(new l(t)),
                              this.devices.push(new h(t)))),
                          (this.devicesPopulated = !0);
                      }
                    }),
                    (p.prototype.enablePolyfill = function() {
                      if (
                        ((navigator.getVRDisplays = this.getVRDisplays.bind(
                          this
                        )),
                        this.nativeWebVRAvailable && window.VRFrameData)
                      ) {
                        var t = window.VRFrameData,
                          e = new window.VRFrameData(),
                          i = window.VRDisplay.prototype.getFrameData;
                        (window.VRFrameData = s),
                          (window.VRDisplay.prototype.getFrameData = function(
                            r
                          ) {
                            r instanceof t
                              ? i.call(this, r)
                              : (i.call(this, e),
                                (r.pose = e.pose),
                                n.copyArray(
                                  e.leftProjectionMatrix,
                                  r.leftProjectionMatrix
                                ),
                                n.copyArray(
                                  e.rightProjectionMatrix,
                                  r.rightProjectionMatrix
                                ),
                                n.copyArray(e.leftViewMatrix, r.leftViewMatrix),
                                n.copyArray(
                                  e.rightViewMatrix,
                                  r.rightViewMatrix
                                ));
                          });
                      }
                      if (
                        ((window.VRDisplay = o),
                        navigator && void 0 === navigator.vrEnabled)
                      ) {
                        var r = this;
                        Object.defineProperty(navigator, 'vrEnabled', {
                          get: function() {
                            return (
                              r.isCardboardCompatible() &&
                              (r.isFullScreenAvailable() || n.isIOS())
                            );
                          }
                        });
                      }
                      'VRFrameData' in window || (window.VRFrameData = s);
                    }),
                    (p.prototype.enableDeprecatedPolyfill = function() {
                      (navigator.getVRDevices = this.getVRDevices.bind(this)),
                        (window.HMDVRDevice = c),
                        (window.PositionSensorVRDevice = u);
                    }),
                    (p.prototype.getVRDisplays = function() {
                      this.populateDevices();
                      var t,
                        e = this.displays;
                      if (!this.nativeWebVRAvailable) return Promise.resolve(e);
                      var i = this.nativeGetVRDisplaysFunc.call(navigator),
                        r = new Promise(function(e) {
                          t = setTimeout(function() {
                            e([]);
                          }, window.WebVRConfig.GET_VR_DISPLAYS_TIMEOUT);
                        });
                      return n.race([i, r]).then(function(i) {
                        return (
                          clearTimeout(t),
                          window.WebVRConfig.ALWAYS_APPEND_POLYFILL_DISPLAY
                            ? i.concat(e)
                            : i.length > 0 ? i : e
                        );
                      });
                    }),
                    (p.prototype.getVRDevices = function() {
                      var t = this;
                      return new Promise(function(e, i) {
                        try {
                          if (!t.devicesPopulated) {
                            if (t.nativeWebVRAvailable)
                              return navigator.getVRDisplays(function(i) {
                                for (var n = 0; n < i.length; ++n)
                                  t.devices.push(new l(i[n])),
                                    t.devices.push(new h(i[n]));
                                (t.devicesPopulated = !0), e(t.devices);
                              }, i);
                            if (t.nativeLegacyWebVRAvailable)
                              return (navigator.getVRDDevices ||
                                navigator.mozGetVRDevices)(function(i) {
                                for (var n = 0; n < i.length; ++n)
                                  i[n] instanceof c && t.devices.push(i[n]),
                                    i[n] instanceof u && t.devices.push(i[n]);
                                (t.devicesPopulated = !0), e(t.devices);
                              }, i);
                          }
                          t.populateDevices(), e(t.devices);
                        } catch (t) {
                          i(t);
                        }
                      });
                    }),
                    (p.prototype.NativeVRFrameData = window.VRFrameData),
                    (p.prototype.isMobile = function() {
                      return (
                        /Android/i.test(navigator.userAgent) ||
                        /iPhone|iPad|iPod/i.test(navigator.userAgent)
                      );
                    }),
                    (p.prototype.isCardboardCompatible = function() {
                      return (
                        this.isMobile() || window.WebVRConfig.FORCE_ENABLE_VR
                      );
                    }),
                    (p.prototype.isFullScreenAvailable = function() {
                      return (
                        document.fullscreenEnabled ||
                        document.mozFullScreenEnabled ||
                        document.webkitFullscreenEnabled ||
                        !1
                      );
                    }),
                    (p.InstallWebVRSpecShim = f),
                    (p.version = d),
                    (e.exports.WebVRPolyfill = p);
                },
                {
                  '../package.json': 47,
                  './base.js': 48,
                  './cardboard-vr-display.js': 51,
                  './display-wrappers.js': 54,
                  './mouse-keyboard-vr-display.js': 60,
                  './util.js': 68
                }
              ],
              72: [
                function(t, e, i) {
                  var n = /\n/,
                    r = '\n',
                    a = /\s/;
                  function o(t, e, i, n) {
                    var r = a15050.indexOf(e, i);
                    return -1 === r || r > n ? n : r;
                  }
                  function s(t) {
                    return a.test(t);
                  }
                  function c(t, e, i, n) {
                    return { start: e, end: e + Math.min(n, i - e) };
                  }
                  (e.exports = function(t, i) {
                    return e.exports
                      .lines(t, i)
                      .map(function(e) {
                        return t.substring(e.start, e.end);
                      })
                      .join('\n');
                  }),
                    (e.exports.lines = function(t, e) {
                      if (0 === (e = e || {}).width && 'nowrap' !== e.mode)
                        return [];
                      t = t || '';
                      var i =
                          'number' == typeof e.width
                            ? e.width
                            : Number.MAX_VALUE,
                        a = Math.max(0, e.start || 0),
                        u = 'number' == typeof e.end ? e.end : t.length,
                        l = e.mode,
                        h = e.measure || c;
                      return 'pre' === l
                        ? (function(t, e, i, r, a) {
                            for (
                              var o = [], s = i, c = i;
                              c < r && c < e.length;
                              c++
                            ) {
                              var u = e.charAt(c),
                                l = n.test(u);
                              if (l || c === r - 1) {
                                var h = l ? c : c + 1,
                                  d = t(e, s, h, a);
                                o.push(d), (s = c + 1);
                              }
                            }
                            return o;
                          })(h, t, a, u, i)
                        : (function(t, e, i, n, a, c) {
                            var u = [],
                              l = a;
                            'nowrap' === c && (l = Number.MAX_VALUE);
                            for (; i < n && i < e.length; ) {
                              for (
                                var h = o(e, r, i, n);
                                i < h && s(e.charAt(i));

                              )
                                i++;
                              var d = t(e, i, h, l),
                                p = i + (d.end - d.start),
                                f = p + r.length;
                              if (p < h) {
                                for (; p > i && !s(e.charAt(p)); ) p--;
                                if (p === i) f > i + r.length && f--, (p = f);
                                else
                                  for (
                                    f = p;
                                    p > i && s(e.charAt(p - r.length));

                                  )
                                    p--;
                              }
                              if (p >= i) {
                                var m = t(e, i, p, l);
                                u.push(m);
                              }
                              i = f;
                            }
                            return u;
                          })(h, t, a, u, i, l);
                    });
                },
                {}
              ],
              73: [
                function(t, e, i) {
                  'use strict';
                  var n = t('global/window'),
                    r = t('is-function'),
                    a = t('parse-headers'),
                    o = t('xtend');
                  function s(t, e, i) {
                    var n = t;
                    return (
                      r(e)
                        ? ((i = e), 'string' == typeof t && (n = { uri: t }))
                        : (n = o(e, { uri: t })),
                      (n.callback = i),
                      n
                    );
                  }
                  function c(t, e, i) {
                    return u((e = s(t, e, i)));
                  }
                  function u(t) {
                    if (void 0 === t.callback)
                      throw new Error('callback argument missing');
                    var e = !1,
                      i = function(i, n, r) {
                        e || ((e = !0), t.callback(i, n, r));
                      };
                    function n(t) {
                      return (
                        clearTimeout(l),
                        t instanceof Error ||
                          (t = new Error(
                            '' + (t || 'Unknown XMLHttpRequest Error')
                          )),
                        (t.statusCode = 0),
                        i(t, v)
                      );
                    }
                    function r() {
                      if (!s) {
                        var e;
                        clearTimeout(l),
                          (e =
                            t.useXDR && void 0 === u.status
                              ? 200
                              : 1223 === u.status ? 204 : u.status);
                        var n = v,
                          r = null;
                        return (
                          0 !== e
                            ? ((n = {
                                body: (function() {
                                  var t = void 0;
                                  if (
                                    ((t = u.response
                                      ? u.response
                                      : u.responseText ||
                                        (function(t) {
                                          if ('document' === t.responseType)
                                            return t.responseXML;
                                          var e =
                                            t.responseXML &&
                                            'parsererror' ===
                                              t.responseXML.documentElement
                                                .nodeName;
                                          return '' !== t.responseType || e
                                            ? null
                                            : t.responseXML;
                                        })(u)),
                                    g)
                                  )
                                    try {
                                      t = JSON.parse(t);
                                    } catch (t) {}
                                  return t;
                                })(),
                                statusCode: e,
                                method: d,
                                headers: {},
                                url: h,
                                rawRequest: u
                              }),
                              u.getAllResponseHeaders &&
                                (n.headers = a(u.getAllResponseHeaders())))
                            : (r = new Error('Internal XMLHttpRequest Error')),
                          i(r, n, n.body)
                        );
                      }
                    }
                    var o,
                      s,
                      u = t.xhr || null;
                    u ||
                      (u =
                        t.cors || t.useXDR
                          ? new c.XDomainRequest()
                          : new c.XMLHttpRequest());
                    var l,
                      h = (u.url = t.uri || t.url),
                      d = (u.method = t.method || 'GET'),
                      p = t.body || t.data,
                      f = (u.headers = t.headers || {}),
                      m = !!t.sync,
                      g = !1,
                      v = {
                        body: void 0,
                        headers: {},
                        statusCode: 0,
                        method: d,
                        url: h,
                        rawRequest: u
                      };
                    if (
                      ('json' in t &&
                        !1 !== t.json &&
                        ((g = !0),
                        f.accept || f.Accept || (f.Accept = 'application/json'),
                        'GET' !== d &&
                          'HEAD' !== d &&
                          (f['content-type'] ||
                            f['Content-Type'] ||
                            (f['Content-Type'] = 'application/json'),
                          (p = JSON.stringify(!0 === t.json ? p : t.json)))),
                      (u.onreadystatechange = function() {
                        4 === u.readyState && setTimeout(r, 0);
                      }),
                      (u.onload = r),
                      (u.onerror = n),
                      (u.onprogress = function() {}),
                      (u.onabort = function() {
                        s = !0;
                      }),
                      (u.ontimeout = n),
                      u.open(d, h, !m, t.username, t.password),
                      m || (u.withCredentials = !!t.withCredentials),
                      !m &&
                        t.timeout > 0 &&
                        (l = setTimeout(function() {
                          if (!s) {
                            (s = !0), u.abort('timeout');
                            var t = new Error('XMLHttpRequest timeout');
                            (t.code = 'ETIMEDOUT'), n(t);
                          }
                        }, t.timeout)),
                      u.setRequestHeader)
                    )
                      for (o in f)
                        f.hasOwnProperty(o) && u.setRequestHeader(o, f[o]);
                    else if (
                      t.headers &&
                      !(function(t) {
                        for (var e in t) if (t.hasOwnProperty(e)) return !1;
                        return !0;
                      })(t.headers)
                    )
                      throw new Error(
                        'Headers cannot be set on an XDomainRequest object'
                      );
                    return (
                      'responseType' in t && (u.responseType = t.responseType),
                      'beforeSend' in t &&
                        'function' == typeof t.beforeSend &&
                        t.beforeSend(u),
                      u.send(p || null),
                      u
                    );
                  }
                  (e.exports = c),
                    (c.XMLHttpRequest = n.XMLHttpRequest || function() {}),
                    (c.XDomainRequest =
                      'withCredentials' in new c.XMLHttpRequest()
                        ? c.XMLHttpRequest
                        : n.XDomainRequest),
                    (function(t, e) {
                      for (var i = 0; i < t.length; i++) e(t[i]);
                    })(
                      ['get', 'put', 'post', 'patch', 'head', 'delete'],
                      function(t) {
                        c['delete' === t ? 'del' : t] = function(e, i, n) {
                          return (
                            ((i = s(e, i, n)).method = t.toUpperCase()), u(i)
                          );
                        };
                      }
                    );
                },
                {
                  'global/window': 17,
                  'is-function': 21,
                  'parse-headers': 31,
                  xtend: 75
                }
              ],
              74: [
                function(t, e, i) {
                  e.exports =
                    void 0 !== self.DOMParser
                      ? function(t) {
                          return new self.DOMParser().parseFromString(
                            t,
                            'application/xml'
                          );
                        }
                      : void 0 !== self.ActiveXObject &&
                        new self.ActiveXObject('Microsoft.XMLDOM')
                        ? function(t) {
                            var e = new self.ActiveXObject('Microsoft.XMLDOM');
                            return (e.async = 'false'), e.loadXML(t), e;
                          }
                        : function(t) {
                            var e = document.createElement('div');
                            return (e.innerHTML = t), e;
                          };
                },
                {}
              ],
              75: [
                function(t, e, i) {
                  e.exports = function() {
                    for (var t = {}, e = 0; e < arguments.length; e++) {
                      var i = arguments[e];
                      for (var r in i) n.call(i, r) && (t[r] = i[r]);
                    }
                    return t;
                  };
                  var n = Object.prototype.hasOwnProperty;
                },
                {}
              ],
              76: [
                function(t, e, i) {
                  e.exports = {
                    name: 'aframe',
                    version: '0.7.1',
                    description:
                      'A web framework for building virtual reality experiences.',
                    homepage: 'https://aframe.io/',
                    main: 'dist/aframe-master.js',
                    scripts: {
                      browserify:
                        "browserify src/index.js -s 'AFRAME' -p browserify-derequire",
                      build:
                        'shx mkdir -p build/ && npm run browserify -- --debug -t [envify --INSPECTOR_VERSION dev] -o build/aframe.js',
                      codecov: 'codecov',
                      dev:
                        'npm run build && cross-env INSPECTOR_VERSION=dev node ./scripts/budo -t envify',
                      dist:
                        'node scripts/updateVersionLog.js && npm run dist:min && npm run dist:max',
                      'dist:max':
                        'npm run browserify -s -- --debug | exorcist dist/aframe-master.js.map > dist/aframe-master.js',
                      'dist:min':
                        'npm run browserify -s -- --debug -p [minifyify --map aframe-master.min.js.map --output dist/aframe-master.min.js.map] -o dist/aframe-master.min.js',
                      docs: 'markserv --dir docs --port 9001',
                      preghpages: 'node ./scripts/preghpages.js',
                      ghpages: 'ghpages -p gh-pages/',
                      lint: 'semistandard -v | snazzy',
                      'lint:fix': 'semistandard --fix',
                      precommit: 'npm run lint',
                      prerelease: 'node scripts/release.js 0.6.1 0.7.0',
                      start: 'npm run dev',
                      test: 'karma start ./tests/karma.conf.js',
                      'test:docs': 'node scripts/docsLint.js',
                      'test:firefox': 'npm test -- --browsers Firefox',
                      'test:chrome': 'npm test -- --browsers Chrome',
                      'test:node': 'mocha --ui tdd tests/node'
                    },
                    repository: 'aframevr/aframe',
                    license: 'MIT',
                    dependencies: {
                      '@tweenjs/tween.js': '^16.8.0',
                      'browserify-css': '^0.8.2',
                      debug: 'ngokevin/debug#noTimestamp',
                      'deep-assign': '^2.0.0',
                      'document-register-element':
                        'dmarcos/document-register-element#8ccc532b7',
                      envify: '^3.4.1',
                      'load-bmfont': '^1.2.3',
                      'object-assign': '^4.0.1',
                      present: '0.0.6',
                      'promise-polyfill': '^3.1.0',
                      'style-attr': '^1.0.2',
                      three: '^0.87.0',
                      'three-bmfont-text': '^2.1.0',
                      'webvr-polyfill': '^0.9.36'
                    },
                    devDependencies: {
                      browserify: '^13.1.0',
                      'browserify-derequire': '^0.9.4',
                      'browserify-istanbul': '^2.0.0',
                      budo: '^9.2.0',
                      chai: '^3.5.0',
                      'chai-shallow-deep-equal': '^1.4.0',
                      chalk: '^1.1.3',
                      codecov: '^1.0.1',
                      'cross-env': '^5.0.1',
                      exorcist: '^0.4.0',
                      ghpages: '0.0.8',
                      'git-rev': '^0.2.1',
                      glob: '^7.1.1',
                      husky: '^0.11.7',
                      istanbul: '^0.4.5',
                      jsdom: '^9.11.0',
                      karma: '1.4.1',
                      'karma-browserify': '^5.1.0',
                      'karma-chai-shallow-deep-equal': '0.0.4',
                      'karma-chrome-launcher': '^2.0.0',
                      'karma-coverage': '^1.1.1',
                      'karma-env-preprocessor': '^0.1.1',
                      'karma-firefox-launcher': '^1.0.0',
                      'karma-mocha': '^1.1.1',
                      'karma-mocha-reporter': '^2.1.0',
                      'karma-sinon-chai': '1.2.4',
                      lolex: '^1.5.1',
                      markserv: '0.0.20',
                      minifyify: '^7.3.3',
                      mocha: '^3.0.2',
                      'mozilla-download': '^1.1.1',
                      'replace-in-file': '^2.5.3',
                      semistandard: '^9.0.0',
                      shelljs: '^0.7.7',
                      shx: '^0.2.2',
                      sinon: '^1.17.5',
                      'sinon-chai': '2.8.0',
                      snazzy: '^5.0.0',
                      'too-wordy': 'ngokevin/too-wordy',
                      uglifyjs: '^2.4.10',
                      'write-good': '^0.9.1'
                    },
                    link: !0,
                    browserify: { transform: ['browserify-css', 'envify'] },
                    semistandard: {
                      ignore: [
                        'build/**',
                        'dist/**',
                        'examples/**/shaders/*.js',
                        '**/vendor/**'
                      ]
                    },
                    keywords: [
                      '3d',
                      'aframe',
                      'cardboard',
                      'components',
                      'oculus',
                      'three',
                      'three.js',
                      'rift',
                      'vive',
                      'vr',
                      'web-components',
                      'webvr'
                    ],
                    'browserify-css': { minify: !0 },
                    engines: { node: '>= 4.6.0', npm: '^2.15.9' }
                  };
                },
                {}
              ],
              77: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../lib/three'),
                    a = t('../utils/'),
                    o = a.bind,
                    s = a.device.checkHasPositionalTracking;
                  e.exports.Component = n('camera', {
                    schema: {
                      active: { default: !0 },
                      far: { default: 1e4 },
                      fov: { default: 80, min: 0 },
                      near: { default: 0.005, min: 0 },
                      userHeight: { default: 0, min: 0 },
                      zoom: { default: 1, min: 0 }
                    },
                    init: function() {
                      var t,
                        e = this.el,
                        i = e.sceneEl;
                      (this.savedPose = null),
                        (t = this.camera = new r.PerspectiveCamera()),
                        e.setObject3D('camera', t),
                        (this.onEnterVR = o(this.onEnterVR, this)),
                        (this.onExitVR = o(this.onExitVR, this)),
                        i.addEventListener('enter-vr', this.onEnterVR),
                        i.addEventListener('exit-vr', this.onExitVR);
                    },
                    update: function(t) {
                      var e = this.el,
                        i = this.data,
                        n = this.camera,
                        r = this.system;
                      this.addHeightOffset(t.userHeight),
                        (n.aspect =
                          i.aspect || window.innerWidth / window.innerHeight),
                        (n.far = i.far),
                        (n.fov = i.fov),
                        (n.near = i.near),
                        (n.zoom = i.zoom),
                        n.updateProjectionMatrix(),
                        (t && t.active === i.active) ||
                          (i.active && r.activeCameraEl !== e
                            ? r.setActiveCamera(e)
                            : i.active ||
                              r.activeCameraEl !== e ||
                              r.disableActiveCamera());
                    },
                    remove: function() {
                      var t = this.el.sceneEl;
                      this.el.removeObject3D('camera'),
                        t.removeEventListener('enter-vr', this.onEnterVR),
                        t.removeEventListener('exit-vr', this.onExitVR);
                    },
                    onEnterVR: function() {
                      this.saveCameraPose(), this.removeHeightOffset();
                    },
                    onExitVR: function() {
                      this.restoreCameraPose();
                    },
                    addHeightOffset: function(t) {
                      var e,
                        i = this.el,
                        n = this.data.userHeight;
                      (t = t || 0),
                        (e = i.getAttribute('position') || {
                          x: 0,
                          y: 0,
                          z: 0
                        }),
                        i.setAttribute('position', {
                          x: e.x,
                          y: e.y - t + n,
                          z: e.z
                        });
                    },
                    removeHeightOffset: function() {
                      var t,
                        e,
                        i = this.el,
                        n = this.data.userHeight;
                      (e =
                        void 0 !== this.hasPositionalTracking
                          ? this.hasPositionalTracking
                          : s()),
                        n &&
                          e &&
                          ((t = i.getAttribute('position') || {
                            x: 0,
                            y: 0,
                            z: 0
                          }),
                          i.setAttribute('position', {
                            x: t.x,
                            y: t.y - n,
                            z: t.z
                          }));
                    },
                    saveCameraPose: function() {
                      var t = this.el,
                        e =
                          void 0 !== this.hasPositionalTracking
                            ? this.hasPositionalTracking
                            : s();
                      !this.savedPose &&
                        e &&
                        (this.savedPose = {
                          position: t.getAttribute('position'),
                          rotation: t.getAttribute('rotation')
                        });
                    },
                    restoreCameraPose: function() {
                      var t = this.el,
                        e = this.savedPose,
                        i =
                          void 0 !== this.hasPositionalTracking
                            ? this.hasPositionalTracking
                            : s();
                      e &&
                        i &&
                        (t.setAttribute('position', e.position),
                        t.setAttribute('rotation', e.rotation),
                        (this.savedPose = null));
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/': 195
                }
              ],
              78: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../lib/three');
                  e.exports.Component = n('collada-model', {
                    schema: { type: 'asset' },
                    init: function() {
                      (this.model = null),
                        (this.loader = new r.ColladaLoader()),
                        (this.loader.options.convertUpAxis = !0);
                    },
                    update: function() {
                      var t = this,
                        e = this.el,
                        i = this.data;
                      i &&
                        (this.remove(),
                        this.loader.load(i, function(i) {
                          (t.model = i.scene),
                            e.setObject3D('mesh', t.model),
                            e.emit('model-loaded', {
                              format: 'collada',
                              model: t.model
                            });
                        }));
                    },
                    remove: function() {
                      this.model && this.el.removeObject3D('mesh');
                    }
                  });
                },
                { '../core/component': 125, '../lib/three': 173 }
              ],
              79: [
                function(t, e, i) {
                  var n,
                    r,
                    a,
                    o,
                    s = t('../core/component').registerComponent,
                    c = t('../utils/'),
                    u = c.bind,
                    l = 'click',
                    h = 'fusing',
                    d = 'mouseenter',
                    p = 'mousedown',
                    f = 'mouseleave',
                    m = 'mouseup',
                    g = 'cursor-fusing',
                    v = 'cursor-hovering',
                    y = 'cursor-hovered',
                    M = {
                      DOWN: ['mousedown', 'touchstart'],
                      UP: ['mouseup', 'touchend']
                    };
                  e.exports.Component = s('cursor', {
                    dependencies: ['raycaster'],
                    schema: {
                      downEvents: { default: [] },
                      fuse: { default: c.device.isMobile() },
                      fuseTimeout: { default: 1500, min: 0 },
                      upEvents: { default: [] },
                      rayOrigin: {
                        default: 'entity',
                        oneOf: ['mouse', 'entity']
                      }
                    },
                    init: function() {
                      var t = this;
                      (this.fuseTimeout = void 0),
                        (this.cursorDownEl = null),
                        (this.intersection = null),
                        (this.intersectedEl = null),
                        (this.canvasBounds = document.body.getBoundingClientRect()),
                        (this.updateCanvasBounds = c.debounce(function() {
                          t.canvasBounds = t.el.sceneEl.canvas.getBoundingClientRect();
                        }, 200)),
                        (this.onCursorDown = u(this.onCursorDown, this)),
                        (this.onCursorUp = u(this.onCursorUp, this)),
                        (this.onIntersection = u(this.onIntersection, this)),
                        (this.onIntersectionCleared = u(
                          this.onIntersectionCleared,
                          this
                        )),
                        (this.onMouseMove = u(this.onMouseMove, this));
                    },
                    update: function(t) {
                      this.data.rayOrigin !== t.rayOrigin &&
                        this.updateMouseEventListeners();
                    },
                    play: function() {
                      this.addEventListeners();
                    },
                    pause: function() {
                      this.removeEventListeners();
                    },
                    remove: function() {
                      var t = this.el;
                      t.removeState(v),
                        t.removeState(g),
                        clearTimeout(this.fuseTimeout),
                        this.intersectedEl && this.intersectedEl.removeState(y),
                        this.removeEventListeners();
                    },
                    addEventListeners: function() {
                      var t,
                        e = this.data,
                        i = this.el,
                        n = this;
                      function r() {
                        (t = i.sceneEl.canvas),
                          M.DOWN.forEach(function(e) {
                            t.addEventListener(e, n.onCursorDown);
                          }),
                          M.UP.forEach(function(e) {
                            t.addEventListener(e, n.onCursorUp);
                          });
                      }
                      (t = i.sceneEl.canvas)
                        ? r()
                        : i.sceneEl.addEventListener('render-target-loaded', r),
                        e.downEvents.forEach(function(t) {
                          i.addEventListener(t, n.onCursorDown);
                        }),
                        e.upEvents.forEach(function(t) {
                          i.addEventListener(t, n.onCursorUp);
                        }),
                        i.addEventListener(
                          'raycaster-intersection',
                          this.onIntersection
                        ),
                        i.addEventListener(
                          'raycaster-intersection-cleared',
                          this.onIntersectionCleared
                        ),
                        window.addEventListener(
                          'resize',
                          this.updateCanvasBounds
                        );
                    },
                    removeEventListeners: function() {
                      var t,
                        e = this.data,
                        i = this.el,
                        n = this;
                      (t = i.sceneEl.canvas) &&
                        (M.DOWN.forEach(function(e) {
                          t.removeEventListener(e, n.onCursorDown);
                        }),
                        M.UP.forEach(function(e) {
                          t.removeEventListener(e, n.onCursorUp);
                        })),
                        e.downEvents.forEach(function(t) {
                          i.removeEventListener(t, n.onCursorDown);
                        }),
                        e.upEvents.forEach(function(t) {
                          i.removeEventListener(t, n.onCursorUp);
                        }),
                        i.removeEventListener(
                          'raycaster-intersection',
                          this.onIntersection
                        ),
                        i.removeEventListener(
                          'raycaster-intersection-cleared',
                          this.onIntersectionCleared
                        ),
                        window.removeEventListener(
                          'mousemove',
                          this.onMouseMove
                        ),
                        window.removeEventListener(
                          'resize',
                          this.updateCanvasBounds
                        );
                    },
                    updateMouseEventListeners: function() {
                      var t = this.el;
                      window.removeEventListener('mousemove', this.onMouseMove),
                        t.setAttribute('raycaster', 'useWorldCoordinates', !1),
                        'mouse' === this.data.rayOrigin &&
                          (window.addEventListener(
                            'mousemove',
                            this.onMouseMove,
                            !1
                          ),
                          t.setAttribute(
                            'raycaster',
                            'useWorldCoordinates',
                            !0
                          ),
                          this.updateCanvasBounds());
                    },
                    onMouseMove: ((n = new THREE.Vector2()),
                    (r = new THREE.Vector3()),
                    (a = new THREE.Vector3()),
                    (o = { origin: r, direction: a }),
                    function(t) {
                      var e = this.el.sceneEl.camera;
                      e.parent.updateMatrixWorld(), e.updateMatrixWorld();
                      var i = this.canvasBounds,
                        s = t.clientX - i.left,
                        c = t.clientY - i.top;
                      (n.x = s / i.width * 2 - 1),
                        (n.y = -c / i.height * 2 + 1),
                        r.setFromMatrixPosition(e.matrixWorld),
                        a
                          .set(n.x, n.y, 0.5)
                          .unproject(e)
                          .sub(r)
                          .normalize(),
                        this.el.setAttribute('raycaster', o);
                    }),
                    onCursorDown: function(t) {
                      this.twoWayEmit(p),
                        (this.cursorDownEl = this.intersectedEl);
                    },
                    onCursorUp: function(t) {
                      this.twoWayEmit(m),
                        this.cursorDownEl &&
                          this.cursorDownEl !== this.intersectedEl &&
                          this.cursorDownEl.emit(m, {
                            cursorEl: this.el,
                            intersection: null
                          }),
                        !this.data.fuse &&
                          this.intersectedEl &&
                          this.cursorDownEl === this.intersectedEl &&
                          this.twoWayEmit(l),
                        (this.cursorDownEl = null);
                    },
                    onIntersection: function(t) {
                      var e,
                        i,
                        n,
                        r = this,
                        a = this.el,
                        o = this.data;
                      (e = t.detail.els[0] === a ? 1 : 0),
                        (n = t.detail.intersections[e]),
                        (i = t.detail.els[e]) &&
                          (this.intersectedEl !== i
                            ? (this.intersectedEl &&
                                this.clearCurrentIntersection(),
                              (this.intersection = n),
                              (this.intersectedEl = i),
                              a.addState(v),
                              i.addState(y),
                              r.twoWayEmit(d),
                              0 !== o.fuseTimeout &&
                                o.fuse &&
                                (a.addState(g),
                                this.twoWayEmit(h),
                                (this.fuseTimeout = setTimeout(function() {
                                  a.removeState(g), r.twoWayEmit(l);
                                }, o.fuseTimeout))))
                            : (this.intersection = n));
                    },
                    onIntersectionCleared: function(t) {
                      var e = this.el,
                        i = t.detail.el;
                      e !== i &&
                        i === this.intersectedEl &&
                        this.clearCurrentIntersection();
                    },
                    clearCurrentIntersection: function() {
                      var t = this.el;
                      this.intersectedEl.removeState(y),
                        t.removeState(v),
                        t.removeState(g),
                        this.twoWayEmit(f),
                        (this.intersection = null),
                        (this.intersectedEl = null),
                        clearTimeout(this.fuseTimeout);
                    },
                    twoWayEmit: function(t) {
                      var e = this.el,
                        i = this.intersectedEl,
                        n = this.intersection;
                      e.emit(t, { intersectedEl: i, intersection: n }),
                        i && i.emit(t, { cursorEl: e, intersection: n });
                    }
                  });
                },
                { '../core/component': 125, '../utils/': 195 }
              ],
              80: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../utils/bind'),
                    a = t('../utils/tracked-controls')
                      .checkControllerPresentAndSetup,
                    o = t('../utils/tracked-controls').emitIfAxesChanged,
                    s = 'Daydream Controller';
                  e.exports.Component = n('daydream-controls', {
                    schema: {
                      hand: { default: '' },
                      buttonColor: { type: 'color', default: '#000000' },
                      buttonTouchedColor: { type: 'color', default: '#777777' },
                      buttonHighlightColor: {
                        type: 'color',
                        default: '#FFFFFF'
                      },
                      model: { default: !0 },
                      rotationOffset: { default: 0 },
                      armModel: { default: !0 }
                    },
                    mapping: {
                      axes: { trackpad: [0, 1] },
                      buttons: ['trackpad', 'menu', 'system']
                    },
                    bindMethods: function() {
                      (this.onModelLoaded = r(this.onModelLoaded, this)),
                        (this.onControllersUpdate = r(
                          this.onControllersUpdate,
                          this
                        )),
                        (this.checkIfControllerPresent = r(
                          this.checkIfControllerPresent,
                          this
                        )),
                        (this.removeControllersUpdateListener = r(
                          this.removeControllersUpdateListener,
                          this
                        )),
                        (this.onAxisMoved = r(this.onAxisMoved, this)),
                        (this.onGamepadConnectionEvent = r(
                          this.onGamepadConnectionEvent,
                          this
                        ));
                    },
                    init: function() {
                      var t = this;
                      (this.animationActive = 'pointing'),
                        (this.onButtonChanged = r(this.onButtonChanged, this)),
                        (this.onButtonDown = function(e) {
                          t.onButtonEvent(e.detail.id, 'down');
                        }),
                        (this.onButtonUp = function(e) {
                          t.onButtonEvent(e.detail.id, 'up');
                        }),
                        (this.onButtonTouchStart = function(e) {
                          t.onButtonEvent(e.detail.id, 'touchstart');
                        }),
                        (this.onButtonTouchEnd = function(e) {
                          t.onButtonEvent(e.detail.id, 'touchend');
                        }),
                        (this.onAxisMoved = r(this.onAxisMoved, this)),
                        (this.controllerPresent = !1),
                        (this.everGotGamepadEvent = !1),
                        (this.lastControllerCheck = 0),
                        this.bindMethods(),
                        (this.checkControllerPresentAndSetup = a),
                        (this.emitIfAxesChanged = o);
                    },
                    addEventListeners: function() {
                      var t = this.el;
                      t.addEventListener('buttonchanged', this.onButtonChanged),
                        t.addEventListener('buttondown', this.onButtonDown),
                        t.addEventListener('buttonup', this.onButtonUp),
                        t.addEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.addEventListener('touchend', this.onButtonTouchEnd),
                        t.addEventListener('model-loaded', this.onModelLoaded),
                        t.addEventListener('axismove', this.onAxisMoved),
                        (this.controllerEventsActive = !0);
                    },
                    removeEventListeners: function() {
                      var t = this.el;
                      t.removeEventListener(
                        'buttonchanged',
                        this.onButtonChanged
                      ),
                        t.removeEventListener('buttondown', this.onButtonDown),
                        t.removeEventListener('buttonup', this.onButtonUp),
                        t.removeEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.removeEventListener(
                          'touchend',
                          this.onButtonTouchEnd
                        ),
                        t.removeEventListener(
                          'model-loaded',
                          this.onModelLoaded
                        ),
                        t.removeEventListener('axismove', this.onAxisMoved),
                        (this.controllerEventsActive = !1);
                    },
                    checkIfControllerPresent: function() {
                      this.checkControllerPresentAndSetup(this, s, {
                        hand: this.data.hand
                      });
                    },
                    onGamepadConnectionEvent: function(t) {
                      (this.everGotGamepadEvent = !0),
                        this.checkIfControllerPresent();
                    },
                    play: function() {
                      this.checkIfControllerPresent(),
                        this.addControllersUpdateListener(),
                        window.addEventListener(
                          'gamepadconnected',
                          this.onGamepadConnectionEvent,
                          !1
                        ),
                        window.addEventListener(
                          'gamepaddisconnected',
                          this.onGamepadConnectionEvent,
                          !1
                        );
                    },
                    pause: function() {
                      this.removeEventListeners(),
                        this.removeControllersUpdateListener(),
                        window.removeEventListener(
                          'gamepadconnected',
                          this.onGamepadConnectionEvent,
                          !1
                        ),
                        window.removeEventListener(
                          'gamepaddisconnected',
                          this.onGamepadConnectionEvent,
                          !1
                        );
                    },
                    injectTrackedControls: function() {
                      var t = this.el,
                        e = this.data;
                      t.setAttribute('tracked-controls', {
                        armModel: e.armModel,
                        hand: e.hand,
                        idPrefix: s,
                        rotationOffset: e.rotationOffset
                      }),
                        this.data.model &&
                          this.el.setAttribute('obj-model', {
                            obj:
                              'https://cdn.aframe.io/controllers/google/vr_controller_daydream.obj',
                            mtl:
                              'https://cdn.aframe.io/controllers/google/vr_controller_daydream.mtl'
                          });
                    },
                    addControllersUpdateListener: function() {
                      this.el.sceneEl.addEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    removeControllersUpdateListener: function() {
                      this.el.sceneEl.removeEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    onControllersUpdate: function() {
                      this.everGotGamepadEvent ||
                        this.checkIfControllerPresent();
                    },
                    onModelLoaded: function(t) {
                      var e,
                        i = t.detail.model;
                      this.data.model &&
                        (((e = this.buttonMeshes = {}).menu = i.getObjectByName(
                          'AppButton_AppButton_Cylinder.004'
                        )),
                        (e.system = i.getObjectByName(
                          'HomeButton_HomeButton_Cylinder.005'
                        )),
                        (e.trackpad = i.getObjectByName(
                          'TouchPad_TouchPad_Cylinder.003'
                        )),
                        i.position.set(0, 0, -0.04));
                    },
                    onAxisMoved: function(t) {
                      this.emitIfAxesChanged(this, this.mapping.axes, t);
                    },
                    onButtonChanged: function(t) {
                      var e = this.mapping.buttons[t.detail.id];
                      e && this.el.emit(e + 'changed', t.detail.state);
                    },
                    onButtonEvent: function(t, e) {
                      var i,
                        n = this.mapping.buttons[t];
                      if (Array.isArray(n))
                        for (i = 0; i < n.length; i++) this.el.emit(n[i] + e);
                      else this.el.emit(n + e);
                      this.updateModel(n, e);
                    },
                    updateModel: function(t, e) {
                      var i;
                      if (this.data.model)
                        if (Array.isArray(t))
                          for (i = 0; i < t.length; i++)
                            this.updateButtonModel(t[i], e);
                        else this.updateButtonModel(t, e);
                    },
                    updateButtonModel: function(t, e) {
                      var i = this.buttonMeshes;
                      if (i && i[t]) {
                        var n;
                        switch (e) {
                          case 'down':
                            n = this.data.buttonHighlightColor;
                            break;
                          case 'touchstart':
                            n = this.data.buttonTouchedColor;
                            break;
                          default:
                            n = this.data.buttonColor;
                        }
                        i[t].material.color.set(n);
                      }
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../utils/bind': 189,
                  '../utils/tracked-controls': 199
                }
              ],
              81: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../utils/bind'),
                    a = t('../utils/tracked-controls')
                      .checkControllerPresentAndSetup,
                    o = t('../utils/tracked-controls').emitIfAxesChanged;
                  e.exports.Component = n('gearvr-controls', {
                    schema: {
                      hand: { default: '' },
                      buttonColor: { type: 'color', default: '#000000' },
                      buttonTouchedColor: { type: 'color', default: '#777777' },
                      buttonHighlightColor: {
                        type: 'color',
                        default: '#FFFFFF'
                      },
                      model: { default: !0 },
                      rotationOffset: { default: 0 },
                      armModel: { default: !0 }
                    },
                    mapping: {
                      axes: { trackpad: [0, 1] },
                      buttons: ['trackpad', 'trigger']
                    },
                    bindMethods: function() {
                      (this.onModelLoaded = r(this.onModelLoaded, this)),
                        (this.onControllersUpdate = r(
                          this.onControllersUpdate,
                          this
                        )),
                        (this.checkIfControllerPresent = r(
                          this.checkIfControllerPresent,
                          this
                        )),
                        (this.removeControllersUpdateListener = r(
                          this.removeControllersUpdateListener,
                          this
                        )),
                        (this.onAxisMoved = r(this.onAxisMoved, this));
                    },
                    init: function() {
                      var t = this;
                      (this.animationActive = 'pointing'),
                        (this.onButtonChanged = r(this.onButtonChanged, this)),
                        (this.onButtonDown = function(e) {
                          t.onButtonEvent(e.detail.id, 'down');
                        }),
                        (this.onButtonUp = function(e) {
                          t.onButtonEvent(e.detail.id, 'up');
                        }),
                        (this.onButtonTouchStart = function(e) {
                          t.onButtonEvent(e.detail.id, 'touchstart');
                        }),
                        (this.onButtonTouchEnd = function(e) {
                          t.onButtonEvent(e.detail.id, 'touchend');
                        }),
                        (this.onAxisMoved = r(this.onAxisMoved, this)),
                        (this.controllerPresent = !1),
                        (this.everGotGamepadEvent = !1),
                        (this.lastControllerCheck = 0),
                        this.bindMethods(),
                        (this.checkControllerPresentAndSetup = a),
                        (this.emitIfAxesChanged = o);
                    },
                    addEventListeners: function() {
                      var t = this.el;
                      t.addEventListener('buttonchanged', this.onButtonChanged),
                        t.addEventListener('buttondown', this.onButtonDown),
                        t.addEventListener('buttonup', this.onButtonUp),
                        t.addEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.addEventListener('touchend', this.onButtonTouchEnd),
                        t.addEventListener('model-loaded', this.onModelLoaded),
                        t.addEventListener('axismove', this.onAxisMoved),
                        (this.controllerEventsActive = !0),
                        this.addControllersUpdateListener();
                    },
                    removeEventListeners: function() {
                      var t = this.el;
                      t.removeEventListener(
                        'buttonchanged',
                        this.onButtonChanged
                      ),
                        t.removeEventListener('buttondown', this.onButtonDown),
                        t.removeEventListener('buttonup', this.onButtonUp),
                        t.removeEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.removeEventListener(
                          'touchend',
                          this.onButtonTouchEnd
                        ),
                        t.removeEventListener(
                          'model-loaded',
                          this.onModelLoaded
                        ),
                        t.removeEventListener('axismove', this.onAxisMoved),
                        (this.controllerEventsActive = !1),
                        this.removeControllersUpdateListener();
                    },
                    checkIfControllerPresent: function() {
                      this.checkControllerPresentAndSetup(
                        this,
                        'Gear VR',
                        this.data.hand ? { hand: this.data.hand } : {}
                      );
                    },
                    play: function() {
                      this.checkIfControllerPresent(),
                        this.addControllersUpdateListener();
                    },
                    pause: function() {
                      this.removeEventListeners(),
                        this.removeControllersUpdateListener();
                    },
                    injectTrackedControls: function() {
                      var t = this.el,
                        e = this.data;
                      t.setAttribute('tracked-controls', {
                        armModel: e.armModel,
                        idPrefix: 'Gear VR',
                        rotationOffset: e.rotationOffset
                      }),
                        this.data.model &&
                          this.el.setAttribute('obj-model', {
                            obj:
                              'https://cdn.aframe.io/controllers/samsung/gear_vr_controller.obj',
                            mtl:
                              'https://cdn.aframe.io/controllers/samsung/gear_vr_controller.mtl'
                          });
                    },
                    addControllersUpdateListener: function() {
                      this.el.sceneEl.addEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    removeControllersUpdateListener: function() {
                      this.el.sceneEl.removeEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    onControllersUpdate: function() {
                      this.checkIfControllerPresent();
                    },
                    onModelLoaded: function(t) {
                      var e,
                        i = t.detail.model;
                      this.data.model &&
                        (((e = this.buttonMeshes = {}).trigger = i.getObjectByName(
                          'Trigger'
                        )),
                        (e.trackpad = i.getObjectByName('Touchpad')));
                    },
                    onButtonChanged: function(t) {
                      var e = this.mapping.buttons[t.detail.id];
                      e && this.el.emit(e + 'changed', t.detail.state);
                    },
                    onButtonEvent: function(t, e) {
                      var i,
                        n = this.mapping.buttons[t];
                      if (Array.isArray(n))
                        for (i = 0; i < n.length; i++) this.el.emit(n[i] + e);
                      else this.el.emit(n + e);
                      this.updateModel(n, e);
                    },
                    onAxisMoved: function(t) {
                      this.emitIfAxesChanged(this, this.mapping.axes, t);
                    },
                    updateModel: function(t, e) {
                      var i;
                      if (this.data.model)
                        if (Array.isArray(t))
                          for (i = 0; i < t.length; i++)
                            this.updateButtonModel(t[i], e);
                        else this.updateButtonModel(t, e);
                    },
                    updateButtonModel: function(t, e) {
                      var i = this.buttonMeshes;
                      if (i && i[t]) {
                        var n;
                        switch (e) {
                          case 'down':
                            n = this.data.buttonHighlightColor;
                            break;
                          case 'touchstart':
                            n = this.data.buttonTouchedColor;
                            break;
                          default:
                            n = this.data.buttonColor;
                        }
                        i[t].material.color.set(n);
                      }
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../utils/bind': 189,
                  '../utils/tracked-controls': 199
                }
              ],
              82: [
                function(t, e, i) {
                  var n = t('../utils/debug'),
                    r = t('../core/geometry').geometries,
                    a = t('../core/geometry').geometryNames,
                    o = t('../core/component').registerComponent,
                    s = t('../lib/three'),
                    c = new s.Geometry(),
                    u = n('components:geometry:warn');
                  e.exports.Component = o('geometry', {
                    schema: {
                      buffer: { default: !0 },
                      mergeTo: { type: 'selector' },
                      primitive: { default: 'box', oneOf: a },
                      skipCache: { default: !1 }
                    },
                    init: function() {
                      this.geometry = null;
                    },
                    update: function(t) {
                      var e = this.data,
                        i = this.el.getOrCreateObject3D('mesh', s.Mesh),
                        n = this.system;
                      this.geometry &&
                        (n.unuseGeometry(t), (this.geometry = null)),
                        (this.geometry = i.geometry = n.getOrCreateGeometry(e)),
                        e.mergeTo && this.mergeTo(e.mergeTo);
                    },
                    mergeTo: function(t) {
                      var e,
                        i = this.el,
                        n = i.getObject3D('mesh');
                      if (t && t.isEntity)
                        if (t !== i) {
                          if (!(e = t.getObject3D('mesh')))
                            return (
                              (e = t.getOrCreateObject3D('mesh', s.Mesh)),
                              void t.setAttribute(
                                'material',
                                i.getAttribute('material')
                              )
                            );
                          e.geometry instanceof s.Geometry != !1 &&
                          n.geometry instanceof s.Geometry != !1
                            ? !1 !== this.data.skipCache
                              ? (n.parent.updateMatrixWorld(),
                                e.geometry.merge(n.geometry, n.matrixWorld),
                                i.emit('geometry-merged', { mergeTarget: t }),
                                i.parentNode.removeChild(i))
                              : u(
                                  'Cached geometries are not allowed to merge. Set `skipCache` to true'
                                )
                            : u(
                                'Geometry merge is only available for `THREE.Geometry` types. Check that both of the merging geometry and the target geometry have `buffer` set to false'
                              );
                        } else
                          u(
                            'Source and target geometries cannot be the same for merge'
                          );
                      else
                        u(
                          'There is not a valid entity to merge the geometry to'
                        );
                    },
                    remove: function() {
                      this.system.unuseGeometry(this.data),
                        (this.el.getObject3D('mesh').geometry = c),
                        (this.geometry = null);
                    },
                    updateSchema: function(t) {
                      var e = t.primitive,
                        i = this.data && this.data.primitive,
                        n = r[e] && r[e].schema;
                      if (!n)
                        throw new Error('Unknown geometry schema `' + e + '`');
                      (i && i === e) || this.extendSchema(n);
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../core/geometry': 126,
                  '../lib/three': 173,
                  '../utils/debug': 191
                }
              ],
              83: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../lib/three'),
                    a = t('../utils/').debug('components:gltf-model:warn');
                  e.exports.Component = n('gltf-model', {
                    schema: { type: 'model' },
                    init: function() {
                      (this.model = null), (this.loader = new r.GLTFLoader());
                    },
                    update: function() {
                      var t = this,
                        e = this.el,
                        i = this.data;
                      i &&
                        (this.remove(),
                        this.loader.load(
                          i,
                          function(i) {
                            (t.model = i.scene || i.scenes[0]),
                              (t.model.animations = i.animations),
                              e.setObject3D('mesh', t.model),
                              e.emit('model-loaded', {
                                format: 'gltf',
                                model: t.model
                              });
                          },
                          void 0,
                          function(t) {
                            var n =
                              t && t.message
                                ? t.message
                                : 'Failed to load glTF model';
                            a(n),
                              e.emit('model-error', { format: 'gltf', src: i });
                          }
                        ));
                    },
                    remove: function() {
                      this.model && this.el.removeObject3D('mesh');
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/': 195
                }
              ],
              84: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = {
                      left:
                        'https://cdn.aframe.io/controllers/oculus-hands/v2/leftHand.json',
                      right:
                        'https://cdn.aframe.io/controllers/oculus-hands/v2/rightHand.json'
                    },
                    a = {
                      open: 'Open',
                      point: 'Point',
                      pointThumb: 'Point + Thumb',
                      fist: 'Fist',
                      hold: 'Hold',
                      thumbUp: 'Thumb Up'
                    },
                    o = {};
                  function s(t, e) {
                    var i;
                    if (t)
                      return 'grip' === (i = o[t])
                        ? i + (e ? 'close' : 'open')
                        : 'point' === i || 'thumb' === i
                          ? i + (e ? 'up' : 'down')
                          : 'pointing' === i || 'pistol' === i
                            ? i + (e ? 'start' : 'end')
                            : void 0;
                  }
                  (o[a.fist] = 'grip'),
                    (o[a.thumbUp] = 'pistol'),
                    (o[a.point] = 'pointing'),
                    (o[a.thumb] = 'thumb'),
                    (e.exports.Component = n('hand-controls', {
                      schema: { default: 'left' },
                      init: function() {
                        var t = this,
                          e = this.el;
                        (this.gesture = a.open),
                          (this.pressedButtons = {}),
                          (this.touchedButtons = {}),
                          (this.loader = new THREE.ObjectLoader()),
                          this.loader.setCrossOrigin('anonymous'),
                          (this.onGripDown = function() {
                            t.handleButton('grip', 'down');
                          }),
                          (this.onGripUp = function() {
                            t.handleButton('grip', 'up');
                          }),
                          (this.onTrackpadDown = function() {
                            t.handleButton('trackpad', 'down');
                          }),
                          (this.onTrackpadUp = function() {
                            t.handleButton('trackpad', 'up');
                          }),
                          (this.onTrackpadTouchStart = function() {
                            t.handleButton('trackpad', 'touchstart');
                          }),
                          (this.onTrackpadTouchEnd = function() {
                            t.handleButton('trackpad', 'touchend');
                          }),
                          (this.onTriggerDown = function() {
                            t.handleButton('trigger', 'down');
                          }),
                          (this.onTriggerUp = function() {
                            t.handleButton('trigger', 'up');
                          }),
                          (this.onTriggerTouchStart = function() {
                            t.handleButton('trigger', 'touchstart');
                          }),
                          (this.onTriggerTouchEnd = function() {
                            t.handleButton('trigger', 'touchend');
                          }),
                          (this.onGripTouchStart = function() {
                            t.handleButton('grip', 'touchstart');
                          }),
                          (this.onGripTouchEnd = function() {
                            t.handleButton('grip', 'touchend');
                          }),
                          (this.onThumbstickDown = function() {
                            t.handleButton('thumbstick', 'down');
                          }),
                          (this.onThumbstickUp = function() {
                            t.handleButton('thumbstick', 'up');
                          }),
                          (this.onAorXTouchStart = function() {
                            t.handleButton('AorX', 'touchstart');
                          }),
                          (this.onAorXTouchEnd = function() {
                            t.handleButton('AorX', 'touchend');
                          }),
                          (this.onBorYTouchStart = function() {
                            t.handleButton('BorY', 'touchstart');
                          }),
                          (this.onBorYTouchEnd = function() {
                            t.handleButton('BorY', 'touchend');
                          }),
                          (this.onSurfaceTouchStart = function() {
                            t.handleButton('surface', 'touchstart');
                          }),
                          (this.onSurfaceTouchEnd = function() {
                            t.handleButton('surface', 'touchend');
                          }),
                          (this.onControllerConnected = function() {
                            t.setModelVisibility(!0);
                          }),
                          (this.onControllerDisconnected = function() {
                            t.setModelVisibility(!1);
                          }),
                          e.addEventListener(
                            'controllerconnected',
                            this.onControllerConnected
                          ),
                          e.addEventListener(
                            'controllerdisconnected',
                            this.onControllerDisconnected
                          );
                      },
                      play: function() {
                        this.addEventListeners();
                      },
                      pause: function() {
                        this.removeEventListeners();
                      },
                      tick: function(t, e) {
                        var i = this.el.getObject3D('mesh');
                        i && i.mixer && i.mixer.update(e / 1e3);
                      },
                      addEventListeners: function() {
                        var t = this.el;
                        t.addEventListener('gripdown', this.onGripDown),
                          t.addEventListener('gripup', this.onGripUp),
                          t.addEventListener(
                            'trackpaddown',
                            this.onTrackpadDown
                          ),
                          t.addEventListener('trackpadup', this.onTrackpadUp),
                          t.addEventListener(
                            'trackpadtouchstart',
                            this.onTrackpadTouchStart
                          ),
                          t.addEventListener(
                            'trackpadtouchend',
                            this.onTrackpadTouchEnd
                          ),
                          t.addEventListener('triggerdown', this.onTriggerDown),
                          t.addEventListener('triggerup', this.onTriggerUp),
                          t.addEventListener(
                            'triggertouchstart',
                            this.onTriggerTouchStart
                          ),
                          t.addEventListener(
                            'triggertouchend',
                            this.onTriggerTouchEnd
                          ),
                          t.addEventListener(
                            'griptouchstart',
                            this.onGripTouchStart
                          ),
                          t.addEventListener(
                            'griptouchend',
                            this.onGripTouchEnd
                          ),
                          t.addEventListener(
                            'thumbstickdown',
                            this.onThumbstickDown
                          ),
                          t.addEventListener(
                            'thumbstickup',
                            this.onThumbstickUp
                          ),
                          t.addEventListener(
                            'abuttontouchstart',
                            this.onAorXTouchStart
                          ),
                          t.addEventListener(
                            'abuttontouchend',
                            this.onAorXTouchEnd
                          ),
                          t.addEventListener(
                            'bbuttontouchstart',
                            this.onBorYTouchStart
                          ),
                          t.addEventListener(
                            'bbuttontouchend',
                            this.onBorYTouchEnd
                          ),
                          t.addEventListener(
                            'xbuttontouchstart',
                            this.onAorXTouchStart
                          ),
                          t.addEventListener(
                            'xbuttontouchend',
                            this.onAorXTouchEnd
                          ),
                          t.addEventListener(
                            'ybuttontouchstart',
                            this.onBorYTouchStart
                          ),
                          t.addEventListener(
                            'ybuttontouchend',
                            this.onBorYTouchEnd
                          ),
                          t.addEventListener(
                            'surfacetouchstart',
                            this.onSurfaceTouchStart
                          ),
                          t.addEventListener(
                            'surfacetouchend',
                            this.onSurfaceTouchEnd
                          );
                      },
                      removeEventListeners: function() {
                        var t = this.el;
                        t.removeEventListener('gripdown', this.onGripDown),
                          t.removeEventListener('gripup', this.onGripUp),
                          t.removeEventListener(
                            'trackpaddown',
                            this.onTrackpadDown
                          ),
                          t.removeEventListener(
                            'trackpadup',
                            this.onTrackpadUp
                          ),
                          t.removeEventListener(
                            'trackpadtouchstart',
                            this.onTrackpadTouchStart
                          ),
                          t.removeEventListener(
                            'trackpadtouchend',
                            this.onTrackpadTouchEnd
                          ),
                          t.removeEventListener(
                            'triggerdown',
                            this.onTriggerDown
                          ),
                          t.removeEventListener('triggerup', this.onTriggerUp),
                          t.removeEventListener(
                            'triggertouchstart',
                            this.onTriggerTouchStart
                          ),
                          t.removeEventListener(
                            'triggertouchend',
                            this.onTriggerTouchEnd
                          ),
                          t.removeEventListener(
                            'griptouchstart',
                            this.onGripTouchStart
                          ),
                          t.removeEventListener(
                            'griptouchend',
                            this.onGripTouchEnd
                          ),
                          t.removeEventListener(
                            'thumbstickdown',
                            this.onThumbstickDown
                          ),
                          t.removeEventListener(
                            'thumbstickup',
                            this.onThumbstickUp
                          ),
                          t.removeEventListener(
                            'abuttontouchstart',
                            this.onAorXTouchStart
                          ),
                          t.removeEventListener(
                            'abuttontouchend',
                            this.onAorXTouchEnd
                          ),
                          t.removeEventListener(
                            'bbuttontouchstart',
                            this.onBorYTouchStart
                          ),
                          t.removeEventListener(
                            'bbuttontouchend',
                            this.onBorYTouchEnd
                          ),
                          t.removeEventListener(
                            'xbuttontouchstart',
                            this.onAorXTouchStart
                          ),
                          t.removeEventListener(
                            'xbuttontouchend',
                            this.onAorXTouchEnd
                          ),
                          t.removeEventListener(
                            'ybuttontouchstart',
                            this.onBorYTouchStart
                          ),
                          t.removeEventListener(
                            'ybuttontouchend',
                            this.onBorYTouchEnd
                          ),
                          t.removeEventListener(
                            'surfacetouchstart',
                            this.onSurfaceTouchStart
                          ),
                          t.removeEventListener(
                            'surfacetouchend',
                            this.onSurfaceTouchEnd
                          );
                      },
                      update: function(t) {
                        var e,
                          i = this.el,
                          n = this.data;
                        (e = {
                          hand: n,
                          model: !1,
                          rotationOffset: 'left' === n ? 90 : -90
                        }),
                          n !== t &&
                            this.loader.load(r[n], function(t) {
                              var n = t.getObjectByName('Hand');
                              (n.material.skinning = !0),
                                (n.mixer = new THREE.AnimationMixer(n)),
                                i.setObject3D('mesh', n),
                                n.position.set(0, 0, 0),
                                n.rotation.set(0, 0, 0),
                                (n.visible = !1),
                                i.setAttribute('vive-controls', e),
                                i.setAttribute('oculus-touch-controls', e),
                                i.setAttribute('windows-motion-controls', e);
                            });
                      },
                      remove: function() {
                        this.el.removeObject3D('mesh');
                      },
                      handleButton: function(t, e) {
                        var i,
                          n = 'down' === e,
                          r = 'touchstart' === e;
                        if (0 === e.indexOf('touch')) {
                          if (r === this.touchedButtons[t]) return;
                          this.touchedButtons[t] = r;
                        } else {
                          if (n === this.pressedButtons[t]) return;
                          this.pressedButtons[t] = n;
                        }
                        (i = this.gesture),
                          (this.gesture = this.determineGesture()),
                          this.gesture !== i &&
                            (this.animateGesture(this.gesture, i),
                            this.emitGestureEvents(this.gesture, i));
                      },
                      determineGesture: function() {
                        var t,
                          e,
                          i,
                          n = this.pressedButtons.grip,
                          r =
                            this.pressedButtons.surface ||
                            this.touchedButtons.surface,
                          o =
                            this.pressedButtons.trackpad ||
                            this.touchedButtons.trackpad,
                          s =
                            this.pressedButtons.trigger ||
                            this.touchedButtons.trigger,
                          c =
                            this.touchedButtons.AorX ||
                            this.touchedButtons.BorY,
                          u = ((e = this.el.components['tracked-controls']),
                          (i = e && e.controller && e.controller.id) &&
                            0 === i.indexOf('OpenVR '));
                        return (
                          n
                            ? (t = u
                                ? a.fist
                                : r || c || o
                                  ? s ? a.fist : a.point
                                  : s ? a.thumbUp : a.pointThumb)
                            : s
                              ? (t = u ? a.fist : a.hold)
                              : u && o && (t = a.point),
                          t
                        );
                      },
                      animateGesture: function(t, e) {
                        t
                          ? this.playAnimation(t || a.open, e, !1)
                          : this.playAnimation(e, e, !0);
                      },
                      emitGestureEvents: function(t, e) {
                        var i,
                          n = this.el;
                        e !== t &&
                          ((i = s(e, !1)) && n.emit(i),
                          (i = s(t, !0)) && n.emit(i));
                      },
                      playAnimation: function(t, e, i) {
                        var n,
                          r,
                          a = this.el.getObject3D('mesh');
                        if (a) {
                          if (
                            (((r = a.mixer.clipAction(
                              t
                            )).clampWhenFinished = !0),
                            (r.loop = THREE.PingPong),
                            (r.repetitions = 0),
                            (r.timeScale = i ? -1 : 1),
                            (r.weight = 1),
                            !e || t === e)
                          )
                            return a.mixer.stopAllAction(), void r.play();
                          (n = a.mixer.clipAction(e)),
                            a.mixer.stopAllAction(),
                            (n.weight = 0.15),
                            n.play(),
                            r.play(),
                            n.crossFadeTo(r, 0.15, !0);
                        }
                      },
                      setModelVisibility: function(t) {
                        var e = this.el.getObject3D('mesh');
                        e && (e.visible = t);
                      }
                    }));
                },
                { '../core/component': 125 }
              ],
              85: [
                function(t, e, i) {
                  t('./camera'),
                    t('./collada-model'),
                    t('./cursor'),
                    t('./daydream-controls'),
                    t('./gearvr-controls'),
                    t('./geometry'),
                    t('./gltf-model'),
                    t('./hand-controls'),
                    t('./laser-controls'),
                    t('./light'),
                    t('./line'),
                    t('./link'),
                    t('./look-controls'),
                    t('./material'),
                    t('./obj-model'),
                    t('./oculus-touch-controls'),
                    t('./position'),
                    t('./raycaster'),
                    t('./rotation'),
                    t('./scale'),
                    t('./shadow'),
                    t('./sound'),
                    t('./text'),
                    t('./tracked-controls'),
                    t('./visible'),
                    t('./vive-controls'),
                    t('./wasd-controls'),
                    t('./windows-motion-controls'),
                    t('./scene/debug'),
                    t('./scene/embedded'),
                    t('./scene/inspector'),
                    t('./scene/fog'),
                    t('./scene/keyboard-shortcuts'),
                    t('./scene/pool'),
                    t('./scene/screenshot'),
                    t('./scene/stats'),
                    t('./scene/vr-mode-ui');
                },
                {
                  './camera': 77,
                  './collada-model': 78,
                  './cursor': 79,
                  './daydream-controls': 80,
                  './gearvr-controls': 81,
                  './geometry': 82,
                  './gltf-model': 83,
                  './hand-controls': 84,
                  './laser-controls': 86,
                  './light': 87,
                  './line': 88,
                  './link': 89,
                  './look-controls': 90,
                  './material': 91,
                  './obj-model': 92,
                  './oculus-touch-controls': 93,
                  './position': 94,
                  './raycaster': 95,
                  './rotation': 96,
                  './scale': 97,
                  './scene/debug': 98,
                  './scene/embedded': 99,
                  './scene/fog': 100,
                  './scene/inspector': 101,
                  './scene/keyboard-shortcuts': 102,
                  './scene/pool': 103,
                  './scene/screenshot': 104,
                  './scene/stats': 105,
                  './scene/vr-mode-ui': 106,
                  './shadow': 107,
                  './sound': 108,
                  './text': 109,
                  './tracked-controls': 110,
                  './visible': 111,
                  './vive-controls': 112,
                  './wasd-controls': 113,
                  './windows-motion-controls': 114
                }
              ],
              86: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../utils/');
                  n('laser-controls', {
                    schema: { hand: { default: 'right' } },
                    init: function() {
                      var t = this.config,
                        e = this.data,
                        i = this.el,
                        n = this;
                      function a(e) {
                        var a = t[e.detail.name];
                        if (a) {
                          var o = r.extend({ showLine: !0 }, a.raycaster || {});
                          e.detail.rayOrigin &&
                            ((o.origin = e.detail.rayOrigin.origin),
                            (o.direction = e.detail.rayOrigin.direction),
                            (o.showLine = !0)),
                            e.detail.rayOrigin || !n.modelReady
                              ? i.setAttribute('raycaster', o)
                              : i.setAttribute('raycaster', 'showLine', !0),
                            i.setAttribute(
                              'cursor',
                              r.extend({ fuse: !1 }, a.cursor)
                            );
                        }
                      }
                      i.setAttribute('daydream-controls', { hand: e.hand }),
                        i.setAttribute('gearvr-controls', { hand: e.hand }),
                        i.setAttribute('oculus-touch-controls', {
                          hand: e.hand
                        }),
                        i.setAttribute('vive-controls', { hand: e.hand }),
                        i.setAttribute('windows-motion-controls', {
                          hand: e.hand
                        }),
                        i.addEventListener('controllerconnected', a),
                        i.addEventListener(
                          'controllerdisconnected',
                          function() {
                            i.setAttribute('raycaster', 'showLine', !1);
                          }
                        ),
                        i.addEventListener('controllermodelready', function(t) {
                          a(t), (n.modelReady = !0);
                        });
                    },
                    config: {
                      'daydream-controls': {
                        cursor: {
                          downEvents: ['trackpaddown'],
                          upEvents: ['trackpadup']
                        }
                      },
                      'gearvr-controls': {
                        cursor: {
                          downEvents: ['trackpaddown'],
                          upEvents: ['trackpadup']
                        },
                        raycaster: { origin: { x: 0, y: 5e-4, z: 0 } }
                      },
                      'oculus-touch-controls': {
                        cursor: {
                          downEvents: ['triggerdown'],
                          upEvents: ['triggerup']
                        },
                        raycaster: {
                          origin: { x: 0.001, y: 0, z: 0.065 },
                          direction: { x: 0, y: -0.8, z: -1 }
                        }
                      },
                      'vive-controls': {
                        cursor: {
                          downEvents: ['triggerdown'],
                          upEvents: ['triggerup']
                        }
                      },
                      'windows-motion-controls': {
                        cursor: {
                          downEvents: ['triggerdown'],
                          upEvents: ['triggerup']
                        },
                        raycaster: { showLine: !1 }
                      }
                    }
                  });
                },
                { '../core/component': 125, '../utils/': 195 }
              ],
              87: [
                function(t, e, i) {
                  var n = t('../utils/bind'),
                    r = t('../utils').diff,
                    a = t('../utils/debug'),
                    o = t('../core/component').registerComponent,
                    s = t('../lib/three'),
                    c = s.Math.degToRad,
                    u = a('components:light:warn');
                  e.exports.Component = o('light', {
                    schema: {
                      angle: { default: 60, if: { type: ['spot'] } },
                      color: { type: 'color' },
                      groundColor: {
                        type: 'color',
                        if: { type: ['hemisphere'] }
                      },
                      decay: { default: 1, if: { type: ['point', 'spot'] } },
                      distance: {
                        default: 0,
                        min: 0,
                        if: { type: ['point', 'spot'] }
                      },
                      intensity: {
                        default: 1,
                        min: 0,
                        if: {
                          type: [
                            'ambient',
                            'directional',
                            'hemisphere',
                            'point',
                            'spot'
                          ]
                        }
                      },
                      penumbra: {
                        default: 0,
                        min: 0,
                        max: 1,
                        if: { type: ['spot'] }
                      },
                      type: {
                        default: 'directional',
                        oneOf: [
                          'ambient',
                          'directional',
                          'hemisphere',
                          'point',
                          'spot'
                        ]
                      },
                      target: {
                        type: 'selector',
                        if: { type: ['spot', 'directional'] }
                      },
                      castShadow: {
                        default: !1,
                        if: { type: ['point', 'spot', 'directional'] }
                      },
                      shadowBias: { default: 0, if: { castShadow: !0 } },
                      shadowCameraFar: { default: 500, if: { castShadow: !0 } },
                      shadowCameraFov: { default: 90, if: { castShadow: !0 } },
                      shadowCameraNear: {
                        default: 0.5,
                        if: { castShadow: !0 }
                      },
                      shadowCameraTop: { default: 5, if: { castShadow: !0 } },
                      shadowCameraRight: { default: 5, if: { castShadow: !0 } },
                      shadowCameraBottom: {
                        default: -5,
                        if: { castShadow: !0 }
                      },
                      shadowCameraLeft: { default: -5, if: { castShadow: !0 } },
                      shadowCameraVisible: {
                        default: !1,
                        if: { castShadow: !0 }
                      },
                      shadowMapHeight: { default: 512, if: { castShadow: !0 } },
                      shadowMapWidth: { default: 512, if: { castShadow: !0 } }
                    },
                    init: function() {
                      var t = this.el;
                      (this.light = null),
                        (this.defaultTarget = null),
                        this.system.registerLight(t);
                    },
                    update: function(t) {
                      var e = this.data,
                        i = r(e, t),
                        a = this.light,
                        o = this;
                      if (!a || 'type' in i)
                        this.setLight(this.data), this.updateShadow();
                      else {
                        var s = !1;
                        Object.keys(i).forEach(function(t) {
                          var i = e[t];
                          switch (t) {
                            case 'color':
                              a.color.set(i);
                              break;
                            case 'groundColor':
                              a.groundColor.set(i);
                              break;
                            case 'angle':
                              a.angle = c(i);
                              break;
                            case 'target':
                              null === i
                                ? ('spot' !== e.type &&
                                    'directional' !== e.type) ||
                                  (a.target = o.defaultTarget)
                                : i.hasLoaded
                                  ? o.onSetTarget(i, a)
                                  : i.addEventListener(
                                      'loaded',
                                      n(o.onSetTarget, o, i, a)
                                    );
                              break;
                            case 'castShadow':
                            case 'shadowBias':
                            case 'shadowCameraFar':
                            case 'shadowCameraFov':
                            case 'shadowCameraNear':
                            case 'shadowCameraTop':
                            case 'shadowCameraRight':
                            case 'shadowCameraBottom':
                            case 'shadowCameraLeft':
                            case 'shadowCameraVisible':
                            case 'shadowMapHeight':
                            case 'shadowMapWidth':
                              s || (o.updateShadow(), (s = !0));
                              break;
                            default:
                              a[t] = i;
                          }
                        });
                      }
                    },
                    setLight: function(t) {
                      var e = this.el,
                        i = this.getLight(t);
                      i &&
                        (this.light && e.removeObject3D('light'),
                        (this.light = i),
                        (this.light.el = e),
                        e.setObject3D('light', this.light),
                        ('spot' !== t.type &&
                          'directional' !== t.type &&
                          'hemisphere' !== t.type) ||
                          e.getObject3D('light').translateY(-1),
                        'spot' === t.type &&
                          (e.setObject3D('light-target', this.defaultTarget),
                          e
                            .getObject3D('light-target')
                            .position.set(0, 0, -1)));
                    },
                    updateShadow: function() {
                      var t = this.el,
                        e = this.data,
                        i = this.light;
                      i.castShadow = e.castShadow;
                      var n = t.getObject3D('cameraHelper');
                      if (
                        (e.shadowCameraVisible && !n
                          ? t.setObject3D(
                              'cameraHelper',
                              new s.CameraHelper(i.shadow.camera)
                            )
                          : !e.shadowCameraVisible &&
                            n &&
                            t.removeObject3D('cameraHelper'),
                        !e.castShadow)
                      )
                        return i;
                      (i.shadow.bias = e.shadowBias),
                        (i.shadow.mapSize.height = e.shadowMapHeight),
                        (i.shadow.mapSize.width = e.shadowMapWidth),
                        (i.shadow.camera.near = e.shadowCameraNear),
                        (i.shadow.camera.far = e.shadowCameraFar),
                        i.shadow.camera instanceof s.OrthographicCamera
                          ? ((i.shadow.camera.top = e.shadowCameraTop),
                            (i.shadow.camera.right = e.shadowCameraRight),
                            (i.shadow.camera.bottom = e.shadowCameraBottom),
                            (i.shadow.camera.left = e.shadowCameraLeft))
                          : (i.shadow.camera.fov = e.shadowCameraFov),
                        i.shadow.camera.updateProjectionMatrix(),
                        n && n.update();
                    },
                    getLight: function(t) {
                      var e = t.angle,
                        i = new s.Color(t.color).getHex(),
                        r = t.decay,
                        a = t.distance,
                        o = new s.Color(t.groundColor).getHex(),
                        l = t.intensity,
                        h = t.type,
                        d = t.target,
                        p = null;
                      switch (h.toLowerCase()) {
                        case 'ambient':
                          return new s.AmbientLight(i, l);
                        case 'directional':
                          return (
                            (p = new s.DirectionalLight(i, l)),
                            (this.defaultTarget = p.target),
                            d &&
                              (d.hasLoaded
                                ? this.onSetTarget(d, p)
                                : d.addEventListener(
                                    'loaded',
                                    n(this.onSetTarget, this, d, p)
                                  )),
                            p
                          );
                        case 'hemisphere':
                          return new s.HemisphereLight(i, o, l);
                        case 'point':
                          return new s.PointLight(i, l, a, r);
                        case 'spot':
                          return (
                            (p = new s.SpotLight(i, l, a, c(e), t.penumbra, r)),
                            (this.defaultTarget = p.target),
                            d &&
                              (d.hasLoaded
                                ? this.onSetTarget(d, p)
                                : d.addEventListener(
                                    'loaded',
                                    n(this.onSetTarget, this, d, p)
                                  )),
                            p
                          );
                        default:
                          u(
                            '%s is not a valid light type. Choose from ambient, directional, hemisphere, point, spot.',
                            h
                          );
                      }
                    },
                    onSetTarget: function(t, e) {
                      e.target = t.object3D;
                    },
                    remove: function() {
                      var t = this.el;
                      t.removeObject3D('light'),
                        t.getObject3D('cameraHelper') &&
                          t.removeObject3D('cameraHelper');
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils': 195,
                  '../utils/bind': 189,
                  '../utils/debug': 191
                }
              ],
              88: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent;
                  function r(t, e) {
                    return (
                      !(!t || !e) && (t.x === e.x && t.y === e.y && t.z === e.z)
                    );
                  }
                  e.exports.Component = n('line', {
                    schema: {
                      start: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },
                      end: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },
                      color: { type: 'color', default: '#74BEC1' },
                      opacity: { type: 'number', default: 1 },
                      visible: { default: !0 }
                    },
                    multiple: !0,
                    init: function() {
                      var t,
                        e,
                        i = this.data;
                      (e = this.material = new THREE.LineBasicMaterial({
                        color: i.color,
                        opacity: i.opacity,
                        transparent: i.opacity < 1,
                        visible: i.visible
                      })),
                        (t = this.geometry = new THREE.BufferGeometry()).addAttribute(
                          'position',
                          new THREE.BufferAttribute(new Float32Array(6), 3)
                        ),
                        (this.line = new THREE.Line(t, e)),
                        this.el.setObject3D(this.attrName, this.line);
                    },
                    update: function(t) {
                      var e = this.data,
                        i = this.geometry,
                        n = !1,
                        a = this.material,
                        o = i.attributes.position.array;
                      r(e.start, t.start) ||
                        ((o[0] = e.start.x),
                        (o[1] = e.start.y),
                        (o[2] = e.start.z),
                        (n = !0)),
                        r(e.end, t.end) ||
                          ((o[3] = e.end.x),
                          (o[4] = e.end.y),
                          (o[5] = e.end.z),
                          (n = !0)),
                        n &&
                          ((i.attributes.position.needsUpdate = !0),
                          i.computeBoundingSphere()),
                        a.color.setStyle(e.color),
                        (a.opacity = e.opacity),
                        (a.transparent = e.opacity < 1),
                        (a.visible = e.visible);
                    },
                    remove: function() {
                      this.el.removeObject3D('line', this.line);
                    }
                  });
                },
                { '../core/component': 125 }
              ],
              89: [
                function(t, e, i) {
                  var n,
                    r,
                    a,
                    o,
                    s,
                    c,
                    u,
                    l,
                    h = t('../core/component').registerComponent,
                    d = t('../core/shader').registerShader,
                    p = t('../lib/three');
                  (e.exports.Component = h('link', {
                    schema: {
                      color: { default: 'white', type: 'color' },
                      highlighted: { default: !1 },
                      highlightedColor: { default: '#24CAFF', type: 'color' },
                      href: { default: '' },
                      image: { type: 'asset' },
                      on: { default: 'click' },
                      peekMode: { default: !1 },
                      title: { default: '' },
                      visualAspectEnabled: { default: !0 }
                    },
                    init: function() {
                      (this.navigate = this.navigate.bind(this)),
                        (this.previousQuaternion = void 0),
                        (this.hiddenEls = []),
                        this.initVisualAspect();
                    },
                    update: function(t) {
                      var e = this.data,
                        i = this.el,
                        n = e.highlighted ? e.highlightedColor : e.color;
                      i.setAttribute('material', 'strokeColor', n),
                        e.on !== t.on && this.updateEventListener(),
                        e.visualAspectEnabled &&
                          void 0 !== t.peekMode &&
                          e.peekMode !== t.peekMode &&
                          this.updatePeekMode(),
                        e.image &&
                          t.image !== e.image &&
                          i.setAttribute(
                            'material',
                            'pano',
                            'string' == typeof e.image ? e.image : e.image.src
                          );
                    },
                    updatePeekMode: function() {
                      var t = this.el,
                        e = this.sphereEl;
                      this.data.peekMode
                        ? (this.hideAll(),
                          (t.getObject3D('mesh').visible = !1),
                          e.setAttribute('visible', !0))
                        : (this.showAll(),
                          (t.getObject3D('mesh').visible = !0),
                          e.setAttribute('visible', !1));
                    },
                    play: function() {
                      this.updateEventListener();
                    },
                    pause: function() {
                      this.removeEventListener();
                    },
                    updateEventListener: function() {
                      var t = this.el;
                      t.isPlaying &&
                        (this.removeEventListener(),
                        t.addEventListener(this.data.on, this.navigate));
                    },
                    removeEventListener: function() {
                      var t = this.data.on;
                      t && this.el.removeEventListener(t, this.navigate);
                    },
                    initVisualAspect: function() {
                      var t,
                        e,
                        i,
                        n = this.el;
                      this.data.visualAspectEnabled &&
                        ((t = this.textEl =
                          this.textEl || document.createElement('a-entity')),
                        (e = this.sphereEl =
                          this.sphereEl || document.createElement('a-entity')),
                        (i = this.semiSphereEl =
                          this.semiSphereEl ||
                          document.createElement('a-entity')),
                        n.setAttribute('geometry', {
                          primitive: 'circle',
                          radius: 1,
                          segments: 64
                        }),
                        n.setAttribute('material', {
                          shader: 'portal',
                          pano: this.data.image,
                          side: 'double'
                        }),
                        t.setAttribute('text', {
                          color: 'white',
                          align: 'center',
                          font: 'kelsonsans',
                          value: this.data.title || this.data.href,
                          width: 4
                        }),
                        t.setAttribute('position', '0 1.5 0'),
                        n.appendChild(t),
                        i.setAttribute('geometry', {
                          primitive: 'sphere',
                          radius: 1,
                          phiStart: 0,
                          segmentsWidth: 64,
                          segmentsHeight: 64,
                          phiLength: 180,
                          thetaStart: 0,
                          thetaLength: 360
                        }),
                        i.setAttribute('material', {
                          shader: 'portal',
                          borderEnabled: 0,
                          pano: this.data.image,
                          side: 'back'
                        }),
                        i.setAttribute('rotation', '0 180 0'),
                        i.setAttribute('position', '0 0 0'),
                        i.setAttribute('visible', !1),
                        n.appendChild(i),
                        e.setAttribute('geometry', {
                          primitive: 'sphere',
                          radius: 10,
                          segmentsWidth: 64,
                          segmentsHeight: 64
                        }),
                        e.setAttribute('material', {
                          shader: 'portal',
                          borderEnabled: 0,
                          pano: this.data.image,
                          side: 'back'
                        }),
                        e.setAttribute('visible', !1),
                        n.appendChild(e));
                    },
                    navigate: function() {
                      window.location = this.data.href;
                    },
                    tick: ((s = new p.Vector3()),
                    (c = new p.Vector3()),
                    (u = new p.Vector3()),
                    (l = new p.Quaternion()),
                    function() {
                      if (this.data.visualAspectEnabled) {
                        var t,
                          e,
                          i = this.el,
                          n = i.object3D,
                          r = i.sceneEl.camera,
                          a = this.textEl;
                        if (
                          (n.updateMatrixWorld(),
                          r.parent.updateMatrixWorld(),
                          r.updateMatrixWorld(),
                          n.matrix.decompose(s, l, u),
                          s.setFromMatrixPosition(n.matrixWorld),
                          c.setFromMatrixPosition(r.matrixWorld),
                          (e = s.distanceTo(c)),
                          (this.previousQuaternion =
                            this.previousQuaternion || l.clone()),
                          e > 20)
                        )
                          n.lookAt(c);
                        else {
                          if (
                            ((t = this.calculateCameraPortalOrientation()),
                            e < 0.5)
                          ) {
                            if (
                              !0 === this.semiSphereEl.getAttribute('visible')
                            )
                              return;
                            a.setAttribute('text', 'width', 1.5),
                              t <= 0
                                ? (a.setAttribute('position', '0 0 0.75'),
                                  a.setAttribute('rotation', '0 180 0'),
                                  this.semiSphereEl.setAttribute(
                                    'rotation',
                                    '0 0 0'
                                  ))
                                : (a.setAttribute('position', '0 0 -0.75'),
                                  a.setAttribute('rotation', '0 0 0'),
                                  this.semiSphereEl.setAttribute(
                                    'rotation',
                                    '0 180 0'
                                  )),
                              (i.getObject3D('mesh').visible = !1),
                              this.semiSphereEl.setAttribute('visible', !0),
                              (this.peekCameraPortalOrientation = t);
                          } else
                            t <= 0
                              ? a.setAttribute('rotation', '0 180 0')
                              : a.setAttribute('rotation', '0 0 0'),
                              a.setAttribute('text', 'width', 5),
                              a.setAttribute('position', '0 1.5 0'),
                              (i.getObject3D('mesh').visible = !0),
                              this.semiSphereEl.setAttribute('visible', !1),
                              (this.peekCameraPortalOrientation = void 0);
                          this.previousQuaternion &&
                            (n.quaternion.copy(this.previousQuaternion),
                            (this.previousQuaternion = void 0));
                        }
                      }
                    }),
                    hideAll: function() {
                      var t = this.el,
                        e = this.hiddenEls,
                        i = this;
                      e.length > 0 ||
                        t.sceneEl.object3D.traverse(function(n) {
                          (n && n.el && n.el.hasAttribute('link-controls')) ||
                            (n.el &&
                              n !== t.sceneEl.object3D &&
                              n.el !== t &&
                              n.el !== i.sphereEl &&
                              n.el !== t.sceneEl.cameraEl &&
                              !1 !== n.el.getAttribute('visible') &&
                              n.el !== i.textEl &&
                              n.el !== i.semiSphereEl &&
                              (n.el.setAttribute('visible', !1), e.push(n.el)));
                        });
                    },
                    showAll: function() {
                      this.hiddenEls.forEach(function(t) {
                        t.setAttribute('visible', !0);
                      }),
                        (this.hiddenEls = []);
                    },
                    calculateCameraPortalOrientation: ((n = new p.Matrix4()),
                    (r = new p.Vector3()),
                    (a = new p.Vector3(0, 0, 1)),
                    (o = new p.Vector3(0, 0, 0)),
                    function() {
                      var t = this.el,
                        e = t.sceneEl.camera;
                      return (
                        r.set(0, 0, 0),
                        a.set(0, 0, 1),
                        o.set(0, 0, 0),
                        t.object3D.matrixWorld.extractRotation(n),
                        a.applyMatrix4(n),
                        t.object3D.updateMatrixWorld(),
                        t.object3D.localToWorld(o),
                        e.parent.parent.updateMatrixWorld(),
                        e.parent.updateMatrixWorld(),
                        e.updateMatrixWorld(),
                        e.localToWorld(r),
                        r.sub(o).normalize(),
                        a.normalize(),
                        Math.sign(a.dot(r))
                      );
                    }),
                    remove: function() {
                      this.removeEventListener();
                    }
                  })),
                    d('portal', {
                      schema: {
                        pano: { type: 'map', is: 'uniform' },
                        borderEnabled: {
                          default: 1,
                          type: 'int',
                          is: 'uniform'
                        },
                        strokeColor: {
                          default: 'white',
                          type: 'color',
                          is: 'uniform'
                        }
                      },
                      vertexShader: [
                        'vec3 portalPosition;',
                        'varying vec3 vWorldPosition;',
                        'varying float vDistanceToCenter;',
                        'varying float vDistance;',
                        'void main() {',
                        'vDistanceToCenter = clamp(length(position - vec3(0.0, 0.0, 0.0)), 0.0, 1.0);',
                        'portalPosition = (modelMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;',
                        'vDistance = length(portalPosition - cameraPosition);',
                        'vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;',
                        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                        '}'
                      ].join('\n'),
                      fragmentShader: [
                        '#define RECIPROCAL_PI2 0.15915494',
                        'uniform sampler2D pano;',
                        'uniform vec3 strokeColor;',
                        'uniform float borderEnabled;',
                        'varying float vDistanceToCenter;',
                        'varying float vDistance;',
                        'varying vec3 vWorldPosition;',
                        'void main() {',
                        'vec3 direction = normalize(vWorldPosition - cameraPosition);',
                        'vec2 sampleUV;',
                        'float borderThickness = clamp(exp(-vDistance / 50.0), 0.6, 0.95);',
                        'sampleUV.y = saturate(direction.y * 0.5  + 0.5);',
                        'sampleUV.x = atan(direction.z, -direction.x) * -RECIPROCAL_PI2 + 0.5;',
                        'if (vDistanceToCenter > borderThickness && borderEnabled == 1.0) {',
                        'gl_FragColor = vec4(strokeColor, 1.0);',
                        '} else {',
                        'gl_FragColor = mix(texture2D(pano, sampleUV), vec4(0.93, 0.17, 0.36, 1.0), clamp(pow((vDistance / 15.0), 2.0), 0.0, 1.0));',
                        '}',
                        '}'
                      ].join('\n')
                    });
                },
                {
                  '../core/component': 125,
                  '../core/shader': 134,
                  '../lib/three': 173
                }
              ],
              90: [
                function(t, e, i) {
                  var n,
                    r = t('../core/component').registerComponent,
                    a = t('../lib/three'),
                    o = t('../constants').DEFAULT_CAMERA_HEIGHT,
                    s = t('../utils/bind'),
                    c = Math.PI / 2,
                    u = a.Math.radToDeg;
                  e.exports.Component = r('look-controls', {
                    dependencies: ['position', 'rotation'],
                    schema: {
                      enabled: { default: !0 },
                      touchEnabled: { default: !0 },
                      hmdEnabled: { default: !0 },
                      reverseMouseDrag: { default: !1 },
                      standing: { default: !0 }
                    },
                    init: function() {
                      var t = this.el.sceneEl;
                      (this.previousHMDPosition = new a.Vector3()),
                        (this.hmdQuaternion = new a.Quaternion()),
                        (this.hmdEuler = new a.Euler()),
                        (this.position = new a.Vector3()),
                        (this.rotation = {}),
                        this.setupMouseControls(),
                        this.setupHMDControls(),
                        this.bindMethods(),
                        t.addEventListener('exit-vr', this.onExitVR);
                    },
                    update: function(t) {
                      var e = this.data;
                      e.enabled !== t.enabled &&
                        this.updateGrabCursor(e.enabled),
                        !t ||
                          e.hmdEnabled ||
                          t.hmdEnabled ||
                          (this.pitchObject.rotation.set(0, 0, 0),
                          this.yawObject.rotation.set(0, 0, 0));
                    },
                    tick: function(t) {
                      var e = this.data;
                      e.enabled &&
                        ((this.controls.standing = e.standing),
                        (this.controls.userHeight = this.getUserHeight()),
                        this.controls.update(),
                        this.updateOrientation(),
                        this.updatePosition());
                    },
                    getUserHeight: function() {
                      var t = this.el;
                      return (
                        (t.hasAttribute('camera') &&
                          t.getAttribute('camera').userHeight) ||
                        o
                      );
                    },
                    play: function() {
                      this.addEventListeners();
                    },
                    pause: function() {
                      this.removeEventListeners();
                    },
                    remove: function() {
                      this.removeEventListeners();
                    },
                    bindMethods: function() {
                      (this.onMouseDown = s(this.onMouseDown, this)),
                        (this.onMouseMove = s(this.onMouseMove, this)),
                        (this.onMouseUp = s(this.onMouseUp, this)),
                        (this.onTouchStart = s(this.onTouchStart, this)),
                        (this.onTouchMove = s(this.onTouchMove, this)),
                        (this.onTouchEnd = s(this.onTouchEnd, this)),
                        (this.onExitVR = s(this.onExitVR, this));
                    },
                    setupMouseControls: function() {
                      (this.mouseDown = !1),
                        (this.pitchObject = new a.Object3D()),
                        (this.yawObject = new a.Object3D()),
                        (this.yawObject.position.y = 10),
                        this.yawObject.add(this.pitchObject);
                    },
                    setupHMDControls: function() {
                      (this.dolly = new a.Object3D()),
                        (this.euler = new a.Euler()),
                        (this.controls = new a.VRControls(this.dolly)),
                        (this.controls.userHeight = 0);
                    },
                    addEventListeners: function() {
                      var t = this.el.sceneEl,
                        e = t.canvas;
                      e
                        ? (e.addEventListener(
                            'mousedown',
                            this.onMouseDown,
                            !1
                          ),
                          window.addEventListener(
                            'mousemove',
                            this.onMouseMove,
                            !1
                          ),
                          window.addEventListener(
                            'mouseup',
                            this.onMouseUp,
                            !1
                          ),
                          e.addEventListener('touchstart', this.onTouchStart),
                          window.addEventListener(
                            'touchmove',
                            this.onTouchMove
                          ),
                          window.addEventListener('touchend', this.onTouchEnd))
                        : t.addEventListener(
                            'render-target-loaded',
                            s(this.addEventListeners, this)
                          );
                    },
                    removeEventListeners: function() {
                      var t = this.el.sceneEl,
                        e = t && t.canvas;
                      e &&
                        (e.removeEventListener('mousedown', this.onMouseDown),
                        e.removeEventListener('mousemove', this.onMouseMove),
                        e.removeEventListener('mouseup', this.onMouseUp),
                        e.removeEventListener('mouseout', this.onMouseUp),
                        e.removeEventListener('touchstart', this.onTouchStart),
                        e.removeEventListener('touchmove', this.onTouchMove),
                        e.removeEventListener('touchend', this.onTouchEnd));
                    },
                    updateOrientation: function() {
                      var t,
                        e,
                        i,
                        n = this.hmdEuler,
                        r = this.hmdQuaternion,
                        a = this.pitchObject,
                        o = this.yawObject,
                        s = this.el.sceneEl,
                        c = this.rotation;
                      (r = r.copy(this.dolly.quaternion)),
                        n.setFromQuaternion(r, 'YXZ'),
                        s.isMobile
                          ? ((c.x = u(n.x) + u(a.rotation.x)),
                            (c.y = u(n.y) + u(o.rotation.y)),
                            (c.z = u(n.z)))
                          : s.is('vr-mode') &&
                            (0 !== (i = n).x || 0 !== i.y || 0 !== i.z) &&
                            this.data.hmdEnabled
                            ? ((c.x = u(n.x)), (c.y = u(n.y)), (c.z = u(n.z)))
                            : ((t = this.el.getAttribute('rotation')),
                              (e = this.calculateDeltaRotation()),
                              this.data.reverseMouseDrag
                                ? ((c.x = t.x - e.x),
                                  (c.y = t.y - e.y),
                                  (c.z = t.z))
                                : ((c.x = t.x + e.x),
                                  (c.y = t.y + e.y),
                                  (c.z = t.z))),
                        this.el.setAttribute('rotation', c);
                    },
                    calculateDeltaRotation: function() {
                      var t,
                        e = u(this.pitchObject.rotation.x),
                        i = u(this.yawObject.rotation.y);
                      return (
                        (t = {
                          x: e - (this.previousRotationX || 0),
                          y: i - (this.previousRotationY || 0)
                        }),
                        (this.previousRotationX = e),
                        (this.previousRotationY = i),
                        t
                      );
                    },
                    updatePosition: function() {
                      var t,
                        e,
                        i = this.el,
                        n = this.position,
                        r = this.previousHMDPosition;
                      this.el.sceneEl.is('vr-mode') &&
                        ((t = this.calculateHMDPosition()),
                        (e = i.getAttribute('position')),
                        n
                          .copy(e)
                          .sub(r)
                          .add(t),
                        i.setAttribute('position', n),
                        r.copy(t));
                    },
                    calculateHMDPosition: ((n = new a.Vector3()),
                    function() {
                      return (
                        this.dolly.updateMatrix(),
                        n.setFromMatrixPosition(this.dolly.matrix),
                        n
                      );
                    }),
                    onMouseMove: function(t) {
                      var e,
                        i,
                        n = this.pitchObject,
                        r = this.yawObject,
                        a = this.previousMouseEvent;
                      this.mouseDown &&
                        this.data.enabled &&
                        ((e = t.movementX || t.mozMovementX),
                        (i = t.movementY || t.mozMovementY),
                        (void 0 !== e && void 0 !== i) ||
                          ((e = t.screenX - a.screenX),
                          (i = t.screenY - a.screenY)),
                        (this.previousMouseEvent = t),
                        (r.rotation.y -= 0.002 * e),
                        (n.rotation.x -= 0.002 * i),
                        (n.rotation.x = Math.max(
                          -c,
                          Math.min(c, n.rotation.x)
                        )));
                    },
                    onMouseDown: function(t) {
                      this.data.enabled &&
                        0 === t.button &&
                        ((this.mouseDown = !0),
                        (this.previousMouseEvent = t),
                        document.body.classList.add('a-grabbing'));
                    },
                    onMouseUp: function() {
                      (this.mouseDown = !1),
                        document.body.classList.remove('a-grabbing');
                    },
                    onTouchStart: function(t) {
                      1 === t.touches.length &&
                        this.data.touchEnabled &&
                        ((this.touchStart = {
                          x: t.touches[0].pageX,
                          y: t.touches[0].pageY
                        }),
                        (this.touchStarted = !0));
                    },
                    onTouchMove: function(t) {
                      var e,
                        i = this.el.sceneEl.canvas,
                        n = this.yawObject;
                      this.touchStarted &&
                        this.data.touchEnabled &&
                        ((e =
                          2 *
                          Math.PI *
                          (t.touches[0].pageX - this.touchStart.x) /
                          i.clientWidth),
                        (n.rotation.y -= 0.5 * e),
                        (this.touchStart = {
                          x: t.touches[0].pageX,
                          y: t.touches[0].pageY
                        }));
                    },
                    onTouchEnd: function() {
                      this.touchStarted = !1;
                    },
                    onExitVR: function() {
                      this.previousHMDPosition.set(0, 0, 0);
                    },
                    updateGrabCursor: function(t) {
                      var e = this.el.sceneEl;
                      function i() {
                        e.canvas.classList.add('a-grab-cursor');
                      }
                      function n() {
                        e.canvas.classList.remove('a-grab-cursor');
                      }
                      e.canvas
                        ? t ? i() : n()
                        : t
                          ? e.addEventListener('render-target-loaded', i)
                          : e.addEventListener('render-target-loaded', n);
                    }
                  });
                },
                {
                  '../constants': 116,
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/bind': 189
                }
              ],
              91: [
                function(t, e, i) {
                  var n = t('../utils/'),
                    r = t('../core/component'),
                    a = t('../lib/three'),
                    o = t('../core/shader'),
                    s = n.debug('components:material:error'),
                    c = r.registerComponent,
                    u = o.shaders,
                    l = o.shaderNames;
                  function h(t, e) {
                    t.dispose(), e.unregisterMaterial(t);
                  }
                  e.exports.Component = c('material', {
                    schema: {
                      alphaTest: { default: 0, min: 0, max: 1 },
                      depthTest: { default: !0 },
                      depthWrite: { default: !0 },
                      flatShading: { default: !1 },
                      npot: { default: !1 },
                      offset: { type: 'vec2', default: { x: 0, y: 0 } },
                      opacity: { default: 1, min: 0, max: 1 },
                      repeat: { type: 'vec2', default: { x: 1, y: 1 } },
                      shader: { default: 'standard', oneOf: l },
                      side: {
                        default: 'front',
                        oneOf: ['front', 'back', 'double']
                      },
                      transparent: { default: !1 },
                      vertexColors: {
                        type: 'string',
                        default: 'none',
                        oneOf: ['face', 'vertex']
                      },
                      visible: { default: !0 }
                    },
                    init: function() {
                      this.material = null;
                    },
                    update: function(t) {
                      var e = this.data;
                      (this.shader && e.shader === t.shader) ||
                        this.updateShader(e.shader),
                        this.shader.update(this.data),
                        this.updateMaterial(t);
                    },
                    updateSchema: function(t) {
                      var e = t.shader,
                        i = this.data && this.data.shader,
                        n = e || i,
                        r = u[n] && u[n].schema;
                      r || s('Unknown shader schema ' + n),
                        (i && e === i) ||
                          (this.extendSchema(r), this.updateBehavior());
                    },
                    updateBehavior: function() {
                      var t = this.schema,
                        e = this,
                        i = this.el.sceneEl,
                        n = {},
                        r = function(t, i) {
                          Object.keys(n).forEach(function(e) {
                            n[e] = t;
                          }),
                            e.shader.update(n);
                        };
                      (this.tick = void 0),
                        Object.keys(t).forEach(function(i) {
                          'time' === t[i].type && ((e.tick = r), (n[i] = !0));
                        }),
                        i &&
                          (this.tick
                            ? i.addBehavior(this)
                            : i.removeBehavior(this));
                    },
                    updateShader: function(t) {
                      var e,
                        i = this.data,
                        n = u[t] && u[t].Shader;
                      if (!n) throw new Error('Unknown shader ' + t);
                      ((e = this.shader = new n()).el = this.el),
                        e.init(i),
                        this.setMaterial(e.material),
                        this.updateSchema(i);
                    },
                    updateMaterial: function(t) {
                      var e = this.data,
                        i = this.material;
                      (i.alphaTest = e.alphaTest),
                        (i.depthTest = !1 !== e.depthTest),
                        (i.depthWrite = !1 !== e.depthWrite),
                        (i.opacity = e.opacity),
                        (i.flatShading = e.flatShading),
                        (i.side = (function(t) {
                          switch (t) {
                            case 'back':
                              return a.BackSide;
                            case 'double':
                              return a.DoubleSide;
                            default:
                              return a.FrontSide;
                          }
                        })(e.side)),
                        (i.transparent = !1 !== e.transparent || e.opacity < 1),
                        (i.vertexColors = (function(t) {
                          switch (t) {
                            case 'face':
                              return a.FaceColors;
                            case 'vertex':
                              return a.VertexColors;
                            default:
                              return a.NoColors;
                          }
                        })(e.vertexColors)),
                        (i.visible = e.visible),
                        !Object.keys(t).length ||
                          (t.alphaTest === e.alphaTest &&
                            t.side === e.side &&
                            t.vertexColors === e.vertexColors) ||
                          (i.needsUpdate = !0);
                    },
                    remove: function() {
                      var t = new a.MeshBasicMaterial(),
                        e = this.material,
                        i = this.el.getObject3D('mesh');
                      i && (i.material = t), h(e, this.system);
                    },
                    setMaterial: function(t) {
                      var e = this.el.getOrCreateObject3D('mesh', a.Mesh),
                        i = this.system;
                      this.material && h(this.material, i),
                        (this.material = e.material = t),
                        i.registerMaterial(t);
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../core/shader': 134,
                  '../lib/three': 173,
                  '../utils/': 195
                }
              ],
              92: [
                function(t, e, i) {
                  var n = t('../utils/debug'),
                    r = t('../core/component').registerComponent,
                    a = t('../lib/three'),
                    o = n('components:obj-model:warn');
                  e.exports.Component = r('obj-model', {
                    schema: { mtl: { type: 'model' }, obj: { type: 'model' } },
                    init: function() {
                      (this.model = null),
                        (this.objLoader = new a.OBJLoader()),
                        (this.mtlLoader = new a.MTLLoader(
                          this.objLoader.manager
                        )),
                        (this.mtlLoader.crossOrigin = '');
                    },
                    update: function() {
                      var t = this.data;
                      t.obj && (this.remove(), this.loadObj(t.obj, t.mtl));
                    },
                    remove: function() {
                      this.model && this.el.removeObject3D('mesh');
                    },
                    loadObj: function(t, e) {
                      var i = this,
                        n = this.el,
                        r = this.mtlLoader,
                        s = this.objLoader;
                      if (e)
                        return (
                          n.hasAttribute('material') &&
                            o(
                              'Material component properties are ignored when a .MTL is provided'
                            ),
                          r.setTexturePath(e.substr(0, e.lastIndexOf('/') + 1)),
                          void r.load(e, function(e) {
                            e.preload(),
                              s.setMaterials(e),
                              s.load(t, function(t) {
                                (i.model = t),
                                  n.setObject3D('mesh', t),
                                  n.emit('model-loaded', {
                                    format: 'obj',
                                    model: t
                                  });
                              });
                          })
                        );
                      s.load(t, function(t) {
                        var e = n.components.material;
                        e &&
                          t.traverse(function(t) {
                            t instanceof a.Mesh && (t.material = e.material);
                          }),
                          (i.model = t),
                          n.setObject3D('mesh', t),
                          n.emit('model-loaded', { format: 'obj', model: t });
                      });
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/debug': 191
                }
              ],
              93: [
                function(t, e, i) {
                  var n = t('../utils/bind'),
                    r = t('../core/component').registerComponent,
                    a = t('../utils/tracked-controls'),
                    o = { x: 0, y: -0.015, z: 0.04 };
                  e.exports.Component = r('oculus-touch-controls', {
                    schema: {
                      hand: { default: 'left' },
                      buttonColor: { type: 'color', default: '#999' },
                      buttonTouchColor: { type: 'color', default: '#8AB' },
                      buttonHighlightColor: { type: 'color', default: '#2DF' },
                      model: { default: !0 },
                      rotationOffset: { default: 0 }
                    },
                    mapping: {
                      left: {
                        axes: { thumbstick: [0, 1] },
                        buttons: [
                          'thumbstick',
                          'trigger',
                          'grip',
                          'xbutton',
                          'ybutton',
                          'surface'
                        ]
                      },
                      right: {
                        axes: { thumbstick: [0, 1] },
                        buttons: [
                          'thumbstick',
                          'trigger',
                          'grip',
                          'abutton',
                          'bbutton',
                          'surface'
                        ]
                      }
                    },
                    bindMethods: function() {
                      (this.onModelLoaded = n(this.onModelLoaded, this)),
                        (this.onControllersUpdate = n(
                          this.onControllersUpdate,
                          this
                        )),
                        (this.checkIfControllerPresent = n(
                          this.checkIfControllerPresent,
                          this
                        )),
                        (this.onAxisMoved = n(this.onAxisMoved, this));
                    },
                    init: function() {
                      var t = this;
                      (this.onButtonChanged = n(this.onButtonChanged, this)),
                        (this.onButtonDown = function(e) {
                          t.onButtonEvent(e.detail.id, 'down');
                        }),
                        (this.onButtonUp = function(e) {
                          t.onButtonEvent(e.detail.id, 'up');
                        }),
                        (this.onButtonTouchStart = function(e) {
                          t.onButtonEvent(e.detail.id, 'touchstart');
                        }),
                        (this.onButtonTouchEnd = function(e) {
                          t.onButtonEvent(e.detail.id, 'touchend');
                        }),
                        (this.controllerPresent = !1),
                        (this.lastControllerCheck = 0),
                        (this.previousButtonValues = {}),
                        this.bindMethods(),
                        (this.emitIfAxesChanged = a.emitIfAxesChanged),
                        (this.checkControllerPresentAndSetup =
                          a.checkControllerPresentAndSetup);
                    },
                    addEventListeners: function() {
                      var t = this.el;
                      t.addEventListener('buttonchanged', this.onButtonChanged),
                        t.addEventListener('buttondown', this.onButtonDown),
                        t.addEventListener('buttonup', this.onButtonUp),
                        t.addEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.addEventListener('touchend', this.onButtonTouchEnd),
                        t.addEventListener('axismove', this.onAxisMoved),
                        t.addEventListener('model-loaded', this.onModelLoaded),
                        (this.controllerEventsActive = !0);
                    },
                    removeEventListeners: function() {
                      var t = this.el;
                      t.removeEventListener(
                        'buttonchanged',
                        this.onButtonChanged
                      ),
                        t.removeEventListener('buttondown', this.onButtonDown),
                        t.removeEventListener('buttonup', this.onButtonUp),
                        t.removeEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.removeEventListener(
                          'touchend',
                          this.onButtonTouchEnd
                        ),
                        t.removeEventListener('axismove', this.onAxisMoved),
                        t.removeEventListener(
                          'model-loaded',
                          this.onModelLoaded
                        ),
                        (this.controllerEventsActive = !1);
                    },
                    checkIfControllerPresent: function() {
                      this.checkControllerPresentAndSetup(
                        this,
                        'Oculus Touch',
                        { hand: this.data.hand }
                      );
                    },
                    play: function() {
                      this.checkIfControllerPresent(),
                        this.addControllersUpdateListener();
                    },
                    pause: function() {
                      this.removeEventListeners(),
                        this.removeControllersUpdateListener();
                    },
                    updateControllerModel: function() {
                      var t, e;
                      this.data.model &&
                        ('right' === this.data.hand
                          ? ((t =
                              'url(https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-right.obj)'),
                            (e =
                              'url(https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-right.mtl)'))
                          : ((t =
                              'url(https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-left.obj)'),
                            (e =
                              'url(https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-left.mtl)')),
                        this.el.setAttribute('obj-model', { obj: t, mtl: e }));
                    },
                    injectTrackedControls: function() {
                      var t = this.data,
                        e = 'right' === t.hand ? -90 : 90;
                      this.el.setAttribute('tracked-controls', {
                        id:
                          'right' === t.hand
                            ? 'Oculus Touch (Right)'
                            : 'Oculus Touch (Left)',
                        controller: 0,
                        rotationOffset:
                          -999 !== t.rotationOffset ? t.rotationOffset : e
                      }),
                        this.updateControllerModel();
                    },
                    addControllersUpdateListener: function() {
                      this.el.sceneEl.addEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    removeControllersUpdateListener: function() {
                      this.el.sceneEl.removeEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    onControllersUpdate: function() {
                      this.checkIfControllerPresent();
                    },
                    onButtonChanged: function(t) {
                      var e,
                        i = this.mapping[this.data.hand].buttons[t.detail.id],
                        n = this.buttonMeshes;
                      i &&
                        (('trigger' !== i && 'grip' !== i) ||
                          (e = t.detail.state.value),
                        n &&
                          ('trigger' === i &&
                            n.trigger &&
                            (n.trigger.rotation.x = -e * (Math.PI / 24)),
                          'grip' === i &&
                            n.grip &&
                            (n.grip.rotation.y =
                              ('left' === this.data.hand ? -1 : 1) *
                              e *
                              (Math.PI / 60))),
                        this.el.emit(i + 'changed', t.detail.state));
                    },
                    onModelLoaded: function(t) {
                      var e,
                        i = t.detail.model;
                      if (this.data.model) {
                        var n = 'left' === this.data.hand;
                        ((e = this.buttonMeshes = {}).grip = i.getObjectByName(
                          n
                            ? 'buttonHand_oculus-touch-controller-left.004'
                            : 'buttonHand_oculus-touch-controller-right.005'
                        )),
                          (e.thumbstick = i.getObjectByName(
                            n
                              ? 'stick_oculus-touch-controller-left.007'
                              : 'stick_oculus-touch-controller-right.004'
                          )),
                          (e.trigger = i.getObjectByName(
                            n
                              ? 'buttonTrigger_oculus-touch-controller-left.005'
                              : 'buttonTrigger_oculus-touch-controller-right.006'
                          )),
                          (e.xbutton = i.getObjectByName(
                            'buttonX_oculus-touch-controller-left.002'
                          )),
                          (e.abutton = i.getObjectByName(
                            'buttonA_oculus-touch-controller-right.002'
                          )),
                          (e.ybutton = i.getObjectByName(
                            'buttonY_oculus-touch-controller-left.001'
                          )),
                          (e.bbutton = i.getObjectByName(
                            'buttonB_oculus-touch-controller-right.003'
                          )),
                          (i.position = o);
                      }
                    },
                    onButtonEvent: function(t, e) {
                      var i,
                        n = this.mapping[this.data.hand].buttons[t];
                      if (Array.isArray(n))
                        for (i = 0; i < n.length; i++) this.el.emit(n[i] + e);
                      else this.el.emit(n + e);
                      this.updateModel(n, e);
                    },
                    onAxisMoved: function(t) {
                      this.emitIfAxesChanged(
                        this,
                        this.mapping[this.data.hand].axes,
                        t
                      );
                    },
                    updateModel: function(t, e) {
                      var i;
                      if (Array.isArray(t))
                        for (i = 0; i < t.length; i++)
                          this.updateButtonModel(t[i], e);
                      else this.updateButtonModel(t, e);
                    },
                    updateButtonModel: function(t, e) {
                      var i =
                          'up' === e || 'touchend' === e
                            ? this.data.buttonColor
                            : 'touchstart' === e
                              ? this.data.buttonTouchColor
                              : this.data.buttonHighlightColor,
                        n = this.buttonMeshes;
                      this.data.model &&
                        n &&
                        n[t] &&
                        n[t].material.color.set(i);
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../utils/bind': 189,
                  '../utils/tracked-controls': 199
                }
              ],
              94: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent;
                  e.exports.Component = n('position', {
                    schema: { type: 'vec3' },
                    update: function() {
                      var t = this.el.object3D,
                        e = this.data;
                      t.position.set(e.x, e.y, e.z);
                    }
                  });
                },
                { '../core/component': 125 }
              ],
              95: [
                function(t, e, i) {
                  var n,
                    r,
                    a,
                    o,
                    s,
                    c,
                    u = t('../core/component').registerComponent,
                    l = t('../lib/three'),
                    h = t('../utils/').bind,
                    d = new l.Vector3();
                  e.exports.Component = u('raycaster', {
                    schema: {
                      direction: {
                        type: 'vec3',
                        default: { x: 0, y: 0, z: -1 }
                      },
                      far: { default: 1e3 },
                      interval: { default: 100 },
                      near: { default: 0 },
                      objects: { default: '' },
                      origin: { type: 'vec3' },
                      recursive: { default: !0 },
                      showLine: { default: !1 },
                      useWorldCoordinates: { default: !1 }
                    },
                    init: function() {
                      (this.lineData = {}),
                        (this.lineEndVec3 = new l.Vector3()),
                        (this.unitLineEndVec3 = new l.Vector3()),
                        (this.intersectedEls = []),
                        (this.objects = null),
                        (this.prevCheckTime = void 0),
                        (this.prevIntersectedEls = []),
                        (this.raycaster = new l.Raycaster()),
                        this.updateOriginDirection(),
                        (this.refreshObjects = h(this.refreshObjects, this)),
                        (this.refreshOnceChildLoaded = h(
                          this.refreshOnceChildLoaded,
                          this
                        ));
                    },
                    update: function(t) {
                      var e = this.data,
                        i = this.el,
                        n = this.raycaster;
                      (n.far = e.far),
                        (n.near = e.near),
                        !e.showLine ||
                          (e.far === t.far &&
                            e.origin === t.origin &&
                            e.direction === t.direction &&
                            e.showLine === t.showLine) ||
                          (this.unitLineEndVec3
                            .copy(e.origin)
                            .add(e.direction)
                            .normalize(),
                          this.drawLine()),
                        !e.showLine && t.showLine && i.removeAttribute('line'),
                        this.refreshObjects();
                    },
                    play: function() {
                      this.el.sceneEl.addEventListener(
                        'loaded',
                        this.refreshObjects
                      ),
                        this.el.sceneEl.addEventListener(
                          'child-attached',
                          this.refreshOnceChildLoaded
                        ),
                        this.el.sceneEl.addEventListener(
                          'child-detached',
                          this.refreshObjects
                        );
                    },
                    pause: function() {
                      this.el.sceneEl.removeEventListener(
                        'loaded',
                        this.refreshObjects
                      ),
                        this.el.sceneEl.removeEventListener(
                          'child-attached',
                          this.refreshOnceChildLoaded
                        ),
                        this.el.sceneEl.removeEventListener(
                          'child-detached',
                          this.refreshObjects
                        );
                    },
                    remove: function() {
                      this.data.showLine && this.el.removeAttribute('line');
                    },
                    refreshOnceChildLoaded: function(t) {
                      var e = this,
                        i = t.detail.el;
                      i &&
                        (i.hasLoaded
                          ? this.refreshObjects()
                          : i.addEventListener('loaded', function t(n) {
                              i.removeEventListener('loaded', t),
                                e.refreshObjects();
                            }));
                    },
                    refreshObjects: function() {
                      var t,
                        e,
                        i,
                        n = this.data,
                        r = n.objects
                          ? this.el.sceneEl.querySelectorAll(n.objects)
                          : null;
                      if (r)
                        for (i = [], e = 0; e < r.length; e++)
                          i.push(r[e].object3D);
                      else i = this.el.sceneEl.object3D.children;
                      for (this.objects = [], e = 0; e < i.length; e++)
                        (t = i[e].children) &&
                          this.objects.push.apply(this.objects, t);
                    },
                    tick: ((c = []),
                    function(t) {
                      var e,
                        i,
                        n,
                        r,
                        a = this.el,
                        o = this.data,
                        s = this.intersectedEls,
                        u = this.prevCheckTime,
                        l = this.prevIntersectedEls;
                      if (!(u && t - u < o.interval)) {
                        for (
                          this.prevCheckTime = t,
                            (function(t, e) {
                              var i;
                              for (
                                t.length = e.length, i = 0;
                                i < e.length;
                                i++
                              )
                                t[i] = e[i];
                            })(this.prevIntersectedEls, this.intersectedEls),
                            this.updateOriginDirection(),
                            r = this.raycaster.intersectObjects(
                              this.objects,
                              o.recursive
                            ),
                            c.length = 0,
                            e = 0;
                          e < r.length;
                          e++
                        )
                          (i = r[e]),
                            (o.showLine &&
                              i.object === a.getObject3D('line')) ||
                              (i.object.el && c.push(i));
                        for (s.length = c.length, e = 0; e < c.length; e++)
                          s[e] = c[e].object.el;
                        for (e = 0; e < c.length; e++)
                          c[e].object.el.emit('raycaster-intersected', {
                            el: a,
                            intersection: c[e]
                          });
                        for (
                          c.length &&
                            a.emit('raycaster-intersection', {
                              els: s,
                              intersections: c
                            }),
                            e = 0;
                          e < l.length;
                          e++
                        ) {
                          if (-1 !== s.indexOf(l[e])) return;
                          a.emit('raycaster-intersection-cleared', {
                            el: l[e]
                          }),
                            l[e].emit('raycaster-intersected-cleared', {
                              el: a
                            });
                        }
                        o.showLine &&
                          (c.length &&
                            (n =
                              c[0].object.el === a && c[1]
                                ? c[1].distance
                                : c[0].distance),
                          this.drawLine(n));
                      }
                    }),
                    updateOriginDirection: ((a = new l.Vector3()),
                    (o = new l.Quaternion()),
                    (s = new l.Vector3()),
                    function() {
                      var t = this.el,
                        e = this.data;
                      e.useWorldCoordinates
                        ? this.raycaster.set(e.origin, e.direction)
                        : (t.object3D.updateMatrixWorld(),
                          t.object3D.matrixWorld.decompose(s, o, d),
                          (0 === e.origin.x &&
                            0 === e.origin.y &&
                            0 === e.origin.z) ||
                            (s = t.object3D.localToWorld(s.copy(e.origin))),
                          a
                            .copy(e.direction)
                            .add(e.origin)
                            .applyQuaternion(o)
                            .normalize(),
                          this.raycaster.set(s, a));
                    }),
                    drawLine: ((n = new l.Vector3()),
                    (r = {}),
                    function(t) {
                      var e = this.data,
                        i = this.el;
                      void 0 === t && (t = e.far === 1 / 0 ? 1e3 : e.far),
                        (r.start = e.origin),
                        (r.end = n
                          .copy(this.unitLineEndVec3)
                          .multiplyScalar(t)),
                        i.setAttribute('line', r);
                    })
                  });
                },
                {
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/': 195
                }
              ],
              96: [
                function(t, e, i) {
                  var n = t('../lib/three').Math.degToRad,
                    r = t('../core/component').registerComponent;
                  e.exports.Component = r('rotation', {
                    schema: { type: 'vec3' },
                    update: function() {
                      var t = this.data,
                        e = this.el.object3D;
                      e.rotation.set(n(t.x), n(t.y), n(t.z)),
                        (e.rotation.order = 'YXZ');
                    }
                  });
                },
                { '../core/component': 125, '../lib/three': 173 }
              ],
              97: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent;
                  e.exports.Component = n('scale', {
                    schema: { type: 'vec3', default: { x: 1, y: 1, z: 1 } },
                    update: function() {
                      var t = this.data,
                        e = this.el.object3D,
                        i = 0 === t.x ? 1e-5 : t.x,
                        n = 0 === t.y ? 1e-5 : t.y,
                        r = 0 === t.z ? 1e-5 : t.z;
                      e.scale.set(i, n, r);
                    }
                  });
                },
                { '../core/component': 125 }
              ],
              98: [
                function(t, e, i) {
                  var n = t('../../core/component').registerComponent;
                  e.exports.Component = n('debug', { schema: { default: !0 } });
                },
                { '../../core/component': 125 }
              ],
              99: [
                function(t, e, i) {
                  var n = t('../../core/component').registerComponent;
                  e.exports.Component = n('embedded', {
                    dependencies: ['vr-mode-ui'],
                    schema: { default: !0 },
                    update: function() {
                      var t = this.el,
                        e = t.querySelector('.a-enter-vr');
                      !0 === this.data
                        ? (e && e.classList.add('embedded'),
                          t.removeFullScreenStyles())
                        : (e && e.classList.remove('embedded'),
                          t.addFullScreenStyles());
                    }
                  });
                },
                { '../../core/component': 125 }
              ],
              100: [
                function(t, e, i) {
                  var n = t('../../core/component').registerComponent,
                    r = t('../../lib/three'),
                    a = t('../../utils/debug')('components:fog:warn');
                  e.exports.Component = n('fog', {
                    schema: {
                      color: { type: 'color', default: '#000' },
                      density: { default: 25e-5 },
                      far: { default: 1e3, min: 0 },
                      near: { default: 1, min: 0 },
                      type: {
                        default: 'linear',
                        oneOf: ['linear', 'exponential']
                      }
                    },
                    update: function() {
                      var t = this.data,
                        e = this.el,
                        i = this.el.object3D.fog;
                      if (e.isScene)
                        return i && t.type === i.name
                          ? void Object.keys(this.schema).forEach(function(e) {
                              var n = t[e];
                              'color' === e && (n = new r.Color(n)), (i[e] = n);
                            })
                          : ((e.object3D.fog = (function(t) {
                              var e;
                              e =
                                'exponential' === t.type
                                  ? new r.FogExp2(t.color, t.density)
                                  : new r.Fog(t.color, t.near, t.far);
                              return (e.name = t.type), e;
                            })(t)),
                            void e.systems.material.updateMaterials());
                      a('Fog component can only be applied to <a-scene>');
                    },
                    remove: function() {
                      var t = this.el.object3D.fog;
                      t && ((t.far = 0), (t.near = 0.1));
                    }
                  });
                },
                {
                  '../../core/component': 125,
                  '../../lib/three': 173,
                  '../../utils/debug': 191
                }
              ],
              101: [
                function(t, e, i) {
                  (function(i) {
                    var n = t('../../constants').AFRAME_INJECTED,
                      r = t('../../utils/bind'),
                      a = t('../../../package'),
                      o = t('../../core/component').registerComponent;
                    var s,
                      c,
                      u =
                        'https://unpkg.com/aframe-inspector@' +
                        ((s = a.version),
                        ((c = s.split('.'))[2] = 'x'),
                        c.join('.')) +
                        '/dist/aframe-inspector.min.js';
                    e.exports.Component = o('inspector', {
                      schema: { url: { default: u } },
                      init: function() {
                        (this.onKeydown = r(this.onKeydown, this)),
                          (this.onMessage = r(this.onMessage, this)),
                          this.initOverlay(),
                          window.addEventListener('keydown', this.onKeydown),
                          window.addEventListener('message', this.onMessage);
                      },
                      initOverlay: function() {
                        (this.loadingMessageEl = document.createElement('div')),
                          this.loadingMessageEl.classList.add(
                            'a-inspector-loader'
                          ),
                          (this.loadingMessageEl.innerHTML =
                            'Loading Inspector<span class="dots"><span>.</span><span>.</span><span>.</span></span>');
                      },
                      remove: function() {
                        this.removeEventListeners();
                      },
                      onKeydown: function(t) {
                        var e = 73 === t.keyCode && t.ctrlKey && t.altKey;
                        this.data && e && this.injectInspector();
                      },
                      showLoader: function() {
                        document.body.appendChild(this.loadingMessageEl);
                      },
                      hideLoader: function() {
                        document.body.removeChild(this.loadingMessageEl);
                      },
                      onMessage: function(t) {
                        'INJECT_AFRAME_INSPECTOR' === t.data &&
                          this.injectInspector();
                      },
                      injectInspector: function() {
                        var t,
                          e = this;
                        AFRAME.INSPECTOR ||
                          AFRAME.inspectorInjected ||
                          (this.showLoader(),
                          ((t = document.createElement(
                            'script'
                          )).src = this.data.url),
                          t.setAttribute('data-name', 'aframe-inspector'),
                          t.setAttribute(n, ''),
                          (t.onload = function() {
                            AFRAME.INSPECTOR.open(),
                              e.hideLoader(),
                              e.removeEventListeners();
                          }),
                          (t.onerror = function() {
                            e.loadingMessageEl.innerHTML =
                              'Error loading Inspector';
                          }),
                          document.head.appendChild(t),
                          (AFRAME.inspectorInjected = !0));
                      },
                      removeEventListeners: function() {
                        window.removeEventListener('keydown', this.onKeydown),
                          window.removeEventListener('message', this.onMessage);
                      }
                    });
                  }.call(this, t('_process')));
                },
                {
                  '../../../package': 76,
                  '../../constants': 116,
                  '../../core/component': 125,
                  '../../utils/bind': 189,
                  _process: 6
                }
              ],
              102: [
                function(t, e, i) {
                  var n = t('../../core/component').registerComponent,
                    r = t('../../utils/').shouldCaptureKeyEvent;
                  e.exports.Component = n('keyboard-shortcuts', {
                    schema: {
                      enterVR: { default: !0 },
                      exitVR: { default: !0 }
                    },
                    init: function() {
                      var t = this,
                        e = this.el;
                      this.listener = window.addEventListener(
                        'keyup',
                        function(i) {
                          r(i) &&
                            (t.enterVREnabled &&
                              70 === i.keyCode &&
                              e.enterVR(),
                            t.enterVREnabled && 27 === i.keyCode && e.exitVR());
                        },
                        !1
                      );
                    },
                    update: function(t) {
                      var e = this.data;
                      this.enterVREnabled = e.enterVR;
                    },
                    remove: function() {
                      window.removeEventListener('keyup', this.listener);
                    }
                  });
                },
                { '../../core/component': 125, '../../utils/': 195 }
              ],
              103: [
                function(t, e, i) {
                  var n = t('../../utils/debug'),
                    r = t('../../core/component').registerComponent,
                    a = n('components:pool:warn');
                  e.exports.Component = r('pool', {
                    schema: {
                      mixin: { default: '' },
                      size: { default: 0 },
                      dynamic: { default: !1 }
                    },
                    multiple: !0,
                    initPool: function() {
                      var t;
                      if (this.data.mixin)
                        for (
                          this.availableEls = [], this.usedEls = [], t = 0;
                          t < this.data.size;
                          ++t
                        )
                          this.createEntity();
                    },
                    update: function(t) {
                      var e = this.data;
                      (t.mixin === e.mixin && t.size === e.size) ||
                        this.initPool();
                    },
                    createEntity: function() {
                      var t = document.createElement('a-entity');
                      (t.play = this.wrapPlay(t.play)),
                        t.setAttribute('mixin', this.data.mixin),
                        t.setAttribute('visible', !1),
                        this.el.appendChild(t),
                        this.availableEls.push(t);
                    },
                    wrapPlay: function(t) {
                      var e = this.usedEls;
                      return function() {
                        -1 !== e.indexOf(this) && t.call(this);
                      };
                    },
                    requestEntity: function() {
                      var t;
                      if (0 === this.availableEls.length) {
                        if (!1 === this.data.dynamic)
                          return void a(
                            'Requested entity from empty pool ' + this.name
                          );
                        a(
                          'Requested entity from empty pool. This pool is dynamicand will resize automatically. You might want to increase its initial size' +
                            this.name
                        ),
                          this.createEntity();
                      }
                      return (
                        (t = this.availableEls.shift()),
                        this.usedEls.push(t),
                        t.setAttribute('visible', !0),
                        t
                      );
                    },
                    returnEntity: function(t) {
                      var e = this.usedEls.indexOf(t);
                      -1 !== e
                        ? (this.usedEls.splice(e, 1),
                          this.availableEls.push(t),
                          t.setAttribute('visible', !1),
                          t.pause())
                        : a(
                            'The returned entity was not previously pooled from ' +
                              this.name
                          );
                    }
                  });
                },
                { '../../core/component': 125, '../../utils/debug': 191 }
              ],
              104: [
                function(t, e, i) {
                  var n = t('../../core/component').registerComponent,
                    r = t('../../lib/three'),
                    a = [
                      'attribute vec3 position;',
                      'attribute vec2 uv;',
                      'uniform mat4 projectionMatrix;',
                      'uniform mat4 modelViewMatrix;',
                      'varying vec2 vUv;',
                      'void main()  {',
                      '  vUv = vec2( 1.- uv.x, uv.y );',
                      '  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
                      '}'
                    ].join('\n'),
                    o = [
                      'precision mediump float;',
                      'uniform samplerCube map;',
                      'varying vec2 vUv;',
                      '#define M_PI 3.141592653589793238462643383279',
                      'void main() {',
                      '  vec2 uv = vUv;',
                      '  float longitude = uv.x * 2. * M_PI - M_PI + M_PI / 2.;',
                      '  float latitude = uv.y * M_PI;',
                      '  vec3 dir = vec3(',
                      '    - sin( longitude ) * sin( latitude ),',
                      '    cos( latitude ),',
                      '    - cos( longitude ) * sin( latitude )',
                      '  );',
                      '  normalize( dir );',
                      '  gl_FragColor = vec4( textureCube( map, dir ).rgb, 1.0 );',
                      '}'
                    ].join('\n');
                  e.exports.Component = n('screenshot', {
                    schema: {
                      width: { default: 4096 },
                      height: { default: 2048 }
                    },
                    init: function() {
                      var t = this.el,
                        e = this;
                      function i() {
                        var i = t.renderer.getContext();
                        (e.cubeMapSize = i.getParameter(
                          i.MAX_CUBE_MAP_TEXTURE_SIZE
                        )),
                          (e.material = new r.RawShaderMaterial({
                            uniforms: { map: { type: 't', value: null } },
                            vertexShader: a,
                            fragmentShader: o,
                            side: r.DoubleSide
                          })),
                          (e.quad = new r.Mesh(
                            new r.PlaneBufferGeometry(1, 1),
                            e.material
                          )),
                          (e.quad.visible = !1),
                          (e.camera = new r.OrthographicCamera(
                            -0.5,
                            0.5,
                            0.5,
                            -0.5,
                            -1e4,
                            1e4
                          )),
                          (e.canvas = document.createElement('canvas')),
                          (e.ctx = e.canvas.getContext('2d')),
                          t.camera && t.camera.add(e.quad),
                          (e.onKeyDown = e.onKeyDown.bind(e)),
                          (e.onCameraActive = e.onCameraActive.bind(e)),
                          t.addEventListener(
                            'camera-set-active',
                            e.onCameraActive
                          );
                      }
                      t.renderer
                        ? i()
                        : t.addEventListener('render-target-loaded', i);
                    },
                    getRenderTarget: function(t, e) {
                      return new r.WebGLRenderTarget(t, e, {
                        minFilter: r.LinearFilter,
                        magFilter: r.LinearFilter,
                        wrapS: r.ClampToEdgeWrapping,
                        wrapT: r.ClampToEdgeWrapping,
                        format: r.RGBAFormat,
                        type: r.UnsignedByteType
                      });
                    },
                    resize: function(t, e) {
                      this.quad.scale.set(t, e, 1),
                        (this.camera.left = -1 * t / 2),
                        (this.camera.right = t / 2),
                        (this.camera.top = e / 2),
                        (this.camera.bottom = -1 * e / 2),
                        this.camera.updateProjectionMatrix(),
                        (this.canvas.width = t),
                        (this.canvas.height = e);
                    },
                    play: function() {
                      window.addEventListener('keydown', this.onKeyDown);
                    },
                    onCameraActive: function(t) {
                      var e = this.quad.parent;
                      e && e.remove(this.quad),
                        t.detail.cameraEl.getObject3D('camera').add(this.quad);
                    },
                    onKeyDown: function(t) {
                      var e = 83 === t.keyCode && t.ctrlKey && t.altKey;
                      if (this.data && e) {
                        var i = t.shiftKey ? 'equirectangular' : 'perspective';
                        this.capture(i);
                      }
                    },
                    setCapture: function(t) {
                      var e,
                        i,
                        n,
                        a = this.el;
                      return (
                        'perspective' === t
                          ? ((this.quad.visible = !1),
                            (i = a.camera),
                            (e = {
                              width: this.data.width,
                              height: this.data.height
                            }))
                          : ((i = this.camera).position.copy(
                              a.camera.getWorldPosition()
                            ),
                            i.rotation.copy(a.camera.getWorldRotation()),
                            (n = new r.CubeCamera(
                              a.camera.near,
                              a.camera.far,
                              Math.min(this.cubeMapSize, 2048)
                            )).position.copy(a.camera.getWorldPosition()),
                            n.rotation.copy(a.camera.getWorldRotation()),
                            n.updateCubeMap(a.renderer, a.object3D),
                            (this.quad.material.uniforms.map.value =
                              n.renderTarget.texture),
                            (e = {
                              width: this.data.width,
                              height: this.data.height
                            }),
                            (this.quad.visible = !0)),
                        { camera: i, size: e, projection: t }
                      );
                    },
                    capture: function(t) {
                      var e = this.setCapture(t);
                      this.renderCapture(e.camera, e.size, e.projection),
                        this.saveCapture();
                    },
                    getCanvas: function(t) {
                      var e = this.setCapture(t);
                      return (
                        this.renderCapture(e.camera, e.size, e.projection),
                        this.canvas
                      );
                    },
                    renderCapture: function(t, e, i) {
                      var n,
                        r,
                        a,
                        o = this.el.renderer.autoClear,
                        s = this.el,
                        c = this.el.renderer;
                      (r = this.getRenderTarget(e.width, e.height)),
                        (a = new Uint8Array(4 * e.width * e.height)),
                        this.resize(e.width, e.height),
                        (c.autoClear = !0),
                        c.render(s.object3D, t, r, !0),
                        (c.autoClear = o),
                        c.readRenderTargetPixels(r, 0, 0, e.width, e.height, a),
                        'perspective' === i &&
                          (a = this.flipPixelsVertically(a, e.width, e.height)),
                        (n = new ImageData(
                          new Uint8ClampedArray(a),
                          e.width,
                          e.height
                        )),
                        (this.quad.visible = !1),
                        this.ctx.putImageData(n, 0, 0);
                    },
                    flipPixelsVertically: function(t, e, i) {
                      for (var n = t.slice(0), r = 0; r < e; ++r)
                        for (var a = 0; a < i; ++a)
                          (n[4 * r + a * e * 4] = t[4 * r + (i - a) * e * 4]),
                            (n[4 * r + 1 + a * e * 4] =
                              t[4 * r + 1 + (i - a) * e * 4]),
                            (n[4 * r + 2 + a * e * 4] =
                              t[4 * r + 2 + (i - a) * e * 4]),
                            (n[4 * r + 3 + a * e * 4] =
                              t[4 * r + 3 + (i - a) * e * 4]);
                      return n;
                    },
                    saveCapture: function() {
                      this.canvas.toBlob(function(t) {
                        var e =
                            'screenshot-' +
                            document.title.toLowerCase() +
                            '-' +
                            Date.now() +
                            '.png',
                          i = document.createElement('a'),
                          n = URL.createObjectURL(t);
                        (i.href = n),
                          i.setAttribute('download', e),
                          (i.innerHTML = 'downloading...'),
                          (i.style.display = 'none'),
                          document.body.appendChild(i),
                          setTimeout(function() {
                            i.click(), document.body.removeChild(i);
                          }, 1);
                      }, 'image/png');
                    }
                  });
                },
                { '../../core/component': 125, '../../lib/three': 173 }
              ],
              105: [
                function(t, e, i) {
                  var n = t('../../core/component').registerComponent,
                    r = t('../../../vendor/rStats'),
                    a = t('../../utils');
                  t('../../../vendor/rStats.extras'),
                    t('../../lib/rStatsAframe');
                  var o = window.aframeStats,
                    s = a.bind,
                    c = window.threeStats;
                  e.exports.Component = n('stats', {
                    schema: { default: !0 },
                    init: function() {
                      var t,
                        e,
                        i,
                        n,
                        u = this.el;
                      'false' !== a.getUrlParameter('stats') &&
                        ((this.stats = ((e = new c((t = u).renderer)),
                        (i = new o(t)),
                        (n = t.isMobile ? [] : [e, i]),
                        new r({
                          css: [],
                          values: { fps: { caption: 'fps', below: 30 } },
                          groups: [
                            { caption: 'Framerate', values: ['fps', 'raf'] }
                          ],
                          plugins: n
                        }))),
                        (this.statsEl = document.querySelector('.rs-base')),
                        (this.hideBound = s(this.hide, this)),
                        (this.showBound = s(this.show, this)),
                        u.addEventListener('enter-vr', this.hideBound),
                        u.addEventListener('exit-vr', this.showBound));
                    },
                    update: function() {
                      if (this.stats)
                        return this.data ? this.show() : this.hide();
                    },
                    remove: function() {
                      this.el.removeEventListener('enter-vr', this.hideBound),
                        this.el.removeEventListener('exit-vr', this.showBound),
                        this.statsEl &&
                          this.statsEl.parentNode.removeChild(this.statsEl);
                    },
                    tick: function() {
                      var t = this.stats;
                      t && (t('rAF').tick(), t('FPS').frame(), t().update());
                    },
                    hide: function() {
                      this.statsEl.classList.add('a-hidden');
                    },
                    show: function() {
                      this.statsEl.classList.remove('a-hidden');
                    }
                  });
                },
                {
                  '../../../vendor/rStats': 203,
                  '../../../vendor/rStats.extras': 202,
                  '../../core/component': 125,
                  '../../lib/rStatsAframe': 172,
                  '../../utils': 195
                }
              ],
              106: [
                function(t, e, i) {
                  var n = t('../../core/component').registerComponent,
                    r = t('../../constants/'),
                    a = t('../../utils/'),
                    o = a.bind,
                    s = 'a-enter-vr',
                    c = 'a-enter-vr-button',
                    u = 'a-hidden',
                    l = 'a-orientation-modal';
                  e.exports.Component = n('vr-mode-ui', {
                    dependencies: ['canvas'],
                    schema: { enabled: { default: !0 } },
                    init: function() {
                      var t = this,
                        e = this.el;
                      'false' !== a.getUrlParameter('ui') &&
                        ((this.enterVR = o(e.enterVR, e)),
                        (this.exitVR = o(e.exitVR, e)),
                        (this.insideLoader = !1),
                        (this.enterVREl = null),
                        (this.orientationModalEl = null),
                        e.addEventListener(
                          'enter-vr',
                          o(this.updateEnterVRInterface, this)
                        ),
                        e.addEventListener(
                          'exit-vr',
                          o(this.updateEnterVRInterface, this)
                        ),
                        window.addEventListener('message', function(e) {
                          'loaderReady' === e.data.type &&
                            ((t.insideLoader = !0), t.remove());
                        }),
                        window.addEventListener(
                          'orientationchange',
                          o(this.toggleOrientationModalIfNeeded, this)
                        ));
                    },
                    update: function() {
                      var t,
                        e,
                        i,
                        n = this.el;
                      if (
                        !this.data.enabled ||
                        this.insideLoader ||
                        'false' === a.getUrlParameter('ui')
                      )
                        return this.remove();
                      this.enterVREl ||
                        this.orientationModalEl ||
                        ((this.enterVREl = ((t = this.enterVR),
                        (i = document.createElement('div')).classList.add(s),
                        i.setAttribute(r.AFRAME_INJECTED, ''),
                        ((e = document.createElement('button')).className = c),
                        e.setAttribute(
                          'title',
                          'Enter VR mode with a headset or fullscreen mode on a desktop. Visit https://webvr.rocks or https://webvr.info for more information.'
                        ),
                        e.setAttribute(r.AFRAME_INJECTED, ''),
                        i.appendChild(e),
                        e.addEventListener('click', function(e) {
                          t();
                        }),
                        i)),
                        n.appendChild(this.enterVREl),
                        (this.orientationModalEl = (function(t) {
                          var e = document.createElement('div');
                          (e.className = l),
                            e.classList.add(u),
                            e.setAttribute(r.AFRAME_INJECTED, '');
                          var i = document.createElement('button');
                          return (
                            i.setAttribute(r.AFRAME_INJECTED, ''),
                            (i.innerHTML = 'Exit VR'),
                            i.addEventListener('click', t),
                            e.appendChild(i),
                            e
                          );
                        })(this.exitVR)),
                        n.appendChild(this.orientationModalEl),
                        this.updateEnterVRInterface());
                    },
                    remove: function() {
                      [this.enterVREl, this.orientationModalEl].forEach(
                        function(t) {
                          t && t.parentNode.removeChild(t);
                        }
                      );
                    },
                    updateEnterVRInterface: function() {
                      this.toggleEnterVRButtonIfNeeded(),
                        this.toggleOrientationModalIfNeeded();
                    },
                    toggleEnterVRButtonIfNeeded: function() {
                      var t = this.el;
                      this.enterVREl &&
                        (t.is('vr-mode')
                          ? this.enterVREl.classList.add(u)
                          : this.enterVREl.classList.remove(u));
                    },
                    toggleOrientationModalIfNeeded: function() {
                      var t = this.el,
                        e = this.orientationModalEl;
                      e &&
                        t.isMobile &&
                        (!a.device.isLandscape() && t.is('vr-mode')
                          ? e.classList.remove(u)
                          : e.classList.add(u));
                    }
                  });
                },
                {
                  '../../constants/': 116,
                  '../../core/component': 125,
                  '../../utils/': 195
                }
              ],
              107: [
                function(t, e, i) {
                  var n = t('../core/component'),
                    r = t('../lib/three'),
                    a = t('../utils/bind'),
                    o = n.registerComponent;
                  e.exports.Component = o('shadow', {
                    schema: { cast: { default: !0 }, receive: { default: !0 } },
                    init: function() {
                      (this.onMeshChanged = a(this.update, this)),
                        this.el.addEventListener(
                          'object3dset',
                          this.onMeshChanged
                        ),
                        this.system.setShadowMapEnabled(!0);
                    },
                    update: function() {
                      var t = this.data;
                      this.updateDescendants(t.cast, t.receive);
                    },
                    remove: function() {
                      this.el.removeEventListener(
                        'object3dset',
                        this.onMeshChanged
                      ),
                        this.updateDescendants(!1, !1);
                    },
                    updateDescendants: function(t, e) {
                      var i = this.el.sceneEl;
                      this.el.object3D.traverse(function(n) {
                        if (
                          n instanceof r.Mesh &&
                          ((n.castShadow = t),
                          (n.receiveShadow = e),
                          i.hasLoaded && n.material)
                        )
                          for (
                            var a = n.material.materials || [n.material], o = 0;
                            o < a.length;
                            o++
                          )
                            a[o].needsUpdate = !0;
                      });
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/bind': 189
                }
              ],
              108: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../utils/debug'),
                    a = t('../utils/bind'),
                    o = t('../lib/three'),
                    s = r('components:sound:warn');
                  e.exports.Component = n('sound', {
                    schema: {
                      autoplay: { default: !1 },
                      distanceModel: {
                        default: 'inverse',
                        oneOf: ['linear', 'inverse', 'exponential']
                      },
                      loop: { default: !1 },
                      maxDistance: { default: 1e4 },
                      on: { default: '' },
                      poolSize: { default: 1 },
                      positional: { default: !0 },
                      refDistance: { default: 1 },
                      rolloffFactor: { default: 1 },
                      src: { type: 'audio' },
                      volume: { default: 1 }
                    },
                    multiple: !0,
                    init: function() {
                      (this.listener = null),
                        (this.audioLoader = new o.AudioLoader()),
                        (this.pool = new o.Group()),
                        (this.loaded = !1),
                        (this.mustPlay = !1),
                        (this.playSound = a(this.playSound, this));
                    },
                    update: function(t) {
                      var e = this.data,
                        i = e.src !== t.src;
                      if (i) {
                        if (!e.src)
                          return void s(
                            'Audio source was not specified with `src`'
                          );
                        this.setupSound();
                      }
                      if (
                        (this.pool.children.forEach(function(t) {
                          e.positional &&
                            (t.setDistanceModel(e.distanceModel),
                            t.setMaxDistance(e.maxDistance),
                            t.setRefDistance(e.refDistance),
                            t.setRolloffFactor(e.rolloffFactor)),
                            t.setLoop(e.loop),
                            t.setVolume(e.volume),
                            (t.isPaused = !1);
                        }),
                        e.on !== t.on && this.updateEventListener(t.on),
                        i)
                      ) {
                        var n = this;
                        (this.loaded = !1),
                          this.audioLoader.load(e.src, function(t) {
                            n.pool.children.forEach(function(e) {
                              e.setBuffer(t);
                            }),
                              (n.loaded = !0),
                              o.Cache.remove(e.src),
                              (n.data.autoplay || n.mustPlay) && n.playSound(),
                              n.el.emit('sound-loaded');
                          });
                      }
                    },
                    pause: function() {
                      this.stopSound(), this.removeEventListener();
                    },
                    play: function() {
                      this.data.autoplay && this.playSound(),
                        this.updateEventListener();
                    },
                    remove: function() {
                      this.removeEventListener(),
                        this.el.removeObject3D(this.attrName);
                      try {
                        this.pool.children.forEach(function(t) {
                          t.disconnect();
                        });
                      } catch (t) {
                        s('Audio source not properly disconnected');
                      }
                    },
                    updateEventListener: function(t) {
                      var e = this.el;
                      t && e.removeEventListener(t, this.playSound),
                        e.addEventListener(this.data.on, this.playSound);
                    },
                    removeEventListener: function() {
                      this.el.removeEventListener(this.data.on, this.playSound);
                    },
                    setupSound: function() {
                      var t = this.el,
                        e = t.sceneEl;
                      this.pool.children.length > 0 &&
                        (this.stopSound(), t.removeObject3D('sound'));
                      var i = (this.listener =
                        e.audioListener || new o.AudioListener());
                      (e.audioListener = i),
                        e.camera && e.camera.add(i),
                        e.addEventListener('camera-set-active', function(t) {
                          t.detail.cameraEl.getObject3D('camera').add(i);
                        }),
                        (this.pool = new o.Group());
                      for (var n = 0; n < this.data.poolSize; n++) {
                        var r = this.data.positional
                          ? new o.PositionalAudio(i)
                          : new o.Audio(i);
                        this.pool.add(r);
                      }
                      t.setObject3D(this.attrName, this.pool),
                        this.pool.children.forEach(function(e) {
                          e.onEnded = function() {
                            (e.isPlaying = !1),
                              t.emit('sound-ended', { index: n });
                          };
                        });
                    },
                    pauseSound: function() {
                      (this.isPlaying = !1),
                        this.pool.children.forEach(function(t) {
                          t.source &&
                            t.source.buffer &&
                            t.isPlaying &&
                            !t.isPaused &&
                            ((t.isPaused = !0), t.pause());
                        });
                    },
                    playSound: function() {
                      if (!this.loaded)
                        return (
                          s(
                            'Sound not loaded yet. It will be played once it finished loading'
                          ),
                          void (this.mustPlay = !0)
                        );
                      var t = !1;
                      (this.isPlaying = !0),
                        this.pool.children.forEach(function(e) {
                          if (!e.isPlaying && e.buffer && !t)
                            return e.play(), (e.isPaused = !1), void (t = !0);
                        }),
                        t
                          ? (this.mustPlay = !1)
                          : s(
                              'All the sounds are playing. If you need to play more sounds simultaneously consider increasing the size of pool with the `poolSize` attribute.',
                              this.el
                            );
                    },
                    stopSound: function() {
                      (this.isPlaying = !1),
                        this.pool.children.forEach(function(t) {
                          t.source && t.source.buffer && t.stop();
                        });
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/bind': 189,
                  '../utils/debug': 191
                }
              ],
              109: [
                function(t, e, i) {
                  var n = t('three-bmfont-text'),
                    r = t('load-bmfont'),
                    a = t('path'),
                    o = t('../core/component').registerComponent,
                    s = t('../core/shader'),
                    c = t('../lib/three'),
                    u = t('../utils/'),
                    l = u.debug('components:text:error'),
                    h = s.shaders,
                    d = u.debug('components:text:warn'),
                    p = 'https://cdn.aframe.io/fonts/',
                    f = {
                      aileronsemibold: p + 'Aileron-Semibold.fnt',
                      dejavu: p + 'DejaVu-sdf.fnt',
                      exo2bold: p + 'Exo2Bold.fnt',
                      exo2semibold: p + 'Exo2SemiBold.fnt',
                      kelsonsans: p + 'KelsonSans.fnt',
                      monoid: p + 'Monoid.fnt',
                      mozillavr: p + 'mozillavr.fnt',
                      roboto: p + 'Roboto-msdf.json',
                      sourcecodepro: p + 'SourceCodePro.fnt'
                    },
                    m = ['roboto'];
                  e.exports.FONTS = f;
                  var g = new function() {
                      var t = (this.cache = {});
                      this.get = function(e, i) {
                        return e in t ? t[e] : ((t[e] = i()), t[e]);
                      };
                    }(),
                    v = {};
                  function y(t) {
                    return (
                      void 0 !== (t = u.clone(t)).lineHeight &&
                        ((t.lineHeight = parseFloat(t.lineHeight)),
                        isFinite(t.lineHeight) || (t.lineHeight = void 0)),
                      void 0 !== t.width &&
                        ((t.width = parseFloat(t.width)),
                        isFinite(t.width) || (t.width = void 0)),
                      t
                    );
                  }
                  function M(t, e) {
                    t.side = e.side;
                  }
                  function w(t, e, i) {
                    return t || (0.5 + e) * i;
                  }
                  e.exports.Component = o('text', {
                    multiple: !0,
                    schema: {
                      align: {
                        type: 'string',
                        default: 'left',
                        oneOf: ['left', 'right', 'center']
                      },
                      alphaTest: { default: 0.5 },
                      anchor: {
                        default: 'center',
                        oneOf: ['left', 'right', 'center', 'align']
                      },
                      baseline: {
                        default: 'center',
                        oneOf: ['top', 'center', 'bottom']
                      },
                      color: { type: 'color', default: '#FFF' },
                      font: { type: 'string', default: 'roboto' },
                      fontImage: { type: 'string' },
                      height: { type: 'number' },
                      letterSpacing: { type: 'number', default: 0 },
                      lineHeight: { type: 'number' },
                      opacity: { type: 'number', default: 1 },
                      shader: { default: 'sdf', oneOf: h },
                      side: {
                        default: 'front',
                        oneOf: ['front', 'back', 'double']
                      },
                      tabSize: { default: 4 },
                      transparent: { default: !0 },
                      value: { type: 'string' },
                      whiteSpace: {
                        default: 'normal',
                        oneOf: ['normal', 'pre', 'nowrap']
                      },
                      width: { type: 'number' },
                      wrapCount: { type: 'number', default: 40 },
                      wrapPixels: { type: 'number' },
                      yOffset: { type: 'number', default: 0 },
                      zOffset: { type: 'number', default: 0.001 }
                    },
                    init: function() {
                      (this.texture = new c.Texture()),
                        (this.texture.anisotropy = 16),
                        (this.geometry = n()),
                        this.createOrUpdateMaterial(),
                        (this.mesh = new c.Mesh(this.geometry, this.material)),
                        this.el.setObject3D(this.attrName, this.mesh);
                    },
                    update: function(t) {
                      var e = y(this.data),
                        i = this.currentFont;
                      this.createOrUpdateMaterial(),
                        t.font === e.font
                          ? i &&
                            (this.updateGeometry(this.geometry, e, i),
                            this.updateLayout(e))
                          : this.updateFont();
                    },
                    remove: function() {
                      this.geometry.dispose(),
                        (this.geometry = null),
                        this.el.removeObject3D(this.attrName),
                        this.material.dispose(),
                        (this.material = null),
                        this.texture.dispose(),
                        (this.texture = null),
                        this.shaderObject && delete this.shaderObject;
                    },
                    createOrUpdateMaterial: function() {
                      var t,
                        e,
                        i,
                        n,
                        r,
                        a,
                        o,
                        s,
                        u = this.data,
                        l = this.material;
                      if (
                        ((n = u.shader),
                        -1 !== m.indexOf(u.font) ||
                        u.font.indexOf('-msdf.') >= 0
                          ? (n = 'msdf')
                          : u.font in f &&
                            -1 === m.indexOf(u.font) &&
                            (n = 'sdf'),
                        (t =
                          (this.shaderObject && this.shaderObject.name) !== n),
                        (i = {
                          alphaTest: u.alphaTest,
                          color: u.color,
                          map: this.texture,
                          opacity: u.opacity,
                          side: (function(t) {
                            switch (t) {
                              case 'back':
                                return c.BackSide;
                              case 'double':
                                return c.DoubleSide;
                              default:
                                return c.FrontSide;
                            }
                          })(u.side),
                          transparent: u.transparent
                        }),
                        !t)
                      )
                        return (
                          this.shaderObject.update(i),
                          (l.transparent = i.transparent),
                          void M(l, i)
                        );
                      (r = this.el),
                        (a = i),
                        ((s = new h[n].Shader()).el = r),
                        s.init(a),
                        s.update(a),
                        ((o = s.material).transparent = a.transparent),
                        (e = { material: o, shader: s }),
                        (this.material = e.material),
                        (this.shaderObject = e.shader),
                        M(this.material, i),
                        this.mesh && (this.mesh.material = this.material);
                    },
                    updateFont: function() {
                      var t,
                        e = this.data,
                        i = this.el,
                        n = this.geometry,
                        o = this;
                      e.font || d('No font specified. Using the default font.'),
                        (this.mesh.visible = !1),
                        (t = this.lookupFont(e.font || 'roboto') || e.font),
                        g
                          .get(t, function() {
                            return (
                              (i = t),
                              (n = e.yOffset),
                              new Promise(function(t, e) {
                                r(i, function(r, a) {
                                  if (r)
                                    return (
                                      l('Error loading font', i), void e(r)
                                    );
                                  i.indexOf('/Roboto-msdf.json') >= 0 &&
                                    (n = 30),
                                    n &&
                                      a.chars.map(function(t) {
                                        t.yoffset += n;
                                      }),
                                    t(a);
                                });
                              })
                            );
                            var i, n;
                          })
                          .then(function(r) {
                            var s, u, h, d, p, f;
                            if (1 !== r.pages.length)
                              throw new Error(
                                'Currently only single-page bitmap fonts are supported.'
                              );
                            v[t] ||
                              (r.widthFactor = v[r] = ((d = 0),
                              (p = 0),
                              (f = 0),
                              (h = r).chars.map(function(t) {
                                (d += t.xadvance),
                                  t.id >= 48 &&
                                    t.id <= 57 &&
                                    (f++, (p += t.xadvance));
                              }),
                              f ? p / f : d / h.chars.length)),
                              (s = y(e)),
                              o.updateGeometry(n, o.data, r),
                              (o.currentFont = r),
                              o.updateLayout(s),
                              (u =
                                e.fontImage ||
                                t.replace(/(\.fnt)|(\.json)/, '.png') ||
                                a.dirname(e.font) + '/' + r.pages[0]),
                              g
                                .get(u, function() {
                                  return (
                                    (t = u),
                                    new Promise(function(e, i) {
                                      new c.ImageLoader().load(
                                        t,
                                        function(t) {
                                          e(t);
                                        },
                                        void 0,
                                        function() {
                                          l('Error loading font image', t),
                                            i(null);
                                        }
                                      );
                                    })
                                  );
                                  var t;
                                })
                                .then(function(t) {
                                  (o.mesh.visible = !0),
                                    (o.texture.image = t),
                                    (o.texture.needsUpdate = !0),
                                    i.emit('textfontset', {
                                      font: e.font,
                                      fontObj: r
                                    });
                                })
                                .catch(function(t) {
                                  throw (l(t), t);
                                });
                          })
                          .catch(function(t) {
                            throw (l(t), t);
                          });
                    },
                    updateLayout: function(t) {
                      var e,
                        i,
                        n,
                        r,
                        a,
                        o,
                        s,
                        c = this.el,
                        u = this.geometry,
                        l = c.getAttribute('geometry'),
                        h = u.layout,
                        d = this.mesh;
                      if (
                        ((l = c.getAttribute('geometry')),
                        (n =
                          (r =
                            (a = t.width || (l && l.width) || 1) /
                            w(
                              t.wrapPixels,
                              t.wrapCount,
                              this.currentFont.widthFactor
                            )) *
                          (h.height + h.descender)),
                        l &&
                          (l.width || c.setAttribute('geometry', 'width', a),
                          l.height || c.setAttribute('geometry', 'height', n)),
                        'left' ===
                          (e = 'align' === t.anchor ? t.align : t.anchor))
                      )
                        o = 0;
                      else if ('right' === e) o = -1 * h.width;
                      else {
                        if ('center' !== e)
                          throw new TypeError(
                            'Invalid text.anchor property value',
                            e
                          );
                        o = -1 * h.width / 2;
                      }
                      if ('bottom' === (i = t.baseline)) s = 0;
                      else if ('top' === i) s = -1 * h.height + h.ascender;
                      else {
                        if ('center' !== i)
                          throw new TypeError(
                            'Invalid text.baseline property value',
                            i
                          );
                        s = -1 * h.height / 2;
                      }
                      (d.position.x = o * r),
                        (d.position.y = s * r),
                        (d.position.z = t.zOffset),
                        d.scale.set(r, -1 * r, r),
                        this.geometry.computeBoundingSphere();
                    },
                    lookupFont: function(t) {
                      return f[t];
                    },
                    updateGeometry: function(t, e, i) {
                      t.update(
                        u.extend({}, e, {
                          font: i,
                          width: w(e.wrapPixels, e.wrapCount, i.widthFactor),
                          text: e.value
                            .toString()
                            .replace(/\\n/g, '\n')
                            .replace(/\\t/g, '\t'),
                          lineHeight: e.lineHeight || i.common.lineHeight
                        })
                      );
                    }
                  });
                },
                {
                  '../core/component': 125,
                  '../core/shader': 134,
                  '../lib/three': 173,
                  '../utils/': 195,
                  'load-bmfont': 24,
                  path: 32,
                  'three-bmfont-text': 37
                }
              ],
              110: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../utils/tracked-controls'),
                    a = t('../lib/three'),
                    o = t('../constants').DEFAULT_CAMERA_HEIGHT,
                    s = t('../constants').DEFAULT_HANDEDNESS,
                    c = 0.175,
                    u = -0.3,
                    l = -0.03,
                    h = 0,
                    d = 0,
                    p = -0.175;
                  e.exports.Component = n('tracked-controls', {
                    schema: {
                      controller: { default: 0 },
                      id: { type: 'string', default: '' },
                      hand: { type: 'string', default: '' },
                      idPrefix: { type: 'string', default: '' },
                      rotationOffset: { default: 0 },
                      armModel: { default: !0 },
                      headElement: { type: 'selector' }
                    },
                    init: function() {
                      (this.axis = [0, 0, 0]),
                        (this.buttonStates = {}),
                        (this.targetControllerNumber = this.data.controller),
                        (this.dolly = new a.Object3D()),
                        (this.controllerEuler = new a.Euler()),
                        (this.controllerEuler.order = 'YXZ'),
                        (this.controllerPosition = new a.Vector3()),
                        (this.controllerQuaternion = new a.Quaternion()),
                        (this.deltaControllerPosition = new a.Vector3()),
                        (this.position = new a.Vector3()),
                        (this.rotation = {}),
                        (this.standingMatrix = new a.Matrix4()),
                        (this.previousControllerPosition = new a.Vector3()),
                        this.updateGamepad();
                    },
                    tick: function(t, e) {
                      var i = this.el.getObject3D('mesh');
                      i && i.update && i.update(e / 1e3),
                        this.updateGamepad(),
                        this.updatePose(),
                        this.updateButtons();
                    },
                    defaultUserHeight: function() {
                      return o;
                    },
                    getHeadElement: function() {
                      return this.data.headElement || this.el.sceneEl.camera.el;
                    },
                    updateGamepad: function() {
                      var t = this.data,
                        e = r.findMatchingController(
                          this.system.controllers,
                          t.id,
                          t.idPrefix,
                          t.hand,
                          t.controller
                        );
                      this.controller = e;
                    },
                    applyArmModel: function(t) {
                      var e,
                        i,
                        n,
                        r,
                        a,
                        o,
                        f = this.controller,
                        m = this.controllerEuler,
                        g = this.controllerQuaternion,
                        v = this.deltaControllerPosition;
                      (r = (n = this.getHeadElement()).object3D),
                        (o =
                          ((i = n.components.camera) ? i.data.userHeight : 0) ||
                          this.defaultUserHeight()),
                        (a = f.pose),
                        (e = (f ? f.hand : void 0) || s),
                        t.copy(r.position),
                        v.set(
                          c * ('left' === e ? -1 : 'right' === e ? 1 : 0),
                          u,
                          l
                        ),
                        v.multiplyScalar(o),
                        v.applyAxisAngle(r.up, r.rotation.y),
                        t.add(v),
                        v.set(h, d, p),
                        v.multiplyScalar(o),
                        a.orientation
                          ? g.fromArray(a.orientation)
                          : g.copy(r.quaternion),
                        m.setFromQuaternion(g),
                        m.set(m.x, m.y, 0),
                        v.applyEuler(m),
                        t.add(v);
                    },
                    updatePose: function() {
                      var t,
                        e,
                        i = this.controller,
                        n = this.controllerEuler,
                        r = this.controllerPosition,
                        o = this.previousControllerPosition,
                        s = this.dolly,
                        c = this.el,
                        u = this.standingMatrix,
                        l = this.system.vrDisplay,
                        h = this.getHeadElement().components.camera,
                        d =
                          (h ? h.data.userHeight : 0) ||
                          this.defaultUserHeight();
                      i &&
                        (null !== (e = i.pose).orientation &&
                          s.quaternion.fromArray(e.orientation),
                        null !== e.position
                          ? s.position.fromArray(e.position)
                          : this.data.armModel &&
                            this.applyArmModel(s.position),
                        null != e.position && l
                          ? l.stageParameters
                            ? (u.fromArray(
                                l.stageParameters.sittingToStandingTransform
                              ),
                              s.matrix.compose(
                                s.position,
                                s.quaternion,
                                s.scale
                              ),
                              s.matrix.multiplyMatrices(u, s.matrix))
                            : ((s.position.y += d),
                              s.matrix.compose(
                                s.position,
                                s.quaternion,
                                s.scale
                              ))
                          : s.matrix.compose(s.position, s.quaternion, s.scale),
                        n.setFromRotationMatrix(s.matrix),
                        r.setFromMatrixPosition(s.matrix),
                        (this.rotation.x = a.Math.radToDeg(n.x)),
                        (this.rotation.y = a.Math.radToDeg(n.y)),
                        (this.rotation.z =
                          a.Math.radToDeg(n.z) + this.data.rotationOffset),
                        c.setAttribute('rotation', this.rotation),
                        (t = c.getAttribute('position')),
                        this.position
                          .copy(t)
                          .sub(o)
                          .add(r),
                        c.setAttribute('position', this.position),
                        o.copy(r));
                    },
                    updateButtons: function() {
                      var t,
                        e,
                        i = this.controller;
                      if (i) {
                        for (e = 0; e < i.buttons.length; ++e)
                          this.buttonStates[e] ||
                            (this.buttonStates[e] = {
                              pressed: !1,
                              touched: !1,
                              value: 0
                            }),
                            (t = i.buttons[e]),
                            this.handleButton(e, t);
                        this.handleAxes();
                      }
                    },
                    handleButton: function(t, e) {
                      return (
                        !!(
                          this.handlePress(t, e) ||
                          this.handleTouch(t, e) ||
                          this.handleValue(t, e)
                        ) &&
                        (this.el.emit('buttonchanged', { id: t, state: e }), !0)
                      );
                    },
                    handleAxes: function() {
                      var t,
                        e = !1,
                        i = this.controller.axes,
                        n = this.axis,
                        r = [];
                      for (t = 0; t < i.length; ++t)
                        r.push(n[t] !== i[t]), r[t] && (e = !0);
                      return (
                        !!e &&
                        ((this.axis = i.slice()),
                        this.el.emit('axismove', {
                          axis: this.axis,
                          changed: r
                        }),
                        !0)
                      );
                    },
                    handlePress: function(t, e) {
                      var i,
                        n = this.buttonStates[t];
                      return (
                        e.pressed !== n.pressed &&
                        ((i = e.pressed ? 'down' : 'up'),
                        this.el.emit('button' + i, { id: t, state: e }),
                        (n.pressed = e.pressed),
                        !0)
                      );
                    },
                    handleTouch: function(t, e) {
                      var i,
                        n = this.buttonStates[t];
                      return (
                        e.touched !== n.touched &&
                        ((i = e.touched ? 'start' : 'end'),
                        this.el.emit('touch' + i, { id: t, state: e }, !0, {
                          touches: []
                        }),
                        (n.touched = e.touched),
                        !0)
                      );
                    },
                    handleValue: function(t, e) {
                      var i = this.buttonStates[t];
                      return e.value !== i.value && ((i.value = e.value), !0);
                    }
                  });
                },
                {
                  '../constants': 116,
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/tracked-controls': 199
                }
              ],
              111: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent;
                  e.exports.Component = n('visible', {
                    schema: { default: !0 },
                    update: function() {
                      this.el.object3D.visible = this.data;
                    }
                  });
                },
                { '../core/component': 125 }
              ],
              112: [
                function(t, e, i) {
                  var n = t('../core/component').registerComponent,
                    r = t('../utils/'),
                    a = r.bind,
                    o = r.trackedControls.checkControllerPresentAndSetup,
                    s = r.trackedControls.emitIfAxesChanged;
                  e.exports.Component = n('vive-controls', {
                    schema: {
                      hand: { default: 'left' },
                      buttonColor: { type: 'color', default: '#FAFAFA' },
                      buttonHighlightColor: {
                        type: 'color',
                        default: '#22D1EE'
                      },
                      model: { default: !0 },
                      rotationOffset: { default: 0 }
                    },
                    mapping: {
                      axes: { trackpad: [0, 1] },
                      buttons: ['trackpad', 'trigger', 'grip', 'menu', 'system']
                    },
                    init: function() {
                      var t = this;
                      (this.animationActive = 'pointing'),
                        (this.checkControllerPresentAndSetup = o),
                        (this.controllerPresent = !1),
                        (this.emitIfAxesChanged = s),
                        (this.lastControllerCheck = 0),
                        (this.onButtonChanged = a(this.onButtonChanged, this)),
                        (this.onButtonDown = function(e) {
                          t.onButtonEvent(e.detail.id, 'down');
                        }),
                        (this.onButtonUp = function(e) {
                          t.onButtonEvent(e.detail.id, 'up');
                        }),
                        (this.onButtonTouchEnd = function(e) {
                          t.onButtonEvent(e.detail.id, 'touchend');
                        }),
                        (this.onButtonTouchStart = function(e) {
                          t.onButtonEvent(e.detail.id, 'touchstart');
                        }),
                        (this.onAxisMoved = a(this.onAxisMoved, this)),
                        (this.previousButtonValues = {}),
                        this.bindMethods();
                    },
                    play: function() {
                      this.checkIfControllerPresent(),
                        this.addControllersUpdateListener();
                    },
                    pause: function() {
                      this.removeEventListeners(),
                        this.removeControllersUpdateListener();
                    },
                    bindMethods: function() {
                      (this.onModelLoaded = a(this.onModelLoaded, this)),
                        (this.onControllersUpdate = a(
                          this.onControllersUpdate,
                          this
                        )),
                        (this.checkIfControllerPresent = a(
                          this.checkIfControllerPresent,
                          this
                        )),
                        (this.removeControllersUpdateListener = a(
                          this.removeControllersUpdateListener,
                          this
                        )),
                        (this.onAxisMoved = a(this.onAxisMoved, this));
                    },
                    addEventListeners: function() {
                      var t = this.el;
                      t.addEventListener('buttonchanged', this.onButtonChanged),
                        t.addEventListener('buttondown', this.onButtonDown),
                        t.addEventListener('buttonup', this.onButtonUp),
                        t.addEventListener('touchend', this.onButtonTouchEnd),
                        t.addEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.addEventListener('model-loaded', this.onModelLoaded),
                        t.addEventListener('axismove', this.onAxisMoved),
                        (this.controllerEventsActive = !0);
                    },
                    removeEventListeners: function() {
                      var t = this.el;
                      t.removeEventListener(
                        'buttonchanged',
                        this.onButtonChanged
                      ),
                        t.removeEventListener('buttondown', this.onButtonDown),
                        t.removeEventListener('buttonup', this.onButtonUp),
                        t.removeEventListener(
                          'touchend',
                          this.onButtonTouchEnd
                        ),
                        t.removeEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.removeEventListener(
                          'model-loaded',
                          this.onModelLoaded
                        ),
                        t.removeEventListener('axismove', this.onAxisMoved),
                        (this.controllerEventsActive = !1);
                    },
                    checkIfControllerPresent: function() {
                      var t = this.data,
                        e = 'right' === t.hand ? 0 : 'left' === t.hand ? 1 : 2;
                      this.checkControllerPresentAndSetup(this, 'OpenVR ', {
                        index: e
                      });
                    },
                    injectTrackedControls: function() {
                      var t = this.el,
                        e = this.data;
                      t.setAttribute('tracked-controls', {
                        idPrefix: 'OpenVR ',
                        controller:
                          'right' === e.hand ? 0 : 'left' === e.hand ? 1 : 2,
                        rotationOffset: e.rotationOffset
                      }),
                        this.data.model &&
                          this.el.setAttribute('obj-model', {
                            obj:
                              'https://cdn.aframe.io/controllers/vive/vr_controller_vive.obj',
                            mtl:
                              'https://cdn.aframe.io/controllers/vive/vr_controller_vive.mtl'
                          });
                    },
                    addControllersUpdateListener: function() {
                      this.el.sceneEl.addEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    removeControllersUpdateListener: function() {
                      this.el.sceneEl.removeEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    onControllersUpdate: function() {
                      this.checkIfControllerPresent();
                    },
                    onButtonChanged: function(t) {
                      var e,
                        i = this.mapping.buttons[t.detail.id],
                        n = this.buttonMeshes;
                      i &&
                        ('trigger' === i &&
                          ((e = t.detail.state.value),
                          n &&
                            n.trigger &&
                            (n.trigger.rotation.x = -e * (Math.PI / 12))),
                        this.el.emit(i + 'changed', t.detail.state));
                    },
                    onModelLoaded: function(t) {
                      var e,
                        i = t.detail.model,
                        n = this;
                      this.data.model &&
                        (((e = this.buttonMeshes = {}).grip = {
                          left: i.getObjectByName('leftgrip'),
                          right: i.getObjectByName('rightgrip')
                        }),
                        (e.menu = i.getObjectByName('menubutton')),
                        (e.system = i.getObjectByName('systembutton')),
                        (e.trackpad = i.getObjectByName('touchpad')),
                        (e.trigger = i.getObjectByName('trigger')),
                        Object.keys(e).forEach(function(t) {
                          n.setButtonColor(t, n.data.buttonColor);
                        }),
                        i.position.set(0, -0.015, 0.04));
                    },
                    onAxisMoved: function(t) {
                      this.emitIfAxesChanged(this, this.mapping.axes, t);
                    },
                    onButtonEvent: function(t, e) {
                      var i,
                        n,
                        r = this.mapping.buttons[t],
                        a = -1 !== e.indexOf('touch');
                      if (Array.isArray(r))
                        for (n = 0; n < r.length; n++) this.el.emit(r[n] + e);
                      else this.el.emit(r + e);
                      if (this.data.model && !a)
                        if (
                          ((i =
                            'up' === e
                              ? this.data.buttonColor
                              : this.data.buttonHighlightColor),
                          Array.isArray(r))
                        )
                          for (n = 0; n < r.length; n++)
                            this.setButtonColor(r[n], i);
                        else this.setButtonColor(r, i);
                    },
                    setButtonColor: function(t, e) {
                      var i = this.buttonMeshes;
                      if (i)
                        return 'grip' === t
                          ? (i.grip.left.material.color.set(e),
                            void i.grip.right.material.color.set(e))
                          : void i[t].material.color.set(e);
                    }
                  });
                },
                { '../core/component': 125, '../utils/': 195 }
              ],
              113: [
                function(t, e, i) {
                  var n,
                    r,
                    a = t('../constants').keyboardevent.KEYCODE_TO_CODE,
                    o = t('../core/component').registerComponent,
                    s = t('../lib/three'),
                    c = t('../utils/'),
                    u = c.bind,
                    l = c.shouldCaptureKeyEvent,
                    h = [
                      'KeyW',
                      'KeyA',
                      'KeyS',
                      'KeyD',
                      'ArrowUp',
                      'ArrowLeft',
                      'ArrowRight',
                      'ArrowDown'
                    ];
                  e.exports.Component = o('wasd-controls', {
                    schema: {
                      acceleration: { default: 65 },
                      adAxis: { default: 'x', oneOf: ['x', 'y', 'z'] },
                      adEnabled: { default: !0 },
                      adInverted: { default: !1 },
                      easing: { default: 20 },
                      enabled: { default: !0 },
                      fly: { default: !1 },
                      wsAxis: { default: 'z', oneOf: ['x', 'y', 'z'] },
                      wsEnabled: { default: !0 },
                      wsInverted: { default: !1 }
                    },
                    init: function() {
                      (this.keys = {}),
                        (this.position = {}),
                        (this.velocity = new s.Vector3()),
                        (this.onBlur = u(this.onBlur, this)),
                        (this.onFocus = u(this.onFocus, this)),
                        (this.onKeyDown = u(this.onKeyDown, this)),
                        (this.onKeyUp = u(this.onKeyUp, this)),
                        (this.onVisibilityChange = u(
                          this.onVisibilityChange,
                          this
                        )),
                        this.attachVisibilityEventListeners();
                    },
                    tick: function(t, e) {
                      var i,
                        n,
                        r = this.data,
                        a = this.el,
                        o = this.position,
                        s = this.velocity;
                      (s[r.adAxis] ||
                        s[r.wsAxis] ||
                        !(function(t) {
                          var e;
                          for (e in t) return !1;
                          return !0;
                        })(this.keys)) &&
                        ((e /= 1e3),
                        this.updateVelocity(e),
                        (s[r.adAxis] || s[r.wsAxis]) &&
                          ((i = a.getAttribute('position')),
                          (n = this.getMovementVector(e)),
                          (o.x = i.x + n.x),
                          (o.y = i.y + n.y),
                          (o.z = i.z + n.z),
                          a.setAttribute('position', o)));
                    },
                    remove: function() {
                      this.removeKeyEventListeners(),
                        this.removeVisibilityEventListeners();
                    },
                    play: function() {
                      this.attachKeyEventListeners();
                    },
                    pause: function() {
                      (this.keys = {}), this.removeKeyEventListeners();
                    },
                    updateVelocity: function(t) {
                      var e,
                        i,
                        n,
                        r,
                        a,
                        o = this.data,
                        s = this.keys,
                        c = this.velocity;
                      if (((i = o.adAxis), (r = o.wsAxis), t > 0.2))
                        return (c[i] = 0), void (c[r] = 0);
                      0 !== c[i] && (c[i] -= c[i] * o.easing * t),
                        0 !== c[r] && (c[r] -= c[r] * o.easing * t),
                        Math.abs(c[i]) < 1e-5 && (c[i] = 0),
                        Math.abs(c[r]) < 1e-5 && (c[r] = 0),
                        o.enabled &&
                          ((e = o.acceleration),
                          o.adEnabled &&
                            ((n = o.adInverted ? -1 : 1),
                            (s.KeyA || s.ArrowLeft) && (c[i] -= n * e * t),
                            (s.KeyD || s.ArrowRight) && (c[i] += n * e * t)),
                          o.wsEnabled &&
                            ((a = o.wsInverted ? -1 : 1),
                            (s.KeyW || s.ArrowUp) && (c[r] -= a * e * t),
                            (s.KeyS || s.ArrowDown) && (c[r] += a * e * t)));
                    },
                    getMovementVector: ((n = new s.Vector3(0, 0, 0)),
                    (r = new s.Euler(0, 0, 0, 'YXZ')),
                    function(t) {
                      var e,
                        i = this.el.getAttribute('rotation'),
                        a = this.velocity;
                      return (
                        n.copy(a),
                        n.multiplyScalar(t),
                        i
                          ? ((e = this.data.fly ? i.x : 0),
                            r.set(s.Math.degToRad(e), s.Math.degToRad(i.y), 0),
                            n.applyEuler(r),
                            n)
                          : n
                      );
                    }),
                    attachVisibilityEventListeners: function() {
                      window.addEventListener('blur', this.onBlur),
                        window.addEventListener('focus', this.onFocus),
                        document.addEventListener(
                          'visibilitychange',
                          this.onVisibilityChange
                        );
                    },
                    removeVisibilityEventListeners: function() {
                      window.removeEventListener('blur', this.onBlur),
                        window.removeEventListener('focus', this.onFocus),
                        document.removeEventListener(
                          'visibilitychange',
                          this.onVisibilityChange
                        );
                    },
                    attachKeyEventListeners: function() {
                      window.addEventListener('keydown', this.onKeyDown),
                        window.addEventListener('keyup', this.onKeyUp);
                    },
                    removeKeyEventListeners: function() {
                      window.removeEventListener('keydown', this.onKeyDown),
                        window.removeEventListener('keyup', this.onKeyUp);
                    },
                    onBlur: function() {
                      this.pause();
                    },
                    onFocus: function() {
                      this.play();
                    },
                    onVisibilityChange: function() {
                      document.hidden ? this.onBlur() : this.onFocus();
                    },
                    onKeyDown: function(t) {
                      var e;
                      l(t) &&
                        ((e = t.code || a[t.keyCode]),
                        -1 !== h.indexOf(e) && (this.keys[e] = !0));
                    },
                    onKeyUp: function(t) {
                      var e;
                      (e = t.code || a[t.keyCode]), delete this.keys[e];
                    }
                  });
                },
                {
                  '../constants': 116,
                  '../core/component': 125,
                  '../lib/three': 173,
                  '../utils/': 195
                }
              ],
              114: [
                function(t, e, i) {
                  var n,
                    r,
                    a,
                    o = t('../utils/bind'),
                    s = t('../core/component').registerComponent,
                    c = t('../utils/tracked-controls'),
                    u = t('../utils/'),
                    l = u.debug('components:windows-motion-controls:debug'),
                    h = u.debug('components:windows-motion-controls:warn'),
                    d = t('../constants').DEFAULT_HANDEDNESS,
                    p = {
                      left: 'left.glb',
                      right: 'right.glb',
                      default: 'universal.glb'
                    },
                    f = 'Spatial Controller (Spatial Interaction Source) ',
                    m = /([0-9a-zA-Z]+-[0-9a-zA-Z]+)$/;
                  e.exports.Component = s('windows-motion-controls', {
                    schema: {
                      hand: { default: d },
                      pair: { default: 0 },
                      model: { default: !0 },
                      hideDisconnected: { default: !0 }
                    },
                    mapping: {
                      axes: { thumbstick: [0, 1], trackpad: [2, 3] },
                      buttons: [
                        'thumbstick',
                        'trigger',
                        'grip',
                        'menu',
                        'trackpad'
                      ],
                      axisMeshNames: [
                        'THUMBSTICK_X',
                        'THUMBSTICK_Y',
                        'TOUCHPAD_TOUCH_X',
                        'TOUCHPAD_TOUCH_Y'
                      ],
                      buttonMeshNames: {
                        trigger: 'SELECT',
                        menu: 'MENU',
                        grip: 'GRASP',
                        thumbstick: 'THUMBSTICK_PRESS',
                        trackpad: 'TOUCHPAD_PRESS'
                      },
                      pointingPoseMeshName: 'POINTING_POSE'
                    },
                    bindMethods: function() {
                      (this.onModelError = o(this.onModelError, this)),
                        (this.onModelLoaded = o(this.onModelLoaded, this)),
                        (this.onControllersUpdate = o(
                          this.onControllersUpdate,
                          this
                        )),
                        (this.checkIfControllerPresent = o(
                          this.checkIfControllerPresent,
                          this
                        )),
                        (this.onAxisMoved = o(this.onAxisMoved, this));
                    },
                    init: function() {
                      var t = this,
                        e = this.el;
                      (this.onButtonChanged = o(this.onButtonChanged, this)),
                        (this.onButtonDown = function(e) {
                          t.onButtonEvent(e, 'down');
                        }),
                        (this.onButtonUp = function(e) {
                          t.onButtonEvent(e, 'up');
                        }),
                        (this.onButtonTouchStart = function(e) {
                          t.onButtonEvent(e, 'touchstart');
                        }),
                        (this.onButtonTouchEnd = function(e) {
                          t.onButtonEvent(e, 'touchend');
                        }),
                        (this.onControllerConnected = function() {
                          t.setModelVisibility(!0);
                        }),
                        (this.onControllerDisconnected = function() {
                          t.setModelVisibility(!1);
                        }),
                        (this.controllerPresent = !1),
                        (this.lastControllerCheck = 0),
                        (this.previousButtonValues = {}),
                        this.bindMethods(),
                        (this.loadedMeshInfo = {
                          buttonMeshes: null,
                          axisMeshes: null
                        }),
                        (this.rayOrigin = {
                          origin: new THREE.Vector3(),
                          direction: new THREE.Vector3(0, 0, -1),
                          createdFromMesh: !1
                        }),
                        (this.emitIfAxesChanged = c.emitIfAxesChanged),
                        (this.checkControllerPresentAndSetup =
                          c.checkControllerPresentAndSetup),
                        e.addEventListener(
                          'controllerconnected',
                          this.onControllerConnected
                        ),
                        e.addEventListener(
                          'controllerdisconnected',
                          this.onControllerDisconnected
                        );
                    },
                    addEventListeners: function() {
                      var t = this.el;
                      t.addEventListener('buttonchanged', this.onButtonChanged),
                        t.addEventListener('buttondown', this.onButtonDown),
                        t.addEventListener('buttonup', this.onButtonUp),
                        t.addEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.addEventListener('touchend', this.onButtonTouchEnd),
                        t.addEventListener('axismove', this.onAxisMoved),
                        t.addEventListener('model-error', this.onModelError),
                        t.addEventListener('model-loaded', this.onModelLoaded),
                        (this.controllerEventsActive = !0);
                    },
                    removeEventListeners: function() {
                      var t = this.el;
                      t.removeEventListener(
                        'buttonchanged',
                        this.onButtonChanged
                      ),
                        t.removeEventListener('buttondown', this.onButtonDown),
                        t.removeEventListener('buttonup', this.onButtonUp),
                        t.removeEventListener(
                          'touchstart',
                          this.onButtonTouchStart
                        ),
                        t.removeEventListener(
                          'touchend',
                          this.onButtonTouchEnd
                        ),
                        t.removeEventListener('axismove', this.onAxisMoved),
                        t.removeEventListener('model-error', this.onModelError),
                        t.removeEventListener(
                          'model-loaded',
                          this.onModelLoaded
                        ),
                        (this.controllerEventsActive = !1);
                    },
                    checkIfControllerPresent: function() {
                      this.checkControllerPresentAndSetup(this, f, {
                        hand: this.data.hand,
                        index: this.data.pair
                      });
                    },
                    play: function() {
                      this.checkIfControllerPresent(),
                        this.addControllersUpdateListener();
                    },
                    pause: function() {
                      this.removeEventListeners(),
                        this.removeControllersUpdateListener();
                    },
                    updateControllerModel: function() {
                      if (this.data.model && !this.rayOrigin.createdFromMesh) {
                        var t = this.createControllerModelUrl();
                        this.loadModel(t);
                      } else this.modelReady();
                    },
                    createControllerModelUrl: function(t) {
                      var e = this.el.components['tracked-controls'],
                        i = e ? e.controller : null,
                        n = 'default',
                        r = this.data.hand;
                      if (i && ((r = i.hand), !t)) {
                        var a = i.id.match(m);
                        n = (a && a[0]) || n;
                      }
                      return (
                        'https://cdn.aframe.io/controllers/microsoft/' +
                        n +
                        '/' +
                        (p[r] || p.default)
                      );
                    },
                    injectTrackedControls: function() {
                      var t = this.data;
                      this.el.setAttribute('tracked-controls', {
                        idPrefix: f,
                        controller: t.pair,
                        hand: t.hand,
                        armModel: !1
                      }),
                        this.updateControllerModel();
                    },
                    addControllersUpdateListener: function() {
                      this.el.sceneEl.addEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    removeControllersUpdateListener: function() {
                      this.el.sceneEl.removeEventListener(
                        'controllersupdated',
                        this.onControllersUpdate,
                        !1
                      );
                    },
                    onControllersUpdate: function() {
                      this.checkIfControllerPresent();
                    },
                    onModelError: function(t) {
                      var e = this.createControllerModelUrl(!0);
                      t.detail.src !== e
                        ? (h(
                            'Failed to load controller model for device, attempting to load default.'
                          ),
                          this.loadModel(e))
                        : h('Failed to load default controller model.');
                    },
                    loadModel: function(t) {
                      this.el.setAttribute('gltf-model', 'url(' + t + ')');
                    },
                    onModelLoaded: function(t) {
                      var e,
                        i,
                        n,
                        r,
                        a = (this.controllerModel = t.detail.model),
                        o = this.loadedMeshInfo;
                      if (
                        (l('Processing model'),
                        (o.buttonMeshes = {}),
                        (o.axisMeshes = {}),
                        a)
                      ) {
                        for (e = 0; e < this.mapping.buttons.length; e++)
                          (i = this.mapping.buttonMeshNames[
                            this.mapping.buttons[e]
                          ])
                            ? (n = a.getObjectByName(i))
                              ? (r = {
                                  index: e,
                                  value: s(n, 'VALUE'),
                                  pressed: s(n, 'PRESSED'),
                                  unpressed: s(n, 'UNPRESSED')
                                }).value &&
                                r.pressed &&
                                r.unpressed
                                ? (o.buttonMeshes[this.mapping.buttons[e]] = r)
                                : h(
                                    'Missing button submesh under mesh with name: ' +
                                      i +
                                      '(VALUE: ' +
                                      !!r.value +
                                      ', PRESSED: ' +
                                      !!r.pressed +
                                      ', UNPRESSED:' +
                                      !!r.unpressed +
                                      ')'
                                  )
                              : h('Missing button mesh with name: ' + i)
                            : l(
                                'Skipping unknown button at index: ' +
                                  e +
                                  ' with mapped name: ' +
                                  this.mapping.buttons[e]
                              );
                        for (e = 0; e < this.mapping.axisMeshNames.length; e++)
                          (i = this.mapping.axisMeshNames[e])
                            ? (n = a.getObjectByName(i))
                              ? (r = {
                                  index: e,
                                  value: s(n, 'VALUE'),
                                  min: s(n, 'MIN'),
                                  max: s(n, 'MAX')
                                }).value &&
                                r.min &&
                                r.max
                                ? (o.axisMeshes[e] = r)
                                : h(
                                    'Missing axis submesh under mesh with name: ' +
                                      i +
                                      '(VALUE: ' +
                                      !!r.value +
                                      ', MIN: ' +
                                      !!r.min +
                                      ', MAX:' +
                                      !!r.max +
                                      ')'
                                  )
                              : h('Missing axis mesh with name: ' + i)
                            : l('Skipping unknown axis at index: ' + e);
                        this.calculateRayOriginFromMesh(a),
                          this.setModelVisibility();
                      }
                      function s(t, e) {
                        for (var i = 0, n = t.children.length; i < n; i++) {
                          var r = t.children[i];
                          if (r && r.name === e) return r;
                        }
                      }
                      l('Model load complete.');
                    },
                    calculateRayOriginFromMesh: ((a = new THREE.Quaternion()),
                    function(t) {
                      var e;
                      if (
                        (this.rayOrigin.origin.set(0, 0, 0),
                        this.rayOrigin.direction.set(0, 0, -1),
                        (this.rayOrigin.createdFromMesh = !0),
                        (e = t.getObjectByName(
                          this.mapping.pointingPoseMeshName
                        )))
                      ) {
                        var i = t.parent;
                        i &&
                          ((t.parent = null),
                          t.updateMatrixWorld(!0),
                          (t.parent = i)),
                          e.getWorldPosition(this.rayOrigin.origin),
                          e.getWorldQuaternion(a),
                          this.rayOrigin.direction.applyQuaternion(a),
                          i && t.updateMatrixWorld(!0);
                      } else
                        l(
                          'Mesh does not contain pointing origin data, defaulting to none.'
                        );
                      this.modelReady();
                    }),
                    lerpAxisTransform: ((r = new THREE.Quaternion()),
                    function(t, e) {
                      var i = this.loadedMeshInfo.axisMeshes[t];
                      if (i) {
                        var n = i.min,
                          a = i.max,
                          o = i.value,
                          s = 0.5 * e + 0.5;
                        o.setRotationFromQuaternion(
                          r.copy(n.quaternion).slerp(a.quaternion, s)
                        ),
                          o.position.lerpVectors(n.position, a.position, s);
                      }
                    }),
                    lerpButtonTransform: ((n = new THREE.Quaternion()),
                    function(t, e) {
                      var i = this.loadedMeshInfo.buttonMeshes[t];
                      if (i) {
                        var r = i.unpressed,
                          a = i.pressed,
                          o = i.value;
                        o.setRotationFromQuaternion(
                          n.copy(r.quaternion).slerp(a.quaternion, e)
                        ),
                          o.position.lerpVectors(r.position, a.position, e);
                      }
                    }),
                    modelReady: function() {
                      this.el.emit('controllermodelready', {
                        name: 'windows-motion-controls',
                        model: this.data.model,
                        rayOrigin: this.rayOrigin
                      });
                    },
                    onButtonChanged: function(t) {
                      var e = this.mapping.buttons[t.detail.id];
                      e &&
                        (this.loadedMeshInfo &&
                          this.loadedMeshInfo.buttonMeshes &&
                          this.lerpButtonTransform(e, t.detail.state.value),
                        this.el.emit(e + 'changed', t.detail.state));
                    },
                    onButtonEvent: function(t, e) {
                      var i = this.mapping.buttons[t.detail.id];
                      l('onButtonEvent(' + t.detail.id + ', ' + e + ')'),
                        i && this.el.emit(i + e);
                    },
                    onAxisMoved: function(t) {
                      var e = this.mapping.axisMeshNames.length;
                      if (this.loadedMeshInfo && this.loadedMeshInfo.axisMeshes)
                        for (var i = 0; i < e; i++)
                          this.lerpAxisTransform(i, t.detail.axis[i] || 0);
                      this.emitIfAxesChanged(this, this.mapping.axes, t);
                    },
                    setModelVisibility: function(t) {
                      var e = this.el.getObject3D('mesh');
                      (t = void 0 !== t ? t : this.modelVisible),
                        (this.modelVisible = t),
                        e && (e.visible = t);
                    }
                  });
                },
                {
                  '../constants': 116,
                  '../core/component': 125,
                  '../utils/': 195,
                  '../utils/bind': 189,
                  '../utils/tracked-controls': 199
                }
              ],
              115: [
                function(t, e, i) {
                  var n = t('@tweenjs/tween.js'),
                    r = {
                      alternate: 'alternate',
                      alternateReverse: 'alternate-reverse',
                      normal: 'normal',
                      reverse: 'reverse'
                    },
                    a = {
                      linear: n.Easing.Linear.None,
                      ease: n.Easing.Cubic.InOut,
                      'ease-in': n.Easing.Cubic.In,
                      'ease-out': n.Easing.Cubic.Out,
                      'ease-in-out': n.Easing.Cubic.InOut,
                      'ease-cubic': n.Easing.Cubic.In,
                      'ease-in-cubic': n.Easing.Cubic.In,
                      'ease-out-cubic': n.Easing.Cubic.Out,
                      'ease-in-out-cubic': n.Easing.Cubic.InOut,
                      'ease-quad': n.Easing.Quadratic.InOut,
                      'ease-in-quad': n.Easing.Quadratic.In,
                      'ease-out-quad': n.Easing.Quadratic.Out,
                      'ease-in-out-quad': n.Easing.Quadratic.InOut,
                      'ease-quart': n.Easing.Quartic.InOut,
                      'ease-in-quart': n.Easing.Quartic.In,
                      'ease-out-quart': n.Easing.Quartic.Out,
                      'ease-in-out-quart': n.Easing.Quartic.InOut,
                      'ease-quint': n.Easing.Quintic.InOut,
                      'ease-in-quint': n.Easing.Quintic.In,
                      'ease-out-quint': n.Easing.Quintic.Out,
                      'ease-in-out-quint': n.Easing.Quintic.InOut,
                      'ease-sine': n.Easing.Sinusoidal.InOut,
                      'ease-in-sine': n.Easing.Sinusoidal.In,
                      'ease-out-sine': n.Easing.Sinusoidal.Out,
                      'ease-in-out-sine': n.Easing.Sinusoidal.InOut,
                      'ease-expo': n.Easing.Exponential.InOut,
                      'ease-in-expo': n.Easing.Exponential.In,
                      'ease-out-expo': n.Easing.Exponential.Out,
                      'ease-in-out-expo': n.Easing.Exponential.InOut,
                      'ease-circ': n.Easing.Circular.InOut,
                      'ease-in-circ': n.Easing.Circular.In,
                      'ease-out-circ': n.Easing.Circular.Out,
                      'ease-in-out-circ': n.Easing.Circular.InOut,
                      'ease-elastic': n.Easing.Elastic.InOut,
                      'ease-in-elastic': n.Easing.Elastic.In,
                      'ease-out-elastic': n.Easing.Elastic.Out,
                      'ease-in-out-elastic': n.Easing.Elastic.InOut,
                      'ease-back': n.Easing.Back.InOut,
                      'ease-in-back': n.Easing.Back.In,
                      'ease-out-back': n.Easing.Back.Out,
                      'ease-in-out-back': n.Easing.Back.InOut,
                      'ease-bounce': n.Easing.Bounce.InOut,
                      'ease-in-bounce': n.Easing.Bounce.In,
                      'ease-out-bounce': n.Easing.Bounce.Out,
                      'ease-in-out-bounce': n.Easing.Bounce.InOut
                    },
                    o = {
                      backwards: 'backwards',
                      both: 'both',
                      forwards: 'forwards',
                      none: 'none'
                    },
                    s = {
                      attribute: 'rotation',
                      begin: '',
                      end: '',
                      delay: 0,
                      dur: 1e3,
                      easing: 'ease',
                      direction: r.normal,
                      fill: o.forwards,
                      from: void 0,
                      repeat: 0,
                      to: void 0
                    };
                  (e.exports.defaults = s),
                    (e.exports.directions = r),
                    (e.exports.easingFunctions = a),
                    (e.exports.fills = o),
                    (e.exports.repeats = { indefinite: 'indefinite' });
                },
                { '@tweenjs/tween.js': 1 }
              ],
              116: [
                function(t, e, i) {
                  e.exports = {
                    AFRAME_INJECTED: 'aframe-injected',
                    DEFAULT_CAMERA_HEIGHT: 1.6,
                    DEFAULT_HANDEDNESS: 'right',
                    animation: t('./animation'),
                    keyboardevent: t('./keyboardevent')
                  };
                },
                { './animation': 115, './keyboardevent': 117 }
              ],
              117: [
                function(t, e, i) {
                  e.exports = {
                    KEYCODE_TO_CODE: {
                      38: 'ArrowUp',
                      37: 'ArrowLeft',
                      40: 'ArrowDown',
                      39: 'ArrowRight',
                      87: 'KeyW',
                      65: 'KeyA',
                      83: 'KeyS',
                      68: 'KeyD'
                    }
                  };
                },
                {}
              ],
              118: [
                function(t, e, i) {
                  var n = t('./a-node'),
                    r = t('../constants/animation'),
                    a = t('../utils/').coordinates,
                    o = t('./schema').parseProperty,
                    s = t('./a-register-element').registerElement,
                    c = t('@tweenjs/tween.js'),
                    u = t('../lib/three'),
                    l = t('../utils/'),
                    h = l.bind,
                    d = l.entity.getComponentProperty,
                    p = r.defaults,
                    f = r.directions,
                    m = r.easingFunctions,
                    g = r.fills,
                    v = r.repeats,
                    y = a.isCoordinates;
                  function M(t) {
                    return l.extend({}, t);
                  }
                  function w(t, e, i, n, r) {
                    var s,
                      c,
                      l,
                      h,
                      p,
                      f,
                      m,
                      g,
                      v,
                      M = e.split('.'),
                      w = {},
                      b = {};
                    return (
                      2 === M.length
                        ? ((f = M[0]),
                          (m = M[1]),
                          (g = t.components[f]),
                          (v = g && g.schema) && v[m] && 'color' === v[m].type
                            ? T()
                            : (function() {
                                (h = M[0]),
                                  (l = M[1]),
                                  (c = t.components[h]) ||
                                    (t.setAttribute(h, ''),
                                    (c = t.components[h]));
                                (s = c.schema),
                                  (w[e] = void 0 === i ? d(t, e) : i);
                                (w[e] = o(w[e], s[l])),
                                  (b[e] = o(n, s[l])),
                                  (p = function(i) {
                                    e in i && t.setAttribute(h, l, i[e]);
                                  });
                              })())
                        : n && y(n)
                          ? ((w = i ? a.parse(i) : r),
                            (b = a.parse(n)),
                            (p = function(i) {
                              t.setAttribute(e, i);
                            }))
                          : -1 !== ['true', 'false'].indexOf(n)
                            ? (function() {
                                w[e] = void 0 !== i && x(i);
                                (w[e] = A(w[e])),
                                  (b[e] = A(x(n))),
                                  (p = function(i) {
                                    t.setAttribute(e, !!i[e]);
                                  });
                              })()
                            : isNaN(n)
                              ? T()
                              : (function() {
                                  w[e] =
                                    void 0 === i
                                      ? parseFloat(t.getAttribute(e))
                                      : parseFloat(i);
                                  (b[e] = parseFloat(n)),
                                    (p = function(i) {
                                      t.setAttribute(e, i[e]);
                                    });
                                })(),
                      { from: w, partialSetAttribute: p, to: b }
                    );
                    function T() {
                      (w = new u.Color(i || t.getAttribute(e))),
                        (b = new u.Color(n)),
                        (p = function(i) {
                          M.length > 1 && t.setAttribute(M[0], M[1], E(i)),
                            t.setAttribute(e, E(i));
                        });
                    }
                  }
                  function x(t) {
                    return 'true' === t;
                  }
                  function A(t) {
                    return t ? 1 : 0;
                  }
                  function E(t) {
                    return (
                      '#' +
                      ['r', 'g', 'b']
                        .map(function(e) {
                          return (
                            (r = t[e]),
                            (i = Math.floor(255 * Math.min(Math.abs(r), 1))),
                            1 === (n = i.toString(16)).length ? '0' + n : n
                          );
                          var i, n, r;
                        })
                        .join('')
                    );
                  }
                  (e.exports.AAnimation = s('a-animation', {
                    prototype: Object.create(n.prototype, {
                      createdCallback: {
                        value: function() {
                          this.bindMethods(),
                            (this.isRunning = !1),
                            (this.partialSetAttribute = function() {}),
                            (this.tween = null);
                        }
                      },
                      attachedCallback: {
                        value: function() {
                          (this.el = this.parentNode),
                            this.handleMixinUpdate(),
                            this.update(),
                            this.load();
                        }
                      },
                      attributeChangedCallback: {
                        value: function(t, e, i) {
                          this.hasLoaded &&
                            this.isRunning &&
                            (this.stop(),
                            this.handleMixinUpdate(),
                            this.update());
                        }
                      },
                      detachedCallback: {
                        value: function() {
                          this.isRunning && this.stop();
                        }
                      },
                      getTween: {
                        value: function() {
                          var t,
                            e,
                            i,
                            n,
                            r = this,
                            a = r.data,
                            o = r.el,
                            s = a.attribute,
                            u = parseInt(a.delay, 10),
                            l = d(o, s),
                            p = r.getDirection(a.direction),
                            y = m[a.easing],
                            x = a.fill,
                            A = a.repeat === v.indefinite ? 1 / 0 : 0,
                            E = !1;
                          return (
                            (e = (t = w(
                              o,
                              s,
                              a.from || r.initialValue,
                              a.to,
                              l
                            )).from),
                            (i = t.to),
                            (r.partialSetAttribute = t.partialSetAttribute),
                            void 0 === r.count &&
                              (r.count =
                                A === 1 / 0 ? 0 : parseInt(a.repeat, 10)),
                            isNaN(u) && (u = 0),
                            (r.initialValue = r.initialValue || M(l)),
                            A === 1 / 0 &&
                              x === g.forwards &&
                              -1 !==
                                [f.alternate, f.alternateReverse].indexOf(
                                  a.direction
                                ) &&
                              (E = !0),
                            p === f.reverse &&
                              ((n = i), (i = M(e)), (e = M(n))),
                            -1 !== [g.backwards, g.both].indexOf(x) &&
                              r.partialSetAttribute(e),
                            new c.Tween(M(e))
                              .to(i, a.dur)
                              .delay(u)
                              .easing(y)
                              .repeat(A)
                              .yoyo(E)
                              .onUpdate(function() {
                                r.partialSetAttribute(this);
                              })
                              .onComplete(h(r.onCompleted, r))
                          );
                        }
                      },
                      update: {
                        value: function() {
                          var t = this.data;
                          t.repeat,
                            '' === t.begin ||
                              isNaN(t.begin) ||
                              ((t.delay = t.begin), (t.begin = ''));
                          var e = t.begin,
                            i = t.end;
                          this.evt && this.removeEventListeners(this.evt),
                            (this.evt = { begin: e, end: i }),
                            this.addEventListeners(this.evt),
                            '' === e && (this.stop(), this.start());
                        },
                        writable: window.debug
                      },
                      onCompleted: {
                        value: function() {
                          var t = this.data;
                          if (
                            ((this.isRunning = !1),
                            -1 !== [g.backwards, g.none].indexOf(t.fill) &&
                              this.partialSetAttribute(this.initialValue),
                            0 === this.count)
                          )
                            return (
                              (this.count = void 0),
                              void this.emit('animationend')
                            );
                          (this.isRunning = !1), this.count--, this.start();
                        }
                      },
                      start: {
                        value: function() {
                          var t = this;
                          this.el.hasLoaded
                            ? !this.isRunning &&
                              this.el.isPlaying &&
                              ((this.tween = this.getTween()),
                              (this.isRunning = !0),
                              this.tween.start(),
                              this.emit('animationstart'))
                            : this.el.addEventListener('loaded', function() {
                                t.start();
                              });
                        },
                        writable: !0
                      },
                      stop: {
                        value: function() {
                          var t = this.tween;
                          t &&
                            (t.stop(),
                            (this.isRunning = !1),
                            -1 !==
                              [g.backwards, g.none].indexOf(this.data.fill) &&
                              this.partialSetAttribute(this.initialValue),
                            this.emit('animationstop'));
                        },
                        writable: !0
                      },
                      getDirection: {
                        value: function(t) {
                          return t === f.alternate
                            ? ((this.prevDirection =
                                this.prevDirection === f.normal
                                  ? f.reverse
                                  : f.normal),
                              this.prevDirection)
                            : t === f.alternateReverse
                              ? ((this.prevDirection =
                                  this.prevDirection === f.reverse
                                    ? f.normal
                                    : f.reverse),
                                this.prevDirection)
                              : t;
                        }
                      },
                      bindMethods: {
                        value: function() {
                          (this.start = h(this.start, this)),
                            (this.stop = h(this.stop, this)),
                            (this.onStateAdded = h(this.onStateAdded, this)),
                            (this.onStateRemoved = h(
                              this.onStateRemoved,
                              this
                            ));
                        }
                      },
                      addEventListeners: {
                        value: function(t) {
                          var e = this.el,
                            i = this;
                          l.splitString(t.begin).forEach(function(t) {
                            e.addEventListener(t, i.start);
                          }),
                            l.splitString(t.end).forEach(function(t) {
                              e.addEventListener(t, i.stop);
                            }),
                            '' === t.begin &&
                              e.addEventListener('play', this.start),
                            e.addEventListener('pause', this.stop),
                            e.addEventListener('stateadded', this.onStateAdded),
                            e.addEventListener(
                              'stateremoved',
                              this.onStateRemoved
                            );
                        }
                      },
                      removeEventListeners: {
                        value: function(t) {
                          var e = this.el,
                            i = this.start,
                            n = this.stop;
                          l.splitString(t.begin).forEach(function(t) {
                            e.removeEventListener(t, i);
                          }),
                            l.splitString(t.end).forEach(function(t) {
                              e.removeEventListener(t, n);
                            }),
                            e.removeEventListener(
                              'stateadded',
                              this.onStateAdded
                            ),
                            e.removeEventListener(
                              'stateremoved',
                              this.onStateRemoved
                            );
                        }
                      },
                      onStateAdded: {
                        value: function(t) {
                          t.detail.state === this.data.begin && this.start();
                        },
                        writable: !0
                      },
                      onStateRemoved: {
                        value: function(t) {
                          t.detail.state === this.data.begin && this.stop();
                        },
                        writable: !0
                      },
                      handleMixinUpdate: {
                        value: function() {
                          var t,
                            e,
                            i,
                            n = {};
                          (e = (i = document.querySelector(
                            '#' + this.getAttribute('mixin')
                          ))
                            ? l.getElData(i, p)
                            : {}),
                            (t = l.getElData(this, p)),
                            l.extend(n, p, e, t),
                            (this.data = n);
                        }
                      }
                    })
                  })),
                    (e.exports.getAnimationValues = w);
                },
                {
                  '../constants/animation': 115,
                  '../lib/three': 173,
                  '../utils/': 195,
                  './a-node': 123,
                  './a-register-element': 124,
                  './schema': 133,
                  '@tweenjs/tween.js': 1
                }
              ],
              119: [
                function(t, e, i) {
                  var n = t('./a-node'),
                    r = t('../utils/bind'),
                    a = t('../utils/debug'),
                    o = t('./a-register-element').registerElement,
                    s = t('../lib/three'),
                    c = new s.FileLoader(),
                    u = a('core:a-assets:warn');
                  function l(t) {
                    if (
                      t.hasAttribute('autoplay') ||
                      'auto' === t.getAttribute('preload')
                    )
                      return new Promise(function(e, i) {
                        if (4 === t.readyState) return e();
                        if (t.error) return i();
                        function n() {
                          for (var i = 0, n = 0; n < t.buffered.length; n++)
                            i += t.buffered.end(n) - t.buffered.start(n);
                          i >= t.duration &&
                            ((s.Cache.files[t.getAttribute('src')] = t), e());
                        }
                        t.addEventListener('loadeddata', n, !1),
                          t.addEventListener('progress', n, !1),
                          t.addEventListener('error', i, !1);
                      });
                  }
                  function h(t) {
                    var e = (function(t) {
                      var e;
                      if (t.hasAttribute('crossorigin')) return t;
                      if (null !== (e = t.getAttribute('src'))) {
                        if (-1 === e.indexOf('://')) return t;
                        if (
                          ((i = e).indexOf('://') > -1
                            ? i.split('/')[2]
                            : i.split('/')[0]
                          ).split(':')[0] === window.location.host
                        )
                          return t;
                      }
                      var i;
                      return (
                        u(
                          'Cross-origin element (e.g., <img>) was requested without `crossorigin` set. A-Frame will re-request the asset with `crossorigin` attribute set. Please set `crossorigin` on the element (e.g., <img crossorigin="anonymous">)',
                          e
                        ),
                        (t.crossOrigin = 'anonymous'),
                        t.cloneNode(!0)
                      );
                    })(t);
                    return (
                      e.tagName &&
                        'video' === e.tagName.toLowerCase() &&
                        (e.setAttribute('playsinline', ''),
                        e.setAttribute('webkit-playsinline', '')),
                      e !== t &&
                        (t.parentNode.appendChild(e),
                        t.parentNode.removeChild(t)),
                      e
                    );
                  }
                  function d(t) {
                    var e = t.lastIndexOf('.');
                    if (e >= 0) {
                      var i = t.slice(e, t.length);
                      if ('.gltf' === i || '.glb' === i) return 'arraybuffer';
                    }
                    return 'text';
                  }
                  (e.exports = o('a-assets', {
                    prototype: Object.create(n.prototype, {
                      createdCallback: {
                        value: function() {
                          (this.isAssets = !0),
                            (this.fileLoader = c),
                            (this.timeout = null);
                        }
                      },
                      attachedCallback: {
                        value: function() {
                          var t,
                            e,
                            i,
                            n,
                            a,
                            o,
                            c = this,
                            d = [];
                          if (!this.parentNode.isScene)
                            throw new Error(
                              '<a-assets> must be a child of a <a-scene>.'
                            );
                          for (
                            a = this.querySelectorAll('img'), t = 0;
                            t < a.length;
                            t++
                          )
                            (n = h(a[t])),
                              d.push(
                                new Promise(function(e, i) {
                                  (s.Cache.files[a[t].getAttribute('src')] = n),
                                    (n.onload = e),
                                    (n.onerror = i);
                                })
                              );
                          for (
                            i = this.querySelectorAll('audio, video'), t = 0;
                            t < i.length;
                            t++
                          )
                            (e = h(i[t])), d.push(l(e));
                          Promise.all(d).then(r(this.load, this)),
                            (o =
                              parseInt(this.getAttribute('timeout'), 10) ||
                              3e3),
                            (this.timeout = setTimeout(function() {
                              c.hasLoaded ||
                                (u('Asset loading timed out in ', o, 'ms'),
                                c.emit('timeout'),
                                c.load());
                            }, o));
                        }
                      },
                      detachedCallback: {
                        value: function() {
                          this.timeout && clearTimeout(this.timeout);
                        }
                      },
                      load: {
                        value: function() {
                          n.prototype.load.call(this, null, function(t) {
                            return t.isAssetItem && t.hasAttribute('src');
                          });
                        }
                      }
                    })
                  })),
                    o('a-asset-item', {
                      prototype: Object.create(n.prototype, {
                        createdCallback: {
                          value: function() {
                            (this.data = null), (this.isAssetItem = !0);
                          }
                        },
                        attachedCallback: {
                          value: function() {
                            var t = this,
                              e = this.getAttribute('src');
                            c.setResponseType(
                              this.getAttribute('response-type') || d(e)
                            ),
                              c.load(
                                e,
                                function(e) {
                                  (t.data = e),
                                    setTimeout(function() {
                                      n.prototype.load.call(t);
                                    });
                                },
                                function(e) {
                                  t.emit('progress', {
                                    loadedBytes: e.loaded,
                                    totalBytes: e.total,
                                    xhr: e
                                  });
                                },
                                function(e) {
                                  t.emit('error', { xhr: e });
                                }
                              );
                          }
                        }
                      })
                    }),
                    (e.exports.inferResponseType = d);
                },
                {
                  '../lib/three': 173,
                  '../utils/bind': 189,
                  '../utils/debug': 191,
                  './a-node': 123,
                  './a-register-element': 124
                }
              ],
              120: [
                function(t, e, i) {
                  var n = t('../utils/debug'),
                    r = t('./a-register-element').registerElement,
                    a = n('core:cubemap:warn');
                  e.exports = r('a-cubemap', {
                    prototype: Object.create(window.HTMLElement.prototype, {
                      attachedCallback: {
                        value: function() {
                          this.srcs = this.validate();
                        },
                        writable: window.debug
                      },
                      validate: {
                        value: function() {
                          var t,
                            e = this.querySelectorAll('[src]'),
                            i = [];
                          if (6 === e.length) {
                            for (t = 0; t < e.length; t++)
                              i.push(e[t].getAttribute('src'));
                            return i;
                          }
                          a(
                            '<a-cubemap> did not contain exactly six elements each with a `src` attribute.'
                          );
                        },
                        writable: window.debug
                      }
                    })
                  });
                },
                { '../utils/debug': 191, './a-register-element': 124 }
              ],
              121: [
                function(t, e, i) {
                  var n,
                    r,
                    a = t('./a-node'),
                    o = t('./component').components,
                    s = t('./a-register-element').registerElement,
                    c = t('../lib/three'),
                    u = t('../utils/'),
                    l = u.bind,
                    h = u.debug('core:a-entity:debug'),
                    d = u.debug('core:a-entity:warn'),
                    p = '__',
                    f = Object.create(a.prototype, {
                      defaultComponents: {
                        value: {
                          position: '',
                          rotation: '',
                          scale: '',
                          visible: ''
                        }
                      },
                      createdCallback: {
                        value: function() {
                          (this.components = {}),
                            (this.initializingComponents = {}),
                            (this.isEntity = !0),
                            (this.isPlaying = !1),
                            (this.object3D = new c.Group()),
                            (this.object3D.el = this),
                            (this.object3DMap = {}),
                            (this.parentEl = null),
                            (this.states = []);
                        }
                      },
                      attributeChangedCallback: {
                        value: function(t, e, i) {
                          var n = this.components[t];
                          n && n.justInitialized && '' === i
                            ? delete n.justInitialized
                            : (n || null !== i) &&
                              this.setEntityAttribute(t, e, i);
                        }
                      },
                      attachedCallback: {
                        value: function() {
                          var t,
                            e = this.sceneEl,
                            i = this;
                          this.addToParent(),
                            this.isScene ||
                              (e
                                ? !(t = e.querySelector('a-assets')) ||
                                  t.hasLoaded
                                  ? this.load()
                                  : t.addEventListener('loaded', function() {
                                      i.load();
                                    })
                                : this.load());
                        }
                      },
                      detachedCallback: {
                        value: function() {
                          var t;
                          if (this.parentEl) {
                            for (t in this.components) this.removeComponent(t);
                            this.isScene ||
                              (this.removeFromParent(),
                              a.prototype.detachedCallback.call(this),
                              (this.object3D.el = null));
                          }
                        }
                      },
                      handleMixinUpdate: {
                        value: function(t) {
                          t
                            ? this.updateComponent(t, this.getDOMAttribute(t))
                            : this.updateComponents();
                        }
                      },
                      mapStateMixins: {
                        value: function(t, e) {
                          var i, n, r;
                          if ((i = this.getAttribute('mixin'))) {
                            for (n = i.split(' '), r = 0; r < n.length; r++)
                              e(n[r] + '-' + t);
                            this.updateComponents();
                          }
                        }
                      },
                      updateStateMixins: {
                        value: function(t, e) {
                          var i, n, r, a, o;
                          for (
                            n = t.split(' '),
                              i = (e ? e.split(' ') : []).filter(function(t) {
                                return n.indexOf(t) < 0;
                              }),
                              r = 0;
                            r < i.length;
                            r++
                          )
                            for (
                              o = document.querySelectorAll(
                                '[id^=' + i[r] + '-]'
                              ),
                                a = 0;
                              a < o.length;
                              a++
                            )
                              this.unregisterMixin(o[a].id);
                          for (r = 0; r < this.states.length; r++)
                            for (a = 0; a < n.length; a++)
                              this.registerMixin(n[a] + '-' + this.states[r]);
                        }
                      },
                      getObject3D: {
                        value: function(t) {
                          return this.object3DMap[t];
                        }
                      },
                      setObject3D: {
                        value: function(t, e) {
                          var i,
                            n = this;
                          if (!(e instanceof c.Object3D))
                            throw new Error(
                              '`Entity.setObject3D` was called with an object that was not an instance of THREE.Object3D.'
                            );
                          (i = this.getObject3D(t)) && this.object3D.remove(i),
                            (e.el = this),
                            e.children.length &&
                              e.traverse(function(t) {
                                t.el = n;
                              }),
                            this.object3D.add(e),
                            (this.object3DMap[t] = e),
                            this.emit('object3dset', { object: e, type: t });
                        }
                      },
                      removeObject3D: {
                        value: function(t) {
                          var e = this.getObject3D(t);
                          e
                            ? (this.object3D.remove(e),
                              delete this.object3DMap[t],
                              this.emit('object3dremove', { type: t }))
                            : d(
                                'Tried to remove `Object3D` of type:',
                                t,
                                'which was not defined.'
                              );
                        }
                      },
                      getOrCreateObject3D: {
                        value: function(t, e) {
                          var i = this.getObject3D(t);
                          return (
                            !i && e && ((i = new e()), this.setObject3D(t, i)),
                            i
                          );
                        }
                      },
                      add: {
                        value: function(t) {
                          if (!t.object3D)
                            throw new Error(
                              "Trying to add an element that doesn't have an `object3D`"
                            );
                          this.object3D.add(t.object3D),
                            this.emit('child-attached', { el: t });
                        }
                      },
                      addToParent: {
                        value: function() {
                          var t = (this.parentEl = this.parentNode);
                          t &&
                            t.add &&
                            !this.attachedToParent &&
                            (t.add(this), (this.attachedToParent = !0));
                        }
                      },
                      removeFromParent: {
                        value: function() {
                          var t = this.parentEl;
                          this.parentEl.remove(this),
                            (this.attachedToParent = !1),
                            (this.parentEl = this.parentNode = null),
                            t.emit('child-detached', { el: this });
                        }
                      },
                      load: {
                        value: function() {
                          var t = this;
                          !this.hasLoaded &&
                            this.parentEl &&
                            a.prototype.load.call(this, function() {
                              t.parentEl &&
                                (t.updateComponents(),
                                (t.isScene || t.parentEl.isPlaying) &&
                                  t.play());
                            });
                        },
                        writable: window.debug
                      },
                      remove: {
                        value: function(t) {
                          this.object3D.remove(t.object3D);
                        }
                      },
                      getChildEntities: {
                        value: function() {
                          for (
                            var t = this.children, e = [], i = 0;
                            i < t.length;
                            i++
                          ) {
                            var r = t[i];
                            r instanceof n && e.push(r);
                          }
                          return e;
                        }
                      },
                      initComponent: {
                        value: function(t, e, i) {
                          var n,
                            r = t.split(p),
                            a = r[1],
                            s = r[0],
                            c =
                              (function(t, e) {
                                if (void 0 !== t.defaultComponents[e])
                                  return !0;
                                if (
                                  t.components[e] &&
                                  t.components[e].attrValue
                                )
                                  return !0;
                                return m(e, t.mixinEls);
                              })(this, t) || void 0 !== e;
                          if (o[s] && (c || i) && !(t in this.components)) {
                            if (
                              (this.initComponentDependencies(s),
                              a && !o[s].multiple)
                            )
                              throw new Error(
                                'Trying to initialize multiple components of type `' +
                                  s +
                                  '`. There can only be one component of this type per entity.'
                              );
                            (n = new o[s].Component(this, e, a)),
                              this.isPlaying && n.play(),
                              this.hasAttribute(t) ||
                                ((n.justInitialized = !0),
                                window.HTMLElement.prototype.setAttribute.call(
                                  this,
                                  t,
                                  ''
                                )),
                              h('Component initialized: %s', t);
                          }
                        },
                        writable: window.debug
                      },
                      initComponentDependencies: {
                        value: function(t) {
                          var e, i;
                          if (o[t] && (e = o[t].dependencies))
                            for (i = 0; i < e.length; i++)
                              this.initComponent(
                                e[i],
                                window.HTMLElement.prototype.getAttribute.call(
                                  this,
                                  e[i]
                                ) || void 0,
                                !0
                              );
                        }
                      },
                      removeComponent: {
                        value: function(t) {
                          var e, i, n;
                          (i = t in this.defaultComponents),
                            (n = m(t, this.mixinEls)),
                            i ||
                              n ||
                              ((e = this.components[t]) &&
                                (e.initialized
                                  ? (e.pause(),
                                    e.remove(),
                                    delete this.components[t],
                                    this.emit('componentremoved', e.evtDetail))
                                  : this.addEventListener(
                                      'componentinitialized',
                                      function e(i) {
                                        i.detail.name === t &&
                                          (this.removeComponent(t),
                                          this.removeEventListener(
                                            'componentinitialized',
                                            e
                                          ));
                                      }
                                    )));
                        },
                        writable: window.debug
                      },
                      updateComponents: {
                        value: ((r = {}),
                        function() {
                          var t, e, i, n;
                          if (this.hasLoaded) {
                            for (i = 0; i < this.mixinEls.length; i++)
                              for (n in this.mixinEls[i].componentCache)
                                v(n) && (r[n] = !0);
                            if (this.getExtraComponents) {
                              e = this.getExtraComponents();
                              for (n in e) v(n) && (r[n] = !0);
                            }
                            for (i = 0; i < this.attributes.length; ++i)
                              v((n = this.attributes[i].name)) && (r[n] = !0);
                            for (n in this.defaultComponents)
                              (t = g(this.getDOMAttribute(n), e && e[n])),
                                this.updateComponent(n, t),
                                delete r[n];
                            for (n in r)
                              (t = g(this.getDOMAttribute(n), e && e[n])),
                                this.updateComponent(n, t),
                                delete r[n];
                          }
                        }),
                        writable: window.debug
                      },
                      updateComponent: {
                        value: function(t, e, i) {
                          var n = this.components[t],
                            r = t in this.defaultComponents;
                          if (n)
                            return null !== e || r
                              ? void n.updateProperties(e, i)
                              : void this.removeComponent(t);
                          this.initComponent(t, e, !1);
                        }
                      },
                      removeAttribute: {
                        value: function(t, e) {
                          var i = this.components[t];
                          (i &&
                            void 0 === e &&
                            (this.setEntityAttribute(t, void 0, null),
                            this.components[t])) ||
                            (i && void 0 !== e
                              ? i.resetProperty(e)
                              : ('mixin' === t && this.mixinUpdate(''),
                                window.HTMLElement.prototype.removeAttribute.call(
                                  this,
                                  t
                                )));
                        }
                      },
                      play: {
                        value: function() {
                          var t, e, i;
                          if (!this.isPlaying && this.hasLoaded) {
                            this.isPlaying = !0;
                            for (i in this.components)
                              this.components[i].play();
                            for (
                              t = this.getChildEntities(), e = 0;
                              e < t.length;
                              e++
                            )
                              t[e].play();
                            this.emit('play');
                          }
                        },
                        writable: !0
                      },
                      pause: {
                        value: function() {
                          var t, e, i;
                          if (this.isPlaying) {
                            this.isPlaying = !1;
                            for (i in this.components)
                              this.components[i].pause();
                            for (
                              t = this.getChildEntities(), e = 0;
                              e < t.length;
                              e++
                            )
                              t[e].pause();
                            this.emit('pause');
                          }
                        },
                        writable: !0
                      },
                      setEntityAttribute: {
                        value: function(t, e, i) {
                          o[t] || this.components[t]
                            ? this.updateComponent(t, i)
                            : 'mixin' !== t || this.mixinUpdate(i, e);
                        }
                      },
                      mixinUpdate: {
                        value: function(t, e) {
                          (e = e || this.getAttribute('mixin')),
                            this.updateMixins(t, e),
                            this.updateStateMixins(t, e),
                            this.updateComponents();
                        }
                      },
                      setAttribute: {
                        value: function(t, e, i) {
                          var n, r, s, c;
                          if (
                            ((s =
                              (c = t.indexOf(p)) > 0 ? t.substring(0, c) : t),
                            !o[s])
                          )
                            return (
                              a.prototype.setAttribute.call(this, t, e),
                              void ('mixin' === t && this.mixinUpdate(e))
                            );
                          !this.components[t] &&
                            this.hasAttribute(t) &&
                            this.updateComponent(
                              t,
                              window.HTMLElement.prototype.getAttribute.call(
                                this,
                                t
                              )
                            ),
                            void 0 !== i &&
                            'string' == typeof e &&
                            e.length > 0 &&
                            'string' == typeof u.styleParser.parse(e)
                              ? (((n = {})[e] = i), (r = !1))
                              : ((n = e), (r = !0 === i)),
                            this.updateComponent(t, n, r),
                            this.sceneEl &&
                              this.sceneEl.getAttribute('debug') &&
                              this.components[t].flushToDOM();
                        },
                        writable: window.debug
                      },
                      flushToDOM: {
                        value: function(t) {
                          var e,
                            i,
                            n,
                            r = this.components,
                            a = this.defaultComponents,
                            o = this.children;
                          for (n in r) r[n].flushToDOM(n in a);
                          if (t)
                            for (i = 0; i < o.length; ++i)
                              (e = o[i]).flushToDOM && e.flushToDOM(t);
                        }
                      },
                      getAttribute: {
                        value: function(t) {
                          var e = this.components[t];
                          return e
                            ? e.data
                            : window.HTMLElement.prototype.getAttribute.call(
                                this,
                                t
                              );
                        },
                        writable: window.debug
                      },
                      getComputedAttribute: {
                        value: function(t) {
                          return (
                            d(
                              '`getComputedAttribute` is deprecated. Use `getAttribute` instead.'
                            ),
                            this.getAttribute(t)
                          );
                        }
                      },
                      getDOMAttribute: {
                        value: function(t) {
                          var e = this.components[t];
                          return e
                            ? e.attrValue
                            : window.HTMLElement.prototype.getAttribute.call(
                                this,
                                t
                              );
                        },
                        writable: window.debug
                      },
                      addState: {
                        value: function(t) {
                          this.is(t) ||
                            (this.states.push(t),
                            this.mapStateMixins(t, l(this.registerMixin, this)),
                            this.emit('stateadded', { state: t }));
                        }
                      },
                      removeState: {
                        value: function(t) {
                          var e = this.states.indexOf(t);
                          -1 !== e &&
                            (this.states.splice(e, 1),
                            this.mapStateMixins(
                              t,
                              l(this.unregisterMixin, this)
                            ),
                            this.emit('stateremoved', { state: t }));
                        }
                      },
                      is: {
                        value: function(t) {
                          return -1 !== this.states.indexOf(t);
                        }
                      }
                    });
                  function m(t, e) {
                    var i,
                      n = !1;
                    for (
                      i = 0;
                      i < e.length && !(n = e[i].hasAttribute(t));
                      ++i
                    );
                    return n;
                  }
                  function g(t, e) {
                    return e
                      ? e.constructor === Object
                        ? u.extend(e, u.styleParser.parse(t || {}))
                        : t || e
                      : t;
                  }
                  function v(t) {
                    return -1 !== t.indexOf(p) && (t = t.split(p)[0]), !!o[t];
                  }
                  (n = s('a-entity', { prototype: f })), (e.exports = n);
                },
                {
                  '../lib/three': 173,
                  '../utils/': 195,
                  './a-node': 123,
                  './a-register-element': 124,
                  './component': 125
                }
              ],
              122: [
                function(t, e, i) {
                  var n = t('./a-node'),
                    r = t('./a-register-element').registerElement,
                    a = t('./component').components;
                  e.exports = r('a-mixin', {
                    prototype: Object.create(n.prototype, {
                      createdCallback: {
                        value: function() {
                          (this.componentCache = {}),
                            (this.id = this.getAttribute('id'));
                        }
                      },
                      attributeChangedCallback: {
                        value: function(t, e, i) {
                          this.cacheAttribute(t, i);
                        }
                      },
                      attachedCallback: {
                        value: function() {
                          (this.sceneEl = this.closestScene()),
                            this.cacheAttributes(),
                            this.updateEntities(),
                            this.load();
                        }
                      },
                      setAttribute: {
                        value: function(t, e) {
                          this.cacheAttribute(t, e),
                            window.HTMLElement.prototype.setAttribute.call(
                              this,
                              t,
                              e
                            );
                        }
                      },
                      cacheAttribute: {
                        value: function(t, e) {
                          var i = t.split('__')[0],
                            n = a[i];
                          n &&
                            (void 0 === e &&
                              (e = window.HTMLElement.prototype.getAttribute.call(
                                this,
                                t
                              )),
                            (this.componentCache[t] = n.parseAttrValueForCache(
                              e
                            )));
                        }
                      },
                      getAttribute: {
                        value: function(t) {
                          return (
                            this.componentCache[t] ||
                            window.HTMLElement.prototype.getAttribute.call(
                              this,
                              t
                            )
                          );
                        }
                      },
                      cacheAttributes: {
                        value: function() {
                          var t,
                            e,
                            i = this.attributes;
                          for (e = 0; e < i.length; e++)
                            (t = i[e].name), this.cacheAttribute(t);
                        }
                      },
                      updateEntities: {
                        value: function() {
                          if (this.sceneEl)
                            for (
                              var t = this.sceneEl.querySelectorAll(
                                  '[mixin~=' + this.id + ']'
                                ),
                                e = 0;
                              e < t.length;
                              e++
                            ) {
                              var i = t[e];
                              i.hasLoaded &&
                                (i.registerMixin(this.id),
                                Object.keys(this.componentCache).forEach(
                                  function(t) {
                                    i.updateComponent(t);
                                  }
                                ));
                            }
                        }
                      }
                    })
                  });
                },
                {
                  './a-node': 123,
                  './a-register-element': 124,
                  './component': 125
                }
              ],
              123: [
                function(t, e, i) {
                  var n = t('./a-register-element').registerElement,
                    r = t('./a-register-element').isNode,
                    a = t('../utils/'),
                    o = a.bind,
                    s = a.debug('core:a-node:warn');
                  e.exports = n('a-node', {
                    prototype: Object.create(window.HTMLElement.prototype, {
                      createdCallback: {
                        value: function() {
                          (this.hasLoaded = !1),
                            (this.isNode = !0),
                            (this.mixinEls = []),
                            (this.mixinObservers = {});
                        },
                        writable: window.debug
                      },
                      attachedCallback: {
                        value: function() {
                          var t;
                          (this.sceneEl = this.closestScene()),
                            this.sceneEl ||
                              s(
                                'You are attempting to attach <' +
                                  this.tagName +
                                  '> outside of an A-Frame scene. Append this element to `<a-scene>` instead.'
                              ),
                            (this.hasLoaded = !1),
                            this.emit('nodeready', {}, !1),
                            (t = this.getAttribute('mixin')) &&
                              this.updateMixins(t);
                        },
                        writable: window.debug
                      },
                      attributeChangedCallback: {
                        value: function(t, e, i) {
                          'mixin' === t && this.updateMixins(i, e);
                        }
                      },
                      closestScene: {
                        value: function() {
                          for (var t = this; t && !t.isScene; )
                            t = t.parentElement;
                          return t;
                        }
                      },
                      closest: {
                        value: function(t) {
                          for (
                            var e =
                                this.matches ||
                                this.mozMatchesSelector ||
                                this.msMatchesSelector ||
                                this.oMatchesSelector ||
                                this.webkitMatchesSelector,
                              i = this;
                            i && !e.call(i, t);

                          )
                            i = i.parentElement;
                          return i;
                        }
                      },
                      detachedCallback: {
                        value: function() {
                          this.hasLoaded = !1;
                        }
                      },
                      load: {
                        value: function(t, e) {
                          var i,
                            n = this;
                          this.hasLoaded ||
                            ((e = e || r),
                            (i = this.getChildren()
                              .filter(e)
                              .map(function(t) {
                                return new Promise(function(e) {
                                  if (t.hasLoaded) return e();
                                  t.addEventListener('loaded', e);
                                });
                              })),
                            Promise.all(i).then(function() {
                              (n.hasLoaded = !0),
                                t && t(),
                                n.emit('loaded', void 0, !1);
                            }));
                        },
                        writable: !0
                      },
                      getChildren: {
                        value: function() {
                          return Array.prototype.slice.call(this.children, 0);
                        }
                      },
                      updateMixins: {
                        value: function(t, e) {
                          var i = t ? t.trim().split(/\s+/) : [];
                          (e ? e.trim().split(/\s+/) : [])
                            .filter(function(t) {
                              return i.indexOf(t) < 0;
                            })
                            .forEach(o(this.unregisterMixin, this)),
                            (this.mixinEls = []),
                            i.forEach(o(this.registerMixin, this));
                        }
                      },
                      registerMixin: {
                        value: function(t) {
                          if (this.sceneEl) {
                            var e = this.sceneEl.querySelector('a-mixin#' + t);
                            e &&
                              (this.attachMixinListener(e),
                              this.mixinEls.push(e));
                          }
                        }
                      },
                      setAttribute: {
                        value: function(t, e) {
                          'mixin' === t && this.updateMixins(e),
                            window.HTMLElement.prototype.setAttribute.call(
                              this,
                              t,
                              e
                            );
                        }
                      },
                      unregisterMixin: {
                        value: function(t) {
                          var e,
                            i = this.mixinEls;
                          for (e = 0; e < i.length; ++e)
                            if (t === i[e].id) {
                              i.splice(e, 1);
                              break;
                            }
                          this.removeMixinListener(t);
                        }
                      },
                      removeMixinListener: {
                        value: function(t) {
                          var e = this.mixinObservers[t];
                          e &&
                            (e.disconnect(), (this.mixinObservers[t] = null));
                        }
                      },
                      attachMixinListener: {
                        value: function(t) {
                          var e = this,
                            i = t.id,
                            n = this.mixinObservers[i];
                          if (t && !n) {
                            var r = new MutationObserver(function(t) {
                              var i = t[0].attributeName;
                              e.handleMixinUpdate(i);
                            });
                            r.observe(t, { attributes: !0 }),
                              (this.mixinObservers[i] = r);
                          }
                        }
                      },
                      handleMixinUpdate: { value: function() {} },
                      emit: {
                        value: function(t, e, i, n) {
                          var r;
                          return (
                            void 0 === i && (i = !0),
                            (r = { bubbles: !!i, detail: e }),
                            n && a.extend(r, n),
                            a.fireEvent(this, t, r)
                          );
                        },
                        writable: window.debug
                      },
                      emitter: {
                        value: function(t, e, i) {
                          var n = this;
                          return function() {
                            n.emit(t, e, i);
                          };
                        }
                      }
                    })
                  });
                },
                { '../utils/': 195, './a-register-element': 124 }
              ],
              124: [
                function(t, e, i) {
                  var n, r;
                  t('document-register-element');
                  var a = (e.exports.knownTags = {});
                  function o(t, e, i, n) {
                    e.forEach(function(e) {
                      !(function(t, e, i, n) {
                        var r = i[e],
                          a = n[e];
                        if (!r || !a) return;
                        if (r === a) return;
                        t[e] = {
                          value: function() {
                            return (
                              a.apply(this, arguments), r.apply(this, arguments)
                            );
                          },
                          writable: window.debug
                        };
                      })(t, e, i, n);
                    });
                  }
                  function s(t, e) {
                    Object.getOwnPropertyNames(t).forEach(function(i) {
                      var n;
                      e[i] ||
                        ((n = Object.getOwnPropertyDescriptor(t, i)),
                        (e[i] = { value: t[i], writable: n.writable }));
                    });
                  }
                  (e.exports.isNode = function(t) {
                    return t.tagName.toLowerCase() in a || t.isNode;
                  }),
                    (e.exports.registerElement = function(t, e) {
                      var i,
                        c,
                        u,
                        l,
                        h = Object.getPrototypeOf(e.prototype),
                        d = e,
                        p = n && h === n.prototype,
                        f = r && h === r.prototype;
                      return (
                        (p || f) && (a[t.toLowerCase()] = !0),
                        p &&
                          ((i = e.prototype),
                          o(
                            (c = {}),
                            [
                              'attachedCallback',
                              'attributeChangedCallback',
                              'createdCallback'
                            ],
                            i,
                            n.prototype
                          ),
                          s(i, c),
                          (d = c),
                          (d = { prototype: Object.create(h, d) })),
                        f &&
                          ((u = e.prototype),
                          o(
                            (l = {}),
                            [
                              'attachedCallback',
                              'attributeChangedCallback',
                              'createdCallback'
                            ],
                            u,
                            n.prototype
                          ),
                          o(
                            l,
                            [
                              'attachedCallback',
                              'attributeChangedCallback',
                              'createdCallback',
                              'detachedCallback'
                            ],
                            u,
                            r.prototype
                          ),
                          s(u, l),
                          (d = l),
                          (d = { prototype: Object.create(h, d) })),
                        document.registerElement(t, d)
                      );
                    }),
                    (e.exports.wrapMethods = o),
                    (n = t('./a-node')),
                    (r = t('./a-entity'));
                },
                {
                  './a-entity': 121,
                  './a-node': 123,
                  'document-register-element': 13
                }
              ],
              125: [
                function(t, e, i) {
                  var n = t('./schema'),
                    r = t('./scene/scenes'),
                    a = t('./system'),
                    o = t('../utils/'),
                    s = (e.exports.components = {}),
                    c = n.parseProperties,
                    u = n.parseProperty,
                    l = n.process,
                    h = n.isSingleProperty,
                    d = n.stringifyProperties,
                    p = n.stringifyProperty,
                    f = o.styleParser,
                    m = o.debug('core:component:warn'),
                    g = document.currentScript,
                    v = new RegExp('[A-Z]+'),
                    y = (e.exports.Component = function(t, e, i) {
                      var n = this;
                      (this.el = t),
                        (this.id = i),
                        (this.attrName = this.name + (i ? '__' + i : '')),
                        (this.evtDetail = { id: this.id, name: this.name }),
                        (this.initialized = !1),
                        (this.el.components[this.attrName] = this),
                        (this.oldData = void 0),
                        (this.previousAttrValue = void 0),
                        (this.throttledEmitComponentChanged = o.throttle(
                          function() {
                            t.emit('componentchanged', n.evtDetail, !1);
                          },
                          200
                        )),
                        this.updateProperties(e);
                    });
                  if (
                    ((y.prototype = {
                      schema: {},
                      init: function() {},
                      update: function(t) {},
                      updateSchema: void 0,
                      tick: void 0,
                      tock: void 0,
                      play: function() {},
                      pause: function() {},
                      remove: function() {},
                      parse: function(t, e) {
                        var i = this.schema;
                        return h(i)
                          ? u(t, i)
                          : c(f.parse(t), i, !0, this.name, e);
                      },
                      stringify: function(t) {
                        var e = this.schema;
                        return 'string' == typeof t
                          ? t
                          : h(e) ? p(t, e) : ((t = d(t, e)), f.stringify(t));
                      },
                      updateCachedAttrValue: function(t, e) {
                        var i,
                          n = this.parseAttrValueForCache(t),
                          r = h(this.schema);
                        if (void 0 !== t) {
                          if (!r && !e && this.attrValue)
                            for (i in this.attrValue)
                              i in n || (n[i] = this.attrValue[i]);
                          this.attrValue = w({}, n, r);
                        }
                      },
                      parseAttrValueForCache: function(t) {
                        var e;
                        return 'string' != typeof t
                          ? t
                          : (h(this.schema)
                              ? 'string' == typeof (e = this.schema.parse(t)) &&
                                (e = t)
                              : (e = f.parse(t)),
                            e);
                      },
                      flushToDOM: function(t) {
                        var e = t ? this.data : this.attrValue;
                        e &&
                          window.HTMLElement.prototype.setAttribute.call(
                            this.el,
                            this.attrName,
                            this.stringify(e)
                          );
                      },
                      updateProperties: function(t, e) {
                        var i,
                          n,
                          r = this.el,
                          a = this.oldData;
                        if (r.hasLoaded)
                          if (
                            ((i = h(this.schema)),
                            (n =
                              null !== t &&
                              'object' == typeof this.previousAttrValue &&
                              t === this.previousAttrValue),
                            (this.previousAttrValue = t),
                            (t = this.parseAttrValueForCache(t)),
                            this.updateSchema &&
                              this.updateSchema(this.buildData(t, !1, !0)),
                            (this.data = this.buildData(t, e, !1, n)),
                            this.updateCachedAttrValue(t, e),
                            this.initialized)
                          ) {
                            if (o.deepEqual(this.oldData, this.data)) return;
                            (this.oldData = w({}, this.data, i)),
                              this.update(a),
                              this.throttledEmitComponentChanged();
                          } else {
                            if (r.initializingComponents[this.name]) return;
                            (r.initializingComponents[this.name] = !0),
                              this.init(),
                              (this.initialized = !0),
                              delete r.initializingComponents[this.name],
                              (a =
                                i && 'object' != typeof u(void 0, this.schema)
                                  ? void 0
                                  : {}),
                              (this.oldData = w({}, this.data, i)),
                              this.update(a),
                              r.isPlaying && this.play(),
                              r.emit(
                                'componentinitialized',
                                this.evtDetail,
                                !1
                              );
                          }
                        else this.updateCachedAttrValue(t);
                      },
                      resetProperty: function(t) {
                        if (h(this.schema)) this.attrValue = void 0;
                        else {
                          if (!(t in this.attrValue)) return;
                          delete this.attrValue[t];
                        }
                        this.updateProperties(this.attrValue);
                      },
                      extendSchema: function(t) {
                        var e = o.extend({}, s[this.name].schema);
                        o.extend(e, t),
                          (this.schema = l(e)),
                          this.el.emit('schemachanged', {
                            component: this.name
                          });
                      },
                      buildData: function(t, e, i, n) {
                        var r,
                          a,
                          s,
                          l,
                          d,
                          p,
                          f,
                          m = void 0 !== t && null !== t,
                          g = this.schema,
                          v = h(g),
                          y = this.el.mixinEls;
                        if (v)
                          r =
                            g.default && g.default.constructor === Object
                              ? o.clone(g.default)
                              : g.default;
                        else
                          for (
                            r =
                              'object' == typeof (f = !e && this.attrValue)
                                ? (function(t) {
                                    var e,
                                      i,
                                      n = {};
                                    for (i in t)
                                      (e = t[i]),
                                        (n[i] =
                                          e && e.constructor === Object
                                            ? o.clone(e)
                                            : e);
                                    return n;
                                  })(f)
                                : {},
                              p = 0,
                              l = (s = Object.keys(g)).length;
                            p < l;
                            p++
                          )
                            (a = g[s[p]].default),
                              void 0 === r[s[p]] &&
                                (r[s[p]] =
                                  a && a.constructor === Object
                                    ? o.clone(a)
                                    : a);
                        for (p = 0; p < y.length; p++)
                          (d = y[p].getAttribute(this.attrName)) &&
                            (r = w(r, d, v));
                        if (m) {
                          if (v) return !0 === n ? t : u(t, g);
                          r = w(r, t, v);
                        } else {
                          if (!0 === n) return r;
                          if (v) return u(r, g);
                        }
                        return !0 === n ? r : c(r, g, void 0, this.name, i);
                      }
                    }),
                    window.debug)
                  )
                    var M = (e.exports.registrationOrderWarnings = {});
                  function w(t, e, i) {
                    return !i || (null !== e && 'object' == typeof e)
                      ? o.extend(t, e)
                      : e;
                  }
                  function x(t) {
                    return t.tick || t.tock;
                  }
                  e.exports.registerComponent = function(t, e) {
                    var i,
                      n,
                      c,
                      u = {};
                    if (
                      (document.currentScript &&
                        document.currentScript !== g &&
                        r.forEach(function(e) {
                          e.hasLoaded ||
                            (document.currentScript.compareDocumentPosition(
                              e
                            ) !== Node.DOCUMENT_POSITION_FOLLOWING &&
                              (m(
                                'The component `' +
                                  t +
                                  '` was registered in a <script> tag after the scene. Component <script> tags in an HTML file should be declared *before* the scene such that the component is available to entities during scene initialization.'
                              ),
                              window.debug && (M[t] = !0)));
                        }),
                      !0 === v.test(t) &&
                        m(
                          'The component name `' +
                            t +
                            '` contains uppercase characters, but HTML will ignore the capitalization of attribute names. Change the name to be lowercase: `' +
                            t.toLowerCase() +
                            '`'
                        ),
                      -1 !== t.indexOf('__'))
                    )
                      throw new Error(
                        'The component name `' +
                          t +
                          '` is not allowed. The sequence __ (double underscore) is reserved to specify an id for multiple components of the same type'
                      );
                    if (
                      (Object.keys(e).forEach(function(t) {
                        u[t] = { value: e[t], writable: !0 };
                      }),
                      s[t])
                    )
                      throw new Error(
                        'The component `' +
                          t +
                          '` has been already registered. Check that you are not loading two versions of the same component or two different components of the same name.'
                      );
                    return (
                      (((i = function(t, e, i) {
                        y.call(this, t, e, i);
                      }).prototype = Object.create(y.prototype, u)).name = t),
                      (i.prototype.constructor = i),
                      (i.prototype.system = a && a.systems[t]),
                      (i.prototype.play = ((n = i.prototype.play),
                      function() {
                        var t = this.el.sceneEl,
                          e = this.el.isPlaying && !this.isPlaying;
                        this.initialized &&
                          e &&
                          (n.call(this),
                          (this.isPlaying = !0),
                          x(this) && t.addBehavior(this));
                      })),
                      (i.prototype.pause = ((c = i.prototype.pause),
                      function() {
                        var t = this.el.sceneEl;
                        this.isPlaying &&
                          (c.call(this),
                          (this.isPlaying = !1),
                          x(this) && t.removeBehavior(this));
                      })),
                      (s[t] = {
                        Component: i,
                        dependencies: i.prototype.dependencies,
                        isSingleProp: h(i.prototype.schema),
                        multiple: i.prototype.multiple,
                        parse: i.prototype.parse,
                        parseAttrValueForCache:
                          i.prototype.parseAttrValueForCache,
                        schema: o.extend(
                          l(i.prototype.schema, i.prototype.name)
                        ),
                        stringify: i.prototype.stringify,
                        type: i.prototype.type
                      }),
                      i
                    );
                  };
                },
                {
                  '../utils/': 195,
                  './scene/scenes': 131,
                  './schema': 133,
                  './system': 135
                }
              ],
              126: [
                function(t, e, i) {
                  var n = t('./schema').process,
                    r = (e.exports.geometries = {}),
                    a = (e.exports.geometryNames = []),
                    o = t('../lib/three'),
                    s = (e.exports.Geometry = function() {});
                  (s.prototype = {
                    schema: {},
                    init: function(t) {
                      return (this.geometry = new o.Geometry()), this.geometry;
                    },
                    update: function(t) {}
                  }),
                    (e.exports.registerGeometry = function(t, e) {
                      var i,
                        o = {};
                      if (
                        (Object.keys(e).forEach(function(t) {
                          o[t] = { value: e[t], writable: !0 };
                        }),
                        r[t])
                      )
                        throw new Error(
                          'The geometry `' + t + '` has been already registered'
                        );
                      return (
                        (((i = function() {
                          s.call(this);
                        }).prototype = Object.create(s.prototype, o)).name = t),
                        (i.prototype.constructor = i),
                        (r[t] = { Geometry: i, schema: n(i.prototype.schema) }),
                        a.push(t),
                        i
                      );
                    });
                },
                { '../lib/three': 173, './schema': 133 }
              ],
              127: [
                function(t, e, i) {
                  var n = t('../utils/coordinates'),
                    r = t('debug'),
                    a = r('core:propertyTypes:warn'),
                    o = r('core:propertyTypes:warn'),
                    s = (e.exports.propertyTypes = {}),
                    c = /[,> .[\]:]/;
                  function u(t, e, i, n) {
                    'type' in s
                      ? a('Property type ' + t + ' is already registered.')
                      : (s[t] = {
                          default: e,
                          parse: i || h,
                          stringify: n || d
                        });
                  }
                  function l(t) {
                    var e, i;
                    return 'string' != typeof t
                      ? t
                      : (i = t.match(/\url\((.+)\)/))
                        ? i[1]
                        : '#' === t.charAt(0)
                          ? (e = document.getElementById(t.substring(1)))
                            ? 'CANVAS' === e.tagName ||
                              'VIDEO' === e.tagName ||
                              'IMG' === e.tagName
                              ? e
                              : e.getAttribute('src')
                            : void o('"' + t + '" asset not found.')
                          : t;
                  }
                  function h(t) {
                    return t;
                  }
                  function d(t) {
                    return null === t ? 'null' : t.toString();
                  }
                  function p(t) {
                    return parseInt(t, 10);
                  }
                  function f(t) {
                    return n.parse(t, this.default);
                  }
                  function m(t, e) {
                    if (null === t) return !0;
                    if ('object' != typeof t) return !1;
                    if (Object.keys(t).length !== e) return !1;
                    var i = t.x,
                      n = t.y,
                      r = t.z,
                      a = t.w;
                    return (
                      'number' == typeof i &&
                      'number' == typeof n &&
                      (!(e > 2 && 'number' != typeof r) &&
                        !(e > 3 && 'number' != typeof a))
                    );
                  }
                  u('audio', '', l),
                    u(
                      'array',
                      [],
                      function(t) {
                        if (Array.isArray(t)) return t;
                        if (!t || 'string' != typeof t) return [];
                        return t.split(',').map(function(t) {
                          return t.trim();
                        });
                      },
                      function(t) {
                        return t.join(', ');
                      }
                    ),
                    u('asset', '', l),
                    u('boolean', !1, function(t) {
                      return 'false' !== t && !1 !== t;
                    }),
                    u('color', '#FFF', h, d),
                    u('int', 0, p),
                    u('number', 0, function(t) {
                      return parseFloat(t, 10);
                    }),
                    u('map', '', l),
                    u('model', '', l),
                    u(
                      'selector',
                      null,
                      function(t) {
                        if (!t) return null;
                        if ('string' != typeof t) return t;
                        if ('#' === t[0] && !c.test(t))
                          return document.getElementById(t.substring(1));
                        return document.querySelector(t);
                      },
                      function(t) {
                        if (t.getAttribute) return '#' + t.getAttribute('id');
                        return d(t);
                      }
                    ),
                    u(
                      'selectorAll',
                      null,
                      function(t) {
                        if (!t) return null;
                        if ('string' != typeof t) return t;
                        return Array.prototype.slice.call(
                          document.querySelectorAll(t),
                          0
                        );
                      },
                      function(t) {
                        if (t instanceof Array)
                          return t
                            .map(function(t) {
                              return '#' + t.getAttribute('id');
                            })
                            .join(', ');
                        return d(t);
                      }
                    ),
                    u('src', '', function(t) {
                      return (
                        o(
                          '`src` property type is deprecated. Use `asset` instead.'
                        ),
                        l(t)
                      );
                    }),
                    u('string', '', h, d),
                    u('time', 0, p),
                    u('vec2', { x: 0, y: 0 }, f, n.stringify),
                    u('vec3', { x: 0, y: 0, z: 0 }, f, n.stringify),
                    u('vec4', { x: 0, y: 0, z: 0, w: 0 }, f, n.stringify),
                    (e.exports.registerPropertyType = u),
                    (e.exports.isValidDefaultValue = function(t, e) {
                      return (
                        ('audio' !== t || 'string' == typeof e) &&
                        !('array' === t && !Array.isArray(e)) &&
                        ('asset' !== t || 'string' == typeof e) &&
                        ('boolean' !== t || 'boolean' == typeof e) &&
                        ('color' !== t || 'string' == typeof e) &&
                        ('int' !== t || 'number' == typeof e) &&
                        ('number' !== t || 'number' == typeof e) &&
                        ('map' !== t || 'string' == typeof e) &&
                        ('model' !== t || 'string' == typeof e) &&
                        ('selector' !== t ||
                          'string' == typeof e ||
                          null === e) &&
                        ('selectorAll' !== t ||
                          'string' == typeof e ||
                          null === e) &&
                        ('src' !== t || 'string' == typeof e) &&
                        ('string' !== t || 'string' == typeof e) &&
                        ('time' !== t || 'number' == typeof e) &&
                        ('vec2' === t
                          ? m(e, 2)
                          : 'vec3' === t ? m(e, 3) : 'vec4' !== t || m(e, 4))
                      );
                    }),
                    (e.exports.isValidDefaultCoordinate = m);
                },
                { '../utils/coordinates': 190, debug: 10 }
              ],
              128: [
                function(t, e, i) {
                  var n = t('./metaTags').inject,
                    r = t('./wakelock'),
                    a = t('../a-register-element'),
                    o = t('./scenes'),
                    s = t('../system').systems,
                    c = t('../../lib/three'),
                    u = t('@tweenjs/tween.js'),
                    l = t('../../utils/'),
                    h = t('../a-entity'),
                    d = t('../a-node'),
                    p = t('./postMessage'),
                    f = l.bind,
                    m = l.device.isIOS(),
                    g = l.device.isMobile(),
                    v = a.registerElement,
                    y = l.debug('core:a-scene:warn');
                  function M(t) {
                    return null !== t.getAttribute('antialias')
                      ? 'true' === t.getAttribute('antialias')
                      : !t.isMobile;
                  }
                  function w(t) {
                    var e;
                    function i() {
                      document.fullscreenElement ||
                        document.mozFullScreenElement ||
                        document.webkitFullscreenElement ||
                        t.exitVR(),
                        document.activeElement.blur(),
                        document.body.focus();
                    }
                    (e = document.createElement('canvas')).classList.add(
                      'a-canvas'
                    ),
                      (e.dataset.aframeCanvas = !0),
                      t.appendChild(e),
                      document.addEventListener('fullscreenchange', i),
                      document.addEventListener('mozfullscreenchange', i),
                      document.addEventListener('webkitfullscreenchange', i),
                      e.addEventListener('touchmove', function(t) {
                        t.preventDefault();
                      }),
                      (t.canvas = e),
                      t.emit('render-target-loaded', { target: e }),
                      setTimeout(f(t.resize, t), 0);
                  }
                  (e.exports.AScene = v('a-scene', {
                    prototype: Object.create(h.prototype, {
                      defaultComponents: {
                        value: {
                          inspector: '',
                          'keyboard-shortcuts': '',
                          screenshot: '',
                          'vr-mode-ui': ''
                        }
                      },
                      createdCallback: {
                        value: function() {
                          (this.isIOS = m),
                            (this.isMobile = g),
                            (this.isScene = !0),
                            (this.object3D = new c.Scene()),
                            (this.render = f(this.render, this)),
                            (this.systems = {}),
                            (this.systemNames = []),
                            (this.time = 0),
                            this.init();
                        }
                      },
                      init: {
                        value: function() {
                          (this.behaviors = { tick: [], tock: [] }),
                            (this.hasLoaded = !1),
                            (this.isPlaying = !1),
                            (this.originalHTML = this.innerHTML),
                            (this.renderTarget = null),
                            w(this),
                            this.setupRenderer(),
                            this.resize(),
                            this.addFullScreenStyles(),
                            p(this);
                        },
                        writable: !0
                      },
                      addFullScreenStyles: {
                        value: function() {
                          document.documentElement.classList.add('a-html'),
                            document.body.classList.add('a-body'),
                            this.classList.add('fullscreen');
                        }
                      },
                      removeFullScreenStyles: {
                        value: function() {
                          document.documentElement.classList.remove('a-html'),
                            document.body.classList.remove('a-body'),
                            this.classList.remove('fullscreen');
                        }
                      },
                      attachedCallback: {
                        value: function() {
                          var t,
                            e = this;
                          n(this),
                            r(this),
                            this.initSystems(),
                            (t = f(this.resize, this)),
                            window.addEventListener('load', t),
                            window.addEventListener('resize', t),
                            this.play(),
                            o.push(this),
                            (this.onVRPresentChangeBound = f(
                              this.onVRPresentChange,
                              this
                            )),
                            window.addEventListener(
                              'vrdisplaypresentchange',
                              this.onVRPresentChangeBound
                            ),
                            (this.enterVRBound = function() {
                              e.enterVR();
                            }),
                            (this.exitVRBound = function() {
                              e.exitVR();
                            }),
                            (this.exitVRTrueBound = function() {
                              e.exitVR(!0);
                            }),
                            (this.pointerRestrictedBound = function() {
                              e.pointerRestricted();
                            }),
                            (this.pointerUnrestrictedBound = function() {
                              e.pointerUnrestricted();
                            }),
                            window.addEventListener(
                              'vrdisplayactivate',
                              this.enterVRBound
                            ),
                            window.addEventListener(
                              'vrdisplaydeactivate',
                              this.exitVRBound
                            ),
                            window.addEventListener(
                              'vrdisplaydisconnect',
                              this.exitVRTrueBound
                            ),
                            window.addEventListener(
                              'vrdisplaypointerrestricted',
                              this.pointerRestrictedBound
                            ),
                            window.addEventListener(
                              'vrdisplaypointerunrestricted',
                              this.pointerUnrestrictedBound
                            );
                        },
                        writable: window.debug
                      },
                      initSystems: {
                        value: function() {
                          Object.keys(s).forEach(f(this.initSystem, this));
                        }
                      },
                      initSystem: {
                        value: function(t) {
                          this.systems[t] ||
                            ((this.systems[t] = new s[t](this)),
                            this.systemNames.push(t));
                        }
                      },
                      detachedCallback: {
                        value: function() {
                          var t;
                          this.effect && this.effect.cancelAnimationFrame
                            ? this.effect.cancelAnimationFrame(
                                this.animationFrameID
                              )
                            : window.cancelAnimationFrame(
                                this.animationFrameID
                              ),
                            (this.animationFrameID = null),
                            (t = o.indexOf(this)),
                            o.splice(t, 1),
                            window.removeEventListener(
                              'vrdisplaypresentchange',
                              this.onVRPresentChangeBound
                            ),
                            window.removeEventListener(
                              'vrdisplayactivate',
                              this.enterVRBound
                            ),
                            window.removeEventListener(
                              'vrdisplaydeactivate',
                              this.exitVRBound
                            ),
                            window.removeEventListener(
                              'vrdisplayconnect',
                              this.enterVRBound
                            ),
                            window.removeEventListener(
                              'vrdisplaydisconnect',
                              this.exitVRTrueBound
                            ),
                            window.removeEventListener(
                              'vrdisplaypointerrestricted',
                              this.pointerRestrictedBound
                            ),
                            window.removeEventListener(
                              'vrdisplaypointerunrestricted',
                              this.pointerUnrestrictedBound
                            );
                        }
                      },
                      addBehavior: {
                        value: function(t) {
                          var e = this,
                            i = this.behaviors;
                          Object.keys(i).forEach(function(i) {
                            if (t[i]) {
                              var n = e.behaviors[i];
                              -1 === n.indexOf(t) && n.push(t);
                            }
                          });
                        }
                      },
                      getPointerLockElement: {
                        value: function() {
                          return document.pointerLockElement;
                        },
                        writable: window.debug
                      },
                      checkHeadsetConnected: {
                        value: l.device.checkHeadsetConnected,
                        writable: window.debug
                      },
                      enterVR: {
                        value: function(t) {
                          var e = this,
                            i = this.effect;
                          return this.is('vr-mode')
                            ? Promise.resolve('Already in VR.')
                            : t ||
                              (!this.checkHeadsetConnected() && !this.isMobile)
                              ? (n(), Promise.resolve())
                              : (i &&
                                  i.requestPresent().then(n, function(t) {
                                    throw t && t.message
                                      ? new Error(
                                          'Failed to enter VR mode (`requestPresent`): ' +
                                            t.message
                                        )
                                      : new Error(
                                          'Failed to enter VR mode (`requestPresent`).'
                                        );
                                  })) ||
                                Promise.reject(
                                  new Error('VREffect not initialized')
                                );
                          function n() {
                            var t;
                            e.addState('vr-mode'),
                              e.emit('enter-vr', { target: e }),
                              e.isMobile &&
                                screen.orientation &&
                                screen.orientation.lock &&
                                screen.orientation.lock('landscape'),
                              e.addFullScreenStyles(),
                              e.isMobile ||
                                e.checkHeadsetConnected() ||
                                (
                                  (t = e.canvas).requestFullscreen ||
                                  t.webkitRequestFullscreen ||
                                  t.mozRequestFullScreen ||
                                  t.msRequestFullscreen
                                ).apply(t),
                              e.resize();
                          }
                        },
                        writable: window.debug
                      },
                      exitVR: {
                        value: function(t) {
                          var e = this;
                          return this.is('vr-mode')
                            ? (document.exitFullscreen
                                ? document.exitFullscreen()
                                : document.mozCancelFullScreen
                                  ? document.mozCancelFullScreen()
                                  : document.webkitExitFullscreen &&
                                    document.webkitExitFullscreen(),
                              t ||
                              (!this.checkHeadsetConnected() && !this.isMobile)
                                ? (i(), Promise.resolve())
                                : this.effect
                                    .exitPresent()
                                    .then(i, function(t) {
                                      throw t && t.message
                                        ? new Error(
                                            'Failed to exit VR mode (`exitPresent`): ' +
                                              t.message
                                          )
                                        : new Error(
                                            'Failed to exit VR mode (`exitPresent`).'
                                          );
                                    }))
                            : Promise.resolve('Not in VR.');
                          function i() {
                            e.removeState('vr-mode'),
                              e.isMobile &&
                                screen.orientation &&
                                screen.orientation.unlock &&
                                screen.orientation.unlock(),
                              e.hasAttribute('embedded') &&
                                e.removeFullScreenStyles(),
                              e.resize(),
                              e.isIOS &&
                                l.forceCanvasResizeSafariMobile(this.canvas),
                              e.emit('exit-vr', { target: e });
                          }
                        },
                        writable: window.debug
                      },
                      pointerRestricted: {
                        value: function() {
                          if (this.canvas) {
                            var t = this.getPointerLockElement();
                            t &&
                              t !== this.canvas &&
                              document.exitPointerLock &&
                              document.exitPointerLock(),
                              this.canvas.requestPointerLock &&
                                this.canvas.requestPointerLock();
                          }
                        }
                      },
                      pointerUnrestricted: {
                        value: function() {
                          var t = this.getPointerLockElement();
                          t &&
                            t === this.canvas &&
                            document.exitPointerLock &&
                            document.exitPointerLock();
                        }
                      },
                      onVRPresentChange: {
                        value: function(t) {
                          (t.display || t.detail.display).isPresenting
                            ? this.enterVR(!0)
                            : this.exitVR(!0);
                        }
                      },
                      getAttribute: {
                        value: function(t) {
                          var e = this.systems[t];
                          return e
                            ? e.data
                            : h.prototype.getAttribute.call(this, t);
                        }
                      },
                      getComputedAttribute: {
                        value: function(t) {
                          y(
                            '`getComputedAttribute` is deprecated. Use `getAttribute` instead.'
                          ),
                            this.getAttribute(t);
                        }
                      },
                      getDOMAttribute: {
                        value: function(t) {
                          var e = this.systems[t];
                          return e
                            ? e.data
                            : h.prototype.getDOMAttribute.call(this, t);
                        }
                      },
                      setAttribute: {
                        value: function(t, e, i) {
                          var n = this.systems[t];
                          if (n)
                            return (
                              d.prototype.setAttribute.call(this, t, e),
                              void n.updateProperties(e)
                            );
                          h.prototype.setAttribute.call(this, t, e, i);
                        }
                      },
                      removeBehavior: {
                        value: function(t) {
                          var e = this,
                            i = this.behaviors;
                          Object.keys(i).forEach(function(i) {
                            if (t[i]) {
                              var n = e.behaviors[i],
                                r = n.indexOf(t);
                              -1 !== r && n.splice(r, 1);
                            }
                          });
                        }
                      },
                      resize: {
                        value: function() {
                          var t,
                            e = this.camera,
                            i = this.canvas,
                            n =
                              this.getAttribute('embedded') &&
                              !this.is('vr-mode'),
                            r = this.effect && this.effect.isPresenting;
                          !e ||
                            !i ||
                            (this.is('vr-mode') && (this.isMobile || r)) ||
                            ((t = (function(t, e) {
                              if (e)
                                return {
                                  height: t.parentElement.offsetHeight,
                                  width: t.parentElement.offsetWidth
                                };
                              return {
                                height: window.innerHeight,
                                width: window.innerWidth
                              };
                            })(i, n)),
                            (e.aspect = t.width / t.height),
                            e.updateProjectionMatrix(),
                            this.renderer.setSize(t.width, t.height));
                        },
                        writable: window.debug
                      },
                      setupRenderer: {
                        value: function() {
                          var t;
                          (t = this.renderer = new c.WebGLRenderer({
                            canvas: this.canvas,
                            antialias: M(this),
                            alpha: !0
                          })).setPixelRatio(window.devicePixelRatio),
                            (t.sortObjects = !1),
                            (this.effect = new c.VREffect(t)),
                            (this.effect.autoSubmitFrame = !1);
                        },
                        writable: window.debug
                      },
                      play: {
                        value: function() {
                          var t = this;
                          this.renderStarted
                            ? h.prototype.play.call(this)
                            : (this.addEventListener('loaded', function() {
                                function t(t) {
                                  t.renderStarted ||
                                    (t.resize(),
                                    t.renderer &&
                                      (window.performance &&
                                        window.performance.mark(
                                          'render-started'
                                        ),
                                      (t.clock = new c.Clock()),
                                      t.render(),
                                      (t.renderStarted = !0),
                                      t.emit('renderstart')));
                                }
                                h.prototype.play.call(this),
                                  this.camera
                                    ? t(this)
                                    : this.addEventListener(
                                        'camera-set-active',
                                        function() {
                                          t(this);
                                        }
                                      );
                              }),
                              setTimeout(function() {
                                h.prototype.load.call(t);
                              }));
                        }
                      },
                      reload: {
                        value: function(t) {
                          var e = this;
                          t && this.pause(),
                            (this.innerHTML = this.originalHTML),
                            this.init(),
                            d.prototype.load.call(this, function() {
                              if (!e.isPlaying) return;
                              h.prototype.play.call(e);
                            });
                        }
                      },
                      updateComponent: {
                        value: function(t) {
                          t in s ||
                            h.prototype.updateComponent.apply(this, arguments);
                        }
                      },
                      tick: {
                        value: function(t, e) {
                          var i,
                            n = this.systems;
                          for (
                            u.update(), i = 0;
                            i < this.behaviors.tick.length;
                            i++
                          )
                            this.behaviors.tick[i].el.isPlaying &&
                              this.behaviors.tick[i].tick(t, e);
                          for (i = 0; i < this.systemNames.length; i++)
                            n[this.systemNames[i]].tick &&
                              n[this.systemNames[i]].tick(t, e);
                        }
                      },
                      tock: {
                        value: function(t, e) {
                          var i,
                            n = this.systems;
                          for (i = 0; i < this.behaviors.tock.length; i++)
                            this.behaviors.tock[i].el.isPlaying &&
                              this.behaviors.tock[i].tock(t, e);
                          for (i = 0; i < this.systemNames.length; i++)
                            n[this.systemNames[i]].tock &&
                              n[this.systemNames[i]].tock(t, e);
                        }
                      },
                      render: {
                        value: function() {
                          var t = this.effect,
                            e = 1e3 * this.clock.getDelta();
                          (this.time = 1e3 * this.clock.elapsedTime),
                            this.isPlaying && this.tick(this.time, e),
                            (this.animationFrameID = t.requestAnimationFrame(
                              this.render
                            )),
                            t.render(
                              this.object3D,
                              this.camera,
                              this.renderTarget
                            ),
                            this.isPlaying && this.tock(this.time, e),
                            this.effect.submitFrame();
                        },
                        writable: !0
                      }
                    })
                  })),
                    (e.exports.shouldAntiAlias = M),
                    (e.exports.setupCanvas = w);
                },
                {
                  '../../lib/three': 173,
                  '../../utils/': 195,
                  '../a-entity': 121,
                  '../a-node': 123,
                  '../a-register-element': 124,
                  '../system': 135,
                  './metaTags': 129,
                  './postMessage': 130,
                  './scenes': 131,
                  './wakelock': 132,
                  '@tweenjs/tween.js': 1
                }
              ],
              129: [
                function(t, e, i) {
                  var n,
                    r = t('../../constants/'),
                    a = t('../../utils').extend,
                    o = (e.exports.MOBILE_HEAD_TAGS = [
                      c({
                        name: 'viewport',
                        content:
                          'width=device-width,initial-scale=1,maximum-scale=1,shrink-to-fit=no,user-scalable=no,minimal-ui'
                      }),
                      c({ name: 'mobile-web-app-capable', content: 'yes' }),
                      c({ name: 'theme-color', content: 'black' })
                    ]),
                    s = [
                      c({
                        name: 'apple-mobile-web-app-capable',
                        content: 'yes'
                      }),
                      c({
                        name: 'apple-mobile-web-app-status-bar-style',
                        content: 'black'
                      }),
                      ((n = {
                        rel: 'apple-touch-icon',
                        href: 'https://aframe.io/images/aframe-logo-152.png'
                      }),
                      {
                        tagName: 'link',
                        attributes: n,
                        exists: function() {
                          return document.querySelector(
                            'link[rel="' + n.rel + '"]'
                          );
                        }
                      })
                    ];
                  function c(t) {
                    return {
                      tagName: 'meta',
                      attributes: t,
                      exists: function() {
                        return document.querySelector(
                          'meta[name="' + t.name + '"]'
                        );
                      }
                    };
                  }
                  e.exports.inject = function(t) {
                    var e,
                      i = document.head,
                      n = i.querySelector('script'),
                      c = [];
                    return o.forEach(u), t.isIOS && s.forEach(u), c;
                    function u(t) {
                      t &&
                        !t.exists() &&
                        (e = (function(t) {
                          if (!t || !t.tagName) return;
                          var e = document.createElement(t.tagName);
                          return (
                            e.setAttribute(r.AFRAME_INJECTED, ''),
                            a(e, t.attributes)
                          );
                        })(t)) &&
                        (n ? n.parentNode.insertBefore(e, n) : i.appendChild(e),
                        c.push(e));
                    }
                  };
                },
                { '../../constants/': 116, '../../utils': 195 }
              ],
              130: [
                function(t, e, i) {
                  var n = t('../../utils/bind'),
                    r = t('../../utils/').isIframed;
                  function a(t) {
                    if (t.data)
                      switch (t.data.type) {
                        case 'vr':
                          switch (t.data.data) {
                            case 'enter':
                              this.enterVR();
                              break;
                            case 'exit':
                              this.exitVR();
                          }
                      }
                  }
                  e.exports = function(t) {
                    r() && window.addEventListener('message', n(a, t));
                  };
                },
                { '../../utils/': 195, '../../utils/bind': 189 }
              ],
              131: [
                function(t, e, i) {
                  e.exports = [];
                },
                {}
              ],
              132: [
                function(t, e, i) {
                  var n = t('../../../vendor/wakelock/wakelock');
                  e.exports = function(t) {
                    if (t.isMobile) {
                      var e = (t.wakelock = new n());
                      t.addEventListener('enter-vr', function() {
                        e.request();
                      }),
                        t.addEventListener('exit-vr', function() {
                          e.release();
                        });
                    }
                  };
                },
                { '../../../vendor/wakelock/wakelock': 205 }
              ],
              133: [
                function(t, e, i) {
                  var n = t('../utils/'),
                    r = t('./propertyTypes'),
                    a = n.debug,
                    o = r.isValidDefaultValue,
                    s = r.propertyTypes,
                    c = a('core:schema:warn');
                  function u(t) {
                    return 'type' in t
                      ? 'string' == typeof t.type
                      : 'default' in t;
                  }
                  function l(t, e) {
                    var i,
                      n,
                      r = t.default,
                      a = t.type;
                    return (
                      t.type
                        ? 'bool' === t.type
                          ? (a = 'boolean')
                          : 'float' === t.type && (a = 'number')
                        : (a =
                            void 0 !== r &&
                            -1 !== ['boolean', 'number'].indexOf(typeof r)
                              ? typeof r
                              : Array.isArray(r) ? 'array' : 'string'),
                      (n = s[a]) ||
                        c(
                          'Unknown property type for component `' +
                            e +
                            '`: ' +
                            a
                        ),
                      (i = !!t.parse),
                      (t.parse = t.parse || n.parse),
                      (t.stringify = t.stringify || n.stringify),
                      (t.type = a),
                      'default' in t
                        ? i ||
                          o(a, r) ||
                          c(
                            'Default value `' +
                              r +
                              '` does not match type `' +
                              a +
                              '` in component `' +
                              e +
                              '`'
                          )
                        : (t.default = n.default),
                      t
                    );
                  }
                  function h(t, e) {
                    return (
                      (void 0 !== t && null !== t && '' !== t) ||
                        ((t = e.default), Array.isArray(t) && (t = t.slice())),
                      e.parse(t, e.default)
                    );
                  }
                  function d(t, e) {
                    return 'object' != typeof t
                      ? t
                      : e && null !== t ? e.stringify(t) : JSON.stringify(t);
                  }
                  (e.exports.isSingleProperty = u),
                    (e.exports.process = function(t, e) {
                      return u(t)
                        ? l(t, e)
                        : (Object.keys(t).forEach(function(i) {
                            t[i] = l(t[i], e);
                          }),
                          t);
                    }),
                    (e.exports.processPropertyDefinition = l),
                    (e.exports.parseProperties = function(t, e, i, n, r) {
                      var a = Object.keys(i ? t : e);
                      return null === t || 'object' != typeof t
                        ? t
                        : (Object.keys(t).forEach(function(t) {
                            e[t] ||
                              r ||
                              c(
                                'Unknown property `' +
                                  t +
                                  '` for component/system `' +
                                  n +
                                  '`.'
                              );
                          }),
                          a.forEach(function(i) {
                            var n = e[i],
                              r = t[i];
                            e[i] && (t[i] = h(r, n));
                          }),
                          t);
                    }),
                    (e.exports.parseProperty = h),
                    (e.exports.stringifyProperties = function(t, e) {
                      var i = {};
                      return (
                        Object.keys(t).forEach(function(n) {
                          var r = e[n],
                            a = t[n],
                            o = a;
                          'object' == typeof o &&
                            ((o = d(a, r)),
                            r || c('Unknown component property: ' + n)),
                            (i[n] = o);
                        }),
                        i
                      );
                    }),
                    (e.exports.stringifyProperty = d);
                },
                { '../utils/': 195, './propertyTypes': 127 }
              ],
              134: [
                function(t, e, i) {
                  var n = t('./schema').process,
                    r = (e.exports.shaders = {}),
                    a = (e.exports.shaderNames = []),
                    o = t('../lib/three'),
                    s = t('../utils'),
                    c = {
                      array: 'v3',
                      color: 'v3',
                      int: 'i',
                      number: 'f',
                      map: 't',
                      time: 'f',
                      vec2: 'v2',
                      vec3: 'v3',
                      vec4: 'v4'
                    },
                    u = (e.exports.Shader = function() {});
                  (u.prototype = {
                    schema: {},
                    vertexShader:
                      'void main() {gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);}',
                    fragmentShader:
                      'void main() {gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);}',
                    init: function(t) {
                      return (
                        (this.attributes = this.initVariables(t, 'attribute')),
                        (this.uniforms = this.initVariables(t, 'uniform')),
                        (this.material = new (this.raw
                          ? o.RawShaderMaterial
                          : o.ShaderMaterial)({
                          uniforms: this.uniforms,
                          vertexShader: this.vertexShader,
                          fragmentShader: this.fragmentShader
                        })),
                        this.material
                      );
                    },
                    initVariables: function(t, e) {
                      var i = {},
                        n = this.schema;
                      return (
                        Object.keys(n).forEach(function(t) {
                          if (n[t].is === e) {
                            var r = c[n[t].type];
                            i[t] = { type: r, value: void 0 };
                          }
                        }),
                        i
                      );
                    },
                    update: function(t) {
                      this.updateVariables(t, 'attribute'),
                        this.updateVariables(t, 'uniform');
                    },
                    updateVariables: function(t, e) {
                      var i = this,
                        n = 'uniform' === e ? this.uniforms : this.attributes,
                        r = this.schema;
                      Object.keys(t).forEach(function(a) {
                        var o;
                        if (r[a] && r[a].is === e) {
                          if ('map' === r[a].type) {
                            if (!n[a] || n[a].value === t[a]) return;
                            return (
                              (o = '_texture_' + a),
                              i.el.addEventListener(
                                'materialtextureloaded',
                                function() {
                                  (n[a].value = i.material[o]),
                                    (n[a].needsUpdate = !0);
                                }
                              ),
                              void s.material.updateMapMaterialFromData(
                                o,
                                a,
                                i,
                                t
                              )
                            );
                          }
                          (n[a].value = i.parseValue(r[a].type, t[a])),
                            (n[a].needsUpdate = !0);
                        }
                      });
                    },
                    parseValue: function(t, e) {
                      var i;
                      switch (t) {
                        case 'vec2':
                          return new o.Vector2(e.x, e.y);
                        case 'vec3':
                          return new o.Vector3(e.x, e.y, e.z);
                        case 'vec4':
                          return new o.Vector4(e.x, e.y, e.z, e.w);
                        case 'color':
                          return (
                            (i = new o.Color(e)), new o.Vector3(i.r, i.g, i.b)
                          );
                        case 'map':
                          return o.ImageUtils.loadTexture(e);
                        default:
                          return e;
                      }
                    }
                  }),
                    (e.exports.registerShader = function(t, e) {
                      var i,
                        o = {};
                      if (
                        (Object.keys(e).forEach(function(t) {
                          o[t] = { value: e[t], writable: !0 };
                        }),
                        r[t])
                      )
                        throw new Error(
                          'The shader ' + t + ' has been already registered'
                        );
                      return (
                        (((i = function() {
                          u.call(this);
                        }).prototype = Object.create(u.prototype, o)).name = t),
                        (i.prototype.constructor = i),
                        (r[t] = { Shader: i, schema: n(i.prototype.schema) }),
                        a.push(t),
                        i
                      );
                    });
                },
                { '../lib/three': 173, '../utils': 195, './schema': 133 }
              ],
              135: [
                function(t, e, i) {
                  var n = t('./component'),
                    r = t('./schema'),
                    a = t('../utils/'),
                    o = r.parseProperties,
                    s = r.parseProperty,
                    c = r.process,
                    u = r.isSingleProperty,
                    l = a.styleParser,
                    h = (e.exports.systems = {}),
                    d = (e.exports.System = function(t) {
                      var e = n && n.components[this.name];
                      (this.el = t),
                        (this.sceneEl = t),
                        e && (e.Component.prototype.system = this),
                        this.buildData(),
                        this.init(),
                        this.update({});
                    });
                  (d.prototype = {
                    schema: {},
                    init: function() {},
                    update: function(t) {},
                    updateProperties: function(t) {
                      var e = this.data;
                      Object.keys(r).length &&
                        (this.buildData(t), this.update(e));
                    },
                    buildData: function(t) {
                      var e = this.schema;
                      Object.keys(e).length &&
                        ((t =
                          t ||
                          window.HTMLElement.prototype.getAttribute.call(
                            this.sceneEl,
                            this.name
                          )),
                        u(e)
                          ? (this.data = s(t, e))
                          : (this.data = o(l.parse(t) || {}, e)));
                    },
                    tick: void 0,
                    tock: void 0,
                    play: function() {},
                    pause: function() {}
                  }),
                    (e.exports.registerSystem = function(t, e) {
                      var i,
                        n,
                        r = {},
                        o = a.findAllScenes(document);
                      if (
                        (Object.keys(e).forEach(function(t) {
                          r[t] = { value: e[t], writable: !0 };
                        }),
                        h[t])
                      )
                        throw new Error(
                          'The system `' +
                            t +
                            '` has been already registered. Check that you are not loading two versions of the same system or two different systems of the same name.'
                        );
                      for (
                        ((n = function(t) {
                          d.call(this, t);
                        }).prototype = Object.create(d.prototype, r)).name = t,
                          n.prototype.constructor = n,
                          n.prototype.schema = a.extend(c(n.prototype.schema)),
                          h[t] = n,
                          i = 0;
                        i < o.length;
                        i++
                      )
                        o[i].initSystem(t);
                    });
                },
                { '../utils/': 195, './component': 125, './schema': 133 }
              ],
              136: [
                function(t, e, i) {
                  t('./pivot');
                },
                { './pivot': 137 }
              ],
              137: [
                function(t, e, i) {
                  var n = t('../../core/component').registerComponent,
                    r = t('../../lib/three'),
                    a = new r.Vector3(),
                    o = new r.Vector3();
                  n('pivot', {
                    dependencies: ['position'],
                    schema: { type: 'vec3' },
                    init: function() {
                      var t = this.data,
                        e = this.el,
                        i = e.object3D.parent,
                        n = e.object3D,
                        s = new r.Group();
                      a.copy(n.position),
                        o.copy(n.rotation),
                        i.remove(n),
                        s.add(n),
                        i.add(s),
                        (e.object3D = s),
                        n.position.set(-1 * t.x, -1 * t.y, -1 * t.z),
                        s.position.set(t.x + a.x, t.y + a.y, t.z + a.z),
                        s.rotation.copy(n.rotation),
                        n.rotation.set(0, 0, 0);
                    }
                  });
                },
                { '../../core/component': 125, '../../lib/three': 173 }
              ],
              138: [
                function(t, e, i) {
                  var n = t('../../core/component').components,
                    r = t('../../core/shader').shaders,
                    a = t('../../utils/'),
                    o = {};
                  function s(t) {
                    var e = t.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                    'fog' === t && (e = 'material-fog'),
                      'visible' === t && (e = 'material-visible'),
                      (o[e] = 'material.' + t);
                  }
                  Object.keys(n.material.schema).forEach(s),
                    Object.keys(r.standard.schema).forEach(s),
                    (e.exports = function() {
                      return {
                        defaultComponents: { material: {} },
                        mappings: a.extend({}, o)
                      };
                    });
                },
                {
                  '../../core/component': 125,
                  '../../core/shader': 134,
                  '../../utils/': 195
                }
              ],
              139: [
                function(t, e, i) {
                  t('./primitives/a-camera'),
                    t('./primitives/a-collada-model'),
                    t('./primitives/a-cursor'),
                    t('./primitives/a-curvedimage'),
                    t('./primitives/a-gltf-model'),
                    t('./primitives/a-image'),
                    t('./primitives/a-light'),
                    t('./primitives/a-link'),
                    t('./primitives/a-obj-model'),
                    t('./primitives/a-sky'),
                    t('./primitives/a-sound'),
                    t('./primitives/a-text'),
                    t('./primitives/a-video'),
                    t('./primitives/a-videosphere'),
                    t('./primitives/meshPrimitives');
                },
                {
                  './primitives/a-camera': 141,
                  './primitives/a-collada-model': 142,
                  './primitives/a-cursor': 143,
                  './primitives/a-curvedimage': 144,
                  './primitives/a-gltf-model': 145,
                  './primitives/a-image': 146,
                  './primitives/a-light': 147,
                  './primitives/a-link': 148,
                  './primitives/a-obj-model': 149,
                  './primitives/a-sky': 150,
                  './primitives/a-sound': 151,
                  './primitives/a-text': 152,
                  './primitives/a-video': 153,
                  './primitives/a-videosphere': 154,
                  './primitives/meshPrimitives': 155
                }
              ],
              140: [
                function(t, e, i) {
                  var n = t('../../core/a-entity'),
                    r = t('../../core/component').components,
                    a = t('../../core/a-register-element').registerElement,
                    o = t('../../utils/'),
                    s = o.debug,
                    c = o.entity.setComponentProperty,
                    u = s('extras:primitives:debug'),
                    l = s('extras:primitives:warn'),
                    h = (e.exports.primitives = {});
                  (e.exports.registerPrimitive = function(t, e) {
                    (t = t.toLowerCase()),
                      u('Registering <%s>', t),
                      e.defaultAttributes &&
                        l(
                          "The 'defaultAttributes' object is deprecated. Use 'defaultComponents' instead."
                        );
                    var i = a(t, {
                      prototype: Object.create(n.prototype, {
                        defaultComponentsFromPrimitive: {
                          value:
                            e.defaultComponents || e.defaultAttributes || {}
                        },
                        deprecated: { value: e.deprecated || null },
                        deprecatedMappings: {
                          value: e.deprecatedMappings || {}
                        },
                        mappings: { value: e.mappings || {} },
                        createdCallback: {
                          value: function() {
                            e.deprecated, this.resolveMappingCollisions();
                          }
                        },
                        resolveMappingCollisions: {
                          value: function() {
                            var t = this.mappings;
                            Object.keys(t).forEach(function(e) {
                              var i;
                              e !== e.toLowerCase() &&
                                l(
                                  'Mapping keys should be specified in lower case. The mapping key ' +
                                    e +
                                    ' may not be recognized'
                                ),
                                r[e] &&
                                  ((i = t[e].replace('.', '-')),
                                  (t[i] = t[e]),
                                  delete t[e]);
                            });
                          }
                        },
                        getExtraComponents: {
                          value: function() {
                            var t,
                              e,
                              i,
                              n,
                              r,
                              a,
                              s = this;
                            for (
                              e = o.clone(this.defaultComponentsFromPrimitive),
                                (r = this.getAttribute('mixin')) &&
                                  (r = r.trim().split(' ')).forEach(function(
                                    t
                                  ) {
                                    var i = s.sceneEl.querySelector('#' + t)
                                      .componentCache;
                                    Object.keys(i).forEach(function(t) {
                                      e[t] = (function(t, e) {
                                        if (c(t)) return u(e);
                                        if (c(e)) return u(t);
                                        if (l(t) && l(e))
                                          return o.extendDeep(t, e);
                                        return u(e);
                                      })(e[t], i[t]);
                                    });
                                  }),
                                i = 0;
                              i < this.attributes.length;
                              i++
                            )
                              (t = this.attributes[i]),
                                (n = this.mappings[t.name]) &&
                                  ((a = o.entity.getComponentPropertyPath(n))
                                    .constructor === Array
                                    ? ((e[a[0]] = e[a[0]] || {}),
                                      (e[a[0]][a[1]] = t.value))
                                    : (e[a] = t.value));
                            return e;
                            function c(t) {
                              return void 0 === t;
                            }
                            function u(t) {
                              return l(t) ? o.extendDeep({}, t) : t;
                            }
                            function l(t) {
                              return null !== t && t.constructor === Object;
                            }
                          }
                        },
                        attributeChangedCallback: {
                          value: function(t, e, i) {
                            var n = this.mappings[t];
                            this.deprecatedMappings, t && n && c(this, n, i);
                          }
                        }
                      })
                    });
                    return (h[t] = i), i;
                  }),
                    (e.exports.definePrimitive = function(t, i, n) {
                      (n = n || {}),
                        Object.keys(i).map(function(t) {
                          var e, i, a;
                          (i = n),
                            (a = r[(e = t)].schema),
                            Object.keys(a).map(function(t) {
                              var n = t
                                .replace(/([a-z])([A-Z])/g, '$1-$2')
                                .toLowerCase();
                              void 0 !== i[n] && (n = e + '-' + t),
                                (i[n] = e + '.' + t);
                            });
                        }),
                        e.exports.registerPrimitive(
                          t,
                          o.extendDeep({}, null, {
                            defaultComponents: i,
                            mappings: n
                          })
                        );
                    });
                },
                {
                  '../../core/a-entity': 121,
                  '../../core/a-register-element': 124,
                  '../../core/component': 125,
                  '../../utils/': 195
                }
              ],
              141: [
                function(t, e, i) {
                  var n = t('../../../constants/').DEFAULT_CAMERA_HEIGHT;
                  (0, t('../primitives').registerPrimitive)('a-camera', {
                    defaultComponents: {
                      camera: { userHeight: n },
                      'look-controls': {},
                      'wasd-controls': {}
                    },
                    mappings: {
                      active: 'camera.active',
                      far: 'camera.far',
                      fov: 'camera.fov',
                      'look-controls-enabled': 'look-controls.enabled',
                      near: 'camera.near',
                      'wasd-controls-enabled': 'wasd-controls.enabled',
                      'reverse-mouse-drag': 'look-controls.reverseMouseDrag',
                      'user-height': 'camera.userHeight',
                      zoom: 'camera.zoom'
                    },
                    deprecatedMappings: {
                      'cursor-color':
                        'a-camera[cursor-color] has been removed. Use a-cursor[color] instead.',
                      'cursor-maxdistance':
                        'a-camera[cursor-maxdistance] has been removed. Use a-cursor[max-distance] instead.',
                      'cursor-offset':
                        'a-camera[cursor-offset] has been removed. Use a-cursor[position] instead.',
                      'cursor-opacity':
                        'a-camera[cursor-offset] has been removed. Use a-cursor[opacity] instead.',
                      'cursor-scale':
                        'a-camera[cursor-scale] has been removed. Use a-cursor[scale] instead.',
                      'cursor-visible':
                        'a-camera[cursor-visible] has been removed. Use a-cursor[visible] instead.'
                    }
                  });
                },
                { '../../../constants/': 116, '../primitives': 140 }
              ],
              142: [
                function(t, e, i) {
                  (0, t('../primitives').registerPrimitive)('a-collada-model', {
                    mappings: { src: 'collada-model' }
                  });
                },
                { '../primitives': 140 }
              ],
              143: [
                function(t, e, i) {
                  var n = t('../getMeshMixin');
                  (0, t('../primitives').registerPrimitive)(
                    'a-cursor',
                    t('../../../utils/').extendDeep({}, n(), {
                      defaultComponents: {
                        cursor: {},
                        geometry: {
                          primitive: 'ring',
                          radiusOuter: 0.016,
                          radiusInner: 0.01,
                          segmentsTheta: 32
                        },
                        material: {
                          color: '#000',
                          shader: 'flat',
                          opacity: 0.8
                        },
                        position: { x: 0, y: 0, z: -1 }
                      },
                      mappings: {
                        far: 'raycaster.far',
                        fuse: 'cursor.fuse',
                        'fuse-timeout': 'cursor.fuseTimeout',
                        interval: 'raycaster.interval',
                        objects: 'raycaster.objects'
                      }
                    })
                  );
                },
                {
                  '../../../utils/': 195,
                  '../getMeshMixin': 138,
                  '../primitives': 140
                }
              ],
              144: [
                function(t, e, i) {
                  var n = t('../getMeshMixin');
                  (0, t('../primitives').registerPrimitive)(
                    'a-curvedimage',
                    t('../../../utils/').extendDeep({}, n(), {
                      defaultComponents: {
                        geometry: {
                          height: 1,
                          primitive: 'cylinder',
                          radius: 2,
                          segmentsRadial: 48,
                          thetaLength: 270,
                          openEnded: !0,
                          thetaStart: 0
                        },
                        material: {
                          color: '#FFF',
                          shader: 'flat',
                          side: 'double',
                          transparent: !0,
                          repeat: '-1 1'
                        }
                      },
                      mappings: {
                        height: 'geometry.height',
                        'open-ended': 'geometry.openEnded',
                        radius: 'geometry.radius',
                        segments: 'geometry.segmentsRadial',
                        start: 'geometry.thetaStart',
                        'theta-length': 'geometry.thetaLength',
                        'theta-start': 'geometry.thetaStart',
                        width: 'geometry.thetaLength'
                      }
                    })
                  );
                },
                {
                  '../../../utils/': 195,
                  '../getMeshMixin': 138,
                  '../primitives': 140
                }
              ],
              145: [
                function(t, e, i) {
                  (0, t('../primitives').registerPrimitive)('a-gltf-model', {
                    mappings: { src: 'gltf-model' }
                  });
                },
                { '../primitives': 140 }
              ],
              146: [
                function(t, e, i) {
                  var n = t('../getMeshMixin');
                  (0, t('../primitives').registerPrimitive)(
                    'a-image',
                    t('../../../utils/').extendDeep({}, n(), {
                      defaultComponents: {
                        geometry: { primitive: 'plane' },
                        material: {
                          color: '#FFF',
                          shader: 'flat',
                          side: 'double',
                          transparent: !0
                        }
                      },
                      mappings: {
                        height: 'geometry.height',
                        width: 'geometry.width'
                      }
                    })
                  );
                },
                {
                  '../../../utils/': 195,
                  '../getMeshMixin': 138,
                  '../primitives': 140
                }
              ],
              147: [
                function(t, e, i) {
                  (0, t('../primitives').registerPrimitive)('a-light', {
                    defaultComponents: { light: {} },
                    mappings: {
                      angle: 'light.angle',
                      color: 'light.color',
                      'ground-color': 'light.groundColor',
                      decay: 'light.decay',
                      distance: 'light.distance',
                      intensity: 'light.intensity',
                      penumbra: 'light.penumbra',
                      type: 'light.type',
                      target: 'light.target'
                    }
                  });
                },
                { '../primitives': 140 }
              ],
              148: [
                function(t, e, i) {
                  (0, t('../primitives').registerPrimitive)('a-link', {
                    defaultComponents: {},
                    mappings: {
                      href: 'link.href',
                      image: 'link.image',
                      title: 'link.title'
                    }
                  });
                },
                { '../primitives': 140 }
              ],
              149: [
                function(t, e, i) {
                  var n = t('../getMeshMixin')();
                  (0, t('../primitives').registerPrimitive)(
                    'a-obj-model',
                    t('../../../utils/').extendDeep({}, n, {
                      defaultComponents: { 'obj-model': {} },
                      mappings: { src: 'obj-model.obj', mtl: 'obj-model.mtl' }
                    })
                  );
                },
                {
                  '../../../utils/': 195,
                  '../getMeshMixin': 138,
                  '../primitives': 140
                }
              ],
              150: [
                function(t, e, i) {
                  var n = t('../getMeshMixin'),
                    r = t('../primitives').registerPrimitive,
                    a = t('../../../utils/'),
                    o = t('./meshPrimitives');
                  r(
                    'a-sky',
                    a.extendDeep({}, n(), {
                      defaultComponents: {
                        geometry: {
                          primitive: 'sphere',
                          radius: 5e3,
                          segmentsWidth: 64,
                          segmentsHeight: 32
                        },
                        material: { color: '#FFF', shader: 'flat', npot: !0 },
                        scale: '-1 1 1'
                      },
                      mappings: a.extendDeep(
                        {},
                        o['a-sphere'].prototype.mappings
                      )
                    })
                  );
                },
                {
                  '../../../utils/': 195,
                  '../getMeshMixin': 138,
                  '../primitives': 140,
                  './meshPrimitives': 155
                }
              ],
              151: [
                function(t, e, i) {
                  (0, t('../primitives').registerPrimitive)('a-sound', {
                    defaultComponents: { sound: {} },
                    mappings: {
                      src: 'sound.src',
                      on: 'sound.on',
                      autoplay: 'sound.autoplay',
                      loop: 'sound.loop',
                      volume: 'sound.volume'
                    }
                  });
                },
                { '../primitives': 140 }
              ],
              152: [
                function(t, e, i) {
                  (0, t('../primitives').definePrimitive)('a-text', {
                    text: { anchor: 'align', width: 5 }
                  });
                },
                { '../primitives': 140 }
              ],
              153: [
                function(t, e, i) {
                  var n = t('../getMeshMixin');
                  (0, t('../primitives').registerPrimitive)(
                    'a-video',
                    t('../../../utils/').extendDeep({}, n(), {
                      defaultComponents: {
                        geometry: { primitive: 'plane' },
                        material: {
                          color: '#FFF',
                          shader: 'flat',
                          side: 'double',
                          transparent: !0
                        }
                      },
                      mappings: {
                        height: 'geometry.height',
                        width: 'geometry.width'
                      }
                    })
                  );
                },
                {
                  '../../../utils/': 195,
                  '../getMeshMixin': 138,
                  '../primitives': 140
                }
              ],
              154: [
                function(t, e, i) {
                  var n = t('../getMeshMixin');
                  (0, t('../primitives').registerPrimitive)(
                    'a-videosphere',
                    t('../../../utils/').extendDeep({}, n(), {
                      defaultComponents: {
                        geometry: {
                          primitive: 'sphere',
                          radius: 5e3,
                          segmentsWidth: 64,
                          segmentsHeight: 32
                        },
                        material: { color: '#FFF', shader: 'flat', npot: !0 },
                        scale: '-1 1 1'
                      },
                      mappings: {
                        radius: 'geometry.radius',
                        'segments-height': 'geometry.segmentsHeight',
                        'segments-width': 'geometry.segmentsWidth'
                      }
                    })
                  );
                },
                {
                  '../../../utils/': 195,
                  '../getMeshMixin': 138,
                  '../primitives': 140
                }
              ],
              155: [
                function(t, e, i) {
                  var n = t('../getMeshMixin'),
                    r = t('../../../core/geometry').geometries,
                    a = t('../../../core/geometry').geometryNames,
                    o = t('../primitives').registerPrimitive,
                    s = t('../../../utils/'),
                    c = (e.exports = {});
                  function u(t) {
                    return t.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                  }
                  a.forEach(function(t) {
                    var e = r[t],
                      i = u(t),
                      a = {};
                    Object.keys(e.schema).forEach(function(t) {
                      a[u(t)] = 'geometry.' + t;
                    });
                    var l = 'a-' + i,
                      h = o(
                        l,
                        s.extendDeep({}, n(), {
                          defaultComponents: { geometry: { primitive: t } },
                          mappings: a
                        })
                      );
                    c[l] = h;
                  });
                },
                {
                  '../../../core/geometry': 126,
                  '../../../utils/': 195,
                  '../getMeshMixin': 138,
                  '../primitives': 140
                }
              ],
              156: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three');
                  n('box', {
                    schema: {
                      depth: { default: 1, min: 0 },
                      height: { default: 1, min: 0 },
                      width: { default: 1, min: 0 },
                      segmentsHeight: {
                        default: 1,
                        min: 1,
                        max: 20,
                        type: 'int'
                      },
                      segmentsWidth: {
                        default: 1,
                        min: 1,
                        max: 20,
                        type: 'int'
                      },
                      segmentsDepth: {
                        default: 1,
                        min: 1,
                        max: 20,
                        type: 'int'
                      }
                    },
                    init: function(t) {
                      this.geometry = new r.BoxGeometry(
                        t.width,
                        t.height,
                        t.depth,
                        t.segmentsWidth,
                        t.segmentsHeight,
                        t.segmentsDepth
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              157: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three'),
                    a = r.Math.degToRad;
                  n('circle', {
                    schema: {
                      radius: { default: 1, min: 0 },
                      segments: { default: 32, min: 3, type: 'int' },
                      thetaLength: { default: 360, min: 0 },
                      thetaStart: { default: 0 }
                    },
                    init: function(t) {
                      this.geometry = new r.CircleGeometry(
                        t.radius,
                        t.segments,
                        a(t.thetaStart),
                        a(t.thetaLength)
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              158: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three'),
                    a = r.Math.degToRad;
                  n('cone', {
                    schema: {
                      height: { default: 1, min: 0 },
                      openEnded: { default: !1 },
                      radiusBottom: { default: 1, min: 0 },
                      radiusTop: { default: 0.01, min: 0 },
                      segmentsHeight: { default: 18, min: 1, type: 'int' },
                      segmentsRadial: { default: 36, min: 3, type: 'int' },
                      thetaLength: { default: 360, min: 0 },
                      thetaStart: { default: 0 }
                    },
                    init: function(t) {
                      this.geometry = new r.CylinderGeometry(
                        t.radiusTop,
                        t.radiusBottom,
                        t.height,
                        t.segmentsRadial,
                        t.segmentsHeight,
                        t.openEnded,
                        a(t.thetaStart),
                        a(t.thetaLength)
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              159: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three'),
                    a = r.Math.degToRad;
                  n('cylinder', {
                    schema: {
                      height: { default: 1, min: 0 },
                      openEnded: { default: !1 },
                      radius: { default: 1, min: 0 },
                      segmentsHeight: { default: 18, min: 1, type: 'int' },
                      segmentsRadial: { default: 36, min: 3, type: 'int' },
                      thetaLength: { default: 360, min: 0 },
                      thetaStart: { default: 0 }
                    },
                    init: function(t) {
                      this.geometry = new r.CylinderGeometry(
                        t.radius,
                        t.radius,
                        t.height,
                        t.segmentsRadial,
                        t.segmentsHeight,
                        t.openEnded,
                        a(t.thetaStart),
                        a(t.thetaLength)
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              160: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three');
                  n('dodecahedron', {
                    schema: {
                      detail: { default: 0, min: 0, max: 5, type: 'int' },
                      radius: { default: 1, min: 0 }
                    },
                    init: function(t) {
                      this.geometry = new r.DodecahedronGeometry(
                        t.radius,
                        t.detail
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              161: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three');
                  n('icosahedron', {
                    schema: {
                      detail: { default: 0, min: 0, max: 5, type: 'int' },
                      radius: { default: 1, min: 0 }
                    },
                    init: function(t) {
                      this.geometry = new r.IcosahedronGeometry(
                        t.radius,
                        t.detail
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              162: [
                function(t, e, i) {
                  t('./box.js'),
                    t('./circle.js'),
                    t('./cone.js'),
                    t('./cylinder.js'),
                    t('./dodecahedron.js'),
                    t('./icosahedron.js'),
                    t('./octahedron.js'),
                    t('./plane.js'),
                    t('./ring.js'),
                    t('./sphere.js'),
                    t('./tetrahedron.js'),
                    t('./torus.js'),
                    t('./torusKnot.js'),
                    t('./triangle.js');
                },
                {
                  './box.js': 156,
                  './circle.js': 157,
                  './cone.js': 158,
                  './cylinder.js': 159,
                  './dodecahedron.js': 160,
                  './icosahedron.js': 161,
                  './octahedron.js': 163,
                  './plane.js': 164,
                  './ring.js': 165,
                  './sphere.js': 166,
                  './tetrahedron.js': 167,
                  './torus.js': 168,
                  './torusKnot.js': 169,
                  './triangle.js': 170
                }
              ],
              163: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three');
                  n('octahedron', {
                    schema: {
                      detail: { default: 0, min: 0, max: 5, type: 'int' },
                      radius: { default: 1, min: 0 }
                    },
                    init: function(t) {
                      this.geometry = new r.OctahedronGeometry(
                        t.radius,
                        t.detail
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              164: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three');
                  n('plane', {
                    schema: {
                      height: { default: 1, min: 0 },
                      width: { default: 1, min: 0 },
                      segmentsHeight: {
                        default: 1,
                        min: 1,
                        max: 20,
                        type: 'int'
                      },
                      segmentsWidth: {
                        default: 1,
                        min: 1,
                        max: 20,
                        type: 'int'
                      }
                    },
                    init: function(t) {
                      this.geometry = new r.PlaneGeometry(
                        t.width,
                        t.height,
                        t.segmentsWidth,
                        t.segmentsHeight
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              165: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three'),
                    a = r.Math.degToRad;
                  n('ring', {
                    schema: {
                      radiusInner: { default: 0.8, min: 0 },
                      radiusOuter: { default: 1.2, min: 0 },
                      segmentsPhi: { default: 10, min: 1, type: 'int' },
                      segmentsTheta: { default: 32, min: 3, type: 'int' },
                      thetaLength: { default: 360, min: 0 },
                      thetaStart: { default: 0 }
                    },
                    init: function(t) {
                      this.geometry = new r.RingGeometry(
                        t.radiusInner,
                        t.radiusOuter,
                        t.segmentsTheta,
                        t.segmentsPhi,
                        a(t.thetaStart),
                        a(t.thetaLength)
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              166: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three'),
                    a = r.Math.degToRad;
                  n('sphere', {
                    schema: {
                      radius: { default: 1, min: 0 },
                      phiLength: { default: 360 },
                      phiStart: { default: 0, min: 0 },
                      thetaLength: { default: 180, min: 0 },
                      thetaStart: { default: 0 },
                      segmentsHeight: { default: 18, min: 2, type: 'int' },
                      segmentsWidth: { default: 36, min: 3, type: 'int' }
                    },
                    init: function(t) {
                      this.geometry = new r.SphereGeometry(
                        t.radius,
                        t.segmentsWidth,
                        t.segmentsHeight,
                        a(t.phiStart),
                        a(t.phiLength),
                        a(t.thetaStart),
                        a(t.thetaLength)
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              167: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three');
                  n('tetrahedron', {
                    schema: {
                      detail: { default: 0, min: 0, max: 5, type: 'int' },
                      radius: { default: 1, min: 0 }
                    },
                    init: function(t) {
                      this.geometry = new r.TetrahedronGeometry(
                        t.radius,
                        t.detail
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              168: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three'),
                    a = r.Math.degToRad;
                  n('torus', {
                    schema: {
                      arc: { default: 360 },
                      radius: { default: 1, min: 0 },
                      radiusTubular: { default: 0.2, min: 0 },
                      segmentsRadial: { default: 36, min: 2, type: 'int' },
                      segmentsTubular: { default: 32, min: 3, type: 'int' }
                    },
                    init: function(t) {
                      this.geometry = new r.TorusGeometry(
                        t.radius,
                        2 * t.radiusTubular,
                        t.segmentsRadial,
                        t.segmentsTubular,
                        a(t.arc)
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              169: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three');
                  n('torusKnot', {
                    schema: {
                      p: { default: 2, min: 1 },
                      q: { default: 3, min: 1 },
                      radius: { default: 1, min: 0 },
                      radiusTubular: { default: 0.2, min: 0 },
                      segmentsRadial: { default: 8, min: 3, type: 'int' },
                      segmentsTubular: { default: 100, min: 3, type: 'int' }
                    },
                    init: function(t) {
                      this.geometry = new r.TorusKnotGeometry(
                        t.radius,
                        2 * t.radiusTubular,
                        t.segmentsTubular,
                        t.segmentsRadial,
                        t.p,
                        t.q
                      );
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              170: [
                function(t, e, i) {
                  var n = t('../core/geometry').registerGeometry,
                    r = t('../lib/three'),
                    a = new r.Quaternion(),
                    o = new r.Vector3(0, 0, 1),
                    s = new r.Vector2(),
                    c = new r.Vector2(),
                    u = new r.Vector2();
                  n('triangle', {
                    schema: {
                      vertexA: {
                        type: 'vec3',
                        default: { x: 0, y: 0.5, z: 0 }
                      },
                      vertexB: {
                        type: 'vec3',
                        default: { x: -0.5, y: -0.5, z: 0 }
                      },
                      vertexC: {
                        type: 'vec3',
                        default: { x: 0.5, y: -0.5, z: 0 }
                      }
                    },
                    init: function(t) {
                      var e, i, n, l, h, d;
                      (n = new r.Triangle()).a.set(
                        t.vertexA.x,
                        t.vertexA.y,
                        t.vertexA.z
                      ),
                        n.b.set(t.vertexB.x, t.vertexB.y, t.vertexB.z),
                        n.c.set(t.vertexC.x, t.vertexC.y, t.vertexC.z),
                        (i = n.normal()),
                        a.setFromUnitVectors(i, o),
                        (l = n.a.clone().applyQuaternion(a)),
                        (h = n.b.clone().applyQuaternion(a)),
                        (d = n.c.clone().applyQuaternion(a)),
                        s.set(Math.min(l.x, h.x, d.x), Math.min(l.y, h.y, d.y)),
                        c.set(Math.max(l.x, h.x, d.x), Math.max(l.y, h.y, d.y)),
                        u.set(0, 0).subVectors(c, s),
                        (l = new r.Vector2().subVectors(l, s).divide(u)),
                        (h = new r.Vector2().subVectors(h, s).divide(u)),
                        (d = new r.Vector2().subVectors(d, s).divide(u)),
                        (e = this.geometry = new r.Geometry()).vertices.push(
                          n.a
                        ),
                        e.vertices.push(n.b),
                        e.vertices.push(n.c),
                        e.faces.push(new r.Face3(0, 1, 2, i)),
                        (e.faceVertexUvs[0] = [[l, h, d]]);
                    }
                  });
                },
                { '../core/geometry': 126, '../lib/three': 173 }
              ],
              171: [
                function(t, e, i) {
                  var n = t('./utils/'),
                    r = n.debug,
                    a = r('A-Frame:error'),
                    o = r('A-Frame:warn');
                  window.document.currentScript &&
                    window.document.currentScript.parentNode !==
                      window.document.head &&
                    !window.debug &&
                    o(
                      'Put the A-Frame <script> tag in the <head> of the HTML *before* the scene to ensure everything for A-Frame is properly registered before they are used from HTML.'
                    ),
                    'file:' === window.location.protocol &&
                      a(
                        'This HTML file is currently being served via the file:// protocol. Assets, textures, and models WILL NOT WORK due to cross-origin policy! Please use a local or hosted server: https://aframe.io/docs/0.5.0/introduction/getting-started.html#using-a-local-server.'
                      ),
                    (window.Promise = window.Promise || t('promise-polyfill')),
                    (window.hasNativeWebVRImplementation =
                      !!window.navigator.getVRDisplays ||
                      !!window.navigator.getVRDevices),
                    (window.WebVRConfig = window.WebVRConfig || {
                      BUFFER_SCALE: 1,
                      CARDBOARD_UI_DISABLED: !0,
                      ROTATE_INSTRUCTIONS_DISABLED: !0,
                      TOUCH_PANNER_DISABLED: !0,
                      MOUSE_KEYBOARD_CONTROLS_DISABLED: !0
                    }),
                    n.device.isIOSOlderThan10(window.navigator.userAgent) &&
                      (window.WebVRConfig.BUFFER_SCALE =
                        1 / window.devicePixelRatio),
                    t('webvr-polyfill'),
                    t('present'),
                    n.device.isBrowserEnvironment &&
                      (t('./style/aframe.css'), t('./style/rStats.css'));
                  var s = t('./core/scene/a-scene').AScene,
                    c = t('./core/component').components,
                    u = t('./core/component').registerComponent,
                    l = t('./core/geometry').registerGeometry,
                    h = t('./extras/primitives/primitives').registerPrimitive,
                    d = t('./core/shader').registerShader,
                    p = t('./core/system').registerSystem,
                    f = t('./core/shader').shaders,
                    m = t('./core/system').systems,
                    g = (window.THREE = t('./lib/three')),
                    v = (window.TWEEN = t('@tweenjs/tween.js')),
                    y = t('../package');
                  t('./components/index'),
                    t('./geometries/index'),
                    t('./shaders/index'),
                    t('./systems/index');
                  var M = t('./core/a-node'),
                    w = t('./core/a-entity');
                  t('./core/a-animation'),
                    t('./core/a-assets'),
                    t('./core/a-cubemap'),
                    t('./core/a-mixin'),
                    t('./extras/components/'),
                    t('./extras/primitives/'),
                    (e.exports = window.AFRAME = {
                      AComponent: t('./core/component').Component,
                      AEntity: w,
                      ANode: M,
                      AScene: s,
                      components: c,
                      geometries: t('./core/geometry').geometries,
                      registerComponent: u,
                      registerElement: t('./core/a-register-element')
                        .registerElement,
                      registerGeometry: l,
                      registerPrimitive: h,
                      registerShader: d,
                      registerSystem: p,
                      primitives: {
                        getMeshMixin: t('./extras/primitives/getMeshMixin'),
                        primitives: t('./extras/primitives/primitives')
                          .primitives
                      },
                      scenes: t('./core/scene/scenes'),
                      schema: t('./core/schema'),
                      shaders: f,
                      systems: m,
                      THREE: g,
                      TWEEN: v,
                      utils: n,
                      version: y.version
                    });
                },
                {
                  '../package': 76,
                  './components/index': 85,
                  './core/a-animation': 118,
                  './core/a-assets': 119,
                  './core/a-cubemap': 120,
                  './core/a-entity': 121,
                  './core/a-mixin': 122,
                  './core/a-node': 123,
                  './core/a-register-element': 124,
                  './core/component': 125,
                  './core/geometry': 126,
                  './core/scene/a-scene': 128,
                  './core/scene/scenes': 131,
                  './core/schema': 133,
                  './core/shader': 134,
                  './core/system': 135,
                  './extras/components/': 136,
                  './extras/primitives/': 139,
                  './extras/primitives/getMeshMixin': 138,
                  './extras/primitives/primitives': 140,
                  './geometries/index': 162,
                  './lib/three': 173,
                  './shaders/index': 175,
                  './style/aframe.css': 180,
                  './style/rStats.css': 181,
                  './systems/index': 184,
                  './utils/': 195,
                  '@tweenjs/tween.js': 1,
                  present: 33,
                  'promise-polyfill': 34,
                  'webvr-polyfill': 61
                }
              ],
              172: [
                function(t, e, i) {
                  (window.aframeStats = function(t) {
                    var e = null,
                      i = t;
                    return {
                      update: function() {
                        var t;
                        e('te').set(
                          ((t = i.querySelectorAll('*')),
                          Array.prototype.slice.call(t).filter(function(t) {
                            return t.isEntity;
                          }),
                          t.length)
                        ),
                          window.performance.getEntriesByName &&
                            e('lt').set(
                              window.performance
                                .getEntriesByName('render-started')[0]
                                .startTime.toFixed(0)
                            );
                      },
                      start: function() {},
                      end: function() {},
                      attach: function(t) {
                        e = t;
                      },
                      values: {
                        te: { caption: 'Entities' },
                        lt: { caption: 'Load Time' }
                      },
                      groups: [{ caption: 'A-Frame', values: ['te', 'lt'] }],
                      fractions: []
                    };
                  }),
                    'object' == typeof e &&
                      (e.exports = { aframeStats: window.aframeStats });
                },
                {}
              ],
              173: [
                function(e, i, n) {
                  (function(t) {
                    var n = (t.THREE = e('three'));
                    n.TextureLoader &&
                      (n.TextureLoader.prototype.crossOrigin = 'anonymous'),
                      n.ImageLoader &&
                        (n.ImageLoader.prototype.crossOrigin = 'anonymous'),
                      n.Cache && (n.Cache.enabled = !0),
                      e('three/examples/js/loaders/GLTFLoader'),
                      e('three/examples/js/loaders/OBJLoader'),
                      e('three/examples/js/loaders/MTLLoader'),
                      e('three/examples/js/loaders/ColladaLoader'),
                      e('../../vendor/VRControls'),
                      e('../../vendor/VREffect'),
                      (n.ColladaLoader.prototype.crossOrigin = 'anonymous'),
                      (n.GLTFLoader.prototype.crossOrigin = 'anonymous'),
                      (n.MTLLoader.prototype.crossOrigin = 'anonymous'),
                      (n.OBJLoader.prototype.crossOrigin = 'anonymous'),
                      (i.exports = n);
                  }.call(
                    this,
                    void 0 !== t
                      ? t
                      : 'undefined' != typeof self
                        ? self
                        : 'undefined' != typeof window ? window : {}
                  ));
                },
                {
                  '../../vendor/VRControls': 200,
                  '../../vendor/VREffect': 201,
                  three: 41,
                  'three/examples/js/loaders/ColladaLoader': 42,
                  'three/examples/js/loaders/GLTFLoader': 43,
                  'three/examples/js/loaders/MTLLoader': 44,
                  'three/examples/js/loaders/OBJLoader': 45
                }
              ],
              174: [
                function(t, e, i) {
                  var n = t('../core/shader').registerShader,
                    r = t('../lib/three'),
                    a = t('../utils/');
                  function o(t) {
                    return {
                      fog: t.fog,
                      color: new r.Color(t.color),
                      wireframe: t.wireframe,
                      wireframeLinewidth: t.wireframeLinewidth
                    };
                  }
                  e.exports.Shader = n('flat', {
                    schema: {
                      color: { type: 'color' },
                      fog: { default: !0 },
                      height: { default: 256 },
                      offset: { type: 'vec2', default: { x: 0, y: 0 } },
                      repeat: { type: 'vec2', default: { x: 1, y: 1 } },
                      src: { type: 'map' },
                      width: { default: 512 },
                      wireframe: { default: !1 },
                      wireframeLinewidth: { default: 2 }
                    },
                    init: function(t) {
                      (this.textureSrc = null),
                        (this.material = new r.MeshBasicMaterial(o(t))),
                        a.material.updateMap(this, t);
                    },
                    update: function(t) {
                      this.updateMaterial(t), a.material.updateMap(this, t);
                    },
                    updateMaterial: function(t) {
                      var e = this.material;
                      (t = o(t)),
                        Object.keys(t).forEach(function(i) {
                          e[i] = t[i];
                        });
                    }
                  });
                },
                { '../core/shader': 134, '../lib/three': 173, '../utils/': 195 }
              ],
              175: [
                function(t, e, i) {
                  t('./flat'),
                    t('./standard'),
                    t('./sdf'),
                    t('./msdf'),
                    t('./ios10hls');
                },
                {
                  './flat': 174,
                  './ios10hls': 176,
                  './msdf': 177,
                  './sdf': 178,
                  './standard': 179
                }
              ],
              176: [
                function(t, e, i) {
                  var n = t('../core/shader').registerShader;
                  e.exports.Shader = n('ios10hls', {
                    schema: {
                      src: { type: 'map', is: 'uniform' },
                      opacity: { type: 'number', is: 'uniform', default: 1 }
                    },
                    vertexShader: [
                      'varying vec2 vUV;',
                      'void main(void) {',
                      '  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                      '  vUV = uv;',
                      '}'
                    ].join('\n'),
                    fragmentShader: [
                      'uniform sampler2D src;',
                      'uniform float opacity;',
                      'varying vec2 vUV;',
                      'void main() {',
                      '  vec2 offset = vec2(0, 0);',
                      '  vec2 repeat = vec2(1, 1);',
                      '  vec4 color = texture2D(src, vec2(vUV.x / repeat.x + offset.x, (1.0 - vUV.y) / repeat.y + offset.y)).bgra;',
                      '  gl_FragColor = vec4(color.rgb, opacity);',
                      '}'
                    ].join('\n')
                  });
                },
                { '../core/shader': 134 }
              ],
              177: [
                function(t, e, i) {
                  var n = t('../core/shader').registerShader;
                  e.exports.Shader = n('msdf', {
                    schema: {
                      alphaTest: {
                        type: 'number',
                        is: 'uniform',
                        default: 0.5
                      },
                      color: { type: 'color', is: 'uniform', default: 'white' },
                      map: { type: 'map', is: 'uniform' },
                      opacity: { type: 'number', is: 'uniform', default: 1 }
                    },
                    raw: !0,
                    vertexShader: [
                      'attribute vec2 uv;',
                      'attribute vec3 position;',
                      'uniform mat4 projectionMatrix;',
                      'uniform mat4 modelViewMatrix;',
                      'varying vec2 vUV;',
                      'void main(void) {',
                      '  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                      '  vUV = uv;',
                      '}'
                    ].join('\n'),
                    fragmentShader: [
                      '#ifdef GL_OES_standard_derivatives',
                      '#extension GL_OES_standard_derivatives: enable',
                      '#endif',
                      'precision highp float;',
                      '#define BIG_ENOUGH 0.001',
                      '#define MODIFIED_ALPHATEST (0.02 * isBigEnough / BIG_ENOUGH)',
                      '#define ALL_SMOOTH 0.4',
                      '#define ALL_ROUGH 0.02',
                      '#define DISCARD_ALPHA (alphaTest / (2.2 - 1.2 * ratio))',
                      'uniform sampler2D map;',
                      'uniform vec3 color;',
                      'uniform float opacity;',
                      'uniform float alphaTest;',
                      'varying vec2 vUV;',
                      'float median(float r, float g, float b) {',
                      '  return max(min(r, g), min(max(r, g), b));',
                      '}',
                      'void main() {',
                      '  vec3 sample = 1.0 - texture2D(map, vUV).rgb;',
                      '  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;',
                      '  float alpha = clamp(sigDist/fwidth(sigDist) + 0.5, 0.0, 1.0);',
                      '  float dscale = 0.353505;',
                      '  vec2 duv = dscale * (dFdx(vUV) + dFdy(vUV));',
                      '  float isBigEnough = max(abs(duv.x), abs(duv.y));',
                      '  if (isBigEnough > BIG_ENOUGH) {',
                      '    float ratio = BIG_ENOUGH / isBigEnough;',
                      '    alpha = ratio * alpha + (1.0 - ratio) * (sigDist + 0.5);',
                      '  }',
                      '  if (isBigEnough <= BIG_ENOUGH && alpha < alphaTest) { discard; return; }',
                      '  if (alpha < alphaTest * MODIFIED_ALPHATEST) { discard; return; }',
                      '  gl_FragColor = vec4(color.xyz, alpha * opacity);',
                      '}'
                    ].join('\n')
                  });
                },
                { '../core/shader': 134 }
              ],
              178: [
                function(t, e, i) {
                  var n = t('../core/shader').registerShader;
                  e.exports.Shader = n('sdf', {
                    schema: {
                      alphaTest: {
                        type: 'number',
                        is: 'uniform',
                        default: 0.5
                      },
                      color: { type: 'color', is: 'uniform', default: 'white' },
                      map: { type: 'map', is: 'uniform' },
                      opacity: { type: 'number', is: 'uniform', default: 1 }
                    },
                    raw: !0,
                    vertexShader: [
                      'attribute vec2 uv;',
                      'attribute vec3 position;',
                      'uniform mat4 projectionMatrix;',
                      'uniform mat4 modelViewMatrix;',
                      'varying vec2 vUV;',
                      'void main(void) {',
                      '  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                      '  vUV = uv;',
                      '}'
                    ].join('\n'),
                    fragmentShader: [
                      '#ifdef GL_OES_standard_derivatives',
                      '#extension GL_OES_standard_derivatives: enable',
                      '#endif',
                      'precision highp float;',
                      '#define BIG_ENOUGH 0.001',
                      '#define MODIFIED_ALPHATEST (0.02 * isBigEnough / BIG_ENOUGH)',
                      '#define ALL_SMOOTH 0.4',
                      '#define ALL_ROUGH 0.02',
                      '#define DISCARD_ALPHA (alphaTest / (2.2 - 1.2 * ratio))',
                      'uniform sampler2D map;',
                      'uniform vec3 color;',
                      'uniform float opacity;',
                      'uniform float alphaTest;',
                      'varying vec2 vUV;',
                      '#ifdef GL_OES_standard_derivatives',
                      'float contour(float width, float value) {',
                      '  return smoothstep(0.5 - value, 0.5 + value, width);',
                      '}',
                      '#else',
                      'float aastep(float value, float afwidth) {',
                      '  return smoothstep(0.5 - afwidth, 0.5 + afwidth, value);',
                      '}',
                      '#endif',
                      'void main() {',
                      '#ifdef GL_OES_standard_derivatives',
                      '  vec2 uv = vUV;',
                      '  vec4 texColor = texture2D(map, uv);',
                      '  float dist = texColor.a;',
                      '  float width = fwidth(dist);',
                      '  float alpha = contour(dist, width);',
                      '  float dscale = 0.353505;',
                      '  vec2 duv = dscale * (dFdx(uv) + dFdy(uv));',
                      '  float isBigEnough = max(abs(duv.x), abs(duv.y));',
                      '  if (isBigEnough > BIG_ENOUGH) {',
                      '    float ratio = BIG_ENOUGH / isBigEnough;',
                      '    alpha = ratio * alpha + (1.0 - ratio) * dist;',
                      '  }',
                      '  else if (isBigEnough <= BIG_ENOUGH) {',
                      '    vec4 box = vec4 (uv - duv, uv + duv);',
                      '    alpha = (alpha + 0.5 * (',
                      '      contour(texture2D(map, box.xy).a, width)',
                      '      + contour(texture2D(map, box.zw).a, width)',
                      '      + contour(texture2D(map, box.xw).a, width)',
                      '      + contour(texture2D(map, box.zy).a, width)',
                      '    )) / 3.0;',
                      '  }',
                      '  if (isBigEnough <= BIG_ENOUGH && alpha < alphaTest) { discard; return; }',
                      '  if (alpha < alphaTest * MODIFIED_ALPHATEST) { discard; return; }',
                      '#else',
                      '  vec4 texColor = texture2D(map, vUV);',
                      '  float value = texColor.a;',
                      '  float afwidth = (1.0 / 32.0) * (1.4142135623730951 / (2.0 * gl_FragCoord.w));',
                      '  float alpha = aastep(value, afwidth);',
                      '  float ratio = (gl_FragCoord.w >= ALL_SMOOTH) ? 1.0 : (gl_FragCoord.w < ALL_ROUGH) ? 0.0 : (gl_FragCoord.w - ALL_ROUGH) / (ALL_SMOOTH - ALL_ROUGH);',
                      '  if (alpha < alphaTest) { if (ratio >= 1.0) { discard; return; } alpha = 0.0; }',
                      '  alpha = alpha * ratio + (1.0 - ratio) * value;',
                      '  if (ratio < 1.0)',
                      '    if (alpha <= DISCARD_ALPHA) { discard; return; }',
                      '#endif',
                      '  gl_FragColor = vec4(color, opacity * alpha);',
                      '}'
                    ].join('\n')
                  });
                },
                { '../core/shader': 134 }
              ],
              179: [
                function(t, e, i) {
                  var n = t('../core/shader').registerShader,
                    r = t('../lib/three'),
                    a = t('../utils/'),
                    o = new r.CubeTextureLoader(),
                    s = {};
                  function c(t) {
                    var e = {
                      color: new r.Color(t.color),
                      emissive: new r.Color(t.emissive),
                      emissiveIntensity: t.emissiveIntensity,
                      fog: t.fog,
                      metalness: t.metalness,
                      roughness: t.roughness,
                      wireframe: t.wireframe,
                      wireframeLinewidth: t.wireframeLinewidth
                    };
                    return (
                      t.normalMap && (e.normalScale = t.normalScale),
                      t.ambientOcclusionMap &&
                        (e.aoMapIntensity = t.ambientOcclusionMapIntensity),
                      t.displacementMap &&
                        ((e.displacementScale = t.displacementScale),
                        (e.displacementBias = t.displacementBias)),
                      e
                    );
                  }
                  e.exports.Shader = n('standard', {
                    schema: {
                      ambientOcclusionMap: { type: 'map' },
                      ambientOcclusionMapIntensity: { default: 1 },
                      ambientOcclusionTextureOffset: { type: 'vec2' },
                      ambientOcclusionTextureRepeat: {
                        type: 'vec2',
                        default: { x: 1, y: 1 }
                      },
                      color: { type: 'color' },
                      displacementMap: { type: 'map' },
                      displacementScale: { default: 1 },
                      displacementBias: { default: 0.5 },
                      displacementTextureOffset: { type: 'vec2' },
                      displacementTextureRepeat: {
                        type: 'vec2',
                        default: { x: 1, y: 1 }
                      },
                      emissive: { type: 'color', default: '#000' },
                      emissiveIntensity: { default: 1 },
                      envMap: { default: '' },
                      fog: { default: !0 },
                      height: { default: 256 },
                      metalness: { default: 0, min: 0, max: 1 },
                      normalMap: { type: 'map' },
                      normalScale: { type: 'vec2', default: { x: 1, y: 1 } },
                      normalTextureOffset: { type: 'vec2' },
                      normalTextureRepeat: {
                        type: 'vec2',
                        default: { x: 1, y: 1 }
                      },
                      offset: { type: 'vec2', default: { x: 0, y: 0 } },
                      repeat: { type: 'vec2', default: { x: 1, y: 1 } },
                      roughness: { default: 0.5, min: 0, max: 1 },
                      sphericalEnvMap: { type: 'map' },
                      src: { type: 'map' },
                      width: { default: 512 },
                      wireframe: { default: !1 },
                      wireframeLinewidth: { default: 2 }
                    },
                    init: function(t) {
                      (this.material = new r.MeshStandardMaterial(c(t))),
                        a.material.updateMap(this, t),
                        t.normalMap &&
                          a.material.updateDistortionMap('normal', this, t),
                        t.displacementMap &&
                          a.material.updateDistortionMap(
                            'displacement',
                            this,
                            t
                          ),
                        t.ambientOcclusionMap &&
                          a.material.updateDistortionMap(
                            'ambientOcclusion',
                            this,
                            t
                          ),
                        this.updateEnvMap(t);
                    },
                    update: function(t) {
                      this.updateMaterial(t),
                        a.material.updateMap(this, t),
                        t.normalMap &&
                          a.material.updateDistortionMap('normal', this, t),
                        t.displacementMap &&
                          a.material.updateDistortionMap(
                            'displacement',
                            this,
                            t
                          ),
                        t.ambientOcclusionMap &&
                          a.material.updateDistortionMap(
                            'ambientOcclusion',
                            this,
                            t
                          ),
                        this.updateEnvMap(t);
                    },
                    updateMaterial: function(t) {
                      var e = this.material;
                      (t = c(t)),
                        Object.keys(t).forEach(function(i) {
                          e[i] = t[i];
                        });
                    },
                    updateEnvMap: function(t) {
                      var e = this,
                        i = this.material,
                        n = t.envMap,
                        c = t.sphericalEnvMap;
                      if ((!n && !c) || this.isLoadingEnvMap)
                        return (i.envMap = null), void (i.needsUpdate = !0);
                      (this.isLoadingEnvMap = !0),
                        c
                          ? this.el.sceneEl.systems.material.loadTexture(
                              c,
                              { src: c },
                              function(t) {
                                (e.isLoadingEnvMap = !1),
                                  (t.mapping = r.SphericalReflectionMapping),
                                  (i.envMap = t),
                                  a.material.handleTextureEvents(e.el, t),
                                  (i.needsUpdate = !0);
                              }
                            )
                          : s[n]
                            ? s[n].then(function(t) {
                                (e.isLoadingEnvMap = !1),
                                  (i.envMap = t),
                                  a.material.handleTextureEvents(e.el, t),
                                  (i.needsUpdate = !0);
                              })
                            : (s[n] = new Promise(function(t) {
                                a.srcLoader.validateCubemapSrc(n, function(n) {
                                  o.load(n, function(n) {
                                    (e.isLoadingEnvMap = !1),
                                      (i.envMap = n),
                                      a.material.handleTextureEvents(e.el, n),
                                      t(n);
                                  });
                                });
                              }));
                    }
                  });
                },
                { '../core/shader': 134, '../lib/three': 173, '../utils/': 195 }
              ],
              180: [
                function(t, e, i) {
                  var n =
                    ".a-html{bottom:0;left:0;position:fixed;right:0;top:0}.a-body{height:100%;margin:0;overflow:hidden;padding:0;width:100%}:-webkit-full-screen{background-color:transparent}.a-hidden{display:none!important}.a-canvas{height:100%;left:0;position:absolute;top:0;width:100%}.a-canvas.a-grab-cursor:hover{cursor:grab;cursor:-moz-grab;cursor:-webkit-grab}.a-canvas.a-grab-cursor:active,.a-grabbing{cursor:grabbing;cursor:-moz-grabbing;cursor:-webkit-grabbing}// Class is removed when doing <a-scene embedded>. a-scene.fullscreen .a-canvas{width:100%!important;height:100%!important;top:0!important;left:0!important;right:0!important;bottom:0!important;z-index:999999!important;position:fixed!important}.a-inspector-loader{background-color:#ed3160;position:fixed;left:3px;top:3px;padding:6px 10px;color:#fff;text-decoration:none;font-size:12px;font-family:Roboto,sans-serif;text-align:center;z-index:99999;width:204px}@keyframes dots-1{from{opacity:0}25%{opacity:1}}@keyframes dots-2{from{opacity:0}50%{opacity:1}}@keyframes dots-3{from{opacity:0}75%{opacity:1}}@-webkit-keyframes dots-1{from{opacity:0}25%{opacity:1}}@-webkit-keyframes dots-2{from{opacity:0}50%{opacity:1}}@-webkit-keyframes dots-3{from{opacity:0}75%{opacity:1}}.a-inspector-loader .dots span{animation:dots-1 2s infinite steps(1);-webkit-animation:dots-1 2s infinite steps(1)}.a-inspector-loader .dots span:first-child+span{animation-name:dots-2;-webkit-animation-name:dots-2}.a-inspector-loader .dots span:first-child+span+span{animation-name:dots-3;-webkit-animation-name:dots-3}a-scene{display:block;position:relative;height:100%;width:100%}a-assets,a-scene audio,a-scene img,a-scene video{display:none}.a-enter-vr-modal,.a-orientation-modal{font-family:Consolas,Andale Mono,Courier New,monospace}.a-enter-vr-modal a{border-bottom:1px solid #fff;padding:2px 0;text-decoration:none;transition:.1s color ease-in}.a-enter-vr-modal a:hover{background-color:#fff;color:#111;padding:2px 4px;position:relative;left:-4px}.a-enter-vr{font-family:sans-serif,monospace;font-size:13px;width:100%;font-weight:200;line-height:16px;position:absolute;right:20px;bottom:20px}.a-enter-vr.embedded{right:5px;bottom:5px}.a-enter-vr-button,.a-enter-vr-modal,.a-enter-vr-modal a{color:#fff}.a-enter-vr-button{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20245.82%20141.73%22%3E%3Cdefs%3E%3Cstyle%3E.a%7Bfill%3A%23fff%3Bfill-rule%3Aevenodd%3B%7D%3C%2Fstyle%3E%3C%2Fdefs%3E%3Ctitle%3Emask%3C%2Ftitle%3E%3Cpath%20class%3D%22a%22%20d%3D%22M175.56%2C111.37c-22.52%2C0-40.77-18.84-40.77-42.07S153%2C27.24%2C175.56%2C27.24s40.77%2C18.84%2C40.77%2C42.07S198.08%2C111.37%2C175.56%2C111.37ZM26.84%2C69.31c0-23.23%2C18.25-42.07%2C40.77-42.07s40.77%2C18.84%2C40.77%2C42.07-18.26%2C42.07-40.77%2C42.07S26.84%2C92.54%2C26.84%2C69.31ZM27.27%2C0C11.54%2C0%2C0%2C12.34%2C0%2C28.58V110.9c0%2C16.24%2C11.54%2C30.83%2C27.27%2C30.83H99.57c2.17%2C0%2C4.19-1.83%2C5.4-3.7L116.47%2C118a8%2C8%2C0%2C0%2C1%2C12.52-.18l11.51%2C20.34c1.2%2C1.86%2C3.22%2C3.61%2C5.39%2C3.61h72.29c15.74%2C0%2C27.63-14.6%2C27.63-30.83V28.58C245.82%2C12.34%2C233.93%2C0%2C218.19%2C0H27.27Z%22%2F%3E%3C%2Fsvg%3E) 50% 50%/70% 70% no-repeat rgba(0,0,0,.35);border:0;bottom:0;cursor:pointer;min-width:50px;min-height:30px;padding-right:5%;padding-top:4%;position:absolute;right:0;transition:background-color .05s ease;-webkit-transition:background-color .05s ease;z-index:9999}.a-enter-vr-button:active,.a-enter-vr-button:hover{background-color:#666}[data-a-enter-vr-no-webvr] .a-enter-vr-button{border-color:#666;opacity:.65}[data-a-enter-vr-no-webvr] .a-enter-vr-button:active,[data-a-enter-vr-no-webvr] .a-enter-vr-button:hover{background-color:rgba(0,0,0,.35);cursor:not-allowed}.a-enter-vr-modal{background-color:#666;border-radius:0;display:none;min-height:32px;margin-right:70px;padding:9px;width:280px;right:2%;position:absolute}.a-enter-vr-modal:after{border-bottom:10px solid transparent;border-left:10px solid #666;border-top:10px solid transparent;display:inline-block;content:'';position:absolute;right:-5px;top:5px;width:0;height:0}.a-enter-vr-modal a,.a-enter-vr-modal p{display:inline}.a-enter-vr-modal p{margin:0}.a-enter-vr-modal p:after{content:' '}[data-a-enter-vr-no-headset].a-enter-vr:hover .a-enter-vr-modal,[data-a-enter-vr-no-webvr].a-enter-vr:hover .a-enter-vr-modal{display:block}.a-orientation-modal{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20version%3D%221.1%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%2090%2090%22%20enable-background%3D%22new%200%200%2090%2090%22%20xml%3Aspace%3D%22preserve%22%3E%3Cpolygon%20points%3D%220%2C0%200%2C0%200%2C0%20%22%3E%3C/polygon%3E%3Cg%3E%3Cpath%20d%3D%22M71.545%2C48.145h-31.98V20.743c0-2.627-2.138-4.765-4.765-4.765H18.456c-2.628%2C0-4.767%2C2.138-4.767%2C4.765v42.789%20%20%20c0%2C2.628%2C2.138%2C4.766%2C4.767%2C4.766h5.535v0.959c0%2C2.628%2C2.138%2C4.765%2C4.766%2C4.765h42.788c2.628%2C0%2C4.766-2.137%2C4.766-4.765V52.914%20%20%20C76.311%2C50.284%2C74.173%2C48.145%2C71.545%2C48.145z%20M18.455%2C16.935h16.344c2.1%2C0%2C3.808%2C1.708%2C3.808%2C3.808v27.401H37.25V22.636%20%20%20c0-0.264-0.215-0.478-0.479-0.478H16.482c-0.264%2C0-0.479%2C0.214-0.479%2C0.478v36.585c0%2C0.264%2C0.215%2C0.478%2C0.479%2C0.478h7.507v7.644%20%20%20h-5.534c-2.101%2C0-3.81-1.709-3.81-3.81V20.743C14.645%2C18.643%2C16.354%2C16.935%2C18.455%2C16.935z%20M16.96%2C23.116h19.331v25.031h-7.535%20%20%20c-2.628%2C0-4.766%2C2.139-4.766%2C4.768v5.828h-7.03V23.116z%20M71.545%2C73.064H28.757c-2.101%2C0-3.81-1.708-3.81-3.808V52.914%20%20%20c0-2.102%2C1.709-3.812%2C3.81-3.812h42.788c2.1%2C0%2C3.809%2C1.71%2C3.809%2C3.812v16.343C75.354%2C71.356%2C73.645%2C73.064%2C71.545%2C73.064z%22%3E%3C/path%3E%3Cpath%20d%3D%22M28.919%2C58.424c-1.466%2C0-2.659%2C1.193-2.659%2C2.66c0%2C1.466%2C1.193%2C2.658%2C2.659%2C2.658c1.468%2C0%2C2.662-1.192%2C2.662-2.658%20%20%20C31.581%2C59.617%2C30.387%2C58.424%2C28.919%2C58.424z%20M28.919%2C62.786c-0.939%2C0-1.703-0.764-1.703-1.702c0-0.939%2C0.764-1.704%2C1.703-1.704%20%20%20c0.94%2C0%2C1.705%2C0.765%2C1.705%2C1.704C30.623%2C62.022%2C29.858%2C62.786%2C28.919%2C62.786z%22%3E%3C/path%3E%3Cpath%20d%3D%22M69.654%2C50.461H33.069c-0.264%2C0-0.479%2C0.215-0.479%2C0.479v20.288c0%2C0.264%2C0.215%2C0.478%2C0.479%2C0.478h36.585%20%20%20c0.263%2C0%2C0.477-0.214%2C0.477-0.478V50.939C70.131%2C50.676%2C69.917%2C50.461%2C69.654%2C50.461z%20M69.174%2C51.417V70.75H33.548V51.417H69.174z%22%3E%3C/path%3E%3Cpath%20d%3D%22M45.201%2C30.296c6.651%2C0%2C12.233%2C5.351%2C12.551%2C11.977l-3.033-2.638c-0.193-0.165-0.507-0.142-0.675%2C0.048%20%20%20c-0.174%2C0.198-0.153%2C0.501%2C0.045%2C0.676l3.883%2C3.375c0.09%2C0.075%2C0.198%2C0.115%2C0.312%2C0.115c0.141%2C0%2C0.273-0.061%2C0.362-0.166%20%20%20l3.371-3.877c0.173-0.2%2C0.151-0.502-0.047-0.675c-0.194-0.166-0.508-0.144-0.676%2C0.048l-2.592%2C2.979%20%20%20c-0.18-3.417-1.629-6.605-4.099-9.001c-2.538-2.461-5.877-3.817-9.404-3.817c-0.264%2C0-0.479%2C0.215-0.479%2C0.479%20%20%20C44.72%2C30.083%2C44.936%2C30.296%2C45.201%2C30.296z%22%3E%3C/path%3E%3C/g%3E%3C/svg%3E) center/50% 50% no-repeat rgba(244,244,244,1);bottom:0;font-size:14px;font-weight:600;left:0;line-height:20px;right:0;position:fixed;top:0;z-index:9999999}.a-orientation-modal:after{color:#666;content:\"Insert phone into Cardboard holder.\";display:block;position:absolute;text-align:center;top:70%;transform:translateY(-70%);width:100%}.a-orientation-modal button{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20version%3D%221.1%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%20100%20100%22%20enable-background%3D%22new%200%200%20100%20100%22%20xml%3Aspace%3D%22preserve%22%3E%3Cpath%20fill%3D%22%23000000%22%20d%3D%22M55.209%2C50l17.803-17.803c1.416-1.416%2C1.416-3.713%2C0-5.129c-1.416-1.417-3.713-1.417-5.129%2C0L50.08%2C44.872%20%20L32.278%2C27.069c-1.416-1.417-3.714-1.417-5.129%2C0c-1.417%2C1.416-1.417%2C3.713%2C0%2C5.129L44.951%2C50L27.149%2C67.803%20%20c-1.417%2C1.416-1.417%2C3.713%2C0%2C5.129c0.708%2C0.708%2C1.636%2C1.062%2C2.564%2C1.062c0.928%2C0%2C1.856-0.354%2C2.564-1.062L50.08%2C55.13l17.803%2C17.802%20%20c0.708%2C0.708%2C1.637%2C1.062%2C2.564%2C1.062s1.856-0.354%2C2.564-1.062c1.416-1.416%2C1.416-3.713%2C0-5.129L55.209%2C50z%22%3E%3C/path%3E%3C/svg%3E) no-repeat;border:none;height:50px;text-indent:-9999px;width:50px}";
                  t('browserify-css').createStyle(n, {
                    href: 'src\\style\\aframe.css'
                  }),
                    (e.exports = n);
                },
                { 'browserify-css': 5 }
              ],
              181: [
                function(t, e, i) {
                  var n =
                    '.rs-base{background-color:#333;color:#fafafa;border-radius:0;font:10px monospace;left:5px;line-height:1em;opacity:.85;overflow:hidden;padding:10px;position:fixed;top:5px;width:300px;z-index:10000}.rs-base div.hidden{display:none}.rs-base h1{color:#fff;cursor:pointer;font-size:1.4em;font-weight:300;margin:0 0 5px;padding:0}.rs-group{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-flex-direction:column-reverse;flex-direction:column-reverse;margin-bottom:5px}.rs-group:last-child{margin-bottom:0}.rs-counter-base{align-items:center;display:-webkit-box;display:-webkit-flex;display:flex;height:10px;-webkit-justify-content:space-between;justify-content:space-between;margin:2px 0}.rs-counter-base.alarm{color:#b70000;text-shadow:0 0 0 #b70000,0 0 1px #fff,0 0 1px #fff,0 0 2px #fff,0 0 2px #fff,0 0 3px #fff,0 0 3px #fff,0 0 4px #fff,0 0 4px #fff}.rs-counter-id{font-weight:300;-webkit-box-ordinal-group:0;-webkit-order:0;order:0;width:54px}.rs-counter-value{font-weight:300;-webkit-box-ordinal-group:1;-webkit-order:1;order:1;text-align:right;width:35px}.rs-canvas{-webkit-box-ordinal-group:2;-webkit-order:2;order:2}@media (min-width:480px){.rs-base{left:20px;top:20px}}';
                  t('browserify-css').createStyle(n, {
                    href: 'src\\style\\rStats.css'
                  }),
                    (e.exports = n);
                },
                { 'browserify-css': 5 }
              ],
              182: [
                function(t, e, i) {
                  var n = t('../utils/bind'),
                    r = t('../constants/'),
                    a = t('../core/system').registerSystem,
                    o = 'data-aframe-default-camera';
                  e.exports.System = a('camera', {
                    init: function() {
                      (this.activeCameraEl = null),
                        this.sceneEl.addEventListener(
                          'loaded',
                          n(this.setupDefaultCamera, this)
                        );
                    },
                    setupDefaultCamera: function() {
                      var t,
                        e = this.sceneEl;
                      e.camera
                        ? e.emit('camera-ready', { cameraEl: e.camera.el })
                        : ((t = document.createElement(
                            'a-entity'
                          )).setAttribute('position', '0 0 0'),
                          t.setAttribute(o, ''),
                          t.setAttribute('camera', {
                            active: !0,
                            userHeight: r.DEFAULT_CAMERA_HEIGHT
                          }),
                          t.setAttribute('wasd-controls', ''),
                          t.setAttribute('look-controls', ''),
                          t.setAttribute(r.AFRAME_INJECTED, ''),
                          e.appendChild(t),
                          e.addEventListener(
                            'enter-vr',
                            this.removeDefaultOffset
                          ),
                          e.addEventListener('exit-vr', this.addDefaultOffset),
                          e.emit('camera-ready', { cameraEl: t }));
                    },
                    disableActiveCamera: function() {
                      var t = this.sceneEl.querySelectorAll('[camera]');
                      t[t.length - 1].setAttribute('camera', 'active', !0);
                    },
                    setActiveCamera: function(t) {
                      var e,
                        i,
                        n,
                        r,
                        a = this.activeCameraEl,
                        s = this.sceneEl;
                      if (
                        (r = t.getObject3D('camera')) &&
                        t !== this.activeCameraEl
                      ) {
                        var c = s.querySelector('[' + o + ']');
                        for (
                          t !== (c && c.querySelector('[camera]')) &&
                            (function(t) {
                              var e;
                              if (!t.camera) return;
                              if (!(e = t.querySelector('[' + o + ']'))) return;
                              t.removeChild(e);
                            })(s),
                            this.activeCameraEl = t,
                            this.activeCameraEl.play(),
                            s.camera = r,
                            a && a.setAttribute('camera', 'active', !1),
                            i = s.querySelectorAll('[camera]'),
                            n = 0;
                          n < i.length;
                          n++
                        )
                          t !== (e = i[n]) &&
                            (e.setAttribute('camera', 'active', !1), e.pause());
                        s.emit('camera-set-active', { cameraEl: t });
                      }
                    }
                  });
                },
                {
                  '../constants/': 116,
                  '../core/system': 135,
                  '../utils/bind': 189
                }
              ],
              183: [
                function(t, e, i) {
                  var n = t('../core/geometry').geometries,
                    r = t('../core/system').registerSystem,
                    a = t('../lib/three');
                  function o(t) {
                    var e = t.primitive,
                      i = n[e] && n[e].Geometry,
                      r = new i();
                    if (!i) throw new Error('Unknown geometry `' + e + '`');
                    return (
                      r.init(t),
                      (function(t, e) {
                        var i;
                        if (!e) return t;
                        return (
                          ((i = new a.BufferGeometry().fromGeometry(
                            t
                          )).metadata = {
                            type: t.type,
                            parameters: t.parameters || {}
                          }),
                          t.dispose(),
                          i
                        );
                      })(r.geometry, t.buffer)
                    );
                  }
                  e.exports.System = r('geometry', {
                    init: function() {
                      (this.cache = {}), (this.cacheCount = {});
                    },
                    clearCache: function() {
                      (this.cache = {}), (this.cacheCount = {});
                    },
                    getOrCreateGeometry: function(t) {
                      var e,
                        i,
                        n,
                        r,
                        a = this.cache;
                      return t.skipCache || t.mergeTo
                        ? o(t)
                        : ((e = a[(i = this.hash(t))]),
                          ((n = this.cacheCount)[(r = i)] =
                            void 0 === n[r] ? 1 : n[r] + 1),
                          e || ((e = o(t)), (a[i] = e), e));
                    },
                    unuseGeometry: function(t) {
                      var e,
                        i = this.cache,
                        n = this.cacheCount;
                      t.skipCache ||
                        t.mergeTo ||
                        (i[(e = this.hash(t))] &&
                          (n[e]--,
                          n[e] > 0 ||
                            (i[e].dispose(), delete i[e], delete n[e])));
                    },
                    hash: function(t) {
                      return JSON.stringify(t);
                    }
                  });
                },
                {
                  '../core/geometry': 126,
                  '../core/system': 135,
                  '../lib/three': 173
                }
              ],
              184: [
                function(t, e, i) {
                  t('./camera'),
                    t('./geometry'),
                    t('./light'),
                    t('./material'),
                    t('./shadow'),
                    t('./tracked-controls');
                },
                {
                  './camera': 182,
                  './geometry': 183,
                  './light': 185,
                  './material': 186,
                  './shadow': 187,
                  './tracked-controls': 188
                }
              ],
              185: [
                function(t, e, i) {
                  var n = t('../core/system').registerSystem,
                    r = t('../utils/bind'),
                    a = t('../constants/'),
                    o = 'data-aframe-default-light';
                  e.exports.System = n('light', {
                    schema: { defaultLightsEnabled: { default: !0 } },
                    init: function() {
                      (this.defaultLights = !1),
                        (this.userDefinedLights = !1),
                        this.sceneEl.addEventListener(
                          'loaded',
                          r(this.setupDefaultLights, this)
                        );
                    },
                    registerLight: function(t) {
                      t.hasAttribute(o) ||
                        (this.removeDefaultLights(),
                        (this.userDefinedLights = !0));
                    },
                    removeDefaultLights: function() {
                      var t,
                        e = this.sceneEl;
                      if (this.defaultLights) {
                        t = document.querySelectorAll('[' + o + ']');
                        for (var i = 0; i < t.length; i++) e.removeChild(t[i]);
                        this.defaultLights = !1;
                      }
                    },
                    setupDefaultLights: function() {
                      var t,
                        e,
                        i = this.sceneEl;
                      this.userDefinedLights ||
                        this.defaultLights ||
                        !this.data.defaultLightsEnabled ||
                        ((t = document.createElement('a-entity')).setAttribute(
                          'light',
                          { color: '#BBB', type: 'ambient' }
                        ),
                        t.setAttribute(o, ''),
                        t.setAttribute(a.AFRAME_INJECTED, ''),
                        i.appendChild(t),
                        (e = document.createElement('a-entity')).setAttribute(
                          'light',
                          { color: '#FFF', intensity: 0.6, castShadow: !0 }
                        ),
                        e.setAttribute('position', { x: -0.5, y: 1, z: 1 }),
                        e.setAttribute(o, ''),
                        e.setAttribute(a.AFRAME_INJECTED, ''),
                        i.appendChild(e),
                        (this.defaultLights = !0));
                    }
                  });
                },
                {
                  '../constants/': 116,
                  '../core/system': 135,
                  '../utils/bind': 189
                }
              ],
              186: [
                function(t, e, i) {
                  var n = t('../core/system').registerSystem,
                    r = t('../lib/three'),
                    a = t('../utils/'),
                    o = t('../utils/material').isHLS,
                    s = a.bind,
                    c = a.debug,
                    u = c('components:texture:error'),
                    l = new r.TextureLoader(),
                    h = c('components:texture:warn');
                  function d(t, e) {
                    var i = e.offset || { x: 0, y: 0 },
                      n = e.repeat || { x: 1, y: 1 };
                    (e.npot || !1) &&
                      ((t.wrapS = r.ClampToEdgeWrapping),
                      (t.wrapT = r.ClampToEdgeWrapping),
                      (t.magFilter = r.LinearFilter),
                      (t.minFilter = r.LinearFilter)),
                      (1 === n.x && 1 === n.y) ||
                        ((t.wrapS = r.RepeatWrapping),
                        (t.wrapT = r.RepeatWrapping),
                        t.repeat.set(n.x, n.y)),
                      (0 === i.x && 0 === i.y) || t.offset.set(i.x, i.y);
                  }
                  l.setCrossOrigin('anonymous'),
                    (e.exports.System = n('material', {
                      init: function() {
                        (this.materials = {}),
                          (this.textureCounts = {}),
                          (this.textureCache = {}),
                          this.sceneEl.addEventListener(
                            'materialtextureloaded',
                            s(this.onMaterialTextureLoaded, this)
                          );
                      },
                      clearTextureCache: function() {
                        this.textureCache = {};
                      },
                      loadTexture: function(t, e, i) {
                        var n = this;
                        if ('CANVAS' !== t.tagName) {
                          if ('VIDEO' === t.tagName)
                            return (
                              t.hasAttribute('src') ||
                                t.hasAttribute('srcObject') ||
                                h(
                                  'Video element was defined without `src` nor `srcObject` attributes.'
                                ),
                              void this.loadVideo(t, e, i)
                            );
                          a.srcLoader.validateSrc(
                            t,
                            function(t) {
                              n.loadImage(t, e, i);
                            },
                            function(t) {
                              n.loadVideo(t, e, i);
                            }
                          );
                        } else this.loadCanvas(t, e, i);
                      },
                      loadImage: function(t, e, i) {
                        var n = this.hash(e),
                          a = this.textureCache;
                        a[n]
                          ? a[n].then(i)
                          : ((a[n] = (function(t, e) {
                              return new Promise(function(i, n) {
                                function a(t) {
                                  d(t, e), (t.needsUpdate = !0), i(t);
                                }
                                if ('string' != typeof t)
                                  return void a(new r.Texture(t));
                                l.load(
                                  t,
                                  a,
                                  function() {},
                                  function(t) {
                                    u(
                                      '`$s` could not be fetched (Error code: %s; Response: %s)',
                                      t.status,
                                      t.statusText
                                    );
                                  }
                                );
                              });
                            })(t, e)),
                            a[n].then(i));
                      },
                      loadCanvas: function(t, e, i) {
                        (t.readyState = 2),
                          (t.HAVE_CURRENT_DATA = 2),
                          this.loadVideo(t, e, i);
                      },
                      loadVideo: function(t, e, i) {
                        var n,
                          a,
                          s,
                          c,
                          u,
                          l,
                          p,
                          f,
                          m = this.textureCache;
                        function g(t) {
                          (t.texture.needsUpdate = !0), i(t.texture, t.videoEl);
                        }
                        if ('string' != typeof t) {
                          if (((s = t), m[(n = this.hashVideo(e, s))]))
                            return void m[n].then(g);
                          !(function(t) {
                            (t.autoplay =
                              t.hasAttribute('autoplay') &&
                              'false' !== t.getAttribute('autoplay')),
                              (t.controls =
                                t.hasAttribute('controls') &&
                                'false' !== t.getAttribute('controls')),
                              'false' === t.getAttribute('loop') &&
                                t.removeAttribute('loop');
                            'false' === t.getAttribute('preload') &&
                              (t.preload = 'none');
                            (t.crossOrigin = t.crossOrigin || 'anonymous'),
                              t.setAttribute('playsinline', ''),
                              t.setAttribute('webkit-playsinline', '');
                          })(s);
                        }
                        (s =
                          s ||
                          ((u = t),
                          (l = e.width),
                          (p = e.height),
                          ((f = document.createElement('video')).width = l),
                          (f.height = p),
                          f.setAttribute('playsinline', ''),
                          f.setAttribute('webkit-playsinline', ''),
                          (f.autoplay = !0),
                          (f.loop = !0),
                          (f.crossOrigin = 'anonymous'),
                          f.addEventListener(
                            'error',
                            function() {
                              h('`$s` is not a valid video', u);
                            },
                            !0
                          ),
                          (f.src = u),
                          f)),
                          m[(n = this.hashVideo(e, s))]
                            ? m[n].then(g)
                            : (((a = new r.VideoTexture(s)).minFilter =
                                r.LinearFilter),
                              d(a, e),
                              this.sceneEl.isIOS &&
                                o(
                                  s.src || s.getAttribute('src'),
                                  s.type || s.getAttribute('type')
                                ) &&
                                ((a.format = r.RGBAFormat),
                                (a.needsCorrectionBGRA = !0),
                                (a.flipY = !1),
                                (a.needsCorrectionFlipY = !0)),
                              (c = { texture: a, videoEl: s }),
                              (m[n] = Promise.resolve(c)),
                              g(c));
                      },
                      hash: function(t) {
                        return (
                          t.src.tagName &&
                            ((t = a.extendDeep({}, t)).src = t.src.getAttribute(
                              'src'
                            )),
                          JSON.stringify(t)
                        );
                      },
                      hashVideo: function(t, e) {
                        return (function(t, e) {
                          var i,
                            n,
                            r,
                            a = e.getAttribute('id');
                          if (a) return a;
                          for (
                            n = '', r = t || {}, i = 0;
                            i < e.attributes.length;
                            i++
                          )
                            r[e.attributes[i].name] = e.attributes[i].value;
                          return (
                            Object.keys(r)
                              .sort()
                              .forEach(function(t) {
                                n += t + ':' + r[t] + ';';
                              }),
                            n
                          );
                        })(t, e);
                      },
                      registerMaterial: function(t) {
                        this.materials[t.uuid] = t;
                      },
                      unregisterMaterial: function(t) {
                        delete this.materials[t.uuid];
                        var e = this.textureCounts;
                        Object.keys(t)
                          .filter(function(e) {
                            return t[e] && t[e].isTexture;
                          })
                          .forEach(function(i) {
                            e[t[i].uuid]--, e[t[i].uuid] <= 0 && t[i].dispose();
                          });
                      },
                      updateMaterials: function(t) {
                        var e = this.materials;
                        Object.keys(e).forEach(function(t) {
                          e[t].needsUpdate = !0;
                        });
                      },
                      onMaterialTextureLoaded: function(t) {
                        this.textureCounts[t.detail.texture.uuid] ||
                          (this.textureCounts[t.detail.texture.uuid] = 0),
                          this.textureCounts[t.detail.texture.uuid]++;
                      }
                    }));
                },
                {
                  '../core/system': 135,
                  '../lib/three': 173,
                  '../utils/': 195,
                  '../utils/material': 196
                }
              ],
              187: [
                function(t, e, i) {
                  var n = t('../core/system').registerSystem,
                    r = t('../utils/bind'),
                    a = t('../lib/three'),
                    o = {
                      basic: a.BasicShadowMap,
                      pcf: a.PCFShadowMap,
                      pcfsoft: a.PCFSoftShadowMap
                    };
                  e.exports.System = n('shadow', {
                    schema: {
                      type: {
                        default: 'pcf',
                        oneOf: ['basic', 'pcf', 'pcfsoft']
                      },
                      renderReverseSided: { default: !0 },
                      renderSingleSided: { default: !0 }
                    },
                    init: function() {
                      var t = this.sceneEl,
                        e = this.data;
                      (this.shadowMapEnabled = !1),
                        t.addEventListener(
                          'render-target-loaded',
                          r(function() {
                            t.renderer &&
                              ((t.renderer.shadowMap.type = o[e.type]),
                              (t.renderer.shadowMap.renderReverseSided =
                                e.renderReverseSided),
                              (t.renderer.shadowMap.renderSingleSided =
                                e.renderSingleSided),
                              this.setShadowMapEnabled(this.shadowMapEnabled));
                          }, this)
                        );
                    },
                    setShadowMapEnabled: function(t) {
                      var e = this.sceneEl.renderer;
                      (this.shadowMapEnabled = t),
                        e && (e.shadowMap.enabled = t);
                    }
                  });
                },
                {
                  '../core/system': 135,
                  '../lib/three': 173,
                  '../utils/bind': 189
                }
              ],
              188: [
                function(t, e, i) {
                  var n = t('../core/system').registerSystem;
                  e.exports.System = n('tracked-controls', {
                    init: function() {
                      var t = this;
                      (this.controllers = []),
                        this.updateControllerList(),
                        navigator.getVRDisplays &&
                          this.sceneEl.addEventListener('enter-vr', function() {
                            navigator.getVRDisplays().then(function(e) {
                              e.length && (t.vrDisplay = e[0]);
                            });
                          });
                    },
                    tick: function() {
                      this.updateControllerList();
                    },
                    updateControllerList: function() {
                      var t,
                        e,
                        i,
                        n,
                        r = this.controllers;
                      if (
                        (e = navigator.getGamepads && navigator.getGamepads())
                      ) {
                        for (
                          n = r.length, r.length = 0, i = 0;
                          i < e.length;
                          ++i
                        )
                          (t = e[i]) && t.pose && r.push(t);
                        r.length !== n &&
                          this.el.emit('controllersupdated', void 0, !1);
                      }
                    }
                  });
                },
                { '../core/system': 135 }
              ],
              189: [
                function(t, e, i) {
                  e.exports = function(t, e) {
                    return (
                      (i = Array.prototype.slice.call(arguments, 2)),
                      function() {
                        var n = i.concat(
                          Array.prototype.slice.call(arguments, 0)
                        );
                        return t.apply(e, n);
                      }
                    );
                    var i;
                  };
                },
                {}
              ],
              190: [
                function(t, e, i) {
                  var n = t('./debug'),
                    r = t('object-assign'),
                    a = n('utils:coordinates:warn'),
                    o = /^\s*((-?\d*\.{0,1}\d+(e-?\d+)?)\s+){2,3}(-?\d*\.{0,1}\d+(e-?\d+)?)\s*$/;
                  function s(t) {
                    return o.test(t);
                  }
                  function c(t) {
                    var e;
                    for (e in t)
                      void 0 !== t[e]
                        ? t[e].constructor === String &&
                          (t[e] = parseFloat(t[e], 10))
                        : delete t[e];
                    return t;
                  }
                  (e.exports.regex = o),
                    (e.exports.parse = function(t, e) {
                      var i, n;
                      return t && t instanceof Object
                        ? (e &&
                            ((t.x = void 0 === t.x ? e.x : t.x),
                            (t.y = void 0 === t.y ? e.y : t.y),
                            (t.z = void 0 === t.z ? e.z : t.z),
                            (t.w = void 0 === t.w ? e.w : t.w)),
                          c(t))
                        : null === t || void 0 === t
                          ? 'object' == typeof e ? r({}, e) : e
                          : ((i = t
                              .trim()
                              .replace(/\s+/g, ' ')
                              .split(' ')),
                            ((n = {}).x = i[0] || (e && e.x)),
                            (n.y = i[1] || (e && e.y)),
                            (n.z = i[2] || (e && e.z)),
                            (n.w = i[3] || (e && e.w)),
                            c(n));
                    }),
                    (e.exports.stringify = function(t) {
                      return 'object' != typeof t
                        ? t
                        : [t.x, t.y, t.z, t.w].join(' ').trim();
                    }),
                    (e.exports.isCoordinates = s),
                    (e.exports.isCoordinate = function(t) {
                      return (
                        a(
                          '`AFRAME.utils.isCoordinate` has been renamed to `AFRAME.utils.isCoordinates`'
                        ),
                        s(t)
                      );
                    }),
                    (e.exports.toVector3 = function(t) {
                      return new THREE.Vector3(t.x, t.y, t.z);
                    });
                },
                { './debug': 191, 'object-assign': 26 }
              ],
              191: [
                function(t, e, i) {
                  (function(i) {
                    var n = t('debug'),
                      r = {
                        colors: {
                          debug: 'gray',
                          error: 'red',
                          info: 'gray',
                          warn: 'orange'
                        }
                      },
                      a = function(t) {
                        var e,
                          i,
                          a = n(t);
                        return (
                          (a.color = ((i = t.split(':')),
                          (e = i[i.length - 1]),
                          (r.colors && r.colors[e]) || null)),
                          a
                        );
                      };
                    t('object-assign')(a, n);
                    var o = (function() {
                      try {
                        return window.localStorage;
                      } catch (t) {}
                    })();
                    o && (parseInt(o.logs, 10) || 'true' === o.logs)
                      ? a.enable('*')
                      : a.enable('*:error,*:info,*:warn'),
                      i.browser && (window.logs = a),
                      (e.exports = a);
                  }.call(this, t('_process')));
                },
                { _process: 6, debug: 10, 'object-assign': 26 }
              ],
              192: [
                function(t, e, i) {
                  (function(i) {
                    var n = t('../lib/three'),
                      r = new n.Object3D(),
                      a = new n.VRControls(r);
                    (e.exports.checkHeadsetConnected = function() {
                      var t,
                        e = a.getVRDisplay();
                      return e && 'isConnected' in e
                        ? e.isConnected
                        : (a.update(),
                          0 !== (t = r.quaternion)._x ||
                            0 !== t._y ||
                            0 !== t._z);
                    }),
                      (e.exports.checkHasPositionalTracking = function() {
                        var t = a.getVRDisplay();
                        return !c() && !h() && t && t.capabilities.hasPosition;
                      });
                    var o,
                      s,
                      c = ((s = !1),
                      (o =
                        window.navigator.userAgent ||
                        window.navigator.vendor ||
                        window.opera),
                      (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                        o
                      ) ||
                        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                          o.substr(0, 4)
                        )) &&
                        (s = !0),
                      (l() || u()) && (s = !0),
                      function() {
                        return s;
                      });
                    function u(t) {
                      var e = t || window.navigator.userAgent;
                      return /ipad|Nexus (7|9)|xoom|sch-i800|playbook|tablet|kindle/i.test(
                        e
                      );
                    }
                    function l() {
                      return /iPad|iPhone|iPod/.test(window.navigator.platform);
                    }
                    function h() {
                      return /SamsungBrowser.+Mobile VR/i.test(
                        window.navigator.userAgent
                      );
                    }
                    (e.exports.isMobile = c),
                      (e.exports.isTablet = u),
                      (e.exports.isIOS = l),
                      (e.exports.isGearVR = h),
                      (e.exports.isLandscape = function() {
                        return (
                          90 === window.orientation ||
                          -90 === window.orientation
                        );
                      }),
                      (e.exports.isIOSOlderThan10 = function(t) {
                        return /(iphone|ipod|ipad).*os.(7|8|9)/i.test(t);
                      }),
                      (e.exports.isBrowserEnvironment = !(i && !i.browser)),
                      (e.exports.isNodeEnvironment = !e.exports
                        .isBrowserEnvironment);
                  }.call(this, t('_process')));
                },
                { '../lib/three': 173, _process: 6 }
              ],
              193: [
                function(t, e, i) {
                  (e.exports.getComponentPropertyPath = function(t, e) {
                    return (e = e || '.'), -1 === t.indexOf(e) ? t : t.split(e);
                  }),
                    (e.exports.getComponentProperty = function(t, e, i) {
                      var n;
                      return (
                        (i = i || '.'),
                        -1 !== e.indexOf(i)
                          ? ((n = e.split(i)), t.getAttribute(n[0])[n[1]])
                          : t.getAttribute(e)
                      );
                    }),
                    (e.exports.setComponentProperty = function(t, e, i, n) {
                      var r,
                        a = {};
                      if (((n = n || '.'), -1 !== e.indexOf(n)))
                        return (
                          (a[(r = e.split(n))[1]] = i),
                          void t.setAttribute(r[0], a)
                        );
                      t.setAttribute(e, i);
                    });
                },
                {}
              ],
              194: [
                function(t, e, i) {
                  e.exports = function(t) {
                    var e = t.style.width,
                      i = t.style.height;
                    (t.style.width = parseInt(e, 10) + 1 + 'px'),
                      (t.style.height = parseInt(i, 10) + 1 + 'px'),
                      setTimeout(function() {
                        (t.style.width = e), (t.style.height = i);
                      }, 200);
                  };
                },
                {}
              ],
              195: [
                function(t, e, i) {
                  var n = t('./debug'),
                    r = t('deep-assign'),
                    a = t('./device'),
                    o = t('object-assign'),
                    s = n('utils:warn');
                  function c(t, e) {
                    var i, n, r, a, o;
                    if (
                      void 0 === t ||
                      void 0 === e ||
                      null === t ||
                      null === e ||
                      !(
                        (t &&
                          e &&
                          t.constructor === Object &&
                          e.constructor === Object) ||
                        (t.constructor === Array && e.constructor === Array)
                      )
                    )
                      return t === e;
                    if (
                      ((n = Object.keys(t)),
                      (r = Object.keys(e)),
                      n.length !== r.length)
                    )
                      return !1;
                    for (i = 0; i < n.length; ++i)
                      if (
                        ((a = t[n[i]]),
                        (o = e[n[i]]),
                        'object' == typeof a ||
                          'object' == typeof o ||
                          (Array.isArray(a) && Array.isArray(o)))
                      ) {
                        if (a === o) continue;
                        if (!c(a, o)) return !1;
                      } else if (a !== o) return !1;
                    return !0;
                  }
                  (e.exports.bind = t('./bind')),
                    (e.exports.coordinates = t('./coordinates')),
                    (e.exports.debug = n),
                    (e.exports.device = a),
                    (e.exports.entity = t('./entity')),
                    (e.exports.forceCanvasResizeSafariMobile = t(
                      './forceCanvasResizeSafariMobile'
                    )),
                    (e.exports.material = t('./material')),
                    (e.exports.styleParser = t('./styleParser')),
                    (e.exports.trackedControls = t('./tracked-controls')),
                    (e.exports.checkHeadsetConnected = function() {
                      return (
                        s(
                          '`utils.checkHeadsetConnected` has moved to `utils.device.checkHeadsetConnected`'
                        ),
                        a.checkHeadsetConnected(arguments)
                      );
                    }),
                    (e.exports.isGearVR = function() {
                      return (
                        s(
                          '`utils.isGearVR` has moved to `utils.device.isGearVR`'
                        ),
                        a.isGearVR(arguments)
                      );
                    }),
                    (e.exports.isIOS = function() {
                      return (
                        s('`utils.isIOS` has moved to `utils.device.isIOS`'),
                        a.isIOS(arguments)
                      );
                    }),
                    (e.exports.isMobile = function() {
                      return (
                        s(
                          '`utils.isMobile has moved to `utils.device.isMobile`'
                        ),
                        a.isMobile(arguments)
                      );
                    }),
                    (e.exports.throttle = function(t, i, n) {
                      var r;
                      return (
                        n && (t = e.exports.bind(t, n)),
                        function() {
                          var e = Date.now();
                          (void 0 === r || (void 0 === r ? i : e - r) >= i) &&
                            ((r = e), t.apply(null, arguments));
                        }
                      );
                    }),
                    (e.exports.throttleTick = function(t, i, n) {
                      var r;
                      return (
                        n && (t = e.exports.bind(t, n)),
                        function(e, n) {
                          var a = void 0 === r ? n : e - r;
                          (void 0 === r || a >= i) && ((r = e), t(e, a));
                        }
                      );
                    }),
                    (e.exports.debounce = function(t, e, i) {
                      var n;
                      return function() {
                        var r = this,
                          a = arguments,
                          o = i && !n;
                        clearTimeout(n),
                          (n = setTimeout(function() {
                            (n = null), i || t.apply(r, a);
                          }, e)),
                          o && t.apply(r, a);
                      };
                    }),
                    (e.exports.fireEvent = function(t, e, i) {
                      ((i = i || {}).detail = i.detail || {}),
                        (i.detail.target = i.detail.target || t);
                      var n = new CustomEvent(e, i);
                      t.dispatchEvent(n);
                    }),
                    (e.exports.extend = o),
                    (e.exports.extendDeep = r),
                    (e.exports.clone = function(t) {
                      return JSON.parse(JSON.stringify(t));
                    }),
                    (e.exports.deepEqual = c),
                    (e.exports.diff = function(t, e) {
                      var i = {},
                        n = Object.keys(t);
                      return e
                        ? (Object.keys(e).forEach(function(t) {
                            -1 === n.indexOf(t) && n.push(t);
                          }),
                          n.forEach(function(n) {
                            var r = t[n],
                              a = e[n],
                              o =
                                r &&
                                a &&
                                r.constructor === Object &&
                                a.constructor === Object;
                            ((o && !c(r, a)) || (!o && r !== a)) && (i[n] = a);
                          }),
                          i)
                        : i;
                    }),
                    (e.exports.shouldCaptureKeyEvent = function(t) {
                      return (
                        !t.metaKey && document.activeElement === document.body
                      );
                    }),
                    (e.exports.splitString = function(t, e) {
                      void 0 === e && (e = ' ');
                      var i = new RegExp(e, 'g');
                      return (t = (t || '').replace(i, e)).split(e);
                    }),
                    (e.exports.getElData = function(t, e) {
                      e = e || {};
                      var i = {};
                      return (
                        Object.keys(e).forEach(function(e) {
                          t.hasAttribute(e) && (i[e] = t.getAttribute(e));
                        }),
                        i
                      );
                    }),
                    (e.exports.getUrlParameter = function(t) {
                      t = t.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                      var e = new RegExp('[\\?&]' + t + '=([^&#]*)').exec(
                        location.search
                      );
                      return null === e
                        ? ''
                        : decodeURIComponent(e[1].replace(/\+/g, ' '));
                    }),
                    (e.exports.isIframed = function() {
                      return window.top !== window.self;
                    }),
                    (e.exports.findAllScenes = function(t) {
                      for (
                        var e = [],
                          i = t.getElementsByTagName('*'),
                          n = 0,
                          r = i.length;
                        n < r;
                        n++
                      )
                        i[n].isScene && e.push(i[n]);
                      return e;
                    }),
                    (e.exports.srcLoader = t('./src-loader'));
                },
                {
                  './bind': 189,
                  './coordinates': 190,
                  './debug': 191,
                  './device': 192,
                  './entity': 193,
                  './forceCanvasResizeSafariMobile': 194,
                  './material': 196,
                  './src-loader': 197,
                  './styleParser': 198,
                  './tracked-controls': 199,
                  'deep-assign': 12,
                  'object-assign': 26
                }
              ],
              196: [
                function(t, e, i) {
                  var n = t('../lib/three'),
                    r = [
                      'application/x-mpegurl',
                      'application/vnd.apple.mpegurl'
                    ];
                  function a(t, e) {
                    e &&
                      (t.emit('materialtextureloaded', {
                        src: e.image,
                        texture: e
                      }),
                      e.image &&
                        'VIDEO' === e.image.tagName &&
                        (e.image.addEventListener('loadeddata', function() {
                          t.components &&
                            t.components.material &&
                            (e.needsCorrectionBGRA &&
                              e.needsCorrectionFlipY &&
                              -1 !==
                                ['standard', 'flat'].indexOf(
                                  t.components.material.data.shader
                                ) &&
                              t.setAttribute('material', 'shader', 'ios10hls'),
                            t.emit('materialvideoloadeddata', {
                              src: e.image,
                              texture: e
                            }));
                        }),
                        e.image.addEventListener('ended', function() {
                          t.emit('materialvideoended', {
                            src: e.image,
                            texture: e
                          });
                        })));
                  }
                  (e.exports.updateMapMaterialFromData = function(t, e, i, r) {
                    var o = i.el,
                      s = i.material,
                      c = r[e];
                    if ((i.materialSrcs || (i.materialSrcs = {}), !c))
                      return delete i.materialSrcs[t], void u(null);
                    function u(e) {
                      (s[t] = e), (s.needsUpdate = !0), a(o, e);
                    }
                    c !== i.materialSrcs[t] &&
                      ((i.materialSrcs[t] = c),
                      c instanceof n.Texture
                        ? u(c)
                        : o.sceneEl.systems.material.loadTexture(
                            c,
                            {
                              src: c,
                              repeat: r.repeat,
                              offset: r.offset,
                              npot: r.npot
                            },
                            function(e) {
                              if (i.materialSrcs[t] !== c) return;
                              u(e);
                            }
                          ));
                  }),
                    (e.exports.updateMap = function(t, i) {
                      return e.exports.updateMapMaterialFromData(
                        'map',
                        'src',
                        t,
                        i
                      );
                    }),
                    (e.exports.updateDistortionMap = function(t, e, i) {
                      var n = t;
                      'ambientOcclusion' === t && (n = 'ao');
                      var r = e.el,
                        o = e.material,
                        s = i[t + 'Map'],
                        c = {};
                      if (
                        ((c.src = s),
                        (c.offset = i[t + 'TextureOffset']),
                        (c.repeat = i[t + 'TextureRepeat']),
                        (c.wrap = i[t + 'TextureWrap']),
                        s)
                      ) {
                        if (s === e[t + 'TextureSrc']) return;
                        return (
                          (e[t + 'TextureSrc'] = s),
                          void r.sceneEl.systems.material.loadTexture(s, c, u)
                        );
                      }
                      function u(t) {
                        (o[n + 'Map'] = t), (o.needsUpdate = !0), a(r, t);
                      }
                      o.map && u(null);
                    }),
                    (e.exports.handleTextureEvents = a),
                    (e.exports.isHLS = function(t, e) {
                      return (
                        !(!e || !r.includes(e.toLowerCase())) ||
                        !!(t && t.toLowerCase().indexOf('.m3u8') > 0)
                      );
                    });
                },
                { '../lib/three': 173 }
              ],
              197: [
                function(t, e, i) {
                  var n = t('./debug')('utils:src-loader:warn');
                  function r(t, e, i) {
                    !(function(t, e) {
                      if (t.tagName) return void e('IMG' === t.tagName);
                      var i = new Image();
                      i.addEventListener('load', function() {
                        e(!0);
                      }),
                        i.addEventListener('error', function() {
                          e(!1);
                        }),
                        (i.src = t);
                    })(t, function(n) {
                      n ? e(t) : i(t);
                    });
                  }
                  function a(t) {
                    var e = t.match(/\url\((.+)\)/);
                    if (e) return e[1];
                  }
                  e.exports = {
                    parseUrl: a,
                    validateSrc: r,
                    validateCubemapSrc: function(t, e) {
                      var i,
                        o,
                        s,
                        c = '',
                        u = [];
                      for (o = 0; o < 5; o++)
                        c += '(url\\((?:[^\\)]+)\\),\\s*)';
                      function l(t) {
                        u.push(t), 6 === u.length && e(u);
                      }
                      if (
                        ((c += '(url\\((?:[^\\)]+)\\)\\s*)'),
                        (s = t.match(new RegExp(c))))
                      )
                        for (o = 1; o < 7; o++) r(a(s[o]), l);
                      else if (
                        (i = (function(t) {
                          try {
                            var e = document.querySelector(t);
                            return (
                              e ||
                                n(
                                  'No element was found matching the selector: "%s"',
                                  t
                                ),
                              e
                            );
                          } catch (e) {
                            return void n('"%s" is not a valid selector', t);
                          }
                        })(t))
                      )
                        return 'A-CUBEMAP' === i.tagName && i.srcs
                          ? e(i.srcs)
                          : void n(
                              'Selector "%s" does not point to <a-cubemap>',
                              t
                            );
                    }
                  };
                },
                { './debug': 191 }
              ],
              198: [
                function(t, e, i) {
                  var n = t('style-attr');
                  function r(t) {
                    return t.replace(/-([a-z])/g, function(t) {
                      return t[1].toUpperCase();
                    });
                  }
                  function a(t) {
                    var e = {};
                    return (
                      Object.keys(t).forEach(function(i) {
                        var n = r(i);
                        e[n] = t[i];
                      }),
                      e
                    );
                  }
                  (e.exports.parse = function(t) {
                    var e;
                    return 'string' != typeof t
                      ? t
                      : (e = n.parse(t))[''] ? t : a(e);
                  }),
                    (e.exports.stringify = function(t) {
                      return 'string' == typeof t ? t : n.stringify(t);
                    }),
                    (e.exports.toCamelCase = r),
                    (e.exports.transformKeysToCamelCase = a);
                },
                { 'style-attr': 36 }
              ],
              199: [
                function(t, e, i) {
                  var n = t('../constants').DEFAULT_HANDEDNESS,
                    r = ['x', 'y', 'z', 'w'],
                    a = 2;
                  function o(t, e, i) {
                    var n,
                      r,
                      a = t.el.sceneEl,
                      o = i.index || 0;
                    return (
                      !!e &&
                      (!!(r = a && a.systems['tracked-controls']) &&
                        (!!(n = r.controllers).length &&
                          !!s(n, null, e, i.hand, o)))
                    );
                  }
                  function s(t, e, i, r, o) {
                    var s,
                      c,
                      u = 0,
                      l = o || 0;
                    for (c = 0; c < t.length; c++)
                      if (
                        ((s = t[c]),
                        (!i || -1 !== s.id.indexOf(i)) &&
                          (i || s.id === e) &&
                          (!r || !s.hand || r === s.hand))
                      ) {
                        if (
                          (r && !s.hand && (l = a * o + (r === n ? 0 : 1)),
                          u === l)
                        )
                          return s;
                        ++u;
                      }
                  }
                  (e.exports.checkControllerPresentAndSetup = function(
                    t,
                    e,
                    i
                  ) {
                    var n = t.el,
                      r = o(t, e, i);
                    if (
                      (t.controllerPresent &&
                        !t.controllerEventsActive &&
                        t.addEventListeners(),
                      r === t.controllerPresent)
                    )
                      return r;
                    (t.controllerPresent = r),
                      r
                        ? (t.injectTrackedControls(),
                          t.addEventListeners(),
                          n.emit('controllerconnected', {
                            name: t.name,
                            component: t
                          }))
                        : (t.removeEventListeners(),
                          n.emit('controllerdisconnected', {
                            name: t.name,
                            component: t
                          }));
                  }),
                    (e.exports.isControllerPresent = o),
                    (e.exports.findMatchingController = s),
                    (e.exports.emitIfAxesChanged = function(t, e, i) {
                      var n, a, o, s, c, u;
                      for (a = Object.keys(e), c = 0; c < a.length; c++) {
                        for (n = e[a[c]], o = !1, u = 0; u < n.length; u++)
                          i.detail.changed[n[u]] && (o = !0);
                        if (o) {
                          for (s = {}, u = 0; u < n.length; u++)
                            s[r[u]] = i.detail.axis[n[u]];
                          t.el.emit(a[c] + 'moved', s);
                        }
                      }
                    });
                },
                { '../constants': 116 }
              ],
              200: [
                function(t, e, i) {
                  THREE.VRControls = function(t, e) {
                    var i,
                      n,
                      r = this,
                      a = new THREE.Matrix4(),
                      o = null;
                    'VRFrameData' in window && (o = new window.VRFrameData()),
                      window.addEventListener('vrdisplayconnect', function(t) {
                        i = t.display;
                      }),
                      window.addEventListener(
                        'vrdisplaydisconnect',
                        function() {
                          i = void 0;
                        }
                      ),
                      navigator.getVRDisplays &&
                        navigator
                          .getVRDisplays()
                          .then(function(t) {
                            (n = t),
                              t.length > 0
                                ? (i = t[0])
                                : e && e('VR input not available.');
                          })
                          .catch(function() {}),
                      (this.scale = 1),
                      (this.standing = !1),
                      (this.userHeight = 1.6),
                      (this.getVRDisplay = function() {
                        return i;
                      }),
                      (this.setVRDisplay = function(t) {
                        i = t;
                      }),
                      (this.getVRDisplays = function() {
                        return n;
                      }),
                      (this.getStandingMatrix = function() {
                        return a;
                      }),
                      (this.update = function() {
                        var e;
                        i &&
                          (i.getFrameData
                            ? (i.getFrameData(o), (e = o.pose))
                            : i.getPose && (e = i.getPose()),
                          null !== e.orientation &&
                            t.quaternion.fromArray(e.orientation),
                          null !== e.position
                            ? t.position.fromArray(e.position)
                            : t.position.set(0, 0, 0),
                          this.standing &&
                            (i.stageParameters
                              ? (t.updateMatrix(),
                                a.fromArray(
                                  i.stageParameters.sittingToStandingTransform
                                ),
                                t.applyMatrix(a))
                              : t.position.setY(
                                  t.position.y + this.userHeight
                                )),
                          t.position.multiplyScalar(r.scale));
                      }),
                      (this.resetPose = function() {
                        i && i.resetPose();
                      }),
                      (this.resetSensor = function() {
                        this.resetPose();
                      }),
                      (this.zeroSensor = function() {
                        this.resetPose();
                      }),
                      (this.dispose = function() {
                        i = null;
                      });
                  };
                },
                {}
              ],
              201: [
                function(t, e, i) {
                  THREE.VREffect = function(t, e) {
                    var i,
                      n,
                      r,
                      a,
                      o = new THREE.Vector3(),
                      s = new THREE.Vector3(),
                      c = null;
                    'VRFrameData' in window && (c = new window.VRFrameData()),
                      window.addEventListener('vrdisplayconnect', function(t) {
                        i = t.display;
                      }),
                      window.addEventListener('vrdisplaydisconnect', function(
                        t
                      ) {
                        var e;
                        u.exitPresent(),
                          (e = u.cancelAnimationFrame()),
                          (i = void 0),
                          u.requestAnimationFrame(e);
                      }),
                      navigator.getVRDisplays &&
                        navigator
                          .getVRDisplays()
                          .then(function(t) {
                            (n = t),
                              t.length > 0
                                ? (i = t[0])
                                : e && e('HMD not available');
                          })
                          .catch(function() {}),
                      (this.isPresenting = !1);
                    var u = this,
                      l = t.getSize(),
                      h = !1,
                      d = t.getPixelRatio();
                    (this.getVRDisplay = function() {
                      return i;
                    }),
                      (this.setVRDisplay = function(t) {
                        i = t;
                      }),
                      (this.getVRDisplays = function() {
                        return n;
                      }),
                      (this.setSize = function(e, n, r) {
                        if (
                          ((l = { width: e, height: n }),
                          (h = r),
                          u.isPresenting)
                        ) {
                          var a = i.getEyeParameters('left');
                          t.setPixelRatio(1),
                            t.setSize(2 * a.renderWidth, a.renderHeight, !1);
                        } else t.setPixelRatio(d), t.setSize(e, n, r);
                      });
                    var p = t.domElement,
                      f = [0, 0, 0.5, 1],
                      m = [0.5, 0, 0.5, 1];
                    function g() {
                      var e = u.isPresenting;
                      if (
                        ((u.isPresenting = void 0 !== i && i.isPresenting),
                        u.isPresenting)
                      ) {
                        var n = i.getEyeParameters('left'),
                          r = n.renderWidth,
                          a = n.renderHeight;
                        e ||
                          ((d = t.getPixelRatio()),
                          (l = t.getSize()),
                          t.setPixelRatio(1),
                          t.setSize(2 * r, a, !1));
                      } else
                        e &&
                          (t.setPixelRatio(d), t.setSize(l.width, l.height, h));
                    }
                    window.addEventListener('vrdisplaypresentchange', g, !1),
                      (this.setFullScreen = function(t) {
                        return new Promise(function(e, n) {
                          void 0 !== i
                            ? u.isPresenting !== t
                              ? e(
                                  t
                                    ? i.requestPresent([{ source: p }])
                                    : i.exitPresent()
                                )
                              : e()
                            : n(new Error('No VR hardware found.'));
                        });
                      }),
                      (this.requestPresent = function() {
                        return this.setFullScreen(!0);
                      }),
                      (this.exitPresent = function() {
                        return this.setFullScreen(!1);
                      }),
                      (this.requestAnimationFrame = function(t) {
                        if ((t = u.f = t || u.f))
                          return void 0 !== i
                            ? i.requestAnimationFrame(t)
                            : window.requestAnimationFrame(t);
                      }),
                      (this.cancelAnimationFrame = function(t) {
                        var e = u.f;
                        return (
                          (u.f = void 0),
                          void 0 !== i
                            ? i.cancelAnimationFrame(t)
                            : window.cancelAnimationFrame(t),
                          e
                        );
                      }),
                      (this.submitFrame = function() {
                        void 0 !== i && u.isPresenting && i.submitFrame();
                      }),
                      (this.autoSubmitFrame = !0);
                    var v = new THREE.PerspectiveCamera();
                    v.layers.enable(1);
                    var y = new THREE.PerspectiveCamera();
                    function M(t, e, i, n) {
                      var r = Math.PI / 180;
                      return (function(t, e, i, n) {
                        (e = void 0 === e || e),
                          (i = void 0 === i ? 0.01 : i),
                          (n = void 0 === n ? 1e4 : n);
                        var r,
                          a,
                          o,
                          s,
                          c = e ? -1 : 1,
                          u = new THREE.Matrix4(),
                          l = u.elements,
                          h = ((a = 2 / ((r = t).leftTan + r.rightTan)),
                          (o = (r.leftTan - r.rightTan) * a * 0.5),
                          (s = 2 / (r.upTan + r.downTan)),
                          {
                            scale: [a, s],
                            offset: [o, (r.upTan - r.downTan) * s * 0.5]
                          });
                        return (
                          (l[0] = h.scale[0]),
                          (l[1] = 0),
                          (l[2] = h.offset[0] * c),
                          (l[3] = 0),
                          (l[4] = 0),
                          (l[5] = h.scale[1]),
                          (l[6] = -h.offset[1] * c),
                          (l[7] = 0),
                          (l[8] = 0),
                          (l[9] = 0),
                          (l[10] = n / (i - n) * -c),
                          (l[11] = n * i / (i - n)),
                          (l[12] = 0),
                          (l[13] = 0),
                          (l[14] = c),
                          (l[15] = 0),
                          u.transpose(),
                          u
                        );
                      })(
                        {
                          upTan: Math.tan(t.upDegrees * r),
                          downTan: Math.tan(t.downDegrees * r),
                          leftTan: Math.tan(t.leftDegrees * r),
                          rightTan: Math.tan(t.rightDegrees * r)
                        },
                        e,
                        i,
                        n
                      );
                    }
                    y.layers.enable(2),
                      (this.render = function(e, n, l, h) {
                        if (i && u.isPresenting) {
                          var d = e.autoUpdate;
                          d && (e.updateMatrixWorld(), (e.autoUpdate = !1));
                          var p = i.getEyeParameters('left'),
                            g = i.getEyeParameters('right');
                          o.fromArray(p.offset),
                            s.fromArray(g.offset),
                            Array.isArray(e) && (e = e[0]);
                          var w,
                            x,
                            A = t.getSize(),
                            E = i.getLayers();
                          if (E.length) {
                            var b = E[0];
                            (w =
                              null !== b.leftBounds && 4 === b.leftBounds.length
                                ? b.leftBounds
                                : f),
                              (x =
                                null !== b.rightBounds &&
                                4 === b.rightBounds.length
                                  ? b.rightBounds
                                  : m);
                          } else (w = f), (x = m);
                          return (
                            (r = {
                              x: Math.round(A.width * w[0]),
                              y: Math.round(A.height * w[1]),
                              width: Math.round(A.width * w[2]),
                              height: Math.round(A.height * w[3])
                            }),
                            (a = {
                              x: Math.round(A.width * x[0]),
                              y: Math.round(A.height * x[1]),
                              width: Math.round(A.width * x[2]),
                              height: Math.round(A.height * x[3])
                            }),
                            l
                              ? (t.setRenderTarget(l), (l.scissorTest = !0))
                              : (t.setRenderTarget(null), t.setScissorTest(!0)),
                            (t.autoClear || h) && t.clear(),
                            null === n.parent && n.updateMatrixWorld(),
                            n.matrixWorld.decompose(
                              v.position,
                              v.quaternion,
                              v.scale
                            ),
                            y.position.copy(v.position),
                            y.quaternion.copy(v.quaternion),
                            y.scale.copy(v.scale),
                            v.translateOnAxis(o, v.scale.x),
                            y.translateOnAxis(s, y.scale.x),
                            i.getFrameData
                              ? ((i.depthNear = n.near),
                                (i.depthFar = n.far),
                                i.getFrameData(c),
                                (v.projectionMatrix.elements =
                                  c.leftProjectionMatrix),
                                (y.projectionMatrix.elements =
                                  c.rightProjectionMatrix))
                              : ((v.projectionMatrix = M(
                                  p.fieldOfView,
                                  !0,
                                  n.near,
                                  n.far
                                )),
                                (y.projectionMatrix = M(
                                  g.fieldOfView,
                                  !0,
                                  n.near,
                                  n.far
                                ))),
                            l
                              ? (l.viewport.set(r.x, r.y, r.width, r.height),
                                l.scissor.set(r.x, r.y, r.width, r.height))
                              : (t.setViewport(r.x, r.y, r.width, r.height),
                                t.setScissor(r.x, r.y, r.width, r.height)),
                            t.render(e, v, l, h),
                            l
                              ? (l.viewport.set(a.x, a.y, a.width, a.height),
                                l.scissor.set(a.x, a.y, a.width, a.height))
                              : (t.setViewport(a.x, a.y, a.width, a.height),
                                t.setScissor(a.x, a.y, a.width, a.height)),
                            t.render(e, y, l, h),
                            l
                              ? (l.viewport.set(0, 0, A.width, A.height),
                                l.scissor.set(0, 0, A.width, A.height),
                                (l.scissorTest = !1),
                                t.setRenderTarget(null))
                              : (t.setViewport(0, 0, A.width, A.height),
                                t.setScissorTest(!1)),
                            d && (e.autoUpdate = !0),
                            void (u.autoSubmitFrame && u.submitFrame())
                          );
                        }
                        t.render(e, n, l, h);
                      }),
                      (this.dispose = function() {
                        window.removeEventListener(
                          'vrdisplaypresentchange',
                          g,
                          !1
                        );
                      });
                  };
                },
                {}
              ],
              202: [
                function(t, e, i) {
                  (window.glStats = function() {
                    var t = null,
                      e = 0,
                      i = 0,
                      n = 0,
                      r = 0,
                      a = 0,
                      o = 0,
                      s = 0;
                    function c(t, e) {
                      return function() {
                        e.apply(this, arguments), t.apply(this, arguments);
                      };
                    }
                    (WebGLRenderingContext.prototype.drawArrays = c(
                      WebGLRenderingContext.prototype.drawArrays,
                      function() {
                        e++,
                          arguments[0] == this.POINTS
                            ? (o += arguments[2])
                            : (a += arguments[2]);
                      }
                    )),
                      (WebGLRenderingContext.prototype.drawElements = c(
                        WebGLRenderingContext.prototype.drawElements,
                        function() {
                          i++, (r += arguments[1] / 3), (a += arguments[1]);
                        }
                      )),
                      (WebGLRenderingContext.prototype.useProgram = c(
                        WebGLRenderingContext.prototype.useProgram,
                        function() {
                          n++;
                        }
                      )),
                      (WebGLRenderingContext.prototype.bindTexture = c(
                        WebGLRenderingContext.prototype.bindTexture,
                        function() {
                          s++;
                        }
                      ));
                    return {
                      update: function() {
                        t('allcalls').set(e + i),
                          t('drawElements').set(i),
                          t('drawArrays').set(e),
                          t('bindTexture').set(s),
                          t('useProgram').set(n),
                          t('glfaces').set(r),
                          t('glvertices').set(a),
                          t('glpoints').set(o);
                      },
                      start: function() {
                        (e = 0),
                          (i = 0),
                          (n = 0),
                          (r = 0),
                          (a = 0),
                          (o = 0),
                          (s = 0);
                      },
                      end: function() {},
                      attach: function(e) {
                        t = e;
                      },
                      values: {
                        allcalls: { over: 3e3, caption: 'Calls (hook)' },
                        drawelements: { caption: 'drawElements (hook)' },
                        drawarrays: { caption: 'drawArrays (hook)' }
                      },
                      groups: [
                        {
                          caption: 'WebGL',
                          values: [
                            'allcalls',
                            'drawelements',
                            'drawarrays',
                            'useprogram',
                            'bindtexture',
                            'glfaces',
                            'glvertices',
                            'glpoints'
                          ]
                        }
                      ],
                      fractions: [
                        {
                          base: 'allcalls',
                          steps: ['drawelements', 'drawarrays']
                        }
                      ]
                    };
                  }),
                    (window.threeStats = function(t) {
                      var e = null;
                      return {
                        update: function() {
                          e('renderer.info.memory.geometries').set(
                            t.info.memory.geometries
                          ),
                            e('renderer.info.programs').set(
                              t.info.programs.length
                            ),
                            e('renderer.info.memory.textures').set(
                              t.info.memory.textures
                            ),
                            e('renderer.info.render.calls').set(
                              t.info.render.calls
                            ),
                            e('renderer.info.render.faces').set(
                              t.info.render.faces
                            ),
                            e('renderer.info.render.points').set(
                              t.info.render.points
                            ),
                            e('renderer.info.render.vertices').set(
                              t.info.render.vertices
                            );
                        },
                        start: function() {},
                        end: function() {},
                        attach: function(t) {
                          e = t;
                        },
                        values: {
                          'renderer.info.memory.geometries': {
                            caption: 'Geometries'
                          },
                          'renderer.info.memory.textures': {
                            caption: 'Textures'
                          },
                          'renderer.info.programs': { caption: 'Programs' },
                          'renderer.info.render.calls': { caption: 'Calls' },
                          'renderer.info.render.faces': {
                            caption: 'Faces',
                            over: 1e3
                          },
                          'renderer.info.render.points': { caption: 'Points' },
                          'renderer.info.render.vertices': {
                            caption: 'Vertices'
                          }
                        },
                        groups: [
                          {
                            caption: 'Three.js - Memory',
                            values: [
                              'renderer.info.memory.geometries',
                              'renderer.info.programs',
                              'renderer.info.memory.textures'
                            ]
                          },
                          {
                            caption: 'Three.js - Render',
                            values: [
                              'renderer.info.render.calls',
                              'renderer.info.render.faces',
                              'renderer.info.render.points',
                              'renderer.info.render.vertices'
                            ]
                          }
                        ],
                        fractions: []
                      };
                    }),
                    (window.BrowserStats = function() {
                      var t = null,
                        e = 0,
                        i = 0;
                      window.performance &&
                        !performance.memory &&
                        (performance.memory = {
                          usedJSHeapSize: 0,
                          totalJSHeapSize: 0
                        }),
                        performance.memory.totalJSHeapSize;
                      var n = Math.log(1024);
                      function r(t) {
                        var e = Math.floor(Math.log(t) / n);
                        return Math.round(100 * t / Math.pow(1024, e)) / 100;
                      }
                      return {
                        update: function() {
                          (e = r(performance.memory.usedJSHeapSize)),
                            (i = r(performance.memory.totalJSHeapSize)),
                            t('memory').set(e),
                            t('total').set(i);
                        },
                        start: function() {
                          e = 0;
                        },
                        end: function() {},
                        attach: function(e) {
                          t = e;
                        },
                        values: {
                          memory: {
                            caption: 'Used Memory',
                            average: !0,
                            avgMs: 1e3,
                            over: 22
                          },
                          total: { caption: 'Total Memory' }
                        },
                        groups: [
                          { caption: 'Browser', values: ['memory', 'total'] }
                        ],
                        fractions: [{ base: 'total', steps: ['memory'] }]
                      };
                    }),
                    'object' == typeof e &&
                      (e.exports = {
                        glStats: window.glStats,
                        threeStats: window.threeStats,
                        BrowserStats: window.BrowserStats
                      });
                },
                {}
              ],
              203: [
                function(t, e, i) {
                  'use strict';
                  !(function() {
                    'performance' in window == 0 && (window.performance = {});
                    var t = window.performance;
                    if ('now' in t == 0) {
                      var e = Date.now();
                      t.timing &&
                        t.timing.navigationStart &&
                        (e = t.timing.navigationStart),
                        (t.now = function() {
                          return Date.now() - e;
                        });
                    }
                    t.mark || (t.mark = function() {}),
                      t.measure || (t.measure = function() {});
                  })(),
                    (window.rStats = function(t) {
                      function e(t, e) {
                        for (
                          var i = Object.keys(t), n = 0, r = i.length;
                          n < r;
                          n++
                        )
                          e(i[n]);
                      }
                      var i = t || {},
                        n = i.colours || [
                          '#850700',
                          '#c74900',
                          '#fcb300',
                          '#284280',
                          '#4c7c0c'
                        ],
                        r = (i.CSSPath ? i.CSSPath : '') + 'rStats.css';
                      (
                        i.css || [
                          'https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700,300',
                          r
                        ]
                      ).forEach(function(t) {
                        var e, i;
                        (e = t),
                          ((i = document.createElement('link')).href = e),
                          (i.rel = 'stylesheet'),
                          (i.type = 'text/css'),
                          document
                            .getElementsByTagName('head')[0]
                            .appendChild(i);
                      }),
                        i.values || (i.values = {});
                      var a,
                        o,
                        s = 10,
                        c = 200,
                        u = {};
                      function l(t, e) {
                        var n,
                          r = t,
                          a = 0,
                          u = 0,
                          l = 0,
                          h = 0,
                          d = performance.now(),
                          p = 0,
                          f = document.createElement('div'),
                          m = document.createElement('span'),
                          g = document.createElement('div'),
                          v = document.createTextNode(''),
                          y = i ? i.values[r.toLowerCase()] : null,
                          M = new function(t, e, i) {
                            var n = i || {},
                              r = document.createElement('canvas'),
                              a = r.getContext('2d'),
                              o = 0,
                              u = 0,
                              l = n.color ? n.color : '#666666',
                              h = document.createElement('canvas'),
                              d = h.getContext('2d');
                            (h.width = 1),
                              (h.height = 2 * s),
                              (d.fillStyle = '#444444'),
                              d.fillRect(0, 0, 1, 2 * s),
                              (d.fillStyle = l),
                              d.fillRect(0, s, 1, s),
                              (d.fillStyle = '#ffffff'),
                              (d.globalAlpha = 0.5),
                              d.fillRect(0, s, 1, 1),
                              (d.globalAlpha = 1);
                            var p = document.createElement('canvas'),
                              f = p.getContext('2d');
                            return (
                              (p.width = 1),
                              (p.height = 2 * s),
                              (f.fillStyle = '#444444'),
                              f.fillRect(0, 0, 1, 2 * s),
                              (f.fillStyle = '#b70000'),
                              f.fillRect(0, s, 1, s),
                              (f.globalAlpha = 0.5),
                              (f.fillStyle = '#ffffff'),
                              f.fillRect(0, s, 1, 1),
                              (f.globalAlpha = 1),
                              (r.width = c),
                              (r.height = s),
                              (r.style.width = r.width + 'px'),
                              (r.style.height = r.height + 'px'),
                              (r.className = 'rs-canvas'),
                              t.appendChild(r),
                              (a.fillStyle = '#444444'),
                              a.fillRect(0, 0, r.width, r.height),
                              {
                                draw: function(t, e) {
                                  (u += 0.1 * (t - u)) > (o *= 0.99) && (o = u),
                                    a.drawImage(
                                      r,
                                      1,
                                      0,
                                      r.width - 1,
                                      r.height,
                                      0,
                                      0,
                                      r.width - 1,
                                      r.height
                                    ),
                                    e
                                      ? a.drawImage(
                                          p,
                                          r.width - 1,
                                          r.height - u * r.height / o - s
                                        )
                                      : a.drawImage(
                                          h,
                                          r.width - 1,
                                          r.height - u * r.height / o - s
                                        );
                                }
                              }
                            );
                          }(f, r, y),
                          w = !1;
                        function x(t) {
                          if (y && y.average) {
                            (h += t), p++;
                            var e = performance.now();
                            e - d >= (y.avgMs || 1e3) &&
                              ((l = h / p), (h = 0), (d = e), (p = 0));
                          }
                        }
                        function A() {
                          (n = performance.now()),
                            i.userTimingAPI && performance.mark(r + '-start'),
                            (w = !0);
                        }
                        function E() {
                          (a = performance.now() - n),
                            i.userTimingAPI &&
                              (performance.mark(r + '-end'),
                              w &&
                                performance.measure(
                                  r,
                                  r + '-start',
                                  r + '-end'
                                )),
                            x(a);
                        }
                        return (
                          (m.className = 'rs-counter-id'),
                          (m.textContent = y && y.caption ? y.caption : r),
                          (g.className = 'rs-counter-value'),
                          g.appendChild(v),
                          f.appendChild(m),
                          f.appendChild(g),
                          e ? e.div.appendChild(f) : o.appendChild(f),
                          (n = performance.now()),
                          {
                            set: function(t) {
                              x((a = t));
                            },
                            start: A,
                            tick: function() {
                              E(), A();
                            },
                            end: E,
                            frame: function() {
                              var t = performance.now(),
                                e = t - n;
                              u++,
                                e > 1e3 &&
                                  ((a =
                                    y && !1 === y.interpolate
                                      ? u
                                      : 1e3 * u / e),
                                  (u = 0),
                                  (n = t),
                                  x(a));
                            },
                            value: function() {
                              return a;
                            },
                            draw: function() {
                              var t = y && y.average ? l : a;
                              v.nodeValue = Math.round(100 * t) / 100;
                              var e =
                                y &&
                                ((y.below && a < y.below) ||
                                  (y.over && a > y.over));
                              M.draw(a, e),
                                (f.className = e
                                  ? 'rs-counter-base alarm'
                                  : 'rs-counter-base');
                            }
                          }
                        );
                      }
                      function h(t) {
                        var n = t.toLowerCase();
                        if ((void 0 === n && (n = 'default'), u[n]))
                          return u[n];
                        var r = null;
                        i &&
                          i.groups &&
                          e(i.groups, function(t) {
                            var e = i.groups[parseInt(t, 10)];
                            r ||
                              -1 === e.values.indexOf(n.toLowerCase()) ||
                              (r = e);
                          });
                        var a = new l(n, r);
                        return (u[n] = a), a;
                      }
                      function d() {
                        e(i.plugins, function(t) {
                          i.plugins[t].update();
                        }),
                          e(u, function(t) {
                            u[t].draw();
                          }),
                          i &&
                            i.fractions &&
                            e(i.fractions, function(t) {
                              var n = i.fractions[parseInt(t, 10)],
                                r = [],
                                a = u[n.base.toLowerCase()];
                              a &&
                                ((a = a.value()),
                                e(i.fractions[t].steps, function(e) {
                                  var n = i.fractions[t].steps[
                                      parseInt(e, 10)
                                    ].toLowerCase(),
                                    o = u[n];
                                  o && r.push(o.value() / a);
                                })),
                                n.graph.draw(r);
                            });
                      }
                      return (
                        (function() {
                          if (i.plugins) {
                            i.values || (i.values = {}),
                              i.groups || (i.groups = []),
                              i.fractions || (i.fractions = []);
                            for (var t = 0; t < i.plugins.length; t++)
                              i.plugins[t].attach(h),
                                e(i.plugins[t].values, function(e) {
                                  i.values[e] = i.plugins[t].values[e];
                                }),
                                (i.groups = i.groups.concat(
                                  i.plugins[t].groups
                                )),
                                (i.fractions = i.fractions.concat(
                                  i.plugins[t].fractions
                                ));
                          } else i.plugins = {};
                          ((a = document.createElement('div')).className =
                            'rs-base'),
                            ((o = document.createElement('div')).className =
                              'rs-container'),
                            (o.style.height = 'auto'),
                            a.appendChild(o),
                            document.body.appendChild(a),
                            i &&
                              (i.groups &&
                                e(i.groups, function(t) {
                                  var e = i.groups[parseInt(t, 10)],
                                    n = document.createElement('div');
                                  (n.className = 'rs-group'), (e.div = n);
                                  var r = document.createElement('h1');
                                  (r.textContent = e.caption),
                                    r.addEventListener(
                                      'click',
                                      function(t) {
                                        this.classList.toggle('hidden'),
                                          t.preventDefault();
                                      }.bind(n)
                                    ),
                                    o.appendChild(r),
                                    o.appendChild(n);
                                }),
                              i.fractions &&
                                e(i.fractions, function(t) {
                                  var r = i.fractions[parseInt(t, 10)],
                                    a = document.createElement('div');
                                  a.className = 'rs-fraction';
                                  var u = document.createElement('div');
                                  u.className = 'rs-legend';
                                  var l = 0;
                                  e(i.fractions[t].steps, function(e) {
                                    var r = document.createElement('p');
                                    (r.textContent = i.fractions[t].steps[e]),
                                      (r.style.color = n[l]),
                                      u.appendChild(r),
                                      l++;
                                  }),
                                    a.appendChild(u),
                                    (a.style.height = l * s + 'px'),
                                    (r.div = a);
                                  var h = new function(t, i) {
                                    var r = document.createElement('canvas'),
                                      a = r.getContext('2d');
                                    return (
                                      (r.width = c),
                                      (r.height = s * i),
                                      (r.style.width = r.width + 'px'),
                                      (r.style.height = r.height + 'px'),
                                      (r.className = 'rs-canvas'),
                                      t.appendChild(r),
                                      (a.fillStyle = '#444444'),
                                      a.fillRect(0, 0, r.width, r.height),
                                      {
                                        draw: function(t) {
                                          a.drawImage(
                                            r,
                                            1,
                                            0,
                                            r.width - 1,
                                            r.height,
                                            0,
                                            0,
                                            r.width - 1,
                                            r.height
                                          );
                                          var i = 0;
                                          e(t, function(e) {
                                            var o = t[e] * r.height;
                                            (a.fillStyle = n[e]),
                                              a.fillRect(r.width - 1, i, 1, o),
                                              (i += o);
                                          });
                                        }
                                      }
                                    );
                                  }(a, l);
                                  (r.graph = h), o.appendChild(a);
                                }));
                        })(),
                        function(t) {
                          return t ? h(t) : { element: a, update: d };
                        }
                      );
                    }),
                    'object' == typeof e && (e.exports = window.rStats);
                },
                {}
              ],
              204: [
                function(t, e, i) {
                  var n = {};
                  (n.base64 = function(t, e) {
                    return 'data:' + t + ';base64,' + e;
                  }),
                    (n.isMobile = function() {
                      var t,
                        e = !1;
                      return (
                        (t =
                          navigator.userAgent ||
                          navigator.vendor ||
                          window.opera),
                        (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                          t
                        ) ||
                          /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                            t.substr(0, 4)
                          )) &&
                          (e = !0),
                        e
                      );
                    }),
                    (n.isIOS = function() {
                      return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
                    }),
                    (n.isIFrame = function() {
                      try {
                        return window.self !== window.top;
                      } catch (t) {
                        return !0;
                      }
                    }),
                    (n.appendQueryParameter = function(t, e, i) {
                      return (t +=
                        (t.indexOf('?') < 0 ? '?' : '&') + e + '=' + i);
                    }),
                    (n.getQueryParameter = function(t) {
                      t = t.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                      var e = new RegExp('[\\?&]' + t + '=([^&#]*)').exec(
                        location.search
                      );
                      return null === e
                        ? ''
                        : decodeURIComponent(e[1].replace(/\+/g, ' '));
                    }),
                    (n.isLandscapeMode = function() {
                      return (
                        90 == window.orientation || -90 == window.orientation
                      );
                    }),
                    (e.exports = n);
                },
                {}
              ],
              205: [
                function(t, e, i) {
                  var n,
                    r = t('./util.js');
                  function a() {
                    var t = document.createElement('video');
                    t.addEventListener('ended', function() {
                      t.play();
                    }),
                      (this.request = function() {
                        t.paused &&
                          ((t.src = r.base64(
                            'video/webm',
                            'GkXfowEAAAAAAAAfQoaBAUL3gQFC8oEEQvOBCEKChHdlYm1Ch4ECQoWBAhhTgGcBAAAAAAAH4xFNm3RALE27i1OrhBVJqWZTrIHfTbuMU6uEFlSua1OsggEwTbuMU6uEHFO7a1OsggfG7AEAAAAAAACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmAQAAAAAAAEUq17GDD0JATYCNTGF2ZjU2LjQwLjEwMVdBjUxhdmY1Ni40MC4xMDFzpJAGSJTMbsLpDt/ySkipgX1fRImIQO1MAAAAAAAWVK5rAQAAAAAAADuuAQAAAAAAADLXgQFzxYEBnIEAIrWcg3VuZIaFVl9WUDmDgQEj44OEO5rKAOABAAAAAAAABrCBsLqBkB9DtnUBAAAAAAAAo+eBAKOmgQAAgKJJg0IAAV4BHsAHBIODCoAACmH2MAAAZxgz4dPSTFi5JACjloED6ACmAECSnABMQAADYAAAWi0quoCjloEH0ACmAECSnABNwAADYAAAWi0quoCjloELuACmAECSnABNgAADYAAAWi0quoCjloEPoACmAECSnABNYAADYAAAWi0quoCjloETiACmAECSnABNIAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTnghdwo5aBAAAApgBAkpwATOAAA2AAAFotKrqAo5aBA+gApgBAkpwATMAAA2AAAFotKrqAo5aBB9AApgBAkpwATIAAA2AAAFotKrqAo5aBC7gApgBAkpwATEAAA2AAAFotKrqAo5aBD6AApgDAkpwAQ2AAA2AAAFotKrqAo5aBE4gApgBAkpwATCAAA2AAAFotKrqAH0O2dQEAAAAAAACU54Iu4KOWgQAAAKYAQJKcAEvAAANgAABaLSq6gKOWgQPoAKYAQJKcAEtgAANgAABaLSq6gKOWgQfQAKYAQJKcAEsAAANgAABaLSq6gKOWgQu4AKYAQJKcAEqAAANgAABaLSq6gKOWgQ+gAKYAQJKcAEogAANgAABaLSq6gKOWgROIAKYAQJKcAEnAAANgAABaLSq6gB9DtnUBAAAAAAAAlOeCRlCjloEAAACmAECSnABJgAADYAAAWi0quoCjloED6ACmAECSnABJIAADYAAAWi0quoCjloEH0ACmAMCSnABDYAADYAAAWi0quoCjloELuACmAECSnABI4AADYAAAWi0quoCjloEPoACmAECSnABIoAADYAAAWi0quoCjloETiACmAECSnABIYAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTngl3Ao5aBAAAApgBAkpwASCAAA2AAAFotKrqAo5aBA+gApgBAkpwASAAAA2AAAFotKrqAo5aBB9AApgBAkpwAR8AAA2AAAFotKrqAo5aBC7gApgBAkpwAR4AAA2AAAFotKrqAo5aBD6AApgBAkpwAR2AAA2AAAFotKrqAo5aBE4gApgBAkpwARyAAA2AAAFotKrqAH0O2dQEAAAAAAACU54J1MKOWgQAAAKYAwJKcAENgAANgAABaLSq6gKOWgQPoAKYAQJKcAEbgAANgAABaLSq6gKOWgQfQAKYAQJKcAEagAANgAABaLSq6gKOWgQu4AKYAQJKcAEaAAANgAABaLSq6gKOWgQ+gAKYAQJKcAEZAAANgAABaLSq6gKOWgROIAKYAQJKcAEYAAANgAABaLSq6gB9DtnUBAAAAAAAAlOeCjKCjloEAAACmAECSnABF4AADYAAAWi0quoCjloED6ACmAECSnABFwAADYAAAWi0quoCjloEH0ACmAECSnABFoAADYAAAWi0quoCjloELuACmAECSnABFgAADYAAAWi0quoCjloEPoACmAMCSnABDYAADYAAAWi0quoCjloETiACmAECSnABFYAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTngqQQo5aBAAAApgBAkpwARUAAA2AAAFotKrqAo5aBA+gApgBAkpwARSAAA2AAAFotKrqAo5aBB9AApgBAkpwARQAAA2AAAFotKrqAo5aBC7gApgBAkpwARQAAA2AAAFotKrqAo5aBD6AApgBAkpwAROAAA2AAAFotKrqAo5aBE4gApgBAkpwARMAAA2AAAFotKrqAH0O2dQEAAAAAAACU54K7gKOWgQAAAKYAQJKcAESgAANgAABaLSq6gKOWgQPoAKYAQJKcAESAAANgAABaLSq6gKOWgQfQAKYAwJKcAENgAANgAABaLSq6gKOWgQu4AKYAQJKcAERgAANgAABaLSq6gKOWgQ+gAKYAQJKcAERAAANgAABaLSq6gKOWgROIAKYAQJKcAEQgAANgAABaLSq6gB9DtnUBAAAAAAAAlOeC0vCjloEAAACmAECSnABEIAADYAAAWi0quoCjloED6ACmAECSnABEAAADYAAAWi0quoCjloEH0ACmAECSnABD4AADYAAAWi0quoCjloELuACmAECSnABDwAADYAAAWi0quoCjloEPoACmAECSnABDoAADYAAAWi0quoCjloETiACmAECSnABDgAADYAAAWi0quoAcU7trAQAAAAAAABG7j7OBALeK94EB8YIBd/CBAw=='
                          )),
                          t.play());
                      }),
                      (this.release = function() {
                        t.pause(), (t.src = '');
                      });
                  }
                  function o() {
                    var t = null;
                    (this.request = function() {
                      t ||
                        (t = setInterval(function() {
                          (window.location.href = '/'),
                            setTimeout(window.stop, 0);
                        }, 15e3));
                    }),
                      (this.release = function() {
                        t && (clearInterval(t), (t = null));
                      });
                  }
                  e.exports =
                    (n =
                      navigator.userAgent ||
                      navigator.vendor ||
                      window.opera).match(/iPhone/i) || n.match(/iPod/i)
                      ? o
                      : a;
                },
                { './util.js': 204 }
              ]
            },
            {},
            [171]
          )(171);
        });
      },
      { process: 6, buffer: 7 }
    ],
    4: [
      function(require, module, exports) {
        var X = [
            {
              id: 0,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 200,
              back: 1,
              vertices: [
                { X: 10, Y: 10, Z: -10 },
                { X: 10, Y: -10, Z: -10 },
                { X: -10, Y: -10, Z: -10 },
                { X: -10, Y: 10, Z: -10 },
                { X: 10, Y: 10, Z: 10 },
                { X: 10, Y: -10, Z: 10 },
                { X: -10, Y: -10, Z: 10 },
                { X: -10, Y: 10, Z: 10 }
              ]
            },
            {
              id: 1,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 0,
              back: 2,
              vertices: [
                { X: 10, Y: 10, Z: 10 },
                { X: 10, Y: -10, Z: 10 },
                { X: -10, Y: -10, Z: 10 },
                { X: -10, Y: 10, Z: 10 },
                { X: 10, Y: 10, Z: 30 },
                { X: 10, Y: -10, Z: 30 },
                { X: -10, Y: -10, Z: 30 },
                { X: -10, Y: 10, Z: 30 }
              ]
            },
            {
              id: 2,
              top: null,
              bottom: null,
              left: 218,
              right: 219,
              front: 1,
              back: 3,
              vertices: [
                { X: 10, Y: 10, Z: 30 },
                { X: 10, Y: -10, Z: 30 },
                { X: -10, Y: -10, Z: 30 },
                { X: -10, Y: 10, Z: 30 },
                { X: 27.32768, Y: 10, Z: 50 },
                { X: 27.32768, Y: -10, Z: 50 },
                { X: -28.32768, Y: -10, Z: 50 },
                { X: -28.32768, Y: 10, Z: 50 }
              ]
            },
            {
              id: 3,
              top: null,
              bottom: 13,
              left: 216,
              right: 217,
              front: 2,
              back: 4,
              vertices: [
                { X: 27.32768, Y: 10, Z: 50 },
                { X: 27.32768, Y: -10, Z: 50 },
                { X: -28.32768, Y: -10, Z: 50 },
                { X: -28.32768, Y: 10, Z: 50 },
                { X: 35, Y: 10, Z: 70 },
                { X: 35, Y: -10, Z: 70 },
                { X: -35, Y: -10, Z: 70 },
                { X: -35, Y: 10, Z: 70 }
              ]
            },
            {
              id: 4,
              top: null,
              bottom: 9,
              left: 29,
              right: null,
              front: 3,
              back: 5,
              vertices: [
                { X: 35, Y: 10, Z: 70 },
                { X: 35, Y: -10, Z: 70 },
                { X: -35, Y: -10, Z: 70 },
                { X: -35, Y: 10, Z: 70 },
                { X: 40, Y: 10, Z: 90 },
                { X: 40, Y: -10, Z: 90 },
                { X: -40, Y: -10, Z: 90 },
                { X: -40, Y: 10, Z: 90 }
              ]
            },
            {
              id: 5,
              top: null,
              bottom: 10,
              left: null,
              right: null,
              front: 4,
              back: 6,
              vertices: [
                { X: 40, Y: 10, Z: 90 },
                { X: 40, Y: -10, Z: 90 },
                { X: -40, Y: -10, Z: 90 },
                { X: -40, Y: 10, Z: 90 },
                { X: 40, Y: 10, Z: 110 },
                { X: 40, Y: -10, Z: 110 },
                { X: -40, Y: -10, Z: 110 },
                { X: -40, Y: 10, Z: 110 }
              ]
            },
            {
              id: 6,
              top: null,
              bottom: 11,
              left: null,
              right: null,
              front: 5,
              back: 7,
              vertices: [
                { X: 40, Y: 10, Z: 110 },
                { X: 40, Y: -10, Z: 110 },
                { X: -40, Y: -10, Z: 110 },
                { X: -40, Y: 10, Z: 110 },
                { X: 27.32768, Y: 10, Z: 132 },
                { X: 27.32768, Y: -10, Z: 130 },
                { X: -28.32768, Y: -10, Z: 130 },
                { X: -28.32768, Y: 10, Z: 132 }
              ]
            },
            {
              id: 7,
              top: null,
              bottom: 12,
              left: null,
              right: null,
              front: 6,
              back: null,
              vertices: [
                { X: 27.32768, Y: 10, Z: 132 },
                { X: 27.32768, Y: -10, Z: 130 },
                { X: -28.32768, Y: -10, Z: 130 },
                { X: -28.32768, Y: 10, Z: 132 },
                { X: 11.32768, Y: 10, Z: 148 },
                { X: 11.32768, Y: -10, Z: 150 },
                { X: -12.32768, Y: -10, Z: 150 },
                { X: -12.32768, Y: 10, Z: 148 }
              ]
            },
            {
              id: 8,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 12,
              back: 16,
              vertices: [
                { X: 27.32768, Y: -30, Z: 130 },
                { X: 10, Y: -28.32768, Z: 150 },
                { X: 11.32768, Y: -10, Z: 150 },
                { X: 27.32768, Y: -10, Z: 130 },
                { X: 42.2859, Y: -30.65283, Z: 141.50074 },
                { X: 32.9899, Y: -30.59505, Z: 158.59172 },
                { X: 31.54511, Y: -10.5866, Z: 158.53528 },
                { X: 42.7666, Y: -10.64439, Z: 141.44427 }
              ]
            },
            {
              id: 9,
              top: 13,
              bottom: 10,
              left: null,
              right: null,
              front: 4,
              back: null,
              vertices: [
                { X: -35, Y: -10, Z: 70 },
                { X: -40, Y: -10, Z: 90 },
                { X: 40, Y: -10, Z: 90 },
                { X: 35, Y: -10, Z: 70 },
                { X: -40, Y: -30, Z: 70 },
                { X: -40, Y: -30, Z: 90 },
                { X: 40, Y: -30, Z: 90 },
                { X: 40, Y: -30, Z: 70 }
              ]
            },
            {
              id: 10,
              top: 9,
              bottom: 11,
              left: null,
              right: null,
              front: 5,
              back: null,
              vertices: [
                { X: -40, Y: -10, Z: 90 },
                { X: -40, Y: -10, Z: 110 },
                { X: 40, Y: -10, Z: 110 },
                { X: 40, Y: -10, Z: 90 },
                { X: -40, Y: -30, Z: 90 },
                { X: -40, Y: -30, Z: 110 },
                { X: 40, Y: -30, Z: 110 },
                { X: 40, Y: -30, Z: 90 }
              ]
            },
            {
              id: 11,
              top: 10,
              bottom: 12,
              left: null,
              right: null,
              front: 6,
              back: null,
              vertices: [
                { X: -40, Y: -10, Z: 110 },
                { X: -28.32768, Y: -10, Z: 130 },
                { X: 27.32768, Y: -10, Z: 130 },
                { X: 40, Y: -10, Z: 110 },
                { X: -40, Y: -30, Z: 110 },
                { X: -28.32768, Y: -30, Z: 130 },
                { X: 27.32768, Y: -30, Z: 130 },
                { X: 40, Y: -30, Z: 110 }
              ]
            },
            {
              id: 12,
              top: 11,
              bottom: null,
              left: 8,
              right: 14,
              front: 7,
              back: null,
              vertices: [
                { X: -28.32768, Y: -10, Z: 130 },
                { X: -12.32768, Y: -10, Z: 150 },
                { X: 11.32768, Y: -10, Z: 150 },
                { X: 27.32768, Y: -10, Z: 130 },
                { X: -28.32768, Y: -30, Z: 130 },
                { X: -10, Y: -28.32768, Z: 150 },
                { X: 10, Y: -28.32768, Z: 150 },
                { X: 27.32768, Y: -30, Z: 130 }
              ]
            },
            {
              id: 13,
              top: null,
              bottom: 9,
              left: null,
              right: null,
              front: 3,
              back: null,
              vertices: [
                { X: -28.32768, Y: -10, Z: 50 },
                { X: -35, Y: -10, Z: 70 },
                { X: 35, Y: -10, Z: 70 },
                { X: 27.32768, Y: -10, Z: 50 },
                { X: -28.32818, Y: -31.51138, Z: 56.6426 },
                { X: -40, Y: -30, Z: 70 },
                { X: 40, Y: -30, Z: 70 },
                { X: 27.32755, Y: -31.51117, Z: 56.64267 }
              ]
            },
            {
              id: 14,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 12,
              back: 15,
              vertices: [
                { X: -28.32768, Y: -10, Z: 130 },
                { X: -12.32768, Y: -10, Z: 150 },
                { X: -10, Y: -28.32768, Z: 150 },
                { X: -28.32768, Y: -30, Z: 130 },
                { X: -38.5328, Y: -9.40408, Z: 132.36077 },
                { X: -35.4872, Y: -9.30115, Z: 152.21425 },
                { X: -36.4052, Y: -29.32569, Z: 152.21919 },
                { X: -39.45076, Y: -29.42861, Z: 132.36569 }
              ]
            },
            {
              id: 15,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 14,
              back: 24,
              vertices: [
                { X: -38.5328, Y: -9.40408, Z: 132.36077 },
                { X: -35.4872, Y: -9.30115, Z: 152.21425 },
                { X: -36.4052, Y: -29.32569, Z: 152.21919 },
                { X: -39.45076, Y: -29.42861, Z: 132.36569 },
                { X: -62.59925, Y: -7.44823, Z: 141.57872 },
                { X: -53.32512, Y: -7.58611, Z: 159.60861 },
                { X: -55.45168, Y: -26.1302, Z: 161.1179 },
                { X: -63.704, Y: -27.53046, Z: 142.63726 }
              ]
            },
            {
              id: 16,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 8,
              back: 17,
              vertices: [
                { X: 42.2859, Y: -30.65283, Z: 141.50074 },
                { X: 32.9899, Y: -30.59505, Z: 158.59172 },
                { X: 31.54511, Y: -10.5866, Z: 158.53528 },
                { X: 42.7666, Y: -10.64439, Z: 141.44427 },
                { X: 51.37527, Y: -38.5104, Z: 158.12 },
                { X: 35.22646, Y: -35.41061, Z: 169.17704 },
                { X: 41.58282, Y: -17.56409, Z: 174.6873 },
                { X: 58.763, Y: -19.847, Z: 162.54717 }
              ]
            },
            {
              id: 17,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 16,
              back: 18,
              vertices: [
                { X: 51.37527, Y: -38.5104, Z: 158.12 },
                { X: 35.22646, Y: -35.41061, Z: 169.17704 },
                { X: 41.58282, Y: -17.56409, Z: 174.6873 },
                { X: 58.763, Y: -19.847, Z: 162.54717 },
                { X: 64.2406, Y: -41.59685, Z: 176.60948 },
                { X: 47.59347, Y: -37.6921, Z: 188.15184 },
                { X: 51.44319, Y: -18.4609, Z: 188.5167 },
                { X: 67.52912, Y: -21.33317, Z: 176.50933 }
              ]
            },
            {
              id: 18,
              top: 19,
              bottom: null,
              left: null,
              right: null,
              front: 17,
              back: 20,
              vertices: [
                { X: 64.2406, Y: -41.59685, Z: 176.60948 },
                { X: 47.59347, Y: -37.6921, Z: 188.15184 },
                { X: 51.44319, Y: -18.4609, Z: 188.5167 },
                { X: 67.52912, Y: -21.33317, Z: 176.50933 },
                { X: 61.42642, Y: -41.35894, Z: 203.37698 },
                { X: 42.33605, Y: -37.49778, Z: 199.62398 },
                { X: 46.43243, Y: -17.16741, Z: 200.41699 },
                { X: 65.5228, Y: -21.2857, Z: 204.17001 }
              ]
            },
            {
              id: 19,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 18,
              back: 22,
              vertices: [
                { X: 64.2406, Y: -41.59685, Z: 176.60948 },
                { X: 61.42642, Y: -41.35894, Z: 203.37698 },
                { X: 65.5228, Y: -21.2857, Z: 204.17001 },
                { X: 67.52912, Y: -21.33317, Z: 176.50933 },
                { X: 83.44961, Y: -45.27256, Z: 183.57315 },
                { X: 79.648, Y: -45.33434, Z: 203.29899 },
                { X: 84.15237, Y: -26.64515, Z: 204.10732 },
                { X: 87.60934, Y: -26.58337, Z: 184.38148 }
              ]
            },
            {
              id: 20,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 18,
              back: 21,
              vertices: [
                { X: 61.42642, Y: -41.35894, Z: 203.37698 },
                { X: 42.33605, Y: -37.49778, Z: 199.62398 },
                { X: 46.43243, Y: -17.16741, Z: 200.41699 },
                { X: 65.5228, Y: -21.2857, Z: 204.17001 },
                { X: 61.2344, Y: -42.5436, Z: 223.5417 },
                { X: 35.20107, Y: -36.44994, Z: 218.57662 },
                { X: 39.36102, Y: -16.1064, Z: 219.38499 },
                { X: 65.39435, Y: -22.20007, Z: 224.35007 }
              ]
            },
            {
              id: 21,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 20,
              back: 41,
              vertices: [
                { X: 61.2344, Y: -42.5436, Z: 223.5417 },
                { X: 35.20107, Y: -36.44994, Z: 218.57662 },
                { X: 39.36102, Y: -16.1064, Z: 219.38499 },
                { X: 65.39435, Y: -22.20007, Z: 224.35007 },
                { X: 54.15107, Y: -41.44772, Z: 242.54398 },
                { X: 35.2411, Y: -37.62948, Z: 239.12166 },
                { X: 39.16827, Y: -17.32588, Z: 239.58246 },
                { X: 58.29523, Y: -21.14412, Z: 243.34942 }
              ]
            },
            {
              id: 22,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 19,
              back: 23,
              vertices: [
                { X: 83.44961, Y: -45.27256, Z: 183.57315 },
                { X: 79.648, Y: -45.33434, Z: 203.29899 },
                { X: 84.15237, Y: -26.64515, Z: 204.10732 },
                { X: 87.60934, Y: -26.58337, Z: 184.38148 },
                { X: 105.57771, Y: -50.34824, Z: 184.28175 },
                { X: 100.56022, Y: -50.46555, Z: 211.7602 },
                { X: 105.6939, Y: -30.12182, Z: 211.51542 },
                { X: 110.8689, Y: -30.45, Z: 185.6579 }
              ]
            },
            {
              id: 23,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 22,
              back: 78,
              vertices: [
                { X: 105.57771, Y: -50.34824, Z: 184.28175 },
                { X: 100.56022, Y: -50.46555, Z: 211.7602 },
                { X: 105.6939, Y: -30.12182, Z: 211.51542 },
                { X: 110.8689, Y: -30.45, Z: 185.6579 },
                { X: 122.298, Y: -54.49921, Z: 191.8207 },
                { X: 118.19633, Y: -54.57548, Z: 210.51238 },
                { X: 122.36668, Y: -34.26663, Z: 211.30402 },
                { X: 126.17354, Y: -34.19041, Z: 191.53307 }
              ]
            },
            {
              id: 24,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 15,
              back: 25,
              vertices: [
                { X: -62.59925, Y: -7.44823, Z: 141.57872 },
                { X: -53.32512, Y: -7.58611, Z: 159.60861 },
                { X: -55.45168, Y: -26.1302, Z: 161.1179 },
                { X: -63.704, Y: -27.53046, Z: 142.63726 },
                { X: -79.6147, Y: -4.2451, Z: 150.40017 },
                { X: -71.41233, Y: -5.49363, Z: 168.44344 },
                { X: -73.39497, Y: -25.57724, Z: 169.21058 },
                { X: -81.4411, Y: -24.10812, Z: 151.16732 }
              ]
            },
            {
              id: 25,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 24,
              back: 26,
              vertices: [
                { X: -79.6147, Y: -4.2451, Z: 150.40017 },
                { X: -71.41233, Y: -5.49363, Z: 168.44344 },
                { X: -73.39497, Y: -25.57724, Z: 169.21058 },
                { X: -81.4411, Y: -24.10812, Z: 151.16732 },
                { X: -100.13838, Y: -17.26145, Z: 162.60211 },
                { X: -90.37243, Y: -17.13987, Z: 179.64588 },
                { X: -81.58255, Y: -34.35861, Z: 174.9316 },
                { X: -91.34851, Y: -34.48021, Z: 157.4942 }
              ]
            },
            {
              id: 26,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 25,
              back: 27,
              vertices: [
                { X: -100.13838, Y: -17.26145, Z: 162.60211 },
                { X: -90.37243, Y: -17.13987, Z: 179.64588 },
                { X: -81.58255, Y: -34.35861, Z: 174.9316 },
                { X: -91.34851, Y: -34.48021, Z: 157.4942 },
                { X: -112.1785, Y: -37.62441, Z: 169.51598 },
                { X: -102.20591, Y: -36.9302, Z: 187.2192 },
                { X: -88.42747, Y: -48.62362, Z: 178.5283 },
                { X: -98.40008, Y: -48.49966, Z: 161.36701 }
              ]
            },
            {
              id: 27,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 26,
              back: 28,
              vertices: [
                { X: -112.1785, Y: -37.62441, Z: 169.51598 },
                { X: -102.20591, Y: -36.9302, Z: 187.2192 },
                { X: -88.42747, Y: -48.62362, Z: 178.5283 },
                { X: -98.40008, Y: -48.49966, Z: 161.36701 },
                { X: -117.14075, Y: -62.60141, Z: 173.6252 },
                { X: -107.29487, Y: -61.626, Z: 190.14301 },
                { X: -90.15442, Y: -66.65385, Z: 180.13372 },
                { X: -100.28, Y: -66.59365, Z: 163.5322 }
              ]
            },
            {
              id: 28,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 27,
              back: 72,
              vertices: [
                { X: -117.14075, Y: -62.60141, Z: 173.6252 },
                { X: -107.29487, Y: -61.626, Z: 190.14301 },
                { X: -90.15442, Y: -66.65385, Z: 180.13372 },
                { X: -100.28, Y: -66.59365, Z: 163.5322 },
                { X: -120.11714, Y: -79.2152, Z: 174.61316 },
                { X: -110.20412, Y: -79.2934, Z: 192.7803 },
                { X: -93.1048, Y: -83.28459, Z: 182.1388 },
                { X: -103.1781, Y: -83.20639, Z: 165.1858 }
              ]
            },
            {
              id: 29,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 4,
              back: 30,
              vertices: [
                { X: -40, Y: 10, Z: 90 },
                { X: -40, Y: -10, Z: 90 },
                { X: -35, Y: -10, Z: 70 },
                { X: -35, Y: 10, Z: 70 },
                { X: -52, Y: 10, Z: 90 },
                { X: -52, Y: -10, Z: 90 },
                { X: -52, Y: -10, Z: 70 },
                { X: -52, Y: 10, Z: 70 }
              ]
            },
            {
              id: 30,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 29,
              back: 201,
              vertices: [
                { X: -52, Y: 10, Z: 90 },
                { X: -52, Y: -10, Z: 90 },
                { X: -52, Y: -10, Z: 70 },
                { X: -52, Y: 10, Z: 70 },
                { X: -60.32768, Y: 10, Z: 90 },
                { X: -60.32768, Y: -10, Z: 90 },
                { X: -60.32768, Y: -10, Z: 70 },
                { X: -60.32768, Y: 10, Z: 70 }
              ]
            },
            {
              id: 31,
              top: null,
              bottom: null,
              left: 32,
              right: 38,
              front: 39,
              back: 202,
              vertices: [
                { X: -98.32768, Y: 10, Z: 70 },
                { X: -98.32768, Y: -10, Z: 70 },
                { X: -98.32768, Y: -10, Z: 90 },
                { X: -98.32768, Y: 10, Z: 90 },
                { X: -78.32768, Y: 10, Z: 70 },
                { X: -78.32768, Y: -10, Z: 70 },
                { X: -78.32768, Y: -10, Z: 90 },
                { X: -78.32768, Y: 10, Z: 90 }
              ]
            },
            {
              id: 32,
              top: null,
              bottom: null,
              left: 33,
              right: null,
              front: 31,
              back: null,
              vertices: [
                { X: -78.32768, Y: 10, Z: 90 },
                { X: -78.32768, Y: -10, Z: 90 },
                { X: -98.32768, Y: -10, Z: 90 },
                { X: -98.32768, Y: 10, Z: 90 },
                { X: -78.32768, Y: 2.32768, Z: 97.32768 },
                { X: -78.32768, Y: -3.32768, Z: 97.32768 },
                { X: -98.32768, Y: -3.32768, Z: 97.32768 },
                { X: -98.32768, Y: 2.32768, Z: 97.32768 }
              ]
            },
            {
              id: 33,
              top: null,
              bottom: null,
              left: 34,
              right: 32,
              front: 39,
              back: null,
              vertices: [
                { X: -98.32768, Y: 10, Z: 90 },
                { X: -98.32768, Y: -10, Z: 90 },
                { X: -118.32768, Y: -10, Z: 90 },
                { X: -118.32768, Y: 10, Z: 90 },
                { X: -98.32768, Y: 2.32768, Z: 97.32768 },
                { X: -98.32768, Y: -3.32768, Z: 97.32768 },
                { X: -118.32768, Y: -3.32768, Z: 97.32768 },
                { X: -118.32768, Y: 2.32768, Z: 97.32768 }
              ]
            },
            {
              id: 34,
              top: null,
              bottom: null,
              left: null,
              right: 33,
              front: 35,
              back: null,
              vertices: [
                { X: -118.32768, Y: 10, Z: 90 },
                { X: -118.32768, Y: -10, Z: 90 },
                { X: -138.32768, Y: -10, Z: 90 },
                { X: -138.32768, Y: 10, Z: 90 },
                { X: -118.32768, Y: 2.32768, Z: 97.32768 },
                { X: -118.32768, Y: -3.32768, Z: 97.32768 },
                { X: -138.32768, Y: -3.32768, Z: 97.32768 },
                { X: -138.32768, Y: 2.32768, Z: 97.32768 }
              ]
            },
            {
              id: 35,
              top: null,
              bottom: null,
              left: 34,
              right: 36,
              front: 44,
              back: 39,
              vertices: [
                { X: -138.32768, Y: 10, Z: 70 },
                { X: -138.32768, Y: -10, Z: 70 },
                { X: -138.32768, Y: -10, Z: 90 },
                { X: -138.32768, Y: 10, Z: 90 },
                { X: -118.32768, Y: 10, Z: 70 },
                { X: -118.32768, Y: -10, Z: 70 },
                { X: -118.32768, Y: -10, Z: 90 },
                { X: -118.32768, Y: 10, Z: 90 }
              ]
            },
            {
              id: 36,
              top: null,
              bottom: null,
              left: 37,
              right: null,
              front: 35,
              back: null,
              vertices: [
                { X: -138.32768, Y: 10, Z: 70 },
                { X: -138.32768, Y: -10, Z: 70 },
                { X: -118.32768, Y: -10, Z: 70 },
                { X: -118.32768, Y: 10, Z: 70 },
                { X: -138.32768, Y: 2.32768, Z: 62.32768 },
                { X: -138.32768, Y: -3.32768, Z: 62.32768 },
                { X: -118.32768, Y: -3.32768, Z: 62.32768 },
                { X: -118.32768, Y: 2.32768, Z: 62.32768 }
              ]
            },
            {
              id: 37,
              top: null,
              bottom: null,
              left: 38,
              right: 36,
              front: 39,
              back: null,
              vertices: [
                { X: -118.32768, Y: 10, Z: 70 },
                { X: -118.32768, Y: -10, Z: 70 },
                { X: -98.32768, Y: -10, Z: 70 },
                { X: -98.32768, Y: 10, Z: 70 },
                { X: -118.32768, Y: 2.32768, Z: 62.32768 },
                { X: -118.32768, Y: -3.32768, Z: 62.32768 },
                { X: -98.32768, Y: -3.32768, Z: 62.32768 },
                { X: -98.32768, Y: 2.32768, Z: 62.32768 }
              ]
            },
            {
              id: 38,
              top: null,
              bottom: null,
              left: null,
              right: 37,
              front: 31,
              back: null,
              vertices: [
                { X: -98.32768, Y: 10, Z: 70 },
                { X: -98.32768, Y: -10, Z: 70 },
                { X: -78.32768, Y: -10, Z: 70 },
                { X: -78.32768, Y: 10, Z: 70 },
                { X: -98.32768, Y: 2.32768, Z: 62.32768 },
                { X: -98.32768, Y: -3.32768, Z: 62.32768 },
                { X: -78.32768, Y: -3.32768, Z: 62.32768 },
                { X: -78.32768, Y: 2.32768, Z: 62.32768 }
              ]
            },
            {
              id: 39,
              top: null,
              bottom: null,
              left: 33,
              right: 37,
              front: 35,
              back: 31,
              vertices: [
                { X: -118.32768, Y: 10, Z: 70 },
                { X: -118.32768, Y: -10, Z: 70 },
                { X: -118.32768, Y: -10, Z: 90 },
                { X: -118.32768, Y: 10, Z: 90 },
                { X: -98.32768, Y: 10, Z: 70 },
                { X: -98.32768, Y: -10, Z: 70 },
                { X: -98.32768, Y: -10, Z: 90 },
                { X: -98.32768, Y: 10, Z: 90 }
              ]
            },
            {
              id: 40,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 45,
              back: 43,
              vertices: [
                { X: -198.32768, Y: 10, Z: 70 },
                { X: -198.32768, Y: -10, Z: 70 },
                { X: -198.32768, Y: -10, Z: 90 },
                { X: -198.32768, Y: 10, Z: 90 },
                { X: -178.32768, Y: 10, Z: 70 },
                { X: -178.32768, Y: -10, Z: 70 },
                { X: -178.32768, Y: -10, Z: 90 },
                { X: -178.32768, Y: 10, Z: 90 }
              ]
            },
            {
              id: 41,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 21,
              back: 42,
              vertices: [
                { X: 54.15107, Y: -41.44772, Z: 242.54398 },
                { X: 35.2411, Y: -37.62948, Z: 239.12166 },
                { X: 39.16827, Y: -17.32588, Z: 239.58246 },
                { X: 58.29523, Y: -21.14412, Z: 243.34942 },
                { X: 50.33251, Y: -41.50382, Z: 262.31458 },
                { X: 31.20835, Y: -36.4402, Z: 258.54802 },
                { X: 35.36611, Y: -17.39298, Z: 259.35626 },
                { X: 54.49027, Y: -21.19742, Z: 263.12282 }
              ]
            },
            {
              id: 42,
              top: null,
              bottom: null,
              left: 85,
              right: null,
              front: 41,
              back: 86,
              vertices: [
                { X: 50.33251, Y: -41.50382, Z: 262.31458 },
                { X: 31.20835, Y: -36.4402, Z: 258.54802 },
                { X: 35.36611, Y: -17.39298, Z: 259.35626 },
                { X: 54.49027, Y: -21.19742, Z: 263.12282 },
                { X: 47.17872, Y: -52.5659, Z: 265.57533 },
                { X: 28.7942, Y: -48.22385, Z: 262.14602 },
                { X: 27.39436, Y: -36.2617, Z: 278.2565 },
                { X: 46.49361, Y: -41.51431, Z: 282.3047 }
              ]
            },
            {
              id: 43,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 40,
              back: 44,
              vertices: [
                { X: -178.32768, Y: 10, Z: 70 },
                { X: -178.32768, Y: -10, Z: 70 },
                { X: -178.32768, Y: -10, Z: 90 },
                { X: -178.32768, Y: 10, Z: 90 },
                { X: -158.32768, Y: 10, Z: 70 },
                { X: -158.32768, Y: -10, Z: 70 },
                { X: -158.32768, Y: -10, Z: 90 },
                { X: -158.32768, Y: 10, Z: 90 }
              ]
            },
            {
              id: 44,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 43,
              back: 35,
              vertices: [
                { X: -158.32768, Y: 10, Z: 70 },
                { X: -158.32768, Y: -10, Z: 70 },
                { X: -158.32768, Y: -10, Z: 90 },
                { X: -158.32768, Y: 10, Z: 90 },
                { X: -138.32768, Y: 10, Z: 70 },
                { X: -138.32768, Y: -10, Z: 70 },
                { X: -138.32768, Y: -10, Z: 90 },
                { X: -138.32768, Y: 10, Z: 90 }
              ]
            },
            {
              id: 45,
              top: null,
              bottom: 46,
              left: 51,
              right: 50,
              front: 40,
              back: 49,
              vertices: [
                { X: -198.32768, Y: 10, Z: 90 },
                { X: -198.32768, Y: -10, Z: 90 },
                { X: -198.32768, Y: -10, Z: 70 },
                { X: -198.32768, Y: 10, Z: 70 },
                { X: -218.32768, Y: 10, Z: 90 },
                { X: -218.32768, Y: -10, Z: 90 },
                { X: -218.32768, Y: -10, Z: 70 },
                { X: -218.32768, Y: 10, Z: 70 }
              ]
            },
            {
              id: 46,
              top: null,
              bottom: 54,
              left: null,
              right: null,
              front: 45,
              back: 47,
              vertices: [
                { X: -198.32768, Y: -10, Z: 70 },
                { X: -218.32768, Y: -10, Z: 70 },
                { X: -218.32768, Y: -10, Z: 90 },
                { X: -198.32768, Y: -10, Z: 90 },
                { X: -198.32768, Y: -30, Z: 70 },
                { X: -218.32768, Y: -30, Z: 70 },
                { X: -218.32768, Y: -30, Z: 90 },
                { X: -198.32768, Y: -30, Z: 90 }
              ]
            },
            {
              id: 47,
              top: null,
              bottom: 55,
              left: null,
              right: null,
              front: 46,
              back: 48,
              vertices: [
                { X: -198.32768, Y: -30, Z: 70 },
                { X: -218.32768, Y: -30, Z: 70 },
                { X: -218.32768, Y: -30, Z: 90 },
                { X: -198.32768, Y: -30, Z: 90 },
                { X: -198.32768, Y: -50, Z: 70 },
                { X: -218.32768, Y: -50, Z: 70 },
                { X: -218.32768, Y: -50, Z: 90 },
                { X: -198.32768, Y: -50, Z: 90 }
              ]
            },
            {
              id: 48,
              top: null,
              bottom: null,
              left: 56,
              right: 62,
              front: 63,
              back: 47,
              vertices: [
                { X: -198.32768, Y: -70, Z: 90 },
                { X: -218.32768, Y: -70, Z: 90 },
                { X: -218.32768, Y: -70, Z: 70 },
                { X: -198.32768, Y: -70, Z: 70 },
                { X: -198.32768, Y: -50, Z: 90 },
                { X: -218.32768, Y: -50, Z: 90 },
                { X: -218.32768, Y: -50, Z: 70 },
                { X: -198.32768, Y: -50, Z: 70 }
              ]
            },
            {
              id: 49,
              top: null,
              bottom: 54,
              left: 52,
              right: 53,
              front: 45,
              back: null,
              vertices: [
                { X: -218.32768, Y: 10, Z: 90 },
                { X: -218.32768, Y: -10, Z: 90 },
                { X: -218.32768, Y: -10, Z: 70 },
                { X: -218.32768, Y: 10, Z: 70 },
                { X: -238.32768, Y: 10, Z: 90 },
                { X: -238.32768, Y: -10, Z: 90 },
                { X: -238.32768, Y: -10, Z: 70 },
                { X: -238.32768, Y: 10, Z: 70 }
              ]
            },
            {
              id: 50,
              top: null,
              bottom: null,
              left: 53,
              right: null,
              front: 45,
              back: null,
              vertices: [
                { X: -198.32768, Y: 10, Z: 90 },
                { X: -198.32768, Y: -10, Z: 90 },
                { X: -218.32768, Y: -10, Z: 90 },
                { X: -218.32768, Y: 10, Z: 90 },
                { X: -198.32768, Y: 10, Z: 110 },
                { X: -198.32768, Y: -10, Z: 110 },
                { X: -218.32768, Y: -10, Z: 110 },
                { X: -218.32768, Y: 10, Z: 110 }
              ]
            },
            {
              id: 51,
              top: null,
              bottom: null,
              left: null,
              right: 52,
              front: 45,
              back: null,
              vertices: [
                { X: -218.32768, Y: 10, Z: 70 },
                { X: -218.32768, Y: -10, Z: 70 },
                { X: -198.32768, Y: -10, Z: 70 },
                { X: -198.32768, Y: 10, Z: 70 },
                { X: -218.32768, Y: 10, Z: 50 },
                { X: -218.32768, Y: -10, Z: 50 },
                { X: -198.32768, Y: -10, Z: 50 },
                { X: -198.32768, Y: 10, Z: 50 }
              ]
            },
            {
              id: 52,
              top: null,
              bottom: null,
              left: null,
              right: 49,
              front: 51,
              back: null,
              vertices: [
                { X: -218.32768, Y: 10, Z: 70 },
                { X: -218.32768, Y: -10, Z: 70 },
                { X: -218.32768, Y: -10, Z: 50 },
                { X: -218.32768, Y: 10, Z: 50 },
                { X: -238.32768, Y: 10, Z: 70 },
                { X: -238.32768, Y: -10, Z: 70 },
                { X: -240.14111, Y: -10.311, Z: 61.46101 },
                { X: -240.14111, Y: 9.65216, Z: 61.46101 }
              ]
            },
            {
              id: 53,
              top: null,
              bottom: null,
              left: 49,
              right: null,
              front: 50,
              back: null,
              vertices: [
                { X: -218.32768, Y: 10, Z: 110 },
                { X: -218.32768, Y: -10, Z: 110 },
                { X: -218.32768, Y: -10, Z: 90 },
                { X: -218.32768, Y: 10, Z: 90 },
                { X: -240.10328, Y: 9.65236, Z: 99.2567 },
                { X: -240.10328, Y: -10.292, Z: 99.2567 },
                { X: -238.32768, Y: -10, Z: 90 },
                { X: -238.32768, Y: 10, Z: 90 }
              ]
            },
            {
              id: 54,
              top: 46,
              bottom: null,
              left: null,
              right: null,
              front: 49,
              back: 55,
              vertices: [
                { X: -218.32768, Y: -10, Z: 70 },
                { X: -238.32768, Y: -10, Z: 70 },
                { X: -238.32768, Y: -10, Z: 90 },
                { X: -218.32768, Y: -10, Z: 90 },
                { X: -218.32768, Y: -30, Z: 70 },
                { X: -234.38269, Y: -29.37237, Z: 70 },
                { X: -234.38269, Y: -29.37237, Z: 90 },
                { X: -218.32768, Y: -30, Z: 90 }
              ]
            },
            {
              id: 55,
              top: 47,
              bottom: null,
              left: null,
              right: null,
              front: 54,
              back: null,
              vertices: [
                { X: -218.32768, Y: -30, Z: 70 },
                { X: -234.38269, Y: -29.37237, Z: 70 },
                { X: -234.38269, Y: -29.37237, Z: 90 },
                { X: -218.32768, Y: -30, Z: 90 },
                { X: -218.32768, Y: -50, Z: 70 },
                { X: -221.50169, Y: -47.28684, Z: 70.342 },
                { X: -221.49269, Y: -47.28335, Z: 90.36 },
                { X: -218.32768, Y: -50, Z: 90 }
              ]
            },
            {
              id: 56,
              top: null,
              bottom: null,
              left: 57,
              right: null,
              front: 48,
              back: null,
              vertices: [
                { X: -198.32768, Y: -50, Z: 70 },
                { X: -218.32768, Y: -50, Z: 70 },
                { X: -218.32768, Y: -70, Z: 70 },
                { X: -198.32768, Y: -70, Z: 70 },
                { X: -205, Y: -50, Z: 62.32768 },
                { X: -210, Y: -50, Z: 62.32768 },
                { X: -210, Y: -70, Z: 62.32768 },
                { X: -205, Y: -70, Z: 62.32768 }
              ]
            },
            {
              id: 57,
              top: null,
              bottom: null,
              left: 58,
              right: 56,
              front: 63,
              back: null,
              vertices: [
                { X: -198.32768, Y: -70, Z: 70 },
                { X: -218.32768, Y: -70, Z: 70 },
                { X: -218.32768, Y: -90, Z: 70 },
                { X: -198.32768, Y: -90, Z: 70 },
                { X: -205, Y: -70, Z: 62.32768 },
                { X: -210, Y: -70, Z: 62.32768 },
                { X: -210, Y: -90, Z: 62.32768 },
                { X: -205, Y: -90, Z: 62.32768 }
              ]
            },
            {
              id: 58,
              top: null,
              bottom: null,
              left: null,
              right: 57,
              front: 59,
              back: null,
              vertices: [
                { X: -198.32768, Y: -90, Z: 70 },
                { X: -218.32768, Y: -90, Z: 70 },
                { X: -218.32768, Y: -110, Z: 70 },
                { X: -198.32768, Y: -110, Z: 70 },
                { X: -205, Y: -90, Z: 62.32768 },
                { X: -210, Y: -90, Z: 62.32768 },
                { X: -210, Y: -110, Z: 62.32768 },
                { X: -205, Y: -110, Z: 62.32768 }
              ]
            },
            {
              id: 59,
              top: null,
              bottom: null,
              left: 58,
              right: 60,
              front: 64,
              back: 63,
              vertices: [
                { X: -198.32768, Y: -110, Z: 90 },
                { X: -218.32768, Y: -110, Z: 90 },
                { X: -218.32768, Y: -110, Z: 70 },
                { X: -198.32768, Y: -110, Z: 70 },
                { X: -198.32768, Y: -90, Z: 90 },
                { X: -218.32768, Y: -90, Z: 90 },
                { X: -218.32768, Y: -90, Z: 70 },
                { X: -198.32768, Y: -90, Z: 70 }
              ]
            },
            {
              id: 60,
              top: null,
              bottom: null,
              left: 61,
              right: null,
              front: 59,
              back: null,
              vertices: [
                { X: -198.32768, Y: -110, Z: 90 },
                { X: -218.32768, Y: -110, Z: 90 },
                { X: -218.32768, Y: -90, Z: 90 },
                { X: -198.32768, Y: -90, Z: 90 },
                { X: -205, Y: -110, Z: 97.32768 },
                { X: -210, Y: -110, Z: 97.32768 },
                { X: -210, Y: -90, Z: 97.32768 },
                { X: -205, Y: -90, Z: 97.32768 }
              ]
            },
            {
              id: 61,
              top: null,
              bottom: null,
              left: 62,
              right: 60,
              front: 63,
              back: null,
              vertices: [
                { X: -198.32768, Y: -90, Z: 90 },
                { X: -218.32768, Y: -90, Z: 90 },
                { X: -218.32768, Y: -70, Z: 90 },
                { X: -198.32768, Y: -70, Z: 90 },
                { X: -205, Y: -90, Z: 97.32768 },
                { X: -210, Y: -90, Z: 97.32768 },
                { X: -210, Y: -70, Z: 97.32768 },
                { X: -205, Y: -70, Z: 97.32768 }
              ]
            },
            {
              id: 62,
              top: null,
              bottom: null,
              left: null,
              right: 61,
              front: 48,
              back: null,
              vertices: [
                { X: -198.32768, Y: -70, Z: 90 },
                { X: -218.32768, Y: -70, Z: 90 },
                { X: -218.32768, Y: -50, Z: 90 },
                { X: -198.32768, Y: -50, Z: 90 },
                { X: -205, Y: -70, Z: 97.32768 },
                { X: -210, Y: -70, Z: 97.32768 },
                { X: -210, Y: -50, Z: 97.32768 },
                { X: -205, Y: -50, Z: 97.32768 }
              ]
            },
            {
              id: 63,
              top: null,
              bottom: null,
              left: 57,
              right: 61,
              front: 59,
              back: 48,
              vertices: [
                { X: -198.32768, Y: -90, Z: 90 },
                { X: -218.32768, Y: -90, Z: 90 },
                { X: -218.32768, Y: -90, Z: 70 },
                { X: -198.32768, Y: -90, Z: 70 },
                { X: -198.32768, Y: -70, Z: 90 },
                { X: -218.32768, Y: -70, Z: 90 },
                { X: -218.32768, Y: -70, Z: 70 },
                { X: -198.32768, Y: -70, Z: 70 }
              ]
            },
            {
              id: 64,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 59,
              back: 65,
              vertices: [
                { X: -198.32768, Y: -110, Z: 70 },
                { X: -218.32768, Y: -110, Z: 70 },
                { X: -218.32768, Y: -110, Z: 90 },
                { X: -198.32768, Y: -110, Z: 90 },
                { X: -193.32768, Y: -130, Z: 65 },
                { X: -223.32768, Y: -130, Z: 65 },
                { X: -223.32768, Y: -130, Z: 95 },
                { X: -193.32768, Y: -130, Z: 95 }
              ]
            },
            {
              id: 65,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 64,
              back: 66,
              vertices: [
                { X: -193.32768, Y: -130, Z: 65 },
                { X: -223.32768, Y: -130, Z: 65 },
                { X: -223.32768, Y: -130, Z: 95 },
                { X: -193.32768, Y: -130, Z: 95 },
                { X: -160, Y: -150, Z: 45 },
                { X: -255, Y: -150, Z: 45 },
                { X: -255, Y: -150, Z: 115 },
                { X: -160, Y: -150, Z: 115 }
              ]
            },
            {
              id: 66,
              top: null,
              bottom: 73,
              left: 98,
              right: null,
              front: 65,
              back: 67,
              vertices: [
                { X: -160, Y: -150, Z: 45 },
                { X: -255, Y: -150, Z: 45 },
                { X: -255, Y: -150, Z: 115 },
                { X: -160, Y: -150, Z: 115 },
                { X: -160, Y: -195, Z: 45 },
                { X: -255, Y: -195, Z: 45 },
                { X: -255, Y: -195, Z: 115 },
                { X: -160, Y: -195, Z: 115 }
              ]
            },
            {
              id: 67,
              top: 69,
              bottom: 71,
              left: 68,
              right: 70,
              front: 66,
              back: null,
              vertices: [
                { X: -160, Y: -195, Z: 45 },
                { X: -255, Y: -195, Z: 45 },
                { X: -255, Y: -195, Z: 115 },
                { X: -160, Y: -195, Z: 115 },
                { X: -160, Y: -210, Z: 45 },
                { X: -255, Y: -210, Z: 45 },
                { X: -255, Y: -210, Z: 115 },
                { X: -160, Y: -210, Z: 115 }
              ]
            },
            {
              id: 68,
              top: null,
              bottom: null,
              left: 98,
              right: null,
              front: 67,
              back: 97,
              vertices: [
                { X: -160, Y: -210, Z: 115 },
                { X: -255, Y: -210, Z: 115 },
                { X: -255, Y: -195, Z: 115 },
                { X: -160, Y: -195, Z: 115 },
                { X: -198.32768, Y: -213.32768, Z: 135 },
                { X: -218.32768, Y: -213.32768, Z: 135 },
                { X: -218.32768, Y: -200, Z: 135 },
                { X: -198.32768, Y: -200, Z: 135 }
              ]
            },
            {
              id: 69,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 67,
              back: 106,
              vertices: [
                { X: -160, Y: -195, Z: 45 },
                { X: -160, Y: -210, Z: 45 },
                { X: -160, Y: -210, Z: 115 },
                { X: -160, Y: -195, Z: 115 },
                { X: -140, Y: -193.32768, Z: 70 },
                { X: -140, Y: -213.32768, Z: 70 },
                { X: -140, Y: -213.32768, Z: 90 },
                { X: -140, Y: -193.32768, Z: 90 }
              ]
            },
            {
              id: 70,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 67,
              back: -1,
              vertices: [
                { X: -160, Y: -195, Z: 45 },
                { X: -255, Y: -195, Z: 45 },
                { X: -255, Y: -210, Z: 45 },
                { X: -160, Y: -210, Z: 45 },
                { X: -198.32768, Y: -193.32768, Z: 25 },
                { X: -218.32768, Y: -193.32768, Z: 25 },
                { X: -218.32768, Y: -213.32768, Z: 25 },
                { X: -198.32768, Y: -213.32768, Z: 25 }
              ]
            },
            {
              id: 71,
              top: 73,
              bottom: null,
              left: null,
              right: null,
              front: 67,
              back: null,
              vertices: [
                { X: -255, Y: -195, Z: 115 },
                { X: -255, Y: -210, Z: 115 },
                { X: -255, Y: -210, Z: 45 },
                { X: -255, Y: -195, Z: 45 },
                { X: -274.45606, Y: -194.2597, Z: 90 },
                { X: -275, Y: -213.32768, Z: 90 },
                { X: -275, Y: -213.32768, Z: 70 },
                { X: -274.45606, Y: -194.2597, Z: 70 }
              ]
            },
            {
              id: 72,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 28,
              back: 79,
              vertices: [
                { X: -120.11714, Y: -79.2152, Z: 174.61316 },
                { X: -110.20412, Y: -79.2934, Z: 192.7803 },
                { X: -93.1048, Y: -83.28459, Z: 182.1388 },
                { X: -103.1781, Y: -83.20639, Z: 165.1858 },
                { X: -130.45858, Y: -104.7284, Z: 171.59762 },
                { X: -112.18903, Y: -104.21685, Z: 202.6581 },
                { X: -82.29208, Y: -103.54638, Z: 184.33825 },
                { X: -100.56165, Y: -103.40239, Z: 154.21468 }
              ]
            },
            {
              id: 73,
              top: null,
              bottom: 71,
              left: 103,
              right: 74,
              front: 66,
              back: 150,
              vertices: [
                { X: -255, Y: -150, Z: 115 },
                { X: -255, Y: -195, Z: 115 },
                { X: -255, Y: -195, Z: 45 },
                { X: -255, Y: -150, Z: 45 },
                { X: -275.36181, Y: -174.43353, Z: 90 },
                { X: -274.45606, Y: -194.2597, Z: 90 },
                { X: -274.45606, Y: -194.2597, Z: 70 },
                { X: -275.36181, Y: -174.43353, Z: 70 }
              ]
            },
            {
              id: 74,
              top: 73,
              bottom: 105,
              left: null,
              right: null,
              front: 150,
              back: null,
              vertices: [
                { X: -274.45606, Y: -194.2597, Z: 90 },
                { X: -295.37261, Y: -194.24117, Z: 90 },
                { X: -295.36741, Y: -174.5613, Z: 90 },
                { X: -275.36181, Y: -174.43353, Z: 90 },
                { X: -255, Y: -195, Z: 115 },
                { X: -315.56431, Y: -195.42941, Z: 122.32768 },
                { X: -310.36832, Y: -140.44592, Z: 122.32768 },
                { X: -255, Y: -150, Z: 115 }
              ]
            },
            {
              id: 75,
              top: null,
              bottom: null,
              left: 149,
              right: null,
              front: 77,
              back: null,
              vertices: [
                { X: -175.374, Y: -150.41519, Z: 170.10358 },
                { X: -173.4471, Y: -150.27748, Z: 188.44844 },
                { X: -172.65048, Y: -165.9231, Z: 193.33455 },
                { X: -175.19542, Y: -165.22981, Z: 164.50671 },
                { X: -191.44842, Y: -156.2222, Z: 160.65179 },
                { X: -190.13952, Y: -157.30855, Z: 189.63202 },
                { X: -198.35864, Y: -163.141, Z: 194.65145 },
                { X: -198.32768, Y: -163.32768, Z: 155 }
              ]
            },
            {
              id: 76,
              top: null,
              bottom: null,
              left: null,
              right: 149,
              front: 77,
              back: null,
              vertices: [
                { X: -175.19542, Y: -165.22981, Z: 164.50671 },
                { X: -172.65048, Y: -165.9231, Z: 193.33455 },
                { X: -153.65235, Y: -165.345, Z: 191.32079 },
                { X: -154.20663, Y: -164.15389, Z: 160.7826 },
                { X: -173.1787, Y: -185.26316, Z: 168.8511 },
                { X: -172.44871, Y: -185.9416, Z: 188.3871 },
                { X: -152.39291, Y: -185.63236, Z: 186.27103 },
                { X: -154.61743, Y: -184.146, Z: 166.31743 }
              ]
            },
            {
              id: 77,
              top: null,
              bottom: null,
              left: null,
              right: 75,
              front: 83,
              back: 76,
              vertices: [
                { X: -175.374, Y: -150.41519, Z: 170.10358 },
                { X: -173.4471, Y: -150.27748, Z: 188.44844 },
                { X: -158.27577, Y: -149.68, Z: 189.614 },
                { X: -154.62608, Y: -150.32906, Z: 157.11724 },
                { X: -175.19542, Y: -165.22981, Z: 164.50671 },
                { X: -172.65048, Y: -165.9231, Z: 193.33455 },
                { X: -153.65235, Y: -165.345, Z: 191.32079 },
                { X: -154.20663, Y: -164.15389, Z: 160.7826 }
              ]
            },
            {
              id: 78,
              top: null,
              bottom: 113,
              left: null,
              right: null,
              front: 23,
              back: 88,
              vertices: [
                { X: 122.298, Y: -54.49921, Z: 191.8207 },
                { X: 118.19633, Y: -54.57548, Z: 210.51238 },
                { X: 122.36668, Y: -34.26663, Z: 211.30402 },
                { X: 126.17354, Y: -34.19041, Z: 191.53307 },
                { X: 141.12381, Y: -58.29078, Z: 194.50619 },
                { X: 137.3184, Y: -58.37075, Z: 214.27813 },
                { X: 141.48895, Y: -38.619, Z: 215.6997 },
                { X: 145.29536, Y: -39.6373, Z: 195.29603 }
              ]
            },
            {
              id: 79,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 72,
              back: 80,
              vertices: [
                { X: -130.45858, Y: -104.7284, Z: 171.59762 },
                { X: -112.18903, Y: -104.21685, Z: 202.6581 },
                { X: -82.29208, Y: -103.54638, Z: 184.33825 },
                { X: -100.56165, Y: -103.40239, Z: 154.21468 },
                { X: -154.3059, Y: -128.58789, Z: 157.37189 },
                { X: -112.59074, Y: -127.29312, Z: 230.5894 },
                { X: -56.59321, Y: -124.15095, Z: 198.925 },
                { X: -98.3305, Y: -125.44572, Z: 124.53036 }
              ]
            },
            {
              id: 80,
              top: null,
              bottom: null,
              left: null,
              right: 81,
              front: 79,
              back: null,
              vertices: [
                { X: -154.3059, Y: -128.58789, Z: 157.37189 },
                { X: -112.59074, Y: -127.29312, Z: 230.5894 },
                { X: -56.59321, Y: -124.15095, Z: 198.925 },
                { X: -98.3305, Y: -125.44572, Z: 124.53036 },
                { X: -154.62608, Y: -150.32906, Z: 157.11724 },
                { X: -111.5123, Y: -149.2489, Z: 230.34902 },
                { X: -55.52495, Y: -147.5377, Z: 197.5267 },
                { X: -98.6395, Y: -147.17841, Z: 124.29925 }
              ]
            },
            {
              id: 81,
              top: 83,
              bottom: 82,
              left: null,
              right: null,
              front: 80,
              back: 84,
              vertices: [
                { X: -154.3059, Y: -128.58789, Z: 157.37189 },
                { X: -112.59074, Y: -127.29312, Z: 230.5894 },
                { X: -111.5123, Y: -149.2489, Z: 230.34902 },
                { X: -154.62608, Y: -150.32906, Z: 157.11724 },
                { X: -155.14718, Y: -129.2429, Z: 195.42923 },
                { X: -145.20438, Y: -129.10889, Z: 212.60571 },
                { X: -144.9934, Y: -149.1224, Z: 212.38323 },
                { X: -158.27577, Y: -149.68, Z: 189.614 }
              ]
            },
            {
              id: 82,
              top: null,
              bottom: 84,
              left: null,
              right: null,
              front: 81,
              back: null,
              vertices: [
                { X: -111.5123, Y: -149.2489, Z: 230.34902 },
                { X: -144.9934, Y: -149.1224, Z: 212.38323 },
                { X: -145.20438, Y: -129.10889, Z: 212.60571 },
                { X: -112.59074, Y: -127.29312, Z: 230.5894 },
                { X: -132.5268, Y: -149.13166, Z: 243.34356 },
                { X: -148.41999, Y: -150.48634, Z: 232.10689 },
                { X: -148.6248, Y: -130.47678, Z: 232.11657 },
                { X: -133.64835, Y: -129.11283, Z: 243.54934 }
              ]
            },
            {
              id: 83,
              top: null,
              bottom: 84,
              left: 77,
              right: null,
              front: 81,
              back: null,
              vertices: [
                { X: -154.3059, Y: -128.58789, Z: 157.37189 },
                { X: -155.14718, Y: -129.2429, Z: 195.42923 },
                { X: -158.27577, Y: -149.68, Z: 189.614 },
                { X: -154.62608, Y: -150.32906, Z: 157.11724 },
                { X: -176.12555, Y: -130.3945, Z: 170.32512 },
                { X: -174.57486, Y: -130.26478, Z: 189.328 },
                { X: -173.4471, Y: -150.27748, Z: 188.44844 },
                { X: -175.374, Y: -150.41519, Z: 170.10358 }
              ]
            },
            {
              id: 84,
              top: 83,
              bottom: 82,
              left: null,
              right: null,
              front: 81,
              back: 92,
              vertices: [
                { X: -155.14718, Y: -129.2429, Z: 195.42923 },
                { X: -145.20438, Y: -129.10889, Z: 212.60571 },
                { X: -144.9934, Y: -149.1224, Z: 212.38323 },
                { X: -158.27577, Y: -149.68, Z: 189.614 },
                { X: -174.57486, Y: -130.26478, Z: 189.328 },
                { X: -148.6248, Y: -130.47678, Z: 232.11657 },
                { X: -148.41999, Y: -150.48634, Z: 232.10689 },
                { X: -173.4471, Y: -150.27748, Z: 188.44844 }
              ]
            },
            {
              id: 85,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 42,
              back: 90,
              vertices: [
                { X: 46.49361, Y: -41.51431, Z: 282.3047 },
                { X: 27.39436, Y: -36.2617, Z: 278.2565 },
                { X: 35.36611, Y: -17.39298, Z: 259.35626 },
                { X: 54.49027, Y: -21.19742, Z: 263.12282 },
                { X: 47.30964, Y: -27.28698, Z: 294.23482 },
                { X: 28.2109, Y: -23.46218, Z: 290.46971 },
                { X: 33.59902, Y: -7.20716, Z: 279.39376 },
                { X: 53.424, Y: -11.3196, Z: 283.15887 }
              ]
            },
            {
              id: 86,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 42,
              back: 87,
              vertices: [
                { X: 47.17872, Y: -52.5659, Z: 265.57533 },
                { X: 28.7942, Y: -48.22385, Z: 262.14602 },
                { X: 27.39436, Y: -36.2617, Z: 278.2565 },
                { X: 46.49361, Y: -41.51431, Z: 282.3047 },
                { X: 40.61106, Y: -66.34438, Z: 283.11038 },
                { X: 21.51981, Y: -62.5222, Z: 279.34674 },
                { X: 22.62991, Y: -46.331, Z: 291.50889 },
                { X: 42.6581, Y: -50.15318, Z: 295.27255 }
              ]
            },
            {
              id: 87,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 86,
              back: 119,
              vertices: [
                { X: 40.61106, Y: -66.34438, Z: 283.11038 },
                { X: 21.51981, Y: -62.5222, Z: 279.34674 },
                { X: 22.62991, Y: -46.331, Z: 291.50889 },
                { X: 42.6581, Y: -50.15318, Z: 295.27255 },
                { X: 39.63417, Y: -75.42091, Z: 302.46168 },
                { X: 20.20759, Y: -72.42588, Z: 303.49081 },
                { X: 24.17691, Y: -48.19412, Z: 310.36867 },
                { X: 43.60347, Y: -51.18914, Z: 309.33952 }
              ]
            },
            {
              id: 88,
              top: null,
              bottom: 112,
              left: null,
              right: null,
              front: 78,
              back: 89,
              vertices: [
                { X: 141.12381, Y: -58.29078, Z: 194.50619 },
                { X: 137.3184, Y: -58.37075, Z: 214.27813 },
                { X: 141.48895, Y: -38.619, Z: 215.6997 },
                { X: 145.29536, Y: -39.6373, Z: 195.29603 },
                { X: 160.24656, Y: -62.8676, Z: 198.27068 },
                { X: 156.44022, Y: -62.16555, Z: 218.4358 },
                { X: 160.61117, Y: -43.51206, Z: 218.49178 },
                { X: 164.41751, Y: -43.43326, Z: 199.6351 }
              ]
            },
            {
              id: 89,
              top: 88,
              bottom: null,
              left: null,
              right: null,
              front: 111,
              back: null,
              vertices: [
                { X: 156.44022, Y: -62.16555, Z: 218.4358 },
                { X: 175.56228, Y: -67.61607, Z: 221.46558 },
                { X: 180.7827, Y: -47.30722, Z: 222.25702 },
                { X: 160.61117, Y: -43.51206, Z: 218.49178 },
                { X: 160.24656, Y: -62.8676, Z: 198.27068 },
                { X: 164.48307, Y: -63.8864, Z: 199.54415 },
                { X: 168.65298, Y: -44.43065, Z: 200.33282 },
                { X: 164.41751, Y: -43.43326, Z: 199.6351 }
              ]
            },
            {
              id: 90,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 85,
              back: 107,
              vertices: [
                { X: 47.30964, Y: -27.28698, Z: 294.23482 },
                { X: 28.2109, Y: -23.46218, Z: 290.46971 },
                { X: 33.59902, Y: -7.20716, Z: 279.39376 },
                { X: 53.424, Y: -11.3196, Z: 283.15887 },
                { X: 46.65419, Y: -15.8698, Z: 310.35787 },
                { X: 27.55627, Y: -11.26369, Z: 306.59164 },
                { X: 33.29097, Y: 5.815, Z: 295.51618 },
                { X: 52.38889, Y: 0.4868, Z: 299.2824 }
              ]
            },
            {
              id: 91,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 143,
              back: 144,
              vertices: [
                { X: -238.3682, Y: -161.54196, Z: 152.47616 },
                { X: -238.32768, Y: -163.32768, Z: 185 },
                { X: -258.32768, Y: -163.32768, Z: 185 },
                { X: -258.3682, Y: -161.54196, Z: 152.47616 },
                { X: -237.19416, Y: -154.48329, Z: 156.8402 },
                { X: -237.19416, Y: -155.37624, Z: 182.17393 },
                { X: -259.17034, Y: -155.37624, Z: 182.17393 },
                { X: -259.17034, Y: -154.48329, Z: 156.8402 }
              ]
            },
            {
              id: 92,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 84,
              back: 93,
              vertices: [
                { X: -174.57486, Y: -130.26478, Z: 189.328 },
                { X: -148.6248, Y: -130.47678, Z: 232.11657 },
                { X: -148.41999, Y: -150.48634, Z: 232.10689 },
                { X: -173.4471, Y: -150.27748, Z: 188.44844 },
                { X: -184.6258, Y: -131.5691, Z: 195.20109 },
                { X: -159.20544, Y: -130.12574, Z: 238.31437 },
                { X: -158.7766, Y: -150.13854, Z: 238.10417 },
                { X: -184.59016, Y: -151.5819, Z: 194.64625 }
              ]
            },
            {
              id: 93,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 92,
              back: 94,
              vertices: [
                { X: -184.6258, Y: -131.5691, Z: 195.20109 },
                { X: -159.20544, Y: -130.12574, Z: 238.31437 },
                { X: -158.7766, Y: -150.13854, Z: 238.10417 },
                { X: -184.59016, Y: -151.5819, Z: 194.64625 },
                { X: -219.38909, Y: -132.10162, Z: 215.30977 },
                { X: -194.53191, Y: -132.31412, Z: 258.42298 },
                { X: -193.40413, Y: -152.32702, Z: 258.21299 },
                { X: -218.26131, Y: -152.11452, Z: 215.9978 }
              ]
            },
            {
              id: 94,
              top: 96,
              bottom: null,
              left: null,
              right: null,
              front: 93,
              back: 95,
              vertices: [
                { X: -219.38909, Y: -132.10162, Z: 215.30977 },
                { X: -194.53191, Y: -132.31412, Z: 258.42298 },
                { X: -193.40413, Y: -152.32702, Z: 258.21299 },
                { X: -218.26131, Y: -152.11452, Z: 215.9978 },
                { X: -236.22461, Y: -133.19588, Z: 225.36392 },
                { X: -211.36761, Y: -133.40868, Z: 268.47744 },
                { X: -210.23965, Y: -153.42108, Z: 268.26764 },
                { X: -235.9665, Y: -153.20828, Z: 225.15412 }
              ]
            },
            {
              id: 95,
              top: 100,
              bottom: null,
              left: null,
              right: null,
              front: 94,
              back: null,
              vertices: [
                { X: -236.22461, Y: -133.19588, Z: 225.36392 },
                { X: -211.36761, Y: -133.40868, Z: 268.47744 },
                { X: -210.23965, Y: -153.42108, Z: 268.26764 },
                { X: -235.9665, Y: -153.20828, Z: 225.15412 },
                { X: -271.55111, Y: -135.38483, Z: 245.47249 },
                { X: -245.3858, Y: -135.5973, Z: 288.58607 },
                { X: -245.56618, Y: -155.6098, Z: 288.37648 },
                { X: -270.42336, Y: -155.39712, Z: 245.26309 }
              ]
            },
            {
              id: 96,
              top: null,
              bottom: 100,
              left: null,
              right: null,
              front: 94,
              back: 146,
              vertices: [
                { X: -219.38909, Y: -132.10162, Z: 215.30977 },
                { X: -236.22461, Y: -133.19588, Z: 225.36392 },
                { X: -235.9665, Y: -153.20828, Z: 225.15412 },
                { X: -218.26131, Y: -152.11452, Z: 215.9978 },
                { X: -229.33183, Y: -132.1659, Z: 198.13301 },
                { X: -246.16735, Y: -133.11075, Z: 208.18741 },
                { X: -245.3954, Y: -153.12327, Z: 207.63272 },
                { X: -228.20407, Y: -152.2899, Z: 197.57877 }
              ]
            },
            {
              id: 97,
              top: null,
              bottom: null,
              left: 99,
              right: null,
              front: 68,
              back: null,
              vertices: [
                { X: -198.32768, Y: -213.32768, Z: 135 },
                { X: -218.32768, Y: -213.32768, Z: 135 },
                { X: -218.32768, Y: -200, Z: 135 },
                { X: -198.32768, Y: -200, Z: 135 },
                { X: -198.32768, Y: -213.32768, Z: 155 },
                { X: -218.32768, Y: -213.32768, Z: 155 },
                { X: -218.32768, Y: -183.32768, Z: 155 },
                { X: -198.32768, Y: -183.32768, Z: 155 }
              ]
            },
            {
              id: 98,
              top: null,
              bottom: null,
              left: null,
              right: 68,
              front: 66,
              back: 99,
              vertices: [
                { X: -160, Y: -195, Z: 115 },
                { X: -255, Y: -195, Z: 115 },
                { X: -255, Y: -150, Z: 115 },
                { X: -160, Y: -150, Z: 115 },
                { X: -198.32768, Y: -200, Z: 135 },
                { X: -218.32768, Y: -200, Z: 135 },
                { X: -218.32768, Y: -145, Z: 135 },
                { X: -198.32768, Y: -145, Z: 135 }
              ]
            },
            {
              id: 99,
              top: null,
              bottom: null,
              left: 97,
              right: null,
              front: 101,
              back: 98,
              vertices: [
                { X: -198.32768, Y: -163.32768, Z: 155 },
                { X: -218.32768, Y: -163.32768, Z: 155 },
                { X: -218.32768, Y: -183.32768, Z: 155 },
                { X: -198.32768, Y: -183.32768, Z: 155 },
                { X: -198.32768, Y: -145, Z: 135 },
                { X: -218.32768, Y: -145, Z: 135 },
                { X: -218.32768, Y: -200, Z: 135 },
                { X: -198.32768, Y: -200, Z: 135 }
              ]
            },
            {
              id: 100,
              top: 95,
              bottom: null,
              left: null,
              right: null,
              front: 96,
              back: 222,
              vertices: [
                { X: -235.9665, Y: -153.20828, Z: 225.15412 },
                { X: -245.3954, Y: -153.12327, Z: 207.63272 },
                { X: -246.16735, Y: -133.11075, Z: 208.18741 },
                { X: -236.22461, Y: -133.19588, Z: 225.36392 },
                { X: -270.42336, Y: -155.39712, Z: 245.26309 },
                { X: -280.36622, Y: -155.31192, Z: 228.8671 },
                { X: -281.49397, Y: -135.29964, Z: 228.29611 },
                { X: -271.55111, Y: -135.38483, Z: 245.47249 }
              ]
            },
            {
              id: 101,
              top: 149,
              bottom: 148,
              left: null,
              right: null,
              front: 99,
              back: -1,
              vertices: [
                { X: -198.32768, Y: -183.32768, Z: 155 },
                { X: -218.32768, Y: -183.32768, Z: 155 },
                { X: -218.32768, Y: -163.32768, Z: 155 },
                { X: -198.32768, Y: -163.32768, Z: 155 },
                { X: -198.32768, Y: -183.32768, Z: 195 },
                { X: -218.32768, Y: -183.32768, Z: 195 },
                { X: -218.32768, Y: -163.32768, Z: 195 },
                { X: -198.35864, Y: -163.141, Z: 194.65145 }
              ]
            },
            {
              id: 102,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 105,
              back: null,
              vertices: [
                { X: -315.56431, Y: -195.42941, Z: 37.32768 },
                { X: -310.36832, Y: -140.44592, Z: 37.32768 },
                { X: -310.36832, Y: -140.44592, Z: 122.32768 },
                { X: -315.56431, Y: -195.42941, Z: 122.32768 },
                { X: -354.759, Y: -191.13969, Z: 37.32768 },
                { X: -350.48079, Y: -137.65328, Z: 37.32768 },
                { X: -350.48079, Y: -137.65328, Z: 122.32768 },
                { X: -354.759, Y: -191.13969, Z: 122.32768 }
              ]
            },
            {
              id: 103,
              top: 73,
              bottom: 105,
              left: null,
              right: null,
              front: 150,
              back: null,
              vertices: [
                { X: -275.36181, Y: -174.43353, Z: 70 },
                { X: -295.36741, Y: -174.5613, Z: 70 },
                { X: -295.37261, Y: -194.24117, Z: 70 },
                { X: -274.45606, Y: -194.2597, Z: 70 },
                { X: -255, Y: -150, Z: 45 },
                { X: -310.36832, Y: -140.44592, Z: 37.32768 },
                { X: -315.56431, Y: -195.42941, Z: 37.32768 },
                { X: -255, Y: -195, Z: 45 }
              ]
            },
            {
              id: 104,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 220,
              back: null,
              vertices: [
                { X: -364.1569, Y: -158.3221, Z: 202.1673 },
                { X: -354.725, Y: -158.40627, Z: 219.34358 },
                { X: -354.59889, Y: -178.41895, Z: 219.13358 },
                { X: -364.54228, Y: -178.33478, Z: 201.61306 },
                { X: -382.50692, Y: -159.41768, Z: 212.2216 },
                { X: -372.56392, Y: -159.50168, Z: 229.39808 },
                { X: -371.43456, Y: -179.51408, Z: 229.18788 },
                { X: -381.37756, Y: -179.43008, Z: 212.114 }
              ]
            },
            {
              id: 105,
              top: null,
              bottom: null,
              left: 74,
              right: 103,
              front: 150,
              back: 102,
              vertices: [
                { X: -295.37261, Y: -194.24117, Z: 70 },
                { X: -295.36741, Y: -174.5613, Z: 70 },
                { X: -295.36741, Y: -174.5613, Z: 90 },
                { X: -295.37261, Y: -194.24117, Z: 90 },
                { X: -315.56431, Y: -195.42941, Z: 37.32768 },
                { X: -310.36832, Y: -140.44592, Z: 37.32768 },
                { X: -310.36832, Y: -140.44592, Z: 122.32768 },
                { X: -315.56431, Y: -195.42941, Z: 122.32768 }
              ]
            },
            {
              id: 106,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 69,
              back: 147,
              vertices: [
                { X: -140, Y: -193.32768, Z: 70 },
                { X: -140, Y: -213.32768, Z: 70 },
                { X: -140, Y: -213.32768, Z: 90 },
                { X: -140, Y: -193.32768, Z: 90 },
                { X: -120, Y: -193.32768, Z: 70 },
                { X: -120, Y: -213.32768, Z: 70 },
                { X: -120, Y: -213.32768, Z: 90 },
                { X: -120, Y: -193.32768, Z: 90 }
              ]
            },
            {
              id: 107,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 90,
              back: 108,
              vertices: [
                { X: 46.65419, Y: -15.8698, Z: 310.35787 },
                { X: 27.55627, Y: -11.26369, Z: 306.59164 },
                { X: 33.29097, Y: 5.815, Z: 295.51618 },
                { X: 52.38889, Y: 0.4868, Z: 299.2824 },
                { X: 45.671, Y: -10.28294, Z: 326.43579 },
                { X: 25.63421, Y: -6.45772, Z: 323.1729 },
                { X: 31.11672, Y: 13.1517, Z: 317.5883 },
                { X: 50.20496, Y: 8.49573, Z: 320.47734 }
              ]
            },
            {
              id: 108,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 107,
              back: 109,
              vertices: [
                { X: 45.671, Y: -10.28294, Z: 326.43579 },
                { X: 25.63421, Y: -6.45772, Z: 323.1729 },
                { X: 31.11672, Y: 13.1517, Z: 317.5883 },
                { X: 50.20496, Y: 8.49573, Z: 320.47734 },
                { X: 42.19121, Y: -8.59739, Z: 344.19212 },
                { X: 23.10679, Y: -3.11544, Z: 340.42586 },
                { X: 27.56983, Y: 16.28904, Z: 338.31206 },
                { X: 46.65426, Y: 12.11564, Z: 342.783 }
              ]
            },
            {
              id: 109,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 108,
              back: 110,
              vertices: [
                { X: 42.19121, Y: -8.59739, Z: 344.19212 },
                { X: 23.10679, Y: -3.11544, Z: 340.42586 },
                { X: 27.56983, Y: 16.28904, Z: 338.31206 },
                { X: 46.65426, Y: 12.11564, Z: 342.783 },
                { X: 39.15121, Y: -5.56389, Z: 363.52475 },
                { X: 20.6722, Y: 0.8206, Z: 360.10232 },
                { X: 24.53189, Y: 19.25515, Z: 357.64415 },
                { X: 43.61587, Y: 15.8161, Z: 361.41122 }
              ]
            },
            {
              id: 110,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 109,
              back: 131,
              vertices: [
                { X: 39.15121, Y: -5.56389, Z: 363.52475 },
                { X: 20.6722, Y: 0.8206, Z: 360.10232 },
                { X: 24.53189, Y: 19.25515, Z: 357.64415 },
                { X: 43.61587, Y: 15.8161, Z: 361.41122 },
                { X: 36.11223, Y: -2.53019, Z: 383.20176 },
                { X: 17.2824, Y: 3.4836, Z: 379.43469 },
                { X: 21.49291, Y: 22.22145, Z: 377.32116 },
                { X: 40.57689, Y: 18.4791, Z: 381.8823 }
              ]
            },
            {
              id: 111,
              top: 112,
              bottom: 208,
              left: null,
              right: null,
              front: 89,
              back: 115,
              vertices: [
                { X: 160.61117, Y: -43.51206, Z: 218.49178 },
                { X: 180.7827, Y: -47.30722, Z: 222.25702 },
                { X: 175.56228, Y: -67.61607, Z: 221.46558 },
                { X: 156.44022, Y: -62.16555, Z: 218.4358 },
                { X: 157.14986, Y: -43.59189, Z: 238.26408 },
                { X: 176.27146, Y: -47.38718, Z: 242.2946 },
                { X: 172.10113, Y: -66.4058, Z: 241.23763 },
                { X: 152.63407, Y: -62.24559, Z: 237.47205 }
              ]
            },
            {
              id: 112,
              top: 88,
              bottom: 114,
              left: null,
              right: null,
              front: 111,
              back: 113,
              vertices: [
                { X: 160.61117, Y: -43.51206, Z: 218.49178 },
                { X: 157.14986, Y: -43.59189, Z: 238.26408 },
                { X: 152.63407, Y: -62.24559, Z: 237.47205 },
                { X: 156.44022, Y: -62.16555, Z: 218.4358 },
                { X: 141.48895, Y: -38.619, Z: 215.6997 },
                { X: 138.2745, Y: -38.14129, Z: 234.49803 },
                { X: 133.51226, Y: -58.45015, Z: 234.5084 },
                { X: 137.3184, Y: -58.37075, Z: 214.27813 }
              ]
            },
            {
              id: 113,
              top: 78,
              bottom: 118,
              left: null,
              right: null,
              front: 112,
              back: null,
              vertices: [
                { X: 141.48895, Y: -38.619, Z: 215.6997 },
                { X: 138.2745, Y: -38.14129, Z: 234.49803 },
                { X: 133.51226, Y: -58.45015, Z: 234.5084 },
                { X: 137.3184, Y: -58.37075, Z: 214.27813 },
                { X: 122.36668, Y: -34.26663, Z: 211.30402 },
                { X: 118.56074, Y: -34.34642, Z: 231.7652 },
                { X: 114.39039, Y: -54.65528, Z: 230.28489 },
                { X: 118.19633, Y: -54.57548, Z: 210.51238 }
              ]
            },
            {
              id: 114,
              top: 115,
              bottom: 118,
              left: null,
              right: null,
              front: 112,
              back: null,
              vertices: [
                { X: 152.63407, Y: -62.24559, Z: 237.47205 },
                { X: 133.51226, Y: -58.45015, Z: 234.5084 },
                { X: 138.2745, Y: -38.14129, Z: 234.49803 },
                { X: 157.14986, Y: -43.59189, Z: 238.26408 },
                { X: 149.17311, Y: -62.32521, Z: 257.24453 },
                { X: 130.5121, Y: -58.53011, Z: 253.47863 },
                { X: 134.22154, Y: -38.22116, Z: 254.27026 },
                { X: 153.34343, Y: -42.1626, Z: 258.3617 }
              ]
            },
            {
              id: 115,
              top: 111,
              bottom: 116,
              left: null,
              right: null,
              front: 114,
              back: null,
              vertices: [
                { X: 152.63407, Y: -62.24559, Z: 237.47205 },
                { X: 149.17311, Y: -62.32521, Z: 257.24453 },
                { X: 153.34343, Y: -42.1626, Z: 258.3617 },
                { X: 157.14986, Y: -43.59189, Z: 238.26408 },
                { X: 172.10113, Y: -66.4058, Z: 241.23763 },
                { X: 168.29522, Y: -66.12017, Z: 261.1035 },
                { X: 172.46555, Y: -47.46678, Z: 261.45755 },
                { X: 176.27146, Y: -47.38718, Z: 242.2946 }
              ]
            },
            {
              id: 116,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 115,
              back: 117,
              vertices: [
                { X: 153.34343, Y: -42.1626, Z: 258.3617 },
                { X: 172.46555, Y: -47.46678, Z: 261.45755 },
                { X: 168.29522, Y: -66.12017, Z: 261.1035 },
                { X: 149.17311, Y: -62.32521, Z: 257.24453 },
                { X: 149.53763, Y: -42.9593, Z: 277.46464 },
                { X: 169.436, Y: -47.54639, Z: 281.23035 },
                { X: 164.4892, Y: -66.19978, Z: 280.43851 },
                { X: 145.3671, Y: -62.40468, Z: 277.1745 }
              ]
            },
            {
              id: 117,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 116,
              back: 120,
              vertices: [
                { X: 149.53763, Y: -42.9593, Z: 277.46464 },
                { X: 169.436, Y: -47.54639, Z: 281.23035 },
                { X: 164.4892, Y: -66.19978, Z: 280.43851 },
                { X: 145.3671, Y: -62.40468, Z: 277.1745 },
                { X: 108.52972, Y: -29.50674, Z: 290.16284 },
                { X: 204.48573, Y: -50.13976, Z: 308.30115 },
                { X: 198.23033, Y: -80.60311, Z: 307.28571 },
                { X: 102.27431, Y: -58.31473, Z: 289.14741 }
              ]
            },
            {
              id: 118,
              top: 113,
              bottom: null,
              left: null,
              right: null,
              front: 114,
              back: null,
              vertices: [
                { X: 138.2745, Y: -38.14129, Z: 234.49803 },
                { X: 134.22154, Y: -38.22116, Z: 254.27026 },
                { X: 130.5121, Y: -58.53011, Z: 253.47863 },
                { X: 133.51226, Y: -58.45015, Z: 234.5084 },
                { X: 118.56074, Y: -34.34642, Z: 231.7652 },
                { X: 121.258, Y: -35.54249, Z: 235.41302 },
                { X: 117.9146, Y: -54.20615, Z: 235.54 },
                { X: 114.39039, Y: -54.65528, Z: 230.28489 }
              ]
            },
            {
              id: 119,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 87,
              back: 121,
              vertices: [
                { X: 39.63417, Y: -75.42091, Z: 302.46168 },
                { X: 20.20759, Y: -72.42588, Z: 303.49081 },
                { X: 24.17691, Y: -48.19412, Z: 310.36867 },
                { X: 43.60347, Y: -51.18914, Z: 309.33952 },
                { X: 41.3751, Y: -73.50065, Z: 326.15953 },
                { X: 21.55266, Y: -70.5171, Z: 327.19392 },
                { X: 24.55404, Y: -50.3594, Z: 326.62148 },
                { X: 44.37646, Y: -53.34294, Z: 325.58709 }
              ]
            },
            {
              id: 120,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 117,
              back: 123,
              vertices: [
                { X: 108.52972, Y: -29.50674, Z: 290.16284 },
                { X: 204.48573, Y: -50.13976, Z: 308.30115 },
                { X: 198.23033, Y: -80.60311, Z: 307.28571 },
                { X: 102.27431, Y: -58.31473, Z: 289.14741 },
                { X: 98.10533, Y: -28.7804, Z: 346.49283 },
                { X: 194.6048, Y: -50.36724, Z: 364.63111 },
                { X: 187.46101, Y: -79.17557, Z: 363.61568 },
                { X: 91.50585, Y: -58.54172, Z: 345.47741 }
              ]
            },
            {
              id: 121,
              top: null,
              bottom: null,
              left: null,
              right: 234,
              front: 119,
              back: 122,
              vertices: [
                { X: 41.3751, Y: -73.50065, Z: 326.15953 },
                { X: 21.55266, Y: -70.5171, Z: 327.19392 },
                { X: 24.55404, Y: -50.3594, Z: 326.62148 },
                { X: 44.37646, Y: -53.34294, Z: 325.58709 },
                { X: 38.38776, Y: -76.47862, Z: 353.25378 },
                { X: 18.61182, Y: -73.45538, Z: 351.32309 },
                { X: 21.41754, Y: -53.21085, Z: 354.4417 },
                { X: 41.19346, Y: -56.23407, Z: 355.63025 }
              ]
            },
            {
              id: 122,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 121,
              back: 132,
              vertices: [
                { X: 38.38776, Y: -76.47862, Z: 353.25378 },
                { X: 18.61182, Y: -73.45538, Z: 351.32309 },
                { X: 21.41754, Y: -53.21085, Z: 354.4417 },
                { X: 41.19346, Y: -56.23407, Z: 355.63025 },
                { X: 28.22909, Y: -73.34435, Z: 367.59365 },
                { X: 10.6708, Y: -70.26816, Z: 360.22135 },
                { X: 12.63832, Y: -50.11042, Z: 360.60984 },
                { X: 31.14496, Y: -53.1866, Z: 368.32677 }
              ]
            },
            {
              id: 123,
              top: 125,
              bottom: 134,
              left: null,
              right: null,
              front: 120,
              back: 124,
              vertices: [
                { X: 98.10533, Y: -28.7804, Z: 346.49283 },
                { X: 194.6048, Y: -50.36724, Z: 364.63111 },
                { X: 187.46101, Y: -79.17557, Z: 363.61568 },
                { X: 91.50585, Y: -58.54172, Z: 345.47741 },
                { X: 93.65141, Y: -28.16631, Z: 368.56482 },
                { X: 189.60661, Y: -50.45674, Z: 387.4756 },
                { X: 183.35217, Y: -79.26522, Z: 386.3185 },
                { X: 87.39698, Y: -58.63015, Z: 367.54912 }
              ]
            },
            {
              id: 124,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 123,
              back: 135,
              vertices: [
                { X: 93.65141, Y: -28.16631, Z: 368.56482 },
                { X: 189.60661, Y: -50.45674, Z: 387.4756 },
                { X: 183.35217, Y: -79.26522, Z: 386.3185 },
                { X: 87.39698, Y: -58.63015, Z: 367.54912 },
                { X: 82.27543, Y: -28.41214, Z: 430.18245 },
                { X: 178.23038, Y: -49.4826, Z: 448.3205 },
                { X: 171.63165, Y: -79.51232, Z: 447.3048 },
                { X: 76.2135, Y: -57.22084, Z: 429.16675 }
              ]
            },
            {
              id: 125,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 123,
              back: 126,
              vertices: [
                { X: 98.10533, Y: -28.7804, Z: 346.49283 },
                { X: 93.65141, Y: -28.16631, Z: 368.56482 },
                { X: 87.39698, Y: -58.63015, Z: 367.54912 },
                { X: 91.50585, Y: -58.54172, Z: 345.47741 },
                { X: 79.39055, Y: -29.8169, Z: 344.34832 },
                { X: 75.58479, Y: -29.16069, Z: 364.12132 },
                { X: 71.41523, Y: -49.46929, Z: 363.32928 },
                { X: 75.22099, Y: -49.39029, Z: 343.55628 }
              ]
            },
            {
              id: 126,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 125,
              back: 127,
              vertices: [
                { X: 79.39055, Y: -29.8169, Z: 344.34832 },
                { X: 75.58479, Y: -29.16069, Z: 364.12132 },
                { X: 71.41523, Y: -49.46929, Z: 363.32928 },
                { X: 75.22099, Y: -49.39029, Z: 343.55628 },
                { X: 56.3999, Y: -25.1452, Z: 343.11222 },
                { X: 55.15744, Y: -26.55751, Z: 363.9349 },
                { X: 51.61194, Y: -45.9165, Z: 362.41852 },
                { X: 52.49449, Y: -45.33472, Z: 342.43725 }
              ]
            },
            {
              id: 127,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 126,
              back: 128,
              vertices: [
                { X: 56.3999, Y: -25.1452, Z: 343.11222 },
                { X: 55.15744, Y: -26.55751, Z: 363.9349 },
                { X: 51.61194, Y: -45.9165, Z: 362.41852 },
                { X: 52.49449, Y: -45.33472, Z: 342.43725 },
                { X: 35.698, Y: -22.45953, Z: 345.2728 },
                { X: 37.581, Y: -23.55499, Z: 365.18234 },
                { X: 33.51056, Y: -42.912, Z: 364.50776 },
                { X: 31.45945, Y: -42.65111, Z: 344.59821 }
              ]
            },
            {
              id: 128,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 127,
              back: 129,
              vertices: [
                { X: 35.698, Y: -22.45953, Z: 345.2728 },
                { X: 37.581, Y: -23.55499, Z: 365.18234 },
                { X: 33.51056, Y: -42.912, Z: 364.50776 },
                { X: 31.45945, Y: -42.65111, Z: 344.59821 },
                { X: 15.26825, Y: -19.61609, Z: 347.39698 },
                { X: 17.31975, Y: -19.5621, Z: 367.30638 },
                { X: 14.11512, Y: -39.24809, Z: 366.63331 },
                { X: 12.6362, Y: -38.15261, Z: 347.6854 }
              ]
            },
            {
              id: 129,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 128,
              back: 130,
              vertices: [
                { X: 15.26825, Y: -19.61609, Z: 347.39698 },
                { X: 17.31975, Y: -19.5621, Z: 367.30638 },
                { X: 14.11512, Y: -39.24809, Z: 366.63331 },
                { X: 12.6362, Y: -38.15261, Z: 347.6854 },
                { X: -1.49264, Y: -13.8894, Z: 345.48473 },
                { X: -2.6641, Y: -13.31998, Z: 365.4263 },
                { X: -9.6248, Y: -32.31085, Z: 365.31215 },
                { X: -7.39564, Y: -32.7979, Z: 345.37059 }
              ]
            },
            {
              id: 130,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 129,
              back: 176,
              vertices: [
                { X: -1.49264, Y: -13.8894, Z: 345.48473 },
                { X: -2.6641, Y: -13.31998, Z: 365.4263 },
                { X: -9.6248, Y: -32.31085, Z: 365.31215 },
                { X: -7.39564, Y: -32.7979, Z: 345.37059 },
                { X: -20.53346, Y: -7.18362, Z: 344.401 },
                { X: -21.10778, Y: -7.41481, Z: 363.63707 },
                { X: -27.738, Y: -26.40686, Z: 363.52356 },
                { X: -26.43306, Y: -26.17567, Z: 343.58196 }
              ]
            },
            {
              id: 131,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 110,
              back: 133,
              vertices: [
                { X: 36.11223, Y: -2.53019, Z: 383.20176 },
                { X: 17.2824, Y: 3.4836, Z: 379.43469 },
                { X: 21.49291, Y: 22.22145, Z: 377.32116 },
                { X: 40.57689, Y: 18.4791, Z: 381.8823 },
                { X: 56.8524, Y: -7.16347, Z: 410.46639 },
                { X: -15.52486, Y: 8.31221, Z: 389.56571 },
                { X: -9.32101, Y: 32.46556, Z: 388.22724 },
                { X: 61.53675, Y: 17.3168, Z: 409.12795 }
              ]
            },
            {
              id: 132,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 122,
              back: 140,
              vertices: [
                { X: 28.22909, Y: -73.34435, Z: 367.59365 },
                { X: 10.6708, Y: -70.26816, Z: 360.22135 },
                { X: 12.63832, Y: -50.11042, Z: 360.60984 },
                { X: 31.14496, Y: -53.1866, Z: 368.32677 },
                { X: 21.28021, Y: -72.56543, Z: 382.3878 },
                { X: 2.42805, Y: -68.60819, Z: 376.32414 },
                { X: 7.14465, Y: -48.23679, Z: 375.1841 },
                { X: 25.65217, Y: -52.19403, Z: 380.5541 }
              ]
            },
            {
              id: 133,
              top: null,
              bottom: null,
              left: null,
              right: 136,
              front: 131,
              back: 170,
              vertices: [
                { X: 56.8524, Y: -7.16347, Z: 410.46639 },
                { X: -15.52486, Y: 8.31221, Z: 389.56571 },
                { X: -9.32101, Y: 32.46556, Z: 388.22724 },
                { X: 61.53675, Y: 17.3168, Z: 409.12795 },
                { X: 46.29926, Y: -3.50313, Z: 446.40466 },
                { X: -24.8561, Y: 12.65032, Z: 425.50067 },
                { X: -19.54092, Y: 37.14741, Z: 424.16371 },
                { X: 52.992, Y: 22.23, Z: 445.677 }
              ]
            },
            {
              id: 134,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 123,
              back: 248,
              vertices: [
                { X: 187.46101, Y: -79.17557, Z: 363.61568 },
                { X: 183.35217, Y: -79.26522, Z: 386.3185 },
                { X: 189.60661, Y: -50.45674, Z: 387.4756 },
                { X: 194.6048, Y: -50.36724, Z: 364.63111 },
                { X: 206.18684, Y: -78.11124, Z: 368.46326 },
                { X: 202.38108, Y: -78.19024, Z: 388.23626 },
                { X: 206.55064, Y: -59.537, Z: 389.283 },
                { X: 210.3564, Y: -59.458, Z: 369.2553 }
              ]
            },
            {
              id: 135,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 124,
              back: 142,
              vertices: [
                { X: 82.27543, Y: -28.41214, Z: 430.18245 },
                { X: 178.23038, Y: -49.4826, Z: 448.3205 },
                { X: 171.63165, Y: -79.51232, Z: 447.3048 },
                { X: 76.2135, Y: -57.22084, Z: 429.16675 },
                { X: 116.1582, Y: -41.16093, Z: 457.2996 },
                { X: 135.13838, Y: -46.61253, Z: 460.45088 },
                { X: 130.62438, Y: -65.26577, Z: 460.328 },
                { X: 111.50182, Y: -61.46953, Z: 456.23772 }
              ]
            },
            {
              id: 136,
              top: null,
              bottom: null,
              left: 141,
              right: null,
              front: 133,
              back: 137,
              vertices: [
                { X: 56.8524, Y: -7.16347, Z: 410.46639 },
                { X: -15.52486, Y: 8.31221, Z: 389.56571 },
                { X: -24.8561, Y: 12.65032, Z: 425.50067 },
                { X: 46.29926, Y: -3.50313, Z: 446.40466 },
                { X: 23.34748, Y: -20.29488, Z: 412.42693 },
                { X: 4.49572, Y: -16.33744, Z: 407.5533 },
                { X: -1.38912, Y: -14.60712, Z: 426.16729 },
                { X: 18.24088, Y: -18.56456, Z: 431.53889 }
              ]
            },
            {
              id: 137,
              top: null,
              bottom: null,
              left: 141,
              right: null,
              front: 136,
              back: 138,
              vertices: [
                { X: 23.34748, Y: -20.29488, Z: 412.42693 },
                { X: 4.49572, Y: -16.33744, Z: 407.5533 },
                { X: -1.38912, Y: -14.60712, Z: 426.16729 },
                { X: 18.24088, Y: -18.56456, Z: 431.53889 },
                { X: 17.46291, Y: -45.44089, Z: 414.1301 },
                { X: -2.61095, Y: -41.48365, Z: 408.41466 },
                { X: -5.1736, Y: -33.32306, Z: 427.30803 },
                { X: 13.52468, Y: -37.2803, Z: 433.2347 }
              ]
            },
            {
              id: 138,
              top: null,
              bottom: null,
              left: 141,
              right: null,
              front: 137,
              back: 139,
              vertices: [
                { X: 17.46291, Y: -45.44089, Z: 414.1301 },
                { X: -2.61095, Y: -41.48365, Z: 408.41466 },
                { X: -5.1736, Y: -33.32306, Z: 427.30803 },
                { X: 13.52468, Y: -37.2803, Z: 433.2347 },
                { X: 36.64013, Y: -55.61272, Z: 404.63101 },
                { X: -15.22799, Y: -43.7488, Z: 389.43121 },
                { X: -36.16331, Y: -30.4267, Z: 434.32329 },
                { X: 34.37491, Y: -46.54963, Z: 455.2269 }
              ]
            },
            {
              id: 139,
              top: null,
              bottom: null,
              left: null,
              right: 140,
              front: 138,
              back: null,
              vertices: [
                { X: 36.64013, Y: -55.61272, Z: 404.63101 },
                { X: -15.22799, Y: -43.7488, Z: 389.43121 },
                { X: -36.16331, Y: -30.4267, Z: 434.32329 },
                { X: 34.37491, Y: -46.54963, Z: 455.2269 },
                { X: 32.64141, Y: -72.61025, Z: 406.1599 },
                { X: -19.23014, Y: -60.7219, Z: 390.47235 },
                { X: -32.29448, Y: -54.8995, Z: 438.42498 },
                { X: 20.5039, Y: -66.62802, Z: 453.62397 }
              ]
            },
            {
              id: 140,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 139,
              back: 132,
              vertices: [
                { X: 36.64013, Y: -55.61272, Z: 404.63101 },
                { X: -15.22799, Y: -43.7488, Z: 389.43121 },
                { X: -19.23014, Y: -60.7219, Z: 390.47235 },
                { X: 32.64141, Y: -72.61025, Z: 406.1599 },
                { X: 25.65217, Y: -52.19403, Z: 380.5541 },
                { X: 7.14465, Y: -48.23679, Z: 375.1841 },
                { X: 2.42805, Y: -68.60819, Z: 376.32414 },
                { X: 21.28021, Y: -72.56543, Z: 382.3878 }
              ]
            },
            {
              id: 141,
              top: null,
              bottom: null,
              left: 136,
              right: 138,
              front: 137,
              back: 171,
              vertices: [
                { X: 13.52468, Y: -37.2803, Z: 433.2347 },
                { X: -5.1736, Y: -33.32306, Z: 427.30803 },
                { X: -1.38912, Y: -14.60712, Z: 426.16729 },
                { X: 18.24088, Y: -18.56456, Z: 431.53889 },
                { X: 34.37491, Y: -46.54963, Z: 455.2269 },
                { X: -36.16331, Y: -30.4267, Z: 434.32329 },
                { X: -24.8561, Y: 12.65032, Z: 425.50067 },
                { X: 46.29926, Y: -3.50313, Z: 446.40466 }
              ]
            },
            {
              id: 142,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 135,
              back: null,
              vertices: [
                { X: 116.1582, Y: -41.16093, Z: 457.2996 },
                { X: 135.13838, Y: -46.61253, Z: 460.45088 },
                { X: 130.62438, Y: -65.26577, Z: 460.328 },
                { X: 111.50182, Y: -61.46953, Z: 456.23772 },
                { X: 112.20996, Y: -41.23963, Z: 476.45822 },
                { X: 131.33252, Y: -45.3607, Z: 480.22378 },
                { X: 127.16336, Y: -65.34467, Z: 479.43174 },
                { X: 108.408, Y: -61.54823, Z: 476.1082 }
              ]
            },
            {
              id: 143,
              top: null,
              bottom: null,
              left: null,
              right: 91,
              front: 148,
              back: null,
              vertices: [
                { X: -238.3682, Y: -161.54196, Z: 152.47616 },
                { X: -238.32768, Y: -163.32768, Z: 185 },
                { X: -238.32768, Y: -183.32768, Z: 185 },
                { X: -238.32768, Y: -183.32768, Z: 165 },
                { X: -258.3682, Y: -161.54196, Z: 152.47616 },
                { X: -258.32768, Y: -163.32768, Z: 185 },
                { X: -258.32768, Y: -183.32768, Z: 185 },
                { X: -258.32768, Y: -183.32768, Z: 165 }
              ]
            },
            {
              id: 144,
              top: null,
              bottom: null,
              left: 91,
              right: null,
              front: 145,
              back: null,
              vertices: [
                { X: -240.93, Y: -133.53185, Z: 182.4136 },
                { X: -258.18492, Y: -134.62451, Z: 191.55772 },
                { X: -259.17034, Y: -155.37624, Z: 182.17393 },
                { X: -237.19416, Y: -155.37624, Z: 182.17393 },
                { X: -240.23825, Y: -132.5211, Z: 166.58742 },
                { X: -260.27547, Y: -133.1797, Z: 167.42423 },
                { X: -259.17034, Y: -154.48329, Z: 156.8402 },
                { X: -237.19416, Y: -154.48329, Z: 156.8402 }
              ]
            },
            {
              id: 145,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 146,
              back: 144,
              vertices: [
                { X: -238.4467, Y: -133.53698, Z: 187.17199 },
                { X: -253.8159, Y: -133.395, Z: 200.33888 },
                { X: -253.61157, Y: -153.1928, Z: 200.13025 },
                { X: -238.57463, Y: -153.55234, Z: 186.61871 },
                { X: -240.93, Y: -133.53185, Z: 182.4136 },
                { X: -258.18492, Y: -134.62451, Z: 191.55772 },
                { X: -259.17034, Y: -155.37624, Z: 182.17393 },
                { X: -237.19416, Y: -155.37624, Z: 182.17393 }
              ]
            },
            {
              id: 146,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 96,
              back: 145,
              vertices: [
                { X: -229.33183, Y: -132.1659, Z: 198.13301 },
                { X: -246.16735, Y: -133.11075, Z: 208.18741 },
                { X: -245.3954, Y: -153.12327, Z: 207.63272 },
                { X: -228.20407, Y: -152.2899, Z: 197.57877 },
                { X: -238.4467, Y: -133.53698, Z: 187.17199 },
                { X: -253.8159, Y: -133.395, Z: 200.33888 },
                { X: -253.61157, Y: -153.1928, Z: 200.13025 },
                { X: -238.57463, Y: -153.55234, Z: 186.61871 }
              ]
            },
            {
              id: 147,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 106,
              back: 274,
              vertices: [
                { X: -120, Y: -193.32768, Z: 70 },
                { X: -120, Y: -213.32768, Z: 70 },
                { X: -120, Y: -213.32768, Z: 90 },
                { X: -120, Y: -193.32768, Z: 90 },
                { X: -100, Y: -193.32768, Z: 70 },
                { X: -100, Y: -213.32768, Z: 70 },
                { X: -100, Y: -213.32768, Z: 90 },
                { X: -100, Y: -193.32768, Z: 90 }
              ]
            },
            {
              id: 148,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 101,
              back: 143,
              vertices: [
                { X: -218.32768, Y: -163.32768, Z: 155 },
                { X: -218.32768, Y: -163.32768, Z: 195 },
                { X: -218.32768, Y: -183.32768, Z: 195 },
                { X: -218.32768, Y: -183.32768, Z: 155 },
                { X: -238.3682, Y: -161.54196, Z: 152.47616 },
                { X: -238.32768, Y: -163.32768, Z: 185 },
                { X: -238.32768, Y: -183.32768, Z: 185 },
                { X: -238.32768, Y: -183.32768, Z: 165 }
              ]
            },
            {
              id: 149,
              top: null,
              bottom: null,
              left: 75,
              right: null,
              front: 101,
              back: 76,
              vertices: [
                { X: -198.32768, Y: -183.32768, Z: 155 },
                { X: -198.32768, Y: -183.32768, Z: 195 },
                { X: -198.35864, Y: -163.141, Z: 194.65145 },
                { X: -198.32768, Y: -163.32768, Z: 155 },
                { X: -173.1787, Y: -185.26316, Z: 168.8511 },
                { X: -172.44871, Y: -185.9416, Z: 188.3871 },
                { X: -172.65048, Y: -165.9231, Z: 193.33455 },
                { X: -175.19542, Y: -165.22981, Z: 164.50671 }
              ]
            },
            {
              id: 150,
              top: 73,
              bottom: 105,
              left: 103,
              right: 74,
              front: null,
              back: null,
              vertices: [
                { X: -274.45606, Y: -194.2597, Z: 90 },
                { X: -295.37261, Y: -194.24117, Z: 90 },
                { X: -295.37261, Y: -194.24117, Z: 70 },
                { X: -274.45606, Y: -194.2597, Z: 70 },
                { X: -275.36181, Y: -174.43353, Z: 90 },
                { X: -295.36741, Y: -174.5613, Z: 90 },
                { X: -295.36741, Y: -174.5613, Z: 70 },
                { X: -275.36181, Y: -174.43353, Z: 70 }
              ]
            },
            {
              id: 151,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 152,
              back: 233,
              vertices: [
                { X: -317.58873, Y: -119.60858, Z: 272.28499 },
                { X: -327.53173, Y: -119.52418, Z: 255.10871 },
                { X: -317.42317, Y: -97.46426, Z: 249.16893 },
                { X: -307.47977, Y: -97.54886, Z: 266.34521 },
                { X: -323.18653, Y: -117.66, Z: 276.18971 },
                { X: -333.12993, Y: -118.57142, Z: 259.1343 },
                { X: -334.25869, Y: -98.55902, Z: 259.22303 },
                { X: -324.31529, Y: -98.64362, Z: 276.39931 }
              ]
            },
            {
              id: 152,
              top: null,
              bottom: null,
              left: null,
              right: 151,
              front: 153,
              back: null,
              vertices: [
                { X: -317.58873, Y: -119.60858, Z: 272.28499 },
                { X: -327.53173, Y: -119.52418, Z: 255.10871 },
                { X: -299.45869, Y: -116.382, Z: 238.56049 },
                { X: -289.51569, Y: -116.4664, Z: 256.8141 },
                { X: -307.47977, Y: -97.54886, Z: 266.34521 },
                { X: -317.42317, Y: -97.46426, Z: 249.16893 },
                { X: -300.58765, Y: -96.3695, Z: 239.11493 },
                { X: -290.64425, Y: -96.4541, Z: 256.29121 }
              ]
            },
            {
              id: 153,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 223,
              back: 152,
              vertices: [
                { X: -305.22246, Y: -137.57354, Z: 265.58128 },
                { X: -315.16561, Y: -137.48894, Z: 248.40526 },
                { X: -298.32986, Y: -136.39433, Z: 238.35066 },
                { X: -288.38686, Y: -136.47913, Z: 255.52694 },
                { X: -317.58873, Y: -119.60858, Z: 272.28499 },
                { X: -327.53173, Y: -119.52418, Z: 255.10871 },
                { X: -299.45869, Y: -116.382, Z: 238.56049 },
                { X: -289.51569, Y: -116.4664, Z: 256.8141 }
              ]
            },
            {
              id: 154,
              top: null,
              bottom: null,
              left: null,
              right: 155,
              front: 167,
              back: null,
              vertices: [
                { X: 307.37736, Y: -62.2185, Z: 454.16229 },
                { X: 312.58936, Y: -38.29024, Z: 455.7523 },
                { X: 325.37327, Y: -45.4847, Z: 440.40602 },
                { X: 321.20371, Y: -65.35838, Z: 439.60642 },
                { X: 321.31062, Y: -66.33232, Z: 468.12338 },
                { X: 326.52259, Y: -42.60036, Z: 469.3673 },
                { X: 340.23613, Y: -49.20291, Z: 453.54643 },
                { X: 334.28245, Y: -68.1585, Z: 454.60381 }
              ]
            },
            {
              id: 155,
              top: null,
              bottom: null,
              left: 154,
              right: 156,
              front: 169,
              back: null,
              vertices: [
                { X: 293.55095, Y: -60.34027, Z: 468.3731 },
                { X: 299.10758, Y: -36.60916, Z: 469.28645 },
                { X: 312.58936, Y: -38.29024, Z: 455.7523 },
                { X: 307.37736, Y: -62.2185, Z: 454.16229 },
                { X: 307.48426, Y: -64.65113, Z: 482.33433 },
                { X: 313.4086, Y: -39.26381, Z: 483.24768 },
                { X: 326.52259, Y: -42.60036, Z: 469.3673 },
                { X: 321.31062, Y: -66.33232, Z: 468.12338 }
              ]
            },
            {
              id: 156,
              top: null,
              bottom: 155,
              left: null,
              right: null,
              front: 204,
              back: null,
              vertices: [
                { X: 284.23903, Y: -38.34982, Z: 483.3834 },
                { X: 299.10758, Y: -36.60916, Z: 469.28645 },
                { X: 293.55095, Y: -60.34027, Z: 468.3731 },
                { X: 280.6939, Y: -57.353, Z: 482.58409 },
                { X: 300.31417, Y: -39.1136, Z: 499.26935 },
                { X: 313.4086, Y: -39.26381, Z: 483.24768 },
                { X: 307.48426, Y: -64.65113, Z: 482.33433 },
                { X: 295.45101, Y: -61.3175, Z: 498.41308 }
              ]
            },
            {
              id: 157,
              top: null,
              bottom: null,
              left: null,
              right: 158,
              front: 163,
              back: null,
              vertices: [
                { X: 310.4846, Y: -59.281, Z: 353.16959 },
                { X: 315.26009, Y: -35.29741, Z: 354.7422 },
                { X: 321.59773, Y: -42.18082, Z: 372.201 },
                { X: 317.42844, Y: -62.48971, Z: 371.40837 },
                { X: 292.4141, Y: -56.45484, Z: 361.973 },
                { X: 297.25299, Y: -31.6854, Z: 362.192 },
                { X: 304.12261, Y: -39.49519, Z: 381.21198 },
                { X: 299.1433, Y: -58.43431, Z: 378.24074 }
              ]
            },
            {
              id: 158,
              top: null,
              bottom: null,
              left: 157,
              right: 159,
              front: 164,
              back: null,
              vertices: [
                { X: 302.32356, Y: -57.22156, Z: 334.58597 },
                { X: 307.53544, Y: -33.4911, Z: 335.4907 },
                { X: 315.26009, Y: -35.29741, Z: 354.7422 },
                { X: 310.4846, Y: -59.281, Z: 353.16959 },
                { X: 284.31682, Y: -54.64848, Z: 342.51386 },
                { X: 289.5284, Y: -29.26218, Z: 343.41848 },
                { X: 297.25299, Y: -31.6854, Z: 362.192 },
                { X: 292.4141, Y: -56.45484, Z: 361.973 }
              ]
            },
            {
              id: 159,
              top: null,
              bottom: 158,
              left: null,
              right: null,
              front: 205,
              back: null,
              vertices: [
                { X: 299.1132, Y: -35.10678, Z: 317.13974 },
                { X: 307.53544, Y: -33.4911, Z: 335.4907 },
                { X: 302.32356, Y: -57.22156, Z: 334.58597 },
                { X: 294.59922, Y: -55.41544, Z: 316.34681 },
                { X: 279.3928, Y: -30.34492, Z: 325.55688 },
                { X: 289.5284, Y: -29.26218, Z: 343.41848 },
                { X: 284.31682, Y: -54.64848, Z: 342.51386 },
                { X: 274.52532, Y: -50.65372, Z: 325.10888 }
              ]
            },
            {
              id: 160,
              top: null,
              bottom: null,
              left: 161,
              right: null,
              front: 165,
              back: null,
              vertices: [
                { X: 343.41273, Y: -69.33166, Z: 416.42755 },
                { X: 347.58254, Y: -49.2198, Z: 417.22717 },
                { X: 334.1502, Y: -46.35767, Z: 402.9757 },
                { X: 329.63627, Y: -65.112, Z: 401.30494 },
                { X: 356.23641, Y: -71.196, Z: 408.64959 },
                { X: 360.40627, Y: -52.34417, Z: 409.44913 },
                { X: 352.15734, Y: -50.58634, Z: 394.16973 },
                { X: 347.64341, Y: -69.23987, Z: 393.3771 }
              ]
            },
            {
              id: 161,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 162,
              back: 160,
              vertices: [
                { X: 325.15306, Y: -64.29606, Z: 389.64725 },
                { X: 329.32235, Y: -45.64253, Z: 390.43988 },
                { X: 347.32949, Y: -48.21584, Z: 382.51204 },
                { X: 343.1602, Y: -68.52473, Z: 382.6405 },
                { X: 329.63627, Y: -65.112, Z: 401.30494 },
                { X: 334.1502, Y: -46.35767, Z: 402.9757 },
                { X: 352.15734, Y: -50.58634, Z: 394.16973 },
                { X: 347.64341, Y: -69.23987, Z: 393.3771 }
              ]
            },
            {
              id: 162,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 163,
              back: 161,
              vertices: [
                { X: 317.42844, Y: -62.48971, Z: 371.40837 },
                { X: 321.59773, Y: -42.18082, Z: 372.201 },
                { X: 339.60487, Y: -46.40949, Z: 364.27316 },
                { X: 335.43558, Y: -65.6302, Z: 363.48053 },
                { X: 325.15306, Y: -64.29606, Z: 389.64725 },
                { X: 329.32235, Y: -45.64253, Z: 390.43988 },
                { X: 347.32949, Y: -48.21584, Z: 382.51204 },
                { X: 343.1602, Y: -68.52473, Z: 382.6405 }
              ]
            },
            {
              id: 163,
              top: null,
              bottom: null,
              left: null,
              right: 157,
              front: 164,
              back: 162,
              vertices: [
                { X: 310.4846, Y: -59.281, Z: 353.16959 },
                { X: 315.26009, Y: -35.29741, Z: 354.7422 },
                { X: 333.26723, Y: -39.52588, Z: 346.14618 },
                { X: 328.556, Y: -63.25657, Z: 345.24155 },
                { X: 317.42844, Y: -62.48971, Z: 371.40837 },
                { X: 321.59773, Y: -42.18082, Z: 372.201 },
                { X: 339.60487, Y: -46.40949, Z: 364.27316 },
                { X: 335.43558, Y: -65.6302, Z: 363.48053 }
              ]
            },
            {
              id: 164,
              top: null,
              bottom: null,
              left: null,
              right: 158,
              front: 205,
              back: 163,
              vertices: [
                { X: 302.32356, Y: -57.22156, Z: 334.58597 },
                { X: 307.53544, Y: -33.4911, Z: 335.4907 },
                { X: 325.54279, Y: -36.6437, Z: 327.56276 },
                { X: 320.33111, Y: -61.45019, Z: 327.267 },
                { X: 310.4846, Y: -59.281, Z: 353.16959 },
                { X: 315.26009, Y: -35.29741, Z: 354.7422 },
                { X: 333.26723, Y: -39.52588, Z: 346.14618 },
                { X: 328.556, Y: -63.25657, Z: 345.24155 }
              ]
            },
            {
              id: 165,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 166,
              back: 160,
              vertices: [
                { X: 335.3016, Y: -67.3955, Z: 425.39539 },
                { X: 339.19972, Y: -48.385, Z: 426.19499 },
                { X: 325.26628, Y: -44.7467, Z: 412.23355 },
                { X: 321.9672, Y: -64.38459, Z: 411.43395 },
                { X: 343.41273, Y: -69.33166, Z: 416.42755 },
                { X: 347.58254, Y: -49.2198, Z: 417.22717 },
                { X: 334.1502, Y: -46.35767, Z: 402.9757 },
                { X: 329.63627, Y: -65.112, Z: 401.30494 }
              ]
            },
            {
              id: 166,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 167,
              back: 165,
              vertices: [
                { X: 321.20371, Y: -65.35838, Z: 439.60642 },
                { X: 325.37327, Y: -45.4847, Z: 440.40602 },
                { X: 311.43983, Y: -42.3935, Z: 426.44458 },
                { X: 307.27027, Y: -61.4806, Z: 425.64498 },
                { X: 335.3016, Y: -67.3955, Z: 425.39539 },
                { X: 339.19972, Y: -48.385, Z: 426.19499 },
                { X: 325.26628, Y: -44.7467, Z: 412.23355 },
                { X: 321.9672, Y: -64.38459, Z: 411.43395 }
              ]
            },
            {
              id: 167,
              top: null,
              bottom: null,
              left: null,
              right: 154,
              front: 169,
              back: 166,
              vertices: [
                { X: 307.37736, Y: -62.2185, Z: 454.16229 },
                { X: 312.58936, Y: -38.29024, Z: 455.7523 },
                { X: 299.36, Y: -35.63507, Z: 441.11379 },
                { X: 293.44372, Y: -59.36669, Z: 440.20085 },
                { X: 321.20371, Y: -65.35838, Z: 439.60642 },
                { X: 325.37327, Y: -45.4847, Z: 440.40602 },
                { X: 311.43983, Y: -42.3935, Z: 426.44458 },
                { X: 307.27027, Y: -61.4806, Z: 425.64498 }
              ]
            },
            {
              id: 168,
              top: null,
              bottom: null,
              left: 214,
              right: null,
              front: 210,
              back: null,
              vertices: [
                { X: 182.46252, Y: -69.45419, Z: 243.23916 },
                { X: 186.63243, Y: -49.14216, Z: 244.3053 },
                { X: 206.9787, Y: -54.59403, Z: 247.45187 },
                { X: 201.58304, Y: -73.24952, Z: 247.51 },
                { X: 179.145, Y: -69.53353, Z: 263.1038 },
                { X: 183.17164, Y: -49.22246, Z: 263.45696 },
                { X: 202.29191, Y: -53.1845, Z: 267.22256 },
                { X: 198.12171, Y: -73.32953, Z: 266.43134 }
              ]
            },
            {
              id: 169,
              top: null,
              bottom: null,
              left: null,
              right: 155,
              front: 204,
              back: 167,
              vertices: [
                { X: 293.55095, Y: -60.34027, Z: 468.3731 },
                { X: 299.10758, Y: -36.60916, Z: 469.28645 },
                { X: 285.17394, Y: -32.29884, Z: 455.32501 },
                { X: 279.61718, Y: -56.3018, Z: 454.41174 },
                { X: 307.37736, Y: -62.2185, Z: 454.16229 },
                { X: 312.58936, Y: -38.29024, Z: 455.7523 },
                { X: 299.36, Y: -35.63507, Z: 441.11379 },
                { X: 293.44372, Y: -59.36669, Z: 440.20085 }
              ]
            },
            {
              id: 170,
              top: null,
              bottom: null,
              left: null,
              right: 171,
              front: 133,
              back: null,
              vertices: [
                { X: 46.29926, Y: -3.50313, Z: 446.40466 },
                { X: -24.8561, Y: 12.65032, Z: 425.50067 },
                { X: -19.54092, Y: 37.14741, Z: 424.16371 },
                { X: 52.992, Y: 22.23, Z: 445.677 },
                { X: 36.51501, Y: 2.18572, Z: 482.3415 },
                { X: -34.30342, Y: 17.33412, Z: 461.43789 },
                { X: -28.10385, Y: 41.48625, Z: 460.10093 },
                { X: 42.31544, Y: 26.33784, Z: 481.454 }
              ]
            },
            {
              id: 171,
              top: null,
              bottom: null,
              left: 172,
              right: 141,
              front: 170,
              back: null,
              vertices: [
                { X: 46.29926, Y: -3.50313, Z: 446.40466 },
                { X: -24.8561, Y: 12.65032, Z: 425.50067 },
                { X: -34.30342, Y: 17.33412, Z: 461.43789 },
                { X: 36.51501, Y: 2.18572, Z: 482.3415 },
                { X: 34.37491, Y: -46.54963, Z: 455.2269 },
                { X: -36.16331, Y: -30.4267, Z: 434.32329 },
                { X: -43.53194, Y: -27.4726, Z: 458.26094 },
                { X: 28.8818, Y: -43.55421, Z: 479.16455 }
              ]
            },
            {
              id: 172,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 171,
              back: 173,
              vertices: [
                { X: 28.8818, Y: -43.55421, Z: 479.16455 },
                { X: -43.53194, Y: -27.4726, Z: 458.26094 },
                { X: -34.30342, Y: 17.33412, Z: 461.43789 },
                { X: 36.51501, Y: 2.18572, Z: 482.3415 },
                { X: 3.55533, Y: -28.3671, Z: 500.13422 },
                { X: -30.65061, Y: -21.4417, Z: 490.3035 },
                { X: -23.55329, Y: 8.54006, Z: 488.42054 },
                { X: 10.45801, Y: 1.46546, Z: 498.25126 }
              ]
            },
            {
              id: 173,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 172,
              back: 180,
              vertices: [
                { X: 3.55533, Y: -28.3671, Z: 500.13422 },
                { X: -30.65061, Y: -21.4417, Z: 490.3035 },
                { X: -23.55329, Y: 8.54006, Z: 488.42054 },
                { X: 10.45801, Y: 1.46546, Z: 498.25126 },
                { X: -8.51559, Y: -19.23212, Z: 516.64546 },
                { X: -26.807, Y: -15.27488, Z: 511.27406 },
                { X: -22.38023, Y: 4.55904, Z: 510.13362 },
                { X: -3.23239, Y: 0.51628, Z: 515.50502 }
              ]
            },
            {
              id: 174,
              top: null,
              bottom: null,
              left: 212,
              right: null,
              front: 175,
              back: null,
              vertices: [
                { X: 243.63027, Y: -82.41696, Z: 234.42074 },
                { X: 248.14514, Y: -62.10603, Z: 235.21197 },
                { X: 229.2443, Y: -58.31012, Z: 231.44629 },
                { X: 224.50956, Y: -78.62106, Z: 230.65508 },
                { X: 247.43609, Y: -82.33679, Z: 214.64967 },
                { X: 251.60624, Y: -62.26, Z: 215.44058 },
                { X: 232.48553, Y: -58.2301, Z: 212.1954 },
                { X: 228.31538, Y: -78.54089, Z: 211.22863 }
              ]
            },
            {
              id: 175,
              top: null,
              bottom: null,
              left: 174,
              right: 215,
              front: 213,
              back: null,
              vertices: [
                { X: 221.4841, Y: -77.4556, Z: 250.42621 },
                { X: 225.21863, Y: -58.38998, Z: 251.21742 },
                { X: 229.2443, Y: -58.31012, Z: 231.44629 },
                { X: 224.50956, Y: -78.62106, Z: 230.65508 },
                { X: 240.16912, Y: -82.49682, Z: 254.19188 },
                { X: 244.33934, Y: -62.18588, Z: 254.63845 },
                { X: 248.14514, Y: -62.10603, Z: 235.21197 },
                { X: 243.63027, Y: -82.41696, Z: 234.42074 }
              ]
            },
            {
              id: 176,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 130,
              back: 177,
              vertices: [
                { X: -20.53346, Y: -7.18362, Z: 344.401 },
                { X: -21.10778, Y: -7.41481, Z: 363.63707 },
                { X: -27.738, Y: -26.40686, Z: 363.52356 },
                { X: -26.43306, Y: -26.17567, Z: 343.58196 },
                { X: -39.57283, Y: -1.2788, Z: 342.2513 },
                { X: -40.14735, Y: -1.50999, Z: 362.19268 },
                { X: -46.4698, Y: -20.50233, Z: 362.7917 },
                { X: -45.47246, Y: -20.27114, Z: 342.13779 }
              ]
            },
            {
              id: 177,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 176,
              back: 178,
              vertices: [
                { X: -39.57283, Y: -1.2788, Z: 342.2513 },
                { X: -40.14735, Y: -1.50999, Z: 362.19268 },
                { X: -46.4698, Y: -20.50233, Z: 362.7917 },
                { X: -45.47246, Y: -20.27114, Z: 342.13779 },
                { X: -54.8173, Y: 9.63822, Z: 320.53762 },
                { X: -59.11417, Y: 11.2241, Z: 380.38492 },
                { X: -69.61704, Y: -18.33355, Z: 380.21501 },
                { X: -64.5846, Y: -19.294, Z: 320.36771 }
              ]
            },
            {
              id: 178,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 177,
              back: 179,
              vertices: [
                { X: -54.8173, Y: 9.63822, Z: 320.53762 },
                { X: -59.11417, Y: 11.2241, Z: 380.38492 },
                { X: -69.61704, Y: -18.33355, Z: 380.21501 },
                { X: -64.5846, Y: -19.294, Z: 320.36771 },
                { X: -73.12126, Y: 16.7786, Z: 319.9343 },
                { X: -78.15368, Y: 17.11768, Z: 378.59541 },
                { X: -87.129, Y: -12.42912, Z: 378.42601 },
                { X: -83.62423, Y: -13.3893, Z: 318.57938 }
              ]
            },
            {
              id: 179,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 178,
              back: 203,
              vertices: [
                { X: -73.12126, Y: 16.7786, Z: 319.9343 },
                { X: -78.15368, Y: 17.11768, Z: 378.59541 },
                { X: -87.129, Y: -12.42912, Z: 378.42601 },
                { X: -83.62423, Y: -13.3893, Z: 318.57938 },
                { X: -95.2737, Y: 17.57299, Z: 337.22215 },
                { X: -97.25629, Y: 18.14943, Z: 357.17515 },
                { X: -103.15245, Y: -1.13167, Z: 357.6215 },
                { X: -102.57889, Y: -2.55523, Z: 337.10915 }
              ]
            },
            {
              id: 180,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 173,
              back: 181,
              vertices: [
                { X: -8.51559, Y: -19.23212, Z: 516.64546 },
                { X: -26.807, Y: -15.27488, Z: 511.27406 },
                { X: -22.38023, Y: 4.55904, Z: 510.13362 },
                { X: -3.23239, Y: 0.51628, Z: 515.50502 },
                { X: -13.40909, Y: -17.5019, Z: 536.10226 },
                { X: -32.55713, Y: -13.54466, Z: 530.38622 },
                { X: -27.27393, Y: 7.17326, Z: 529.24578 },
                { X: -8.12589, Y: 3.1305, Z: 534.61718 }
              ]
            },
            {
              id: 181,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 180,
              back: 182,
              vertices: [
                { X: -13.40909, Y: -17.5019, Z: 536.10226 },
                { X: -32.55713, Y: -13.54466, Z: 530.38622 },
                { X: -27.27393, Y: 7.17326, Z: 529.24578 },
                { X: -8.12589, Y: 3.1305, Z: 534.61718 },
                { X: -18.30259, Y: -14.11612, Z: 555.21442 },
                { X: -37.45063, Y: -10.15908, Z: 549.49838 },
                { X: -32.16763, Y: 9.44304, Z: 548.35794 },
                { X: -13.1959, Y: 5.40008, Z: 554.7398 }
              ]
            },
            {
              id: 182,
              top: 184,
              bottom: 183,
              left: null,
              right: 188,
              front: 181,
              back: null,
              vertices: [
                { X: -18.30259, Y: -14.11612, Z: 555.21442 },
                { X: -37.45063, Y: -10.15908, Z: 549.49838 },
                { X: -32.16763, Y: 9.44304, Z: 548.35794 },
                { X: -13.1959, Y: 5.40008, Z: 554.7398 },
                { X: -34.63865, Y: -7.26938, Z: 612.55083 },
                { X: -52.13157, Y: -3.31229, Z: 607.1795 },
                { X: -48.50391, Y: 16.59617, Z: 606.3906 },
                { X: -29.35563, Y: 12.55326, Z: 611.41039 }
              ]
            },
            {
              id: 183,
              top: null,
              bottom: 185,
              left: 190,
              right: null,
              front: 182,
              back: null,
              vertices: [
                { X: -32.16763, Y: 9.44304, Z: 548.35794 },
                { X: -48.50391, Y: 16.59617, Z: 606.3906 },
                { X: -52.13157, Y: -3.31229, Z: 607.1795 },
                { X: -37.45063, Y: -10.15908, Z: 549.49838 },
                { X: -53.3576, Y: 14.42333, Z: 550.11077 },
                { X: -65.61022, Y: 20.4687, Z: 593.19899 },
                { X: -69.23778, Y: 0.41828, Z: 594.33964 },
                { X: -58.64052, Y: -5.13994, Z: 551.25139 }
              ]
            },
            {
              id: 184,
              top: null,
              bottom: 187,
              left: null,
              right: 189,
              front: 182,
              back: null,
              vertices: [
                { X: -18.30259, Y: -14.11612, Z: 555.21442 },
                { X: -34.63865, Y: -7.26938, Z: 612.55083 },
                { X: -29.35563, Y: 12.55326, Z: 611.41039 },
                { X: -13.1959, Y: 5.40008, Z: 554.7398 },
                { X: -1.19629, Y: -17.1015, Z: 568.5454 },
                { X: -13.44881, Y: -12.28831, Z: 611.14259 },
                { X: -8.58875, Y: 7.37525, Z: 607.39824 },
                { X: 3.14595, Y: 2.49181, Z: 569.17376 }
              ]
            },
            {
              id: 185,
              top: null,
              bottom: null,
              left: null,
              right: 195,
              front: 183,
              back: null,
              vertices: [
                { X: -52.13157, Y: -3.31229, Z: 607.1795 },
                { X: -69.23778, Y: 0.41828, Z: 594.33964 },
                { X: -65.61022, Y: 20.4687, Z: 593.19899 },
                { X: -48.50391, Y: 16.59617, Z: 606.3906 },
                { X: -57.2557, Y: -1.58169, Z: 626.29184 },
                { X: -75.15262, Y: 3.32829, Z: 617.18635 },
                { X: -71.52494, Y: 22.6127, Z: 616.4523 },
                { X: -53.3975, Y: 19.21045, Z: 625.15128 }
              ]
            },
            {
              id: 186,
              top: 189,
              bottom: null,
              left: 197,
              right: null,
              front: 191,
              back: null,
              vertices: [
                { X: -23.58516, Y: -34.48769, Z: 556.35464 },
                { X: -27.21254, Y: -53.20378, Z: 557.49472 },
                { X: -43.54937, Y: -46.35622, Z: 615.17557 },
                { X: -38.12245, Y: -27.2742, Z: 614.7368 },
                { X: -6.40422, Y: -37.6341, Z: 569.21417 },
                { X: -10.10651, Y: -56.9784, Z: 570.33413 },
                { X: -22.35949, Y: -51.37555, Z: 613.42263 },
                { X: -18.58186, Y: -32.2297, Z: 612.32443 }
              ]
            },
            {
              id: 187,
              top: null,
              bottom: null,
              left: 196,
              right: null,
              front: 184,
              back: null,
              vertices: [
                { X: -29.35563, Y: 12.55326, Z: 611.41039 },
                { X: -8.58875, Y: 7.37525, Z: 607.39824 },
                { X: -13.44881, Y: -12.28831, Z: 611.14259 },
                { X: -34.63865, Y: -7.26938, Z: 612.55083 },
                { X: -34.24946, Y: 15.16729, Z: 630.52268 },
                { X: -14.29212, Y: 10.38449, Z: 631.37474 },
                { X: -19.364, Y: -9.19851, Z: 633.64467 },
                { X: -39.53253, Y: -5.53841, Z: 632.758 }
              ]
            },
            {
              id: 188,
              top: 189,
              bottom: 190,
              left: 193,
              right: null,
              front: 182,
              back: 191,
              vertices: [
                { X: -18.30259, Y: -14.11612, Z: 555.21442 },
                { X: -37.45063, Y: -10.15908, Z: 549.49838 },
                { X: -52.13157, Y: -3.31229, Z: 607.1795 },
                { X: -34.63865, Y: -7.26938, Z: 612.55083 },
                { X: -23.58516, Y: -34.48769, Z: 556.35464 },
                { X: -41.7784, Y: -30.53085, Z: 550.6386 },
                { X: -57.27049, Y: -23.7058, Z: 608.35764 },
                { X: -38.12245, Y: -27.2742, Z: 614.7368 }
              ]
            },
            {
              id: 189,
              top: 184,
              bottom: 186,
              left: 196,
              right: null,
              front: 188,
              back: null,
              vertices: [
                { X: -18.30259, Y: -14.11612, Z: 555.21442 },
                { X: -23.58516, Y: -34.48769, Z: 556.35464 },
                { X: -38.12245, Y: -27.2742, Z: 614.7368 },
                { X: -34.63865, Y: -7.26938, Z: 612.55083 },
                { X: -1.19629, Y: -17.1015, Z: 568.5454 },
                { X: -6.40422, Y: -37.6341, Z: 569.21417 },
                { X: -18.58186, Y: -32.2297, Z: 612.32443 },
                { X: -13.44881, Y: -12.28831, Z: 611.14259 }
              ]
            },
            {
              id: 190,
              top: 183,
              bottom: 192,
              left: null,
              right: 195,
              front: 188,
              back: null,
              vertices: [
                { X: -52.13157, Y: -3.31229, Z: 607.1795 },
                { X: -57.27049, Y: -23.7058, Z: 608.35764 },
                { X: -41.7784, Y: -30.53085, Z: 550.6386 },
                { X: -37.45063, Y: -10.15908, Z: 549.49838 },
                { X: -69.23778, Y: 0.41828, Z: 594.33964 },
                { X: -74.52058, Y: -19.13421, Z: 595.48041 },
                { X: -62.26748, Y: -25.51171, Z: 552.39156 },
                { X: -58.64052, Y: -5.13994, Z: 551.25139 }
              ]
            },
            {
              id: 191,
              top: 186,
              bottom: 192,
              left: null,
              right: 198,
              front: 188,
              back: null,
              vertices: [
                { X: -23.58516, Y: -34.48769, Z: 556.35464 },
                { X: -41.7784, Y: -30.53085, Z: 550.6386 },
                { X: -57.27049, Y: -23.7058, Z: 608.35764 },
                { X: -38.12245, Y: -27.2742, Z: 614.7368 },
                { X: -27.21254, Y: -53.20378, Z: 557.49472 },
                { X: -46.36053, Y: -49.24715, Z: 552.1235 },
                { X: -61.42, Y: -42.39959, Z: 609.45971 },
                { X: -43.54937, Y: -46.35622, Z: 615.17557 }
              ]
            },
            {
              id: 192,
              top: 190,
              bottom: null,
              left: null,
              right: 194,
              front: 191,
              back: null,
              vertices: [
                { X: -57.27049, Y: -23.7058, Z: 608.35764 },
                { X: -61.42, Y: -42.39959, Z: 609.45971 },
                { X: -46.36053, Y: -49.24715, Z: 552.1235 },
                { X: -41.7784, Y: -30.53085, Z: 550.6386 },
                { X: -74.52058, Y: -19.13421, Z: 595.48041 },
                { X: -78.148, Y: -39.50555, Z: 596.62026 },
                { X: -67.55027, Y: -44.22769, Z: 553.53141 },
                { X: -62.26748, Y: -25.51171, Z: 552.39156 }
              ]
            },
            {
              id: 193,
              top: 196,
              bottom: 195,
              left: null,
              right: null,
              front: 188,
              back: null,
              vertices: [
                { X: -38.12245, Y: -27.2742, Z: 614.7368 },
                { X: -57.27049, Y: -23.7058, Z: 608.35764 },
                { X: -52.13157, Y: -3.31229, Z: 607.1795 },
                { X: -34.63865, Y: -7.26938, Z: 612.55083 },
                { X: -43.15993, Y: -24.25427, Z: 633.14763 },
                { X: -62.30833, Y: -20.29756, Z: 627.43189 },
                { X: -57.2557, Y: -1.58169, Z: 626.29184 },
                { X: -39.53253, Y: -5.53841, Z: 632.758 }
              ]
            },
            {
              id: 194,
              top: 195,
              bottom: null,
              left: null,
              right: null,
              front: 192,
              back: null,
              vertices: [
                { X: -57.27049, Y: -23.7058, Z: 608.35764 },
                { X: -61.42, Y: -42.39959, Z: 609.45971 },
                { X: -78.148, Y: -39.50555, Z: 596.62026 },
                { X: -74.52058, Y: -19.13421, Z: 595.48041 },
                { X: -62.30833, Y: -20.29756, Z: 627.43189 },
                { X: -65.6727, Y: -39.3525, Z: 625.13337 },
                { X: -84.63, Y: -36.41566, Z: 619.4666 },
                { X: -80.43542, Y: -16.4473, Z: 618.32659 }
              ]
            },
            {
              id: 195,
              top: 185,
              bottom: 194,
              left: null,
              right: 193,
              front: 190,
              back: null,
              vertices: [
                { X: -52.13157, Y: -3.31229, Z: 607.1795 },
                { X: -57.27049, Y: -23.7058, Z: 608.35764 },
                { X: -74.52058, Y: -19.13421, Z: 595.48041 },
                { X: -69.23778, Y: 0.41828, Z: 594.33964 },
                { X: -57.2557, Y: -1.58169, Z: 626.29184 },
                { X: -62.30833, Y: -20.29756, Z: 627.43189 },
                { X: -80.43542, Y: -16.4473, Z: 618.32659 },
                { X: -75.15262, Y: 3.32829, Z: 617.18635 }
              ]
            },
            {
              id: 196,
              top: 187,
              bottom: 197,
              left: 193,
              right: null,
              front: 189,
              back: null,
              vertices: [
                { X: -13.44881, Y: -12.28831, Z: 611.14259 },
                { X: -18.58186, Y: -32.2297, Z: 612.32443 },
                { X: -38.12245, Y: -27.2742, Z: 614.7368 },
                { X: -34.63865, Y: -7.26938, Z: 612.55083 },
                { X: -19.364, Y: -9.19851, Z: 633.64467 },
                { X: -24.57189, Y: -29.25136, Z: 635.1511 },
                { X: -43.15993, Y: -24.25427, Z: 633.14763 },
                { X: -39.53253, Y: -5.53841, Z: 632.758 }
              ]
            },
            {
              id: 197,
              top: 196,
              bottom: null,
              left: null,
              right: null,
              front: 186,
              back: null,
              vertices: [
                { X: -18.58186, Y: -32.2297, Z: 612.32443 },
                { X: -22.35949, Y: -51.37555, Z: 613.42263 },
                { X: -43.54937, Y: -46.35622, Z: 615.17557 },
                { X: -38.12245, Y: -27.2742, Z: 614.7368 },
                { X: -24.57189, Y: -29.25136, Z: 635.1511 },
                { X: -28.27467, Y: -48.28575, Z: 636.26938 },
                { X: -47.42251, Y: -44.32911, Z: 630.55374 },
                { X: -43.15993, Y: -24.25427, Z: 633.14763 }
              ]
            },
            {
              id: 198,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 191,
              back: 199,
              vertices: [
                { X: -23.58516, Y: -34.48769, Z: 556.35464 },
                { X: -41.7784, Y: -30.53085, Z: 550.6386 },
                { X: -46.36053, Y: -49.24715, Z: 552.1235 },
                { X: -27.21254, Y: -53.20378, Z: 557.49472 },
                { X: -17.3585, Y: -36.21858, Z: 537.24224 },
                { X: -36.18369, Y: -32.26194, Z: 531.5266 },
                { X: -41.46649, Y: -52.63334, Z: 533.1108 },
                { X: -22.31865, Y: -56.58998, Z: 538.38208 }
              ]
            },
            {
              id: 199,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 198,
              back: null,
              vertices: [
                { X: -17.3585, Y: -36.21858, Z: 537.24224 },
                { X: -36.18369, Y: -32.26194, Z: 531.5266 },
                { X: -41.46649, Y: -52.63334, Z: 533.1108 },
                { X: -22.31865, Y: -56.58998, Z: 538.38208 },
                { X: -12.14145, Y: -39.60486, Z: 518.12958 },
                { X: -31.28949, Y: -35.64802, Z: 512.41434 },
                { X: -36.57249, Y: -54.36426, Z: 513.55438 },
                { X: -17.42445, Y: -58.3211, Z: 519.26962 }
              ]
            },
            {
              id: 200,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 0,
              back: null,
              vertices: [
                { X: -10, Y: 10, Z: -10 },
                { X: -10, Y: -10, Z: -10 },
                { X: 10, Y: -10, Z: -10 },
                { X: 10, Y: 10, Z: -10 },
                { X: -10, Y: 10, Z: -30 },
                { X: -10, Y: -10, Z: -30 },
                { X: 10, Y: -10, Z: -30 },
                { X: 10, Y: 10, Z: -30 }
              ]
            },
            {
              id: 201,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 30,
              back: 202,
              vertices: [
                { X: -60.32768, Y: 10, Z: 90 },
                { X: -60.32768, Y: -10, Z: 90 },
                { X: -60.32768, Y: -10, Z: 70 },
                { X: -60.32768, Y: 10, Z: 70 },
                { X: -67, Y: 10, Z: 90 },
                { X: -67, Y: -10, Z: 90 },
                { X: -67, Y: -10, Z: 70 },
                { X: -67, Y: 10, Z: 70 }
              ]
            },
            {
              id: 202,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 31,
              back: 201,
              vertices: [
                { X: -78.32768, Y: 10, Z: 70 },
                { X: -78.32768, Y: -10, Z: 70 },
                { X: -78.32768, Y: -10, Z: 90 },
                { X: -78.32768, Y: 10, Z: 90 },
                { X: -67, Y: 10, Z: 70 },
                { X: -67, Y: -10, Z: 70 },
                { X: -67, Y: -10, Z: 90 },
                { X: -67, Y: 10, Z: 90 }
              ]
            },
            {
              id: 203,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 179,
              back: null,
              vertices: [
                { X: -95.2737, Y: 17.57299, Z: 337.22215 },
                { X: -97.25629, Y: 18.14943, Z: 357.17515 },
                { X: -103.15245, Y: -1.13167, Z: 357.6215 },
                { X: -102.57889, Y: -2.55523, Z: 337.10915 },
                { X: -114.5596, Y: 24.1624, Z: 335.43229 },
                { X: -116.2851, Y: 24.24823, Z: 355.38507 },
                { X: -122.18133, Y: 5.23068, Z: 355.27227 },
                { X: -121.60755, Y: 4.65405, Z: 335.31949 }
              ]
            },
            {
              id: 204,
              top: null,
              bottom: 169,
              left: 156,
              right: null,
              front: 207,
              back: null,
              vertices: [
                { X: 266.13562, Y: -54.3488, Z: 468.62272 },
                { X: 279.61718, Y: -56.3018, Z: 454.41174 },
                { X: 293.55095, Y: -60.34027, Z: 468.3731 },
                { X: 280.6939, Y: -57.353, Z: 482.58409 },
                { X: 270.30539, Y: -34.395, Z: 469.42196 },
                { X: 285.17394, Y: -32.29884, Z: 455.32501 },
                { X: 299.10758, Y: -36.60916, Z: 469.28645 },
                { X: 284.23903, Y: -38.34982, Z: 483.3834 }
              ]
            },
            {
              id: 205,
              top: null,
              bottom: 164,
              left: 159,
              right: null,
              front: 206,
              back: null,
              vertices: [
                { X: 312.60678, Y: -59.64407, Z: 308.41888 },
                { X: 320.33111, Y: -61.45019, Z: 327.267 },
                { X: 302.32356, Y: -57.22156, Z: 334.58597 },
                { X: 294.59922, Y: -55.41544, Z: 316.34681 },
                { X: 317.12056, Y: -39.33541, Z: 309.21181 },
                { X: 325.54279, Y: -36.6437, Z: 327.56276 },
                { X: 307.53544, Y: -33.4911, Z: 335.4907 },
                { X: 299.1132, Y: -35.10678, Z: 317.13974 }
              ]
            },
            {
              id: 206,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 259,
              back: 205,
              vertices: [
                { X: 308.43737, Y: -78.29752, Z: 307.62577 },
                { X: 316.16189, Y: -80.10344, Z: 326.20973 },
                { X: 298.15417, Y: -77.53016, Z: 334.13745 },
                { X: 290.42985, Y: -74.6868, Z: 315.55389 },
                { X: 312.60678, Y: -59.64407, Z: 308.41888 },
                { X: 320.33111, Y: -61.45019, Z: 327.267 },
                { X: 302.32356, Y: -57.22156, Z: 334.58597 },
                { X: 294.59922, Y: -55.41544, Z: 316.34681 }
              ]
            },
            {
              id: 207,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 257,
              back: 204,
              vertices: [
                { X: 261.62103, Y: -73.292, Z: 468.16812 },
                { X: 275.44759, Y: -76.3392, Z: 453.61192 },
                { X: 289.38135, Y: -80.64924, Z: 467.57358 },
                { X: 275.55499, Y: -77.31276, Z: 482.12958 },
                { X: 266.13562, Y: -54.3488, Z: 468.62272 },
                { X: 279.61718, Y: -56.3018, Z: 454.41174 },
                { X: 293.55095, Y: -60.34027, Z: 468.3731 },
                { X: 280.6939, Y: -57.353, Z: 482.58409 }
              ]
            },
            {
              id: 208,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 111,
              back: 209,
              vertices: [
                { X: 172.10113, Y: -66.4058, Z: 241.23763 },
                { X: 176.27146, Y: -47.38718, Z: 242.2946 },
                { X: 180.7827, Y: -47.30722, Z: 222.25702 },
                { X: 175.56228, Y: -67.61607, Z: 221.46558 },
                { X: 177.2817, Y: -68.57552, Z: 242.23802 },
                { X: 181.45181, Y: -48.26384, Z: 243.2965 },
                { X: 185.25812, Y: -48.18442, Z: 223.25891 },
                { X: 181.8799, Y: -68.49611, Z: 222.46731 }
              ]
            },
            {
              id: 209,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 208,
              back: 210,
              vertices: [
                { X: 177.2817, Y: -68.57552, Z: 242.23802 },
                { X: 181.45181, Y: -48.26384, Z: 243.2965 },
                { X: 185.25812, Y: -48.18442, Z: 223.25891 },
                { X: 181.8799, Y: -68.49611, Z: 222.46731 },
                { X: 182.46252, Y: -69.45419, Z: 243.23916 },
                { X: 186.63243, Y: -49.14216, Z: 244.3053 },
                { X: 190.4382, Y: -49.625, Z: 224.25989 },
                { X: 186.2683, Y: -69.37453, Z: 223.46853 }
              ]
            },
            {
              id: 210,
              top: null,
              bottom: null,
              left: 211,
              right: 168,
              front: 209,
              back: 213,
              vertices: [
                { X: 182.46252, Y: -69.45419, Z: 243.23916 },
                { X: 186.63243, Y: -49.14216, Z: 244.3053 },
                { X: 190.4382, Y: -49.625, Z: 224.25989 },
                { X: 186.2683, Y: -69.37453, Z: 223.46853 },
                { X: 201.58304, Y: -73.24952, Z: 247.51 },
                { X: 206.9787, Y: -54.59403, Z: 247.45187 },
                { X: 209.5591, Y: -54.51436, Z: 228.2532 },
                { X: 205.38893, Y: -73.16985, Z: 227.23393 }
              ]
            },
            {
              id: 211,
              top: null,
              bottom: null,
              left: 210,
              right: null,
              front: 212,
              back: null,
              vertices: [
                { X: 209.19469, Y: -73.8942, Z: 207.46304 },
                { X: 213.36466, Y: -54.43404, Z: 208.25389 },
                { X: 209.5591, Y: -54.51436, Z: 228.2532 },
                { X: 205.38893, Y: -73.16985, Z: 227.23393 },
                { X: 190.7399, Y: -69.29331, Z: 204.4211 },
                { X: 194.24397, Y: -50.63794, Z: 204.48829 },
                { X: 190.4382, Y: -49.625, Z: 224.25989 },
                { X: 186.2683, Y: -69.37453, Z: 223.46853 }
              ]
            },
            {
              id: 212,
              top: null,
              bottom: null,
              left: 213,
              right: null,
              front: 174,
              back: 211,
              vertices: [
                { X: 228.31538, Y: -78.54089, Z: 211.22863 },
                { X: 232.48553, Y: -58.2301, Z: 212.1954 },
                { X: 229.2443, Y: -58.31012, Z: 231.44629 },
                { X: 224.50956, Y: -78.62106, Z: 230.65508 },
                { X: 209.19469, Y: -73.8942, Z: 207.46304 },
                { X: 213.36466, Y: -54.43404, Z: 208.25389 },
                { X: 209.5591, Y: -54.51436, Z: 228.2532 },
                { X: 205.38893, Y: -73.16985, Z: 227.23393 }
              ]
            },
            {
              id: 213,
              top: null,
              bottom: null,
              left: 212,
              right: 214,
              front: 210,
              back: 175,
              vertices: [
                { X: 201.58304, Y: -73.24952, Z: 247.51 },
                { X: 206.9787, Y: -54.59403, Z: 247.45187 },
                { X: 209.5591, Y: -54.51436, Z: 228.2532 },
                { X: 205.38893, Y: -73.16985, Z: 227.23393 },
                { X: 221.4841, Y: -77.4556, Z: 250.42621 },
                { X: 225.21863, Y: -58.38998, Z: 251.21742 },
                { X: 229.2443, Y: -58.31012, Z: 231.44629 },
                { X: 224.50956, Y: -78.62106, Z: 230.65508 }
              ]
            },
            {
              id: 214,
              top: null,
              bottom: null,
              left: 213,
              right: null,
              front: 168,
              back: 215,
              vertices: [
                { X: 198.12171, Y: -73.32953, Z: 266.43134 },
                { X: 202.29191, Y: -53.1845, Z: 267.22256 },
                { X: 206.9787, Y: -54.59403, Z: 247.45187 },
                { X: 201.58304, Y: -73.24952, Z: 247.51 },
                { X: 217.2424, Y: -77.12532, Z: 270.19688 },
                { X: 221.41266, Y: -58.46978, Z: 270.6434 },
                { X: 225.21863, Y: -58.38998, Z: 251.21742 },
                { X: 221.4841, Y: -77.4556, Z: 250.42621 }
              ]
            },
            {
              id: 215,
              top: null,
              bottom: null,
              left: 175,
              right: null,
              front: 214,
              back: null,
              vertices: [
                { X: 217.2424, Y: -77.12532, Z: 270.19688 },
                { X: 221.41266, Y: -58.46978, Z: 270.6434 },
                { X: 225.21863, Y: -58.38998, Z: 251.21742 },
                { X: 221.4841, Y: -77.4556, Z: 250.42621 },
                { X: 236.3631, Y: -82.57665, Z: 273.6178 },
                { X: 240.53342, Y: -62.26567, Z: 274.40878 },
                { X: 244.33934, Y: -62.18588, Z: 254.63845 },
                { X: 240.16912, Y: -82.49682, Z: 254.19188 }
              ]
            },
            {
              id: 216,
              top: null,
              bottom: null,
              left: 218,
              right: null,
              front: 3,
              back: null,
              vertices: [
                { X: -35, Y: 10, Z: 70 },
                { X: -35, Y: -10, Z: 70 },
                { X: -28.32768, Y: -10, Z: 50 },
                { X: -28.32768, Y: 10, Z: 50 },
                { X: -48.39418, Y: 9.65276, Z: 56.53543 },
                { X: -48.39418, Y: -10.253, Z: 56.53543 },
                { X: -45.11035, Y: -10.253, Z: 41.63138 },
                { X: -45.11035, Y: 9.65276, Z: 41.63138 }
              ]
            },
            {
              id: 217,
              top: null,
              bottom: null,
              left: null,
              right: 219,
              front: 3,
              back: null,
              vertices: [
                { X: 27.32768, Y: 10, Z: 50 },
                { X: 27.32768, Y: -10, Z: 50 },
                { X: 35, Y: -10, Z: 70 },
                { X: 35, Y: 10, Z: 70 },
                { X: 41.3481, Y: 9.64976, Z: 36.33701 },
                { X: 41.3481, Y: -10.546, Z: 36.33701 },
                { X: 57.2093, Y: -10.194, Z: 65.2081 },
                { X: 57.2093, Y: 9.65336, Z: 65.2081 }
              ]
            },
            {
              id: 218,
              top: null,
              bottom: null,
              left: null,
              right: 216,
              front: 2,
              back: null,
              vertices: [
                { X: -28.32768, Y: 10, Z: 50 },
                { X: -28.32768, Y: -10, Z: 50 },
                { X: -10, Y: -10, Z: 30 },
                { X: -10, Y: 10, Z: 30 },
                { X: -45.11035, Y: 9.65276, Z: 41.63138 },
                { X: -45.11035, Y: -10.253, Z: 41.63138 },
                { X: -27.10429, Y: -10.547, Z: 19.11462 },
                { X: -27.10429, Y: 9.64976, Z: 19.11462 }
              ]
            },
            {
              id: 219,
              top: null,
              bottom: null,
              left: 217,
              right: null,
              front: 2,
              back: null,
              vertices: [
                { X: 10, Y: 10, Z: 30 },
                { X: 10, Y: -10, Z: 30 },
                { X: 27.32768, Y: -10, Z: 50 },
                { X: 27.32768, Y: 10, Z: 50 },
                { X: 28.36174, Y: 9.64976, Z: 19.43417 },
                { X: 28.36174, Y: -10.546, Z: 19.43417 },
                { X: 41.3481, Y: -10.546, Z: 36.33701 },
                { X: 41.3481, Y: 9.64976, Z: 36.33701 }
              ]
            },
            {
              id: 220,
              top: 228,
              bottom: 104,
              left: null,
              right: null,
              front: 230,
              back: null,
              vertices: [
                { X: -346.5118, Y: -177.23969, Z: 191.55907 },
                { X: -364.54228, Y: -178.33478, Z: 201.61306 },
                { X: -364.1569, Y: -158.3221, Z: 202.1673 },
                { X: -347.17959, Y: -157.22714, Z: 192.11352 },
                { X: -336.10753, Y: -177.32396, Z: 209.7966 },
                { X: -354.59889, Y: -178.41895, Z: 219.13358 },
                { X: -354.725, Y: -158.40627, Z: 219.34358 },
                { X: -337.2365, Y: -157.31128, Z: 209.28966 }
              ]
            },
            {
              id: 221,
              top: null,
              bottom: 224,
              left: null,
              right: null,
              front: 222,
              back: 226,
              vertices: [
                { X: -281.49397, Y: -135.29964, Z: 228.29611 },
                { X: -298.32986, Y: -136.39433, Z: 238.35066 },
                { X: -297.2015, Y: -156.40673, Z: 238.14106 },
                { X: -280.36622, Y: -155.31192, Z: 228.8671 },
                { X: -303.385, Y: -135.10946, Z: 189.39105 },
                { X: -321.5295, Y: -136.20432, Z: 199.44558 },
                { X: -320.40074, Y: -156.21684, Z: 199.23578 },
                { X: -303.5653, Y: -155.12192, Z: 189.18125 }
              ]
            },
            {
              id: 222,
              top: null,
              bottom: 221,
              left: null,
              right: null,
              front: 100,
              back: 223,
              vertices: [
                { X: -270.42336, Y: -155.39712, Z: 245.26309 },
                { X: -280.36622, Y: -155.31192, Z: 228.8671 },
                { X: -281.49397, Y: -135.29964, Z: 228.29611 },
                { X: -271.55111, Y: -135.38483, Z: 245.47249 },
                { X: -287.2585, Y: -156.49153, Z: 255.31734 },
                { X: -297.2015, Y: -156.40673, Z: 238.14106 },
                { X: -298.32986, Y: -136.39433, Z: 238.35066 },
                { X: -288.38686, Y: -136.47913, Z: 255.52694 }
              ]
            },
            {
              id: 223,
              top: null,
              bottom: 224,
              left: 153,
              right: null,
              front: 222,
              back: null,
              vertices: [
                { X: -287.2585, Y: -156.49153, Z: 255.31734 },
                { X: -297.2015, Y: -156.40673, Z: 238.14106 },
                { X: -298.32986, Y: -136.39433, Z: 238.35066 },
                { X: -288.38686, Y: -136.47913, Z: 255.52694 },
                { X: -304.9389, Y: -157.58606, Z: 265.37148 },
                { X: -314.3704, Y: -157.50146, Z: 248.19546 },
                { X: -315.16561, Y: -137.48894, Z: 248.40526 },
                { X: -305.22246, Y: -137.57354, Z: 265.58128 }
              ]
            },
            {
              id: 224,
              top: 221,
              bottom: 225,
              left: -1,
              right: null,
              front: 223,
              back: 227,
              vertices: [
                { X: -298.32986, Y: -136.39433, Z: 238.35066 },
                { X: -315.16561, Y: -137.48894, Z: 248.40526 },
                { X: -314.3704, Y: -157.50146, Z: 248.19546 },
                { X: -297.2015, Y: -156.40673, Z: 238.14106 },
                { X: -321.5295, Y: -136.20432, Z: 199.44558 },
                { X: -338.36528, Y: -137.29909, Z: 209.49982 },
                { X: -337.2365, Y: -157.31128, Z: 209.28966 },
                { X: -320.40074, Y: -156.21684, Z: 199.23578 }
              ]
            },
            {
              id: 225,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 224,
              back: null,
              vertices: [
                { X: -314.3704, Y: -157.50146, Z: 248.19546 },
                { X: -337.2365, Y: -157.31128, Z: 209.28966 },
                { X: -338.36528, Y: -137.29909, Z: 209.49982 },
                { X: -315.16561, Y: -137.48894, Z: 248.40526 },
                { X: -338.32873, Y: -158.54343, Z: 247.38518 },
                { X: -348.27173, Y: -158.45903, Z: 230.2087 },
                { X: -349.40029, Y: -138.44663, Z: 230.4185 },
                { X: -339.45729, Y: -138.53103, Z: 247.59498 }
              ]
            },
            {
              id: 226,
              top: null,
              bottom: 227,
              left: null,
              right: null,
              front: 221,
              back: null,
              vertices: [
                { X: -303.385, Y: -135.10946, Z: 189.39105 },
                { X: -321.5295, Y: -136.20432, Z: 199.44558 },
                { X: -320.40074, Y: -156.21684, Z: 199.23578 },
                { X: -303.5653, Y: -155.12192, Z: 189.18125 },
                { X: -314.63687, Y: -135.2505, Z: 172.21473 },
                { X: -331.47243, Y: -136.11998, Z: 182.26912 },
                { X: -330.34387, Y: -156.13238, Z: 182.5932 },
                { X: -313.50811, Y: -155.3745, Z: 172.493 }
              ]
            },
            {
              id: 227,
              top: 226,
              bottom: null,
              left: 228,
              right: null,
              front: 224,
              back: null,
              vertices: [
                { X: -321.5295, Y: -136.20432, Z: 199.44558 },
                { X: -338.36528, Y: -137.29909, Z: 209.49982 },
                { X: -337.2365, Y: -157.31128, Z: 209.28966 },
                { X: -320.40074, Y: -156.21684, Z: 199.23578 },
                { X: -331.47243, Y: -136.11998, Z: 182.26912 },
                { X: -348.30815, Y: -137.21474, Z: 192.32332 },
                { X: -347.17959, Y: -157.22714, Z: 192.11352 },
                { X: -330.34387, Y: -156.13238, Z: 182.5932 }
              ]
            },
            {
              id: 228,
              top: null,
              bottom: 220,
              left: null,
              right: 229,
              front: 227,
              back: null,
              vertices: [
                { X: -330.34387, Y: -156.13238, Z: 182.5932 },
                { X: -347.17959, Y: -157.22714, Z: 192.11352 },
                { X: -337.2365, Y: -157.31128, Z: 209.28966 },
                { X: -320.40074, Y: -156.21684, Z: 199.23578 },
                { X: -329.21513, Y: -176.14492, Z: 181.50506 },
                { X: -346.5118, Y: -177.23969, Z: 191.55907 },
                { X: -336.10753, Y: -177.32396, Z: 209.7966 },
                { X: -319.27204, Y: -176.22932, Z: 199.2602 }
              ]
            },
            {
              id: 229,
              top: null,
              bottom: 230,
              left: null,
              right: null,
              front: 228,
              back: null,
              vertices: [
                { X: -330.34387, Y: -156.13238, Z: 182.5932 },
                { X: -347.17959, Y: -157.22714, Z: 192.11352 },
                { X: -346.5118, Y: -177.23969, Z: 191.55907 },
                { X: -329.21513, Y: -176.14492, Z: 181.50506 },
                { X: -340.28685, Y: -156.476, Z: 164.53859 },
                { X: -357.12305, Y: -157.14259, Z: 174.59251 },
                { X: -357.64964, Y: -177.15527, Z: 174.38271 },
                { X: -339.15808, Y: -176.6028, Z: 164.32879 }
              ]
            },
            {
              id: 230,
              top: 220,
              bottom: null,
              left: null,
              right: null,
              front: 229,
              back: null,
              vertices: [
                { X: -346.5118, Y: -177.23969, Z: 191.55907 },
                { X: -357.64964, Y: -177.15527, Z: 174.38271 },
                { X: -357.12305, Y: -157.14259, Z: 174.59251 },
                { X: -347.17959, Y: -157.22714, Z: 192.11352 },
                { X: -364.54228, Y: -178.33478, Z: 201.61306 },
                { X: -374.48556, Y: -178.25018, Z: 184.43707 },
                { X: -375.61434, Y: -158.2375, Z: 184.64666 },
                { X: -364.1569, Y: -158.3221, Z: 202.1673 }
              ]
            },
            {
              id: 231,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 232,
              back: null,
              vertices: [
                { X: -349.39832, Y: -119.26354, Z: 311.36902 },
                { X: -377.5711, Y: -119.3255, Z: 264.4882 },
                { X: -377.4471, Y: -99.1987, Z: 264.25901 },
                { X: -350.52729, Y: -99.25086, Z: 311.57921 },
                { X: -375.34833, Y: -120.28456, Z: 306.35105 },
                { X: -385.29173, Y: -120.20076, Z: 289.17457 },
                { X: -386.42069, Y: -100.18836, Z: 289.38497 },
                { X: -376.47729, Y: -100.27216, Z: 306.56145 }
              ]
            },
            {
              id: 232,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 233,
              back: 231,
              vertices: [
                { X: -332.56297, Y: -118.16882, Z: 301.31574 },
                { X: -359.7997, Y: -119.59294, Z: 253.65007 },
                { X: -360.20874, Y: -99.5804, Z: 254.20471 },
                { X: -332.3638, Y: -98.15628, Z: 301.52574 },
                { X: -349.39832, Y: -119.26354, Z: 311.36902 },
                { X: -377.5711, Y: -119.3255, Z: 264.4882 },
                { X: -377.4471, Y: -99.1987, Z: 264.25901 },
                { X: -350.52729, Y: -99.25086, Z: 311.57921 }
              ]
            },
            {
              id: 233,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 151,
              back: 232,
              vertices: [
                { X: -323.18653, Y: -117.66, Z: 276.18971 },
                { X: -333.12993, Y: -118.57142, Z: 259.1343 },
                { X: -334.25869, Y: -98.55902, Z: 259.22303 },
                { X: -324.31529, Y: -98.64362, Z: 276.39931 },
                { X: -332.56297, Y: -118.16882, Z: 301.31574 },
                { X: -359.7997, Y: -119.59294, Z: 253.65007 },
                { X: -360.20874, Y: -99.5804, Z: 254.20471 },
                { X: -332.3638, Y: -98.15628, Z: 301.52574 }
              ]
            },
            {
              id: 234,
              top: 235,
              bottom: 236,
              left: null,
              right: 237,
              front: null,
              back: 121,
              vertices: [
                { X: 32.51994, Y: -101.55751, Z: 347.53084 },
                { X: 12.2998, Y: -98.52331, Z: 342.36935 },
                { X: 18.56214, Y: -91.3443, Z: 323.48759 },
                { X: 37.54423, Y: -94.9911, Z: 328.30869 },
                { X: 38.38776, Y: -76.47862, Z: 353.25378 },
                { X: 18.61182, Y: -73.45538, Z: 351.32309 },
                { X: 21.55266, Y: -70.5171, Z: 327.19392 },
                { X: 41.3751, Y: -73.50065, Z: 326.15953 }
              ]
            },
            {
              id: 235,
              top: null,
              bottom: null,
              left: null,
              right: 238,
              front: 234,
              back: null,
              vertices: [
                { X: 32.51994, Y: -101.55751, Z: 347.53084 },
                { X: 38.38776, Y: -76.47862, Z: 353.25378 },
                { X: 41.3751, Y: -73.50065, Z: 326.15953 },
                { X: 37.54423, Y: -94.9911, Z: 328.30869 },
                { X: 51.51711, Y: -104.59703, Z: 351.51388 },
                { X: 55.327, Y: -76.9014, Z: 352.27372 },
                { X: 59.30298, Y: -77.5454, Z: 332.1283 },
                { X: 56.22779, Y: -97.19006, Z: 332.35936 }
              ]
            },
            {
              id: 236,
              top: null,
              bottom: null,
              left: 239,
              right: null,
              front: 234,
              back: null,
              vertices: [
                { X: 18.56214, Y: -91.3443, Z: 323.48759 },
                { X: 21.55266, Y: -70.5171, Z: 327.19392 },
                { X: 18.61182, Y: -73.45538, Z: 351.32309 },
                { X: 12.2998, Y: -98.52331, Z: 342.36935 },
                { X: 0.272, Y: -87.18075, Z: 319.55487 },
                { X: 2.48591, Y: -70.28384, Z: 319.35458 },
                { X: -2.24411, Y: -69.31264, Z: 339.36948 },
                { X: -6.10695, Y: -94.61139, Z: 338.23848 }
              ]
            },
            {
              id: 237,
              top: 238,
              bottom: 239,
              left: null,
              right: null,
              front: 234,
              back: 240,
              vertices: [
                { X: 32.51994, Y: -101.55751, Z: 347.53084 },
                { X: 12.2998, Y: -98.52331, Z: 342.36935 },
                { X: 18.61182, Y: -73.45538, Z: 351.32309 },
                { X: 38.38776, Y: -76.47862, Z: 353.25378 },
                { X: 28.43665, Y: -104.62119, Z: 356.13309 },
                { X: 10.63197, Y: -100.8932, Z: 353.15067 },
                { X: 10.33806, Y: -85.60341, Z: 365.31807 },
                { X: 28.2741, Y: -88.42943, Z: 369.23585 }
              ]
            },
            {
              id: 238,
              top: null,
              bottom: null,
              left: null,
              right: 237,
              front: 235,
              back: 242,
              vertices: [
                { X: 32.51994, Y: -101.55751, Z: 347.53084 },
                { X: 38.38776, Y: -76.47862, Z: 353.25378 },
                { X: 55.327, Y: -76.9014, Z: 352.27372 },
                { X: 51.51711, Y: -104.59703, Z: 351.51388 },
                { X: 28.43665, Y: -104.62119, Z: 356.13309 },
                { X: 28.2741, Y: -88.42943, Z: 369.23585 },
                { X: 48.16384, Y: -90.4505, Z: 373.6273 },
                { X: 48.29475, Y: -106.4351, Z: 362.318 }
              ]
            },
            {
              id: 239,
              top: null,
              bottom: null,
              left: 237,
              right: null,
              front: 236,
              back: 241,
              vertices: [
                { X: -6.10695, Y: -94.61139, Z: 338.23848 },
                { X: -2.24411, Y: -69.31264, Z: 339.36948 },
                { X: 18.61182, Y: -73.45538, Z: 351.32309 },
                { X: 12.2998, Y: -98.52331, Z: 342.36935 },
                { X: -9.49368, Y: -97.11402, Z: 348.40138 },
                { X: -9.19978, Y: -82.62813, Z: 360.56881 },
                { X: 10.33806, Y: -85.60341, Z: 365.31807 },
                { X: 10.63197, Y: -100.8932, Z: 353.15067 }
              ]
            },
            {
              id: 240,
              top: 242,
              bottom: 241,
              left: null,
              right: null,
              front: 237,
              back: 243,
              vertices: [
                { X: 28.43665, Y: -104.62119, Z: 356.13309 },
                { X: 10.63197, Y: -100.8932, Z: 353.15067 },
                { X: 10.33806, Y: -85.60341, Z: 365.31807 },
                { X: 28.2741, Y: -88.42943, Z: 369.23585 },
                { X: 22.43017, Y: -106.62992, Z: 381.64863 },
                { X: 4.36609, Y: -102.5399, Z: 378.51376 },
                { X: 8.3512, Y: -82.32804, Z: 378.49546 },
                { X: 25.21079, Y: -86.48841, Z: 382.61834 }
              ]
            },
            {
              id: 241,
              top: null,
              bottom: null,
              left: 240,
              right: null,
              front: 239,
              back: 244,
              vertices: [
                { X: -9.49368, Y: -97.11402, Z: 348.40138 },
                { X: -9.19978, Y: -82.62813, Z: 360.56881 },
                { X: 10.33806, Y: -85.60341, Z: 365.31807 },
                { X: 10.63197, Y: -100.8932, Z: 353.15067 },
                { X: -15.24962, Y: -98.14622, Z: 374.19186 },
                { X: -12.57401, Y: -79.5897, Z: 374.17356 },
                { X: 8.3512, Y: -82.32804, Z: 378.49546 },
                { X: 4.36609, Y: -102.5399, Z: 378.51376 }
              ]
            },
            {
              id: 242,
              top: null,
              bottom: null,
              left: null,
              right: 240,
              front: 238,
              back: 245,
              vertices: [
                { X: 28.43665, Y: -104.62119, Z: 356.13309 },
                { X: 28.2741, Y: -88.42943, Z: 369.23585 },
                { X: 48.16384, Y: -90.4505, Z: 373.6273 },
                { X: 48.29475, Y: -106.4351, Z: 362.318 },
                { X: 22.43017, Y: -106.62992, Z: 381.64863 },
                { X: 25.21079, Y: -86.48841, Z: 382.61834 },
                { X: 44.36534, Y: -89.60924, Z: 387.39337 },
                { X: 41.58471, Y: -108.9541, Z: 386.42367 }
              ]
            },
            {
              id: 243,
              top: 245,
              bottom: 244,
              left: null,
              right: null,
              front: 240,
              back: 246,
              vertices: [
                { X: 22.43017, Y: -106.62992, Z: 381.64863 },
                { X: 4.36609, Y: -102.5399, Z: 378.51376 },
                { X: 8.3512, Y: -82.32804, Z: 378.49546 },
                { X: 25.21079, Y: -86.48841, Z: 382.61834 },
                { X: 18.27592, Y: -105.24392, Z: 402.3768 },
                { X: -1.18656, Y: -101.13088, Z: 397.44808 },
                { X: 3.6092, Y: -82.54184, Z: 398.12912 },
                { X: 22.15028, Y: -86.65488, Z: 402.37408 }
              ]
            },
            {
              id: 244,
              top: null,
              bottom: null,
              left: 243,
              right: null,
              front: 241,
              back: null,
              vertices: [
                { X: -15.24962, Y: -98.14622, Z: 374.19186 },
                { X: -12.57401, Y: -79.5897, Z: 374.17356 },
                { X: 8.3512, Y: -82.32804, Z: 378.49546 },
                { X: 4.36609, Y: -102.5399, Z: 378.51376 },
                { X: -13.52131, Y: -99.49156, Z: 392.64231 },
                { X: -9.6142, Y: -79.30665, Z: 392.61913 },
                { X: 3.6092, Y: -82.54184, Z: 398.12912 },
                { X: -1.18656, Y: -101.13088, Z: 397.44808 }
              ]
            },
            {
              id: 245,
              top: null,
              bottom: null,
              left: null,
              right: 243,
              front: 242,
              back: null,
              vertices: [
                { X: 22.43017, Y: -106.62992, Z: 381.64863 },
                { X: 25.21079, Y: -86.48841, Z: 382.61834 },
                { X: 44.36534, Y: -89.60924, Z: 387.39337 },
                { X: 41.58471, Y: -108.9541, Z: 386.42367 },
                { X: 18.27592, Y: -105.24392, Z: 402.3768 },
                { X: 22.15028, Y: -86.65488, Z: 402.37408 },
                { X: 32.2764, Y: -88.50695, Z: 403.8428 },
                { X: 29.4065, Y: -107.414, Z: 402.6947 }
              ]
            },
            {
              id: 246,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 243,
              back: null,
              vertices: [
                { X: 18.27592, Y: -105.24392, Z: 402.3768 },
                { X: -1.18656, Y: -101.13088, Z: 397.44808 },
                { X: 3.6092, Y: -82.54184, Z: 398.12912 },
                { X: 22.15028, Y: -86.65488, Z: 402.37408 },
                { X: 13.62122, Y: -105.43082, Z: 421.35954 },
                { X: -6.55026, Y: -101.40998, Z: 417.11718 },
                { X: -2.51442, Y: -81.14718, Z: 417.47438 },
                { X: 17.58538, Y: -85.16802, Z: 422.6138 }
              ]
            },
            {
              id: 247,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 273,
              back: 272,
              vertices: [
                { X: 361.47208, Y: -93.53144, Z: 395.45263 },
                { X: 380.27825, Y: -97.61457, Z: 389.50483 },
                { X: 376.10815, Y: -116.26918, Z: 389.5747 },
                { X: 357.30197, Y: -112.18605, Z: 395.527 },
                { X: 358.41086, Y: -92.15703, Z: 402.32073 },
                { X: 377.3677, Y: -97.61805, Z: 407.1478 },
                { X: 373.19585, Y: -116.28008, Z: 406.35841 },
                { X: 354.239, Y: -112.47441, Z: 401.53135 }
              ]
            },
            {
              id: 248,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 134,
              back: 249,
              vertices: [
                { X: 206.18684, Y: -78.11124, Z: 368.46326 },
                { X: 202.38108, Y: -78.19024, Z: 388.23626 },
                { X: 206.55064, Y: -59.537, Z: 389.283 },
                { X: 210.3564, Y: -59.458, Z: 369.2553 },
                { X: 224.216, Y: -82.1191, Z: 372.4981 },
                { X: 220.21585, Y: -82.1983, Z: 391.47811 },
                { X: 224.38537, Y: -63.54508, Z: 392.27014 },
                { X: 228.19112, Y: -63.46588, Z: 372.4972 }
              ]
            },
            {
              id: 249,
              top: 250,
              bottom: 251,
              left: null,
              right: null,
              front: 248,
              back: null,
              vertices: [
                { X: 224.216, Y: -82.1191, Z: 372.4981 },
                { X: 220.21585, Y: -82.1983, Z: 391.47811 },
                { X: 224.38537, Y: -63.54508, Z: 392.27014 },
                { X: 228.19112, Y: -63.46588, Z: 372.4972 },
                { X: 243.14414, Y: -87.57051, Z: 375.47059 },
                { X: 239.33838, Y: -87.64951, Z: 395.24359 },
                { X: 243.50794, Y: -67.34111, Z: 396.3583 },
                { X: 247.3137, Y: -67.26211, Z: 376.26283 }
              ]
            },
            {
              id: 250,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 249,
              back: 252,
              vertices: [
                { X: 224.216, Y: -82.1191, Z: 372.4981 },
                { X: 243.14414, Y: -87.57051, Z: 375.47059 },
                { X: 247.3137, Y: -67.26211, Z: 376.26283 },
                { X: 228.19112, Y: -63.46588, Z: 372.4972 },
                { X: 233.1579, Y: -84.61669, Z: 351.37334 },
                { X: 250.48111, Y: -88.51657, Z: 359.57448 },
                { X: 254.65074, Y: -68.20528, Z: 360.36599 },
                { X: 237.1854, Y: -64.30539, Z: 352.16482 }
              ]
            },
            {
              id: 251,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 249,
              back: 253,
              vertices: [
                { X: 224.38537, Y: -63.54508, Z: 392.27014 },
                { X: 243.50794, Y: -67.34111, Z: 396.3583 },
                { X: 239.33838, Y: -87.64951, Z: 395.24359 },
                { X: 220.21585, Y: -82.1983, Z: 391.47811 },
                { X: 225.32627, Y: -64.55352, Z: 414.52275 },
                { X: 245.279, Y: -68.41653, Z: 413.36472 },
                { X: 240.48812, Y: -87.7296, Z: 412.57373 },
                { X: 221.15625, Y: -83.20995, Z: 414.7643 }
              ]
            },
            {
              id: 252,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 250,
              back: 255,
              vertices: [
                { X: 233.1579, Y: -84.61669, Z: 351.37334 },
                { X: 250.48111, Y: -88.51657, Z: 359.57448 },
                { X: 254.65074, Y: -68.20528, Z: 360.36599 },
                { X: 237.1854, Y: -64.30539, Z: 352.16482 },
                { X: 246.39258, Y: -86.39522, Z: 333.57721 },
                { X: 261.5033, Y: -90.56272, Z: 346.23083 },
                { X: 266.1702, Y: -70.2481, Z: 347.2229 },
                { X: 250.56165, Y: -66.806, Z: 334.36868 }
              ]
            },
            {
              id: 253,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 251,
              back: 254,
              vertices: [
                { X: 225.32627, Y: -64.55352, Z: 414.52275 },
                { X: 245.279, Y: -68.41653, Z: 413.36472 },
                { X: 240.48812, Y: -87.7296, Z: 412.57373 },
                { X: 221.15625, Y: -83.20995, Z: 414.7643 },
                { X: 231.45725, Y: -66.48225, Z: 436.15966 },
                { X: 250.23329, Y: -70.57739, Z: 430.12715 },
                { X: 246.654, Y: -89.23551, Z: 429.33491 },
                { X: 227.28937, Y: -85.14038, Z: 435.36742 }
              ]
            },
            {
              id: 254,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 253,
              back: 256,
              vertices: [
                { X: 231.45725, Y: -66.48225, Z: 436.15966 },
                { X: 250.23329, Y: -70.57739, Z: 430.12715 },
                { X: 246.654, Y: -89.23551, Z: 429.33491 },
                { X: 227.28937, Y: -85.14038, Z: 435.36742 },
                { X: 248.3259, Y: -70.34401, Z: 454.19688 },
                { X: 261.50828, Y: -72.2557, Z: 439.65288 },
                { X: 257.34278, Y: -92.3422, Z: 439.20544 },
                { X: 243.52248, Y: -89.526, Z: 453.40483 }
              ]
            },
            {
              id: 255,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 252,
              back: 258,
              vertices: [
                { X: 246.39258, Y: -86.39522, Z: 333.57721 },
                { X: 261.5033, Y: -90.56272, Z: 346.23083 },
                { X: 266.1702, Y: -70.2481, Z: 347.2229 },
                { X: 250.56165, Y: -66.806, Z: 334.36868 },
                { X: 268.25529, Y: -90.15317, Z: 323.3872 },
                { X: 275.6314, Y: -93.61542, Z: 341.2672 },
                { X: 280.14474, Y: -73.297, Z: 342.6006 },
                { X: 272.424, Y: -71.4901, Z: 323.48697 }
              ]
            },
            {
              id: 256,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 254,
              back: 257,
              vertices: [
                { X: 248.3259, Y: -70.34401, Z: 454.19688 },
                { X: 261.50828, Y: -72.2557, Z: 439.65288 },
                { X: 257.34278, Y: -92.3422, Z: 439.20544 },
                { X: 243.52248, Y: -89.526, Z: 453.40483 },
                { X: 261.62103, Y: -73.292, Z: 468.16812 },
                { X: 275.44759, Y: -76.3392, Z: 453.61192 },
                { X: 271.27763, Y: -96.648, Z: 453.15732 },
                { X: 257.45107, Y: -93.31172, Z: 467.36888 }
              ]
            },
            {
              id: 257,
              top: null,
              bottom: 261,
              left: null,
              right: 207,
              front: 256,
              back: null,
              vertices: [
                { X: 261.62103, Y: -73.292, Z: 468.16812 },
                { X: 275.44759, Y: -76.3392, Z: 453.61192 },
                { X: 271.27763, Y: -96.648, Z: 453.15732 },
                { X: 257.45107, Y: -93.31172, Z: 467.36888 },
                { X: 275.55499, Y: -77.31276, Z: 482.12958 },
                { X: 289.38135, Y: -80.64924, Z: 467.57358 },
                { X: 285.21159, Y: -99.30288, Z: 467.11898 },
                { X: 271.38523, Y: -97.62176, Z: 481.33034 }
              ]
            },
            {
              id: 258,
              top: null,
              bottom: null,
              left: null,
              right: -1,
              front: 255,
              back: 259,
              vertices: [
                { X: 268.25529, Y: -90.15317, Z: 323.3872 },
                { X: 275.6314, Y: -93.61542, Z: 341.2672 },
                { X: 280.14474, Y: -73.297, Z: 342.6006 },
                { X: 272.424, Y: -71.4901, Z: 323.48697 },
                { X: 286.26049, Y: -94.37728, Z: 315.10549 },
                { X: 293.64017, Y: -96.1834, Z: 333.34441 },
                { X: 298.15417, Y: -77.53016, Z: 334.13745 },
                { X: 290.42985, Y: -74.6868, Z: 315.55389 }
              ]
            },
            {
              id: 259,
              top: null,
              bottom: 260,
              left: 206,
              right: null,
              front: 258,
              back: null,
              vertices: [
                { X: 286.26049, Y: -94.37728, Z: 315.10549 },
                { X: 293.64017, Y: -96.1834, Z: 333.34441 },
                { X: 298.15417, Y: -77.53016, Z: 334.13745 },
                { X: 290.42985, Y: -74.6868, Z: 315.55389 },
                { X: 304.26781, Y: -98.60592, Z: 307.17737 },
                { X: 311.64769, Y: -100.41184, Z: 325.41669 },
                { X: 316.16189, Y: -80.10344, Z: 326.20973 },
                { X: 308.43737, Y: -78.29752, Z: 307.62577 }
              ]
            },
            {
              id: 260,
              top: null,
              bottom: null,
              left: -1,
              right: null,
              front: 259,
              back: 262,
              vertices: [
                { X: 298.15417, Y: -77.53016, Z: 334.13745 },
                { X: 316.16189, Y: -80.10344, Z: 326.20973 },
                { X: 311.64769, Y: -100.41184, Z: 325.41669 },
                { X: 293.64017, Y: -96.1834, Z: 333.34441 },
                { X: 305.5339, Y: -79.33623, Z: 352.37667 },
                { X: 323.54142, Y: -83.56487, Z: 344.44875 },
                { X: 319.37206, Y: -102.21811, Z: 344.35 },
                { X: 301.36454, Y: -99.64483, Z: 351.58363 }
              ]
            },
            {
              id: 261,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 257,
              back: 267,
              vertices: [
                { X: 271.27763, Y: -96.648, Z: 453.15732 },
                { X: 285.21159, Y: -99.30288, Z: 467.11898 },
                { X: 289.38135, Y: -80.64924, Z: 467.57358 },
                { X: 275.44759, Y: -76.3392, Z: 453.61192 },
                { X: 285.10432, Y: -98.32959, Z: 438.60159 },
                { X: 299.3792, Y: -102.63972, Z: 452.56278 },
                { X: 303.20762, Y: -82.33045, Z: 453.36221 },
                { X: 289.27402, Y: -78.2031, Z: 439.40102 }
              ]
            },
            {
              id: 262,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 260,
              back: 263,
              vertices: [
                { X: 305.5339, Y: -79.33623, Z: 352.37667 },
                { X: 323.54142, Y: -83.56487, Z: 344.44875 },
                { X: 319.37206, Y: -102.21811, Z: 344.35 },
                { X: 301.36454, Y: -99.64483, Z: 351.58363 },
                { X: 313.38183, Y: -81.11578, Z: 370.62136 },
                { X: 331.3457, Y: -85.35623, Z: 362.59066 },
                { X: 327.17538, Y: -104.1006, Z: 362.14347 },
                { X: 309.21152, Y: -101.42497, Z: 370.17417 }
              ]
            },
            {
              id: 263,
              top: null,
              bottom: 269,
              left: null,
              right: null,
              front: 262,
              back: 264,
              vertices: [
                { X: 313.38183, Y: -81.11578, Z: 370.62136 },
                { X: 331.3457, Y: -85.35623, Z: 362.59066 },
                { X: 327.17538, Y: -104.1006, Z: 362.14347 },
                { X: 309.21152, Y: -101.42497, Z: 370.17417 },
                { X: 318.55854, Y: -83.26051, Z: 388.63809 },
                { X: 337.36523, Y: -87.34305, Z: 383.3504 },
                { X: 333.1946, Y: -107.65263, Z: 382.24402 },
                { X: 314.38791, Y: -103.5701, Z: 388.19171 }
              ]
            },
            {
              id: 264,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 263,
              back: 265,
              vertices: [
                { X: 318.55854, Y: -83.26051, Z: 388.63809 },
                { X: 337.36523, Y: -87.34305, Z: 383.3504 },
                { X: 333.1946, Y: -107.65263, Z: 382.24402 },
                { X: 314.38791, Y: -103.5701, Z: 388.19171 },
                { X: 316.13343, Y: -83.27588, Z: 404.50884 },
                { X: 335.39736, Y: -87.7115, Z: 406.6432 },
                { X: 331.22541, Y: -107.38128, Z: 406.19464 },
                { X: 311.61684, Y: -103.58601, Z: 404.6027 }
              ]
            },
            {
              id: 265,
              top: null,
              bottom: 268,
              left: null,
              right: null,
              front: 264,
              back: 266,
              vertices: [
                { X: 316.13343, Y: -83.27588, Z: 404.50884 },
                { X: 335.39736, Y: -87.7115, Z: 406.6432 },
                { X: 331.22541, Y: -107.38128, Z: 406.19464 },
                { X: 311.61684, Y: -103.58601, Z: 404.6027 },
                { X: 307.52886, Y: -82.5024, Z: 418.34958 },
                { X: 324.54529, Y: -86.46369, Z: 428.13558 },
                { X: 320.37316, Y: -105.11883, Z: 427.33778 },
                { X: 303.35674, Y: -101.15753, Z: 417.55178 }
              ]
            },
            {
              id: 266,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 265,
              back: 267,
              vertices: [
                { X: 307.52886, Y: -82.5024, Z: 418.34958 },
                { X: 324.54529, Y: -86.46369, Z: 428.13558 },
                { X: 320.37316, Y: -105.11883, Z: 427.33778 },
                { X: 303.35674, Y: -101.15753, Z: 417.55178 },
                { X: 296.21397, Y: -80.50704, Z: 432.3456 },
                { X: 311.23839, Y: -83.2761, Z: 445.11174 },
                { X: 307.6691, Y: -103.33828, Z: 444.31154 },
                { X: 292.4249, Y: -99.16235, Z: 431.54541 }
              ]
            },
            {
              id: 267,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 266,
              back: 261,
              vertices: [
                { X: 296.21397, Y: -80.50704, Z: 432.3456 },
                { X: 311.23839, Y: -83.2761, Z: 445.11174 },
                { X: 307.6691, Y: -103.33828, Z: 444.31154 },
                { X: 292.4249, Y: -99.16235, Z: 431.54541 },
                { X: 289.27402, Y: -78.2031, Z: 439.40102 },
                { X: 303.20762, Y: -82.33045, Z: 453.36221 },
                { X: 299.3792, Y: -102.63972, Z: 452.56278 },
                { X: 285.10432, Y: -98.32959, Z: 438.60159 }
              ]
            },
            {
              id: 268,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 265,
              back: 270,
              vertices: [
                { X: 331.22541, Y: -107.38128, Z: 406.19464 },
                { X: 320.37316, Y: -105.11883, Z: 427.33778 },
                { X: 324.54529, Y: -86.46369, Z: 428.13558 },
                { X: 335.39736, Y: -87.7115, Z: 406.6432 },
                { X: 348.45793, Y: -111.29211, Z: 416.9672 },
                { X: 337.17315, Y: -109.13258, Z: 437.538 },
                { X: 341.34445, Y: -90.47757, Z: 437.45854 },
                { X: 352.62924, Y: -92.63709, Z: 416.54987 }
              ]
            },
            {
              id: 269,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 263,
              back: 271,
              vertices: [
                { X: 327.17538, Y: -104.1006, Z: 362.14347 },
                { X: 333.1946, Y: -107.65263, Z: 382.24402 },
                { X: 337.36523, Y: -87.34305, Z: 383.3504 },
                { X: 331.3457, Y: -85.35623, Z: 362.59066 },
                { X: 346.10658, Y: -108.5378, Z: 356.54424 },
                { X: 351.53208, Y: -110.1198, Z: 375.60279 },
                { X: 356.4688, Y: -91.46563, Z: 376.3942 },
                { X: 350.27674, Y: -89.3996, Z: 357.33565 }
              ]
            },
            {
              id: 270,
              top: 272,
              bottom: null,
              left: null,
              right: null,
              front: 268,
              back: null,
              vertices: [
                { X: 348.45793, Y: -111.29211, Z: 416.9672 },
                { X: 337.17315, Y: -109.13258, Z: 437.538 },
                { X: 341.34445, Y: -90.47757, Z: 437.45854 },
                { X: 352.62924, Y: -92.63709, Z: 416.54987 },
                { X: 365.47387, Y: -115.25459, Z: 425.53797 },
                { X: 354.18918, Y: -113.9481, Z: 446.44646 },
                { X: 358.36005, Y: -94.43966, Z: 447.24445 },
                { X: 369.64474, Y: -96.59944, Z: 426.33597 }
              ]
            },
            {
              id: 271,
              top: -1,
              bottom: 273,
              left: null,
              right: null,
              front: 269,
              back: null,
              vertices: [
                { X: 346.10658, Y: -108.5378, Z: 356.54424 },
                { X: 351.53208, Y: -110.1198, Z: 375.60279 },
                { X: 356.4688, Y: -91.46563, Z: 376.3942 },
                { X: 350.27674, Y: -89.3996, Z: 357.33565 },
                { X: 364.56844, Y: -112.13697, Z: 350.59616 },
                { X: 370.33833, Y: -114.20301, Z: 369.65454 },
                { X: 374.50848, Y: -95.54861, Z: 370.44655 },
                { X: 369.8323, Y: -93.48257, Z: 351.38817 }
              ]
            },
            {
              id: 272,
              top: null,
              bottom: -1,
              left: null,
              right: null,
              front: 270,
              back: 247,
              vertices: [
                { X: 348.45793, Y: -111.29211, Z: 416.9672 },
                { X: 365.47387, Y: -115.25459, Z: 425.53797 },
                { X: 369.64474, Y: -96.59944, Z: 426.33597 },
                { X: 352.62924, Y: -92.63709, Z: 416.54987 },
                { X: 354.239, Y: -112.47441, Z: 401.53135 },
                { X: 373.19585, Y: -116.28008, Z: 406.35841 },
                { X: 377.3677, Y: -97.61805, Z: 407.1478 },
                { X: 358.41086, Y: -92.15703, Z: 402.32073 }
              ]
            },
            {
              id: 273,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 271,
              back: 247,
              vertices: [
                { X: 356.4688, Y: -91.46563, Z: 376.3942 },
                { X: 374.50848, Y: -95.54861, Z: 370.44655 },
                { X: 370.33833, Y: -114.20301, Z: 369.65454 },
                { X: 351.53208, Y: -110.1198, Z: 375.60279 },
                { X: 361.47208, Y: -93.53144, Z: 395.45263 },
                { X: 380.27825, Y: -97.61457, Z: 389.50483 },
                { X: 376.10815, Y: -116.26918, Z: 389.5747 },
                { X: 357.30197, Y: -112.18605, Z: 395.527 }
              ]
            },
            {
              id: 274,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 147,
              back: 275,
              vertices: [
                { X: -100, Y: -193.32768, Z: 70 },
                { X: -100, Y: -213.32768, Z: 70 },
                { X: -100, Y: -213.32768, Z: 90 },
                { X: -100, Y: -193.32768, Z: 90 },
                { X: -86.42428, Y: -186.25275, Z: 70 },
                { X: -78.19591, Y: -205.59941, Z: 70 },
                { X: -78.19591, Y: -205.59941, Z: 90 },
                { X: -86.42428, Y: -186.25275, Z: 90 }
              ]
            },
            {
              id: 275,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 274,
              back: 276,
              vertices: [
                { X: -86.42428, Y: -186.25275, Z: 70 },
                { X: -78.19591, Y: -205.59941, Z: 70 },
                { X: -78.19591, Y: -205.59941, Z: 90 },
                { X: -86.42428, Y: -186.25275, Z: 90 },
                { X: -73.38625, Y: -175.3676, Z: 70 },
                { X: -60.179, Y: -190.6834, Z: 70 },
                { X: -60.179, Y: -190.6834, Z: 90 },
                { X: -73.38625, Y: -175.3676, Z: 90 }
              ]
            },
            {
              id: 276,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 275,
              back: 277,
              vertices: [
                { X: -73.38625, Y: -175.3676, Z: 70 },
                { X: -60.179, Y: -190.6834, Z: 70 },
                { X: -60.179, Y: -190.6834, Z: 90 },
                { X: -73.38625, Y: -175.3676, Z: 90 },
                { X: -64.4787, Y: -160.731, Z: 70 },
                { X: -47.23246, Y: -172.58985, Z: 70 },
                { X: -47.23246, Y: -172.58985, Z: 90 },
                { X: -64.4787, Y: -160.731, Z: 90 }
              ]
            },
            {
              id: 277,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 276,
              back: 278,
              vertices: [
                { X: -64.4787, Y: -160.731, Z: 70 },
                { X: -47.23246, Y: -172.58985, Z: 70 },
                { X: -47.23246, Y: -172.58985, Z: 90 },
                { X: -64.4787, Y: -160.731, Z: 90 },
                { X: -45.9874, Y: -146.25681, Z: 70 },
                { X: -33.3752, Y: -162.21665, Z: 70 },
                { X: -33.3752, Y: -162.21665, Z: 90 },
                { X: -45.9874, Y: -146.25681, Z: 90 }
              ]
            },
            {
              id: 278,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 277,
              back: 279,
              vertices: [
                { X: -45.9874, Y: -146.25681, Z: 70 },
                { X: -33.3752, Y: -162.21665, Z: 70 },
                { X: -33.3752, Y: -162.21665, Z: 90 },
                { X: -45.9874, Y: -146.25681, Z: 90 },
                { X: -23.22299, Y: -139.47476, Z: 70 },
                { X: -17.9073, Y: -158.38681, Z: 70 },
                { X: -17.9073, Y: -158.38681, Z: 90 },
                { X: -23.22299, Y: -139.47476, Z: 90 }
              ]
            },
            {
              id: 279,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 278,
              back: 280,
              vertices: [
                { X: -23.22299, Y: -139.47476, Z: 70 },
                { X: -17.9073, Y: -158.38681, Z: 70 },
                { X: -17.9073, Y: -158.38681, Z: 90 },
                { X: -23.22299, Y: -139.47476, Z: 90 },
                { X: -1.10853, Y: -136.3826, Z: 70 },
                { X: 1.7674, Y: -156.10312, Z: 70 },
                { X: 1.7674, Y: -156.10312, Z: 90 },
                { X: -1.10853, Y: -136.3826, Z: 90 }
              ]
            },
            {
              id: 280,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 279,
              back: 281,
              vertices: [
                { X: -1.10853, Y: -136.3826, Z: 70 },
                { X: 1.7674, Y: -156.10312, Z: 70 },
                { X: 1.7674, Y: -156.10312, Z: 90 },
                { X: -1.10853, Y: -136.3826, Z: 90 },
                { X: 19.4619, Y: -134.707, Z: 70 },
                { X: 21.1387, Y: -154.6967, Z: 70 },
                { X: 21.1387, Y: -154.6967, Z: 90 },
                { X: 19.4619, Y: -134.707, Z: 90 }
              ]
            },
            {
              id: 281,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 280,
              back: 282,
              vertices: [
                { X: 19.4619, Y: -134.707, Z: 70 },
                { X: 21.1387, Y: -154.6967, Z: 70 },
                { X: 21.1387, Y: -154.6967, Z: 90 },
                { X: 19.4619, Y: -134.707, Z: 90 },
                { X: 38.63895, Y: -133.63011, Z: 70 },
                { X: 40.60663, Y: -152.3735, Z: 70 },
                { X: 40.60663, Y: -152.3735, Z: 90 },
                { X: 38.63895, Y: -133.63011, Z: 90 }
              ]
            },
            {
              id: 282,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 281,
              back: 283,
              vertices: [
                { X: 38.63895, Y: -133.63011, Z: 70 },
                { X: 40.60663, Y: -152.3735, Z: 70 },
                { X: 40.60663, Y: -152.3735, Z: 90 },
                { X: 38.63895, Y: -133.63011, Z: 90 },
                { X: 60.54732, Y: -135.64716, Z: 70 },
                { X: 58.56711, Y: -154.5807, Z: 70 },
                { X: 58.56711, Y: -154.5807, Z: 90 },
                { X: 60.54732, Y: -135.64716, Z: 90 }
              ]
            },
            {
              id: 283,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 282,
              back: 284,
              vertices: [
                { X: 60.54732, Y: -135.64716, Z: 70 },
                { X: 58.56711, Y: -154.5807, Z: 70 },
                { X: 58.56711, Y: -154.5807, Z: 90 },
                { X: 60.54732, Y: -135.64716, Z: 90 },
                { X: 80.48385, Y: -136.1165, Z: 70 },
                { X: 78.50257, Y: -156.7565, Z: 70 },
                { X: 78.50257, Y: -156.7565, Z: 90 },
                { X: 80.48385, Y: -136.1165, Z: 90 }
              ]
            },
            {
              id: 284,
              top: null,
              bottom: null,
              left: null,
              right: null,
              front: 283,
              back: -2,
              vertices: [
                { X: 80.48385, Y: -136.1165, Z: 70 },
                { X: 78.50257, Y: -156.7565, Z: 70 },
                { X: 78.50257, Y: -156.7565, Z: 90 },
                { X: 80.48385, Y: -136.1165, Z: 90 },
                { X: 100.41985, Y: -138.3037, Z: 70 },
                { X: 98.43857, Y: -158.9437, Z: 70 },
                { X: 98.43857, Y: -158.9437, Z: 90 },
                { X: 100.41985, Y: -138.3037, Z: 90 }
              ]
            }
          ],
          Y = [
            {
              position: {
                x: -38.138549188842866,
                y: 0.14934029424109557,
                z: 16.328095538181202
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 8.252956943655706e-16,
                y: 0,
                z: -3.184885660663454
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: { x: 6.55994926870122, y: 0, z: 21.63292716022014 },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: { x: -5.759992692492071, y: 0, z: 21.6341651002594 },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -23.76722756569781,
                y: 0.7325555110114689,
                z: 16.255921580065287
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -42.53865290314819,
                y: -12.952132946533688,
                z: 15.879029260721783
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -42.78022525012548,
                y: -34.69767552682465,
                z: 15.340122092944641
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 9.619703181346294,
                y: -5.267298567725962,
                z: 32.84645203988102
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -14.158957956485928,
                y: -3.8238545510895467,
                z: 31.891815396958787
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -20.812432518391194,
                y: -13.96639208386542,
                z: 35.69136074671329
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 9.379030701079023,
                y: -5.819038056231953,
                z: 46.57628637588154
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 21.948630571029003,
                y: -8.775564793204463,
                z: 39.950853159199056
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -20.872785543973933,
                y: -19.987009652011423,
                z: 35.14324973832143
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -31.722559730033115,
                y: -26.852238292432435,
                z: 36.698230352552116
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -38.85175503910412,
                y: -28.258664550214522,
                z: 48.41511196101416
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -48.25054107589708,
                y: -27.979853187686714,
                z: 40.120519983184195
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -60.2159635396084,
                y: -29.46475600622151,
                z: 44.59166369222989
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -35.96081049837449,
                y: -33.162819410454865,
                z: 35.469489404615075
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -49.53787363692919,
                y: -28.22606782894069,
                z: 51.80877729506861
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -71.47775785739475,
                y: -34.352352875859545,
                z: 37.54400400885765
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 31.934776323977168,
                y: -10.845091241201612,
                z: 48.16920484562715
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 43.502369901259186,
                y: -13.050838995637845,
                z: 46.86285397848665
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 30.473604123055466,
                y: -11.03689120037904,
                z: 57.07479768016429
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 26.146891198642233,
                y: -11.395868871926162,
                z: 69.13684458010157
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 24.232311471859052,
                y: -11.318900589720126,
                z: 83.7884523264535
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 40.08543691979801,
                y: -13.557068066386579,
                z: 75.71458068080764
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 46.78025267225539,
                y: -15.213908517971651,
                z: 84.57566810371664
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 54.75789103268506,
                y: -17.39243274491619,
                z: 92.9176077879533
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 62.91327326548863,
                y: -18.12300257224653,
                z: 83.6372338677565
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 72.83449745236742,
                y: -21.236742896115544,
                z: 73.58686460636588
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 62.32532879670344,
                y: -17.92757360333226,
                z: 66.58752393669732
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 7.929665290349521,
                y: -5.557026303375653,
                z: 54.12237926028531
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 7.31818686011269,
                y: -12.214294466439213,
                z: 64.53538120121773
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 3.5476439592568605,
                y: -18.578699043435066,
                z: 74.74515640225803
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 1.581663505886481,
                y: -9.784839557051852,
                z: 83.62882383758979
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 0.750929689695884,
                y: -4.842673339156014,
                z: 89.09813877594299
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: 5.490625318472157,
                y: 1.4710713450026514,
                z: 78.12799531802389
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -2.4052880050507093,
                y: -1.880885063104033,
                z: 101.08773650231707
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -5.403890011734382,
                y: -0.8816577678909759,
                z: 112.71111153945033
              },
              intensity: 3,
              decay: 2,
              distance: 20
            },
            {
              position: {
                x: -8.730327741168173,
                y: -6.288984848862972,
                z: 118.73114120948561
              },
              intensity: 3,
              decay: 2,
              distance: 20
            }
          ];
        module.exports = { lights: Y, mapdata: X };
      },
      {}
    ],
    2: [
      function(require, module, exports) {
        var e,
          t,
          n,
          o,
          a,
          i = require('aframe'),
          r = i.THREE,
          s = require('../map.js'),
          c = s.mapdata,
          d = s.lights,
          l = new r.Vector3(0, 0, 0),
          u = new r.Vector3(0, 0, 0),
          p = {
            state: {
              ArrowDown: !1,
              ArrowUp: !1,
              KeyE: !1,
              KeyQ: !1,
              ArrowRight: !1,
              ArrowLeft: !1,
              KeyW: !1,
              KeyS: !1,
              KeyA: !1,
              KeyD: !1
            }
          },
          y = !1,
          h = 0.2,
          m = 20,
          f = [],
          v = [],
          g = 1,
          w = !0,
          A = new r.Vector3(),
          E = new r.Quaternion();
        function b(e, t) {
          return void 0 === t && (t = h), e > -t && e < t ? 0 : e;
        }
        function K(e, t, n, o) {
          return new r.Vector3(e.X * m, e.Y * m, e.Z * m);
        }
        function x(e, t, n, o, a, i) {
          var s = n.vertices.length;
          for (var c in t) n.vertices.push(K(e.vertices[t[c]], o, a, i));
          if (4 == t.length) {
            var d = new r.Face3(s + 0, s + 1, s + 2);
            n.faces.push(d), v.push(d);
            var l = new r.Face3(s + 0, s + 2, s + 3);
            n.faces.push(l), v.push(l);
          }
          if (3 == t.length) {
            var u = new r.Face3(s + 0, s + 1, s + 2);
            n.faces.push(u), v.push(u);
          }
        }
        function Q() {
          for (var t = new r.Geometry(), n = 0; n < c.length; n++)
            if (8 == c[n].vertices.length) {
              for (
                var o = 0, a = 0, i = 0, s = 0;
                s < c[n].vertices.length;
                s++
              )
                (o += c[n].vertices[s].X),
                  (a += c[n].vertices[s].Y),
                  (i += c[n].vertices[s].Z);
              var d = o / 8,
                l = a / 8,
                u = i / 8;
              null === c[n].top && x(c[n], [0, 4, 7, 3], t, d, l, u),
                null === c[n].front && x(c[n], [3, 2, 1, 0], t, d, l, u),
                null === c[n].bottom && x(c[n], [2, 6, 5, 1], t, d, l, u),
                null === c[n].back && x(c[n], [4, 5, 6, 7], t, d, l, u),
                null === c[n].left && x(c[n], [7, 6, 2, 3], t, d, l, u),
                null === c[n].right && x(c[n], [0, 1, 5, 4], t, d, l, u);
            }
          return (
            t.computeFaceNormals(),
            t.computeVertexNormals(),
            t.scale(0.01, 0.01, 0.01),
            (e = new r.Quaternion()).setFromAxisAngle(
              new r.Vector3(0, 1, 0),
              Math.PI
            ),
            navigator.getGamepads,
            t
          );
        }
        document.addEventListener('keydown', function(e) {
          p.state[e.code] = !0;
        }),
          document.addEventListener('keyup', function(e) {
            p.state[e.code] = !1;
          }),
          document.addEventListener('keypress', function(e) {
            if (('Space' === e.code && (w = !w), 'KeyR' === e.code)) {
              var t = {
                position: document
                  .getElementById('ship')
                  .object3D.position.clone(),
                intensity: 3,
                decay: 2,
                distance: 20
              };
              q(document.querySelector('a-entity[create-lights]'), t),
                d.push(t);
            }
          }),
          i.registerGeometry('descent-level-geom', {
            init: function() {
              var e = Q();
              f.push(e), (this.geometry = e);
            }
          });
        var q = function(e, t) {
          var n = document.createElement('a-entity');
          n.setAttribute(
            'light',
            `type: point; intensity: ${t.intensity}; distance: ${
              t.distance
            }; decay: ${t.decay}`
          ),
            n.setAttribute(
              'position',
              i.utils.coordinates.stringify(t.position)
            ),
            e.appendChild(n);
        };
        i.registerComponent('create-lights', {
          init: function() {
            d.forEach(e => {
              q(this.el, e);
            });
          }
        }),
          i.registerComponent('descent-controls', {
            init: function() {
              (this.raycaster = new r.Raycaster()),
                (this.raycaster.near = 0),
                (this.raycaster.far = g);
            },
            tick: function(t, n) {
              var a = document.getElementById('ship').object3D,
                i = 0.003;
              0 == y &&
                void 0 !== navigator.getGamepads()[0] &&
                ((y = !0),
                null === (o = navigator.getGamepads()[0]) && (o = void 0)),
                void 0 !== o &&
                  (o.buttons[11] && o.buttons[11].pressed
                    ? A.set(i * b(o.axes[3]), 0, i * -b(o.axes[2]))
                    : A.set(i * b(o.axes[3]), i * -b(o.axes[2]), 0),
                  (l = l.add(A)),
                  A.set(0.04 * b(o.axes[0]), 0, 0.04 * b(o.axes[1])),
                  A.applyQuaternion(a.quaternion),
                  (u = u.add(A))),
                p.state.ArrowDown && (A.set(i, 0, 0), (l = l.add(A))),
                p.state.ArrowUp && (A.set(-i, 0, 0), (l = l.add(A))),
                p.state.KeyE && (A.set(0, 0, -i), (l = l.add(A))),
                p.state.KeyQ && (A.set(0, 0, i), (l = l.add(A))),
                p.state.ArrowRight && (A.set(0, -i, 0), (l = l.add(A))),
                p.state.ArrowLeft && (A.set(0, i, 0), (l = l.add(A))),
                p.state.KeyW &&
                  (A.set(0, 0, -0.04),
                  A.applyQuaternion(a.quaternion),
                  (u = u.add(A))),
                p.state.KeyS &&
                  (A.set(0, 0, 0.04),
                  A.applyQuaternion(a.quaternion),
                  (u = u.add(A))),
                p.state.KeyA &&
                  (A.set(-0.04, 0, 0),
                  A.applyQuaternion(a.quaternion),
                  (u = u.add(A))),
                p.state.KeyD &&
                  (A.set(0.04, 0, 0),
                  A.applyQuaternion(a.quaternion),
                  (u = u.add(A))),
                u.multiplyScalar(0.8),
                l.multiplyScalar(0.9),
                E.set(l.x, l.y, l.z, 1).normalize(),
                e.multiply(E),
                a.setRotationFromQuaternion(e);
              var s = u.length();
              if (
                (s < 0.01 ? u.set(0, 0, 0) : (a.position = a.position.add(u)),
                w && s > 0.01)
              )
                for (var c of f)
                  for (var d of c.faces) {
                    d._tri ||
                      (d._tri = new r.Triangle(
                        c.vertices[d.a],
                        c.vertices[d.b],
                        c.vertices[d.c]
                      )),
                      d._tri.closestPointToPoint(a.position, A);
                    var h = A.distanceTo(a.position);
                    h < g &&
                      (d._tri.normal(A),
                      A.multiplyScalar(g - h),
                      a.position.add(A));
                  }
            }
          }),
          i.registerComponent('debug-show-always', {
            init: function() {
              var e = new r.MeshBasicMaterial({ depthTest: !1 });
              this.material = this.el.getOrCreateObject3D('mesh').material = e;
            }
          }),
          i.registerComponent('follow-camera', {
            init: function() {},
            tick: function(e) {
              var t = this.el.sceneEl.camera.el;
              if (t) {
                var n = t.getAttribute('position'),
                  o = { x: n.x, y: n.y, z: n.z };
                this.el.setAttribute('position', o);
              }
            }
          }),
          module.hot &&
            (module.hot.dispose(function() {
              throw (window.location.reload(),
              new Error('Hot Module Reloading not supported!'));
            }),
            module.hot.accept(function() {
              throw (window.location.reload(),
              new Error('Hot Module Reloading not supported!'));
            }));
      },
      { aframe: 5, '../map.js': 4 }
    ]
  },
  {},
  [2]
);
